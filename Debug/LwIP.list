
LwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000186f0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000390c  08018990  08018990  00019990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c29c  0801c29c  0001d29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c2a4  0801c2a4  0001d2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801c2a8  0801c2a8  0001d2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000a0  24000000  0801c2ac  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000107b8  240000a0  0801c34c  0001e0a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24010858  0801c34c  0001e858  2**0
                  ALLOC
  9 .lwip_sec     00044b83  30000000  30000000  0001f000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001e0a0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00035f1c  00000000  00000000  0001e0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007fcf  00000000  00000000  00053fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000025c8  00000000  00000000  0005bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001dad  00000000  00000000  0005e588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00049b58  00000000  00000000  00060335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003ca4a  00000000  00000000  000a9e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018cb04  00000000  00000000  000e68d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002733db  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a47c  00000000  00000000  00273420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000061  00000000  00000000  0027d89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018978 	.word	0x08018978

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	08018978 	.word	0x08018978

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
	...

08000398 <lwiperf_list_add>:


/** Add an iperf session to the 'active' list */
static void
lwiperf_list_add(lwiperf_state_base_t *item)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  item->next = lwiperf_all_connections;
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <lwiperf_list_add+0x24>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	601a      	str	r2, [r3, #0]
  lwiperf_all_connections = item;
 80003a8:	4a04      	ldr	r2, [pc, #16]	@ (80003bc <lwiperf_list_add+0x24>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	6013      	str	r3, [r2, #0]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	240000bc 	.word	0x240000bc

080003c0 <lwiperf_list_remove>:

/** Remove an iperf session from the 'active' list */
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *prev = NULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80003cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000438 <lwiperf_list_remove+0x78>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	e029      	b.n	8000428 <lwiperf_list_remove+0x68>
    if (iter == item) {
 80003d4:	68ba      	ldr	r2, [r7, #8]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	429a      	cmp	r2, r3
 80003da:	d120      	bne.n	800041e <lwiperf_list_remove+0x5e>
      if (prev == NULL) {
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d104      	bne.n	80003ec <lwiperf_list_remove+0x2c>
        lwiperf_all_connections = iter->next;
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a14      	ldr	r2, [pc, #80]	@ (8000438 <lwiperf_list_remove+0x78>)
 80003e8:	6013      	str	r3, [r2, #0]
 80003ea:	e003      	b.n	80003f4 <lwiperf_list_remove+0x34>
      } else {
        prev->next = iter->next;
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	601a      	str	r2, [r3, #0]
      }
      /* @debug: ensure this item is listed only once */
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	e00c      	b.n	8000416 <lwiperf_list_remove+0x56>
        LWIP_ASSERT("duplicate entry", iter != item);
 80003fc:	68ba      	ldr	r2, [r7, #8]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	429a      	cmp	r2, r3
 8000402:	d105      	bne.n	8000410 <lwiperf_list_remove+0x50>
 8000404:	4b0d      	ldr	r3, [pc, #52]	@ (800043c <lwiperf_list_remove+0x7c>)
 8000406:	22d0      	movs	r2, #208	@ 0xd0
 8000408:	490d      	ldr	r1, [pc, #52]	@ (8000440 <lwiperf_list_remove+0x80>)
 800040a:	480e      	ldr	r0, [pc, #56]	@ (8000444 <lwiperf_list_remove+0x84>)
 800040c:	f017 fb54 	bl	8017ab8 <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d1ef      	bne.n	80003fc <lwiperf_list_remove+0x3c>
      }
      break;
 800041c:	e008      	b.n	8000430 <lwiperf_list_remove+0x70>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d1d2      	bne.n	80003d4 <lwiperf_list_remove+0x14>
    }
  }
}
 800042e:	bf00      	nop
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	240000bc 	.word	0x240000bc
 800043c:	08018990 	.word	0x08018990
 8000440:	080189a8 	.word	0x080189a8
 8000444:	080189b8 	.word	0x080189b8

08000448 <lwiperf_list_find>:

static lwiperf_state_base_t *
lwiperf_list_find(lwiperf_state_base_t *item)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000450:	4b0b      	ldr	r3, [pc, #44]	@ (8000480 <lwiperf_list_find+0x38>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	e008      	b.n	800046a <lwiperf_list_find+0x22>
    if (iter == item) {
 8000458:	68fa      	ldr	r2, [r7, #12]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	429a      	cmp	r2, r3
 800045e:	d101      	bne.n	8000464 <lwiperf_list_find+0x1c>
      return item;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	e006      	b.n	8000472 <lwiperf_list_find+0x2a>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d1f3      	bne.n	8000458 <lwiperf_list_find+0x10>
    }
  }
  return NULL;
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	240000bc 	.word	0x240000bc

08000484 <lwip_tcp_conn_report>:

/** Call the report function of an iperf tcp session */
static void
lwip_tcp_conn_report(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	b08d      	sub	sp, #52	@ 0x34
 8000488:	af06      	add	r7, sp, #24
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	460b      	mov	r3, r1
 800048e:	70fb      	strb	r3, [r7, #3]
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d038      	beq.n	8000508 <lwip_tcp_conn_report+0x84>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d034      	beq.n	8000508 <lwip_tcp_conn_report+0x84>
    u32_t now, duration_ms, bandwidth_kbitpsec;
    now = sys_now();
 800049e:	f005 fca7 	bl	8005df0 <sys_now>
 80004a2:	6138      	str	r0, [r7, #16]
    duration_ms = now - conn->time_started;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	693a      	ldr	r2, [r7, #16]
 80004aa:	1ad3      	subs	r3, r2, r3
 80004ac:	60fb      	str	r3, [r7, #12]
    if (duration_ms == 0) {
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d102      	bne.n	80004ba <lwip_tcp_conn_report+0x36>
      bandwidth_kbitpsec = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
 80004b8:	e006      	b.n	80004c8 <lwip_tcp_conn_report+0x44>
    } else {
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	617b      	str	r3, [r7, #20]
    }
    conn->report_fn(conn->report_arg, report_type,
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	699c      	ldr	r4, [r3, #24]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	69dd      	ldr	r5, [r3, #28]
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	691b      	ldr	r3, [r3, #16]
 80004d4:	469e      	mov	lr, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	691b      	ldr	r3, [r3, #16]
    conn->report_fn(conn->report_arg, report_type,
 80004da:	f8b3 c016 	ldrh.w	ip, [r3, #22]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	691b      	ldr	r3, [r3, #16]
 80004e2:	3304      	adds	r3, #4
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	6912      	ldr	r2, [r2, #16]
    conn->report_fn(conn->report_arg, report_type,
 80004e8:	8b12      	ldrh	r2, [r2, #24]
 80004ea:	6879      	ldr	r1, [r7, #4]
 80004ec:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80004ee:	78fe      	ldrb	r6, [r7, #3]
 80004f0:	6978      	ldr	r0, [r7, #20]
 80004f2:	9004      	str	r0, [sp, #16]
 80004f4:	68f8      	ldr	r0, [r7, #12]
 80004f6:	9003      	str	r0, [sp, #12]
 80004f8:	9102      	str	r1, [sp, #8]
 80004fa:	9201      	str	r2, [sp, #4]
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	4663      	mov	r3, ip
 8000500:	4672      	mov	r2, lr
 8000502:	4631      	mov	r1, r6
 8000504:	4628      	mov	r0, r5
 8000506:	47a0      	blx	r4
                    conn->bytes_transferred, duration_ms, bandwidth_kbitpsec);
  }
}
 8000508:	bf00      	nop
 800050a:	371c      	adds	r7, #28
 800050c:	46bd      	mov	sp, r7
 800050e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000510 <lwiperf_tcp_close>:

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  lwiperf_list_remove(&conn->base);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ff4e 	bl	80003c0 <lwiperf_list_remove>
  lwip_tcp_conn_report(conn, report_type);
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	4619      	mov	r1, r3
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f7ff ffab 	bl	8000484 <lwip_tcp_conn_report>
  if (conn->conn_pcb != NULL) {
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	691b      	ldr	r3, [r3, #16]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d02f      	beq.n	8000596 <lwiperf_tcp_close+0x86>
    tcp_arg(conn->conn_pcb, NULL);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	691b      	ldr	r3, [r3, #16]
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f00d fc23 	bl	800dd88 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	691b      	ldr	r3, [r3, #16]
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f00d fcb2 	bl	800deb4 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	691b      	ldr	r3, [r3, #16]
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f00d fc4c 	bl	800ddf4 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	691b      	ldr	r3, [r3, #16]
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f00d fc22 	bl	800ddac <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	691b      	ldr	r3, [r3, #16]
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f00d fc64 	bl	800de3c <tcp_err>
    err = tcp_close(conn->conn_pcb);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	691b      	ldr	r3, [r3, #16]
 8000578:	4618      	mov	r0, r3
 800057a:	f00c f94d 	bl	800c818 <tcp_close>
 800057e:	4603      	mov	r3, r0
 8000580:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8000582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d017      	beq.n	80005ba <lwiperf_tcp_close+0xaa>
      /* don't want to wait for free memory here... */
      tcp_abort(conn->conn_pcb);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	691b      	ldr	r3, [r3, #16]
 800058e:	4618      	mov	r0, r3
 8000590:	f00c fa30 	bl	800c9f4 <tcp_abort>
 8000594:	e011      	b.n	80005ba <lwiperf_tcp_close+0xaa>
    }
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	4618      	mov	r0, r3
 800059c:	f00c f93c 	bl	800c818 <tcp_close>
 80005a0:	4603      	mov	r3, r0
 80005a2:	73fb      	strb	r3, [r7, #15]
    LWIP_ASSERT("error", err == ERR_OK);
 80005a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d006      	beq.n	80005ba <lwiperf_tcp_close+0xaa>
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <lwiperf_tcp_close+0xb8>)
 80005ae:	f240 120d 	movw	r2, #269	@ 0x10d
 80005b2:	4906      	ldr	r1, [pc, #24]	@ (80005cc <lwiperf_tcp_close+0xbc>)
 80005b4:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <lwiperf_tcp_close+0xc0>)
 80005b6:	f017 fa7f 	bl	8017ab8 <iprintf>
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f00a f95a 	bl	800a874 <mem_free>
}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	08018990 	.word	0x08018990
 80005cc:	080189e0 	.word	0x080189e0
 80005d0:	080189b8 	.word	0x080189b8

080005d4 <lwiperf_tcp_client_send_more>:

/** Try to send more data on an iperf tcp session */
static err_t
lwiperf_tcp_client_send_more(lwiperf_state_tcp_t *conn)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	@ 0x30
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  u16_t txlen;
  u16_t txlen_max;
  void *txptr;
  u8_t apiflags;

  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d007      	beq.n	80005f2 <lwiperf_tcp_client_send_more+0x1e>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d003      	beq.n	80005f2 <lwiperf_tcp_client_send_more+0x1e>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	795b      	ldrb	r3, [r3, #5]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d006      	beq.n	8000600 <lwiperf_tcp_client_send_more+0x2c>
 80005f2:	4b61      	ldr	r3, [pc, #388]	@ (8000778 <lwiperf_tcp_client_send_more+0x1a4>)
 80005f4:	f240 121d 	movw	r2, #285	@ 0x11d
 80005f8:	4960      	ldr	r1, [pc, #384]	@ (800077c <lwiperf_tcp_client_send_more+0x1a8>)
 80005fa:	4861      	ldr	r0, [pc, #388]	@ (8000780 <lwiperf_tcp_client_send_more+0x1ac>)
 80005fc:	f017 fa5c 	bl	8017ab8 <iprintf>

  do {
    send_more = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800060c:	2b00      	cmp	r3, #0
 800060e:	d01f      	beq.n	8000650 <lwiperf_tcp_client_send_more+0x7c>
      /* this session is time-limited */
      u32_t now = sys_now();
 8000610:	f005 fbee 	bl	8005df0 <sys_now>
 8000614:	61b8      	str	r0, [r7, #24]
      u32_t diff_ms = now - conn->time_started;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	69ba      	ldr	r2, [r7, #24]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	617b      	str	r3, [r7, #20]
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000624:	4618      	mov	r0, r3
 8000626:	f009 feea 	bl	800a3fe <lwip_htonl>
 800062a:	4603      	mov	r3, r0
 800062c:	425b      	negs	r3, r3
 800062e:	613b      	str	r3, [r7, #16]
      u32_t time_ms = time * 10;
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	4613      	mov	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
      if (diff_ms >= time_ms) {
 800063c:	697a      	ldr	r2, [r7, #20]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	429a      	cmp	r2, r3
 8000642:	d316      	bcc.n	8000672 <lwiperf_tcp_client_send_more+0x9e>
        /* time specified by the client is over -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8000644:	2101      	movs	r1, #1
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff ff62 	bl	8000510 <lwiperf_tcp_close>
        return ERR_OK;
 800064c:	2300      	movs	r3, #0
 800064e:	e08f      	b.n	8000770 <lwiperf_tcp_client_send_more+0x19c>
      }
    } else {
      /* this session is byte-limited */
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000654:	4618      	mov	r0, r3
 8000656:	f009 fed2 	bl	800a3fe <lwip_htonl>
 800065a:	61f8      	str	r0, [r7, #28]
      /* @todo: this can send up to 1*MSS more than requested... */
      if (amount_bytes >= conn->bytes_transferred) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000660:	69fa      	ldr	r2, [r7, #28]
 8000662:	429a      	cmp	r2, r3
 8000664:	d305      	bcc.n	8000672 <lwiperf_tcp_client_send_more+0x9e>
        /* all requested bytes transferred -> close the connection */
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 8000666:	2101      	movs	r1, #1
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ff51 	bl	8000510 <lwiperf_tcp_close>
        return ERR_OK;
 800066e:	2300      	movs	r3, #0
 8000670:	e07e      	b.n	8000770 <lwiperf_tcp_client_send_more+0x19c>
      }
    }

    if (conn->bytes_transferred < 24) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000676:	2b17      	cmp	r3, #23
 8000678:	d810      	bhi.n	800069c <lwiperf_tcp_client_send_more+0xc8>
      /* transmit the settings a first time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000684:	4413      	add	r3, r2
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800068c:	b29b      	uxth	r3, r3
 800068e:	f1c3 0318 	rsb	r3, r3, #24
 8000692:	853b      	strh	r3, [r7, #40]	@ 0x28
      apiflags = TCP_WRITE_FLAG_COPY;
 8000694:	2301      	movs	r3, #1
 8000696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800069a:	e034      	b.n	8000706 <lwiperf_tcp_client_send_more+0x132>
    } else if (conn->bytes_transferred < 48) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80006a2:	d813      	bhi.n	80006cc <lwiperf_tcp_client_send_more+0xf8>
      /* transmit the settings a second time */
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ae:	3b18      	subs	r3, #24
 80006b0:	4413      	add	r3, r2
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	f1c3 0330 	rsb	r3, r3, #48	@ 0x30
 80006be:	853b      	strh	r3, [r7, #40]	@ 0x28
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 80006c0:	2303      	movs	r3, #3
 80006c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      send_more = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006ca:	e01c      	b.n	8000706 <lwiperf_tcp_client_send_more+0x132>
    } else {
      /* transmit data */
      /* @todo: every x bytes, transmit the settings again */
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80006d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000784 <lwiperf_tcp_client_send_more+0x1b0>)
 80006d2:	fba3 2301 	umull	r2, r3, r3, r1
 80006d6:	08da      	lsrs	r2, r3, #3
 80006d8:	4613      	mov	r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	4413      	add	r3, r2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	1aca      	subs	r2, r1, r3
 80006e2:	4b29      	ldr	r3, [pc, #164]	@ (8000788 <lwiperf_tcp_client_send_more+0x1b4>)
 80006e4:	4413      	add	r3, r2
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24
      txlen_max = TCP_MSS;
 80006e8:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80006ec:	853b      	strh	r3, [r7, #40]	@ 0x28
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006f2:	2b30      	cmp	r3, #48	@ 0x30
 80006f4:	d102      	bne.n	80006fc <lwiperf_tcp_client_send_more+0x128>
        txlen_max = TCP_MSS - 24;
 80006f6:	f240 539c 	movw	r3, #1436	@ 0x59c
 80006fa:	853b      	strh	r3, [r7, #40]	@ 0x28
      }
      apiflags = 0; /* no copying needed */
 80006fc:	2300      	movs	r3, #0
 80006fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      send_more = 1;
 8000702:	2301      	movs	r3, #1
 8000704:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    txlen = txlen_max;
 8000706:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000708:	857b      	strh	r3, [r7, #42]	@ 0x2a
    do {
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6918      	ldr	r0, [r3, #16]
 800070e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000712:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000714:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000716:	f010 fa7f 	bl	8010c18 <tcp_write>
 800071a:	4603      	mov	r3, r0
 800071c:	72fb      	strb	r3, [r7, #11]
      if (err ==  ERR_MEM) {
 800071e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000726:	d102      	bne.n	800072e <lwiperf_tcp_client_send_more+0x15a>
        txlen /= 2;
 8000728:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800072a:	085b      	lsrs	r3, r3, #1
 800072c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 800072e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000736:	d104      	bne.n	8000742 <lwiperf_tcp_client_send_more+0x16e>
 8000738:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800073a:	f240 22d9 	movw	r2, #729	@ 0x2d9
 800073e:	4293      	cmp	r3, r2
 8000740:	d8e3      	bhi.n	800070a <lwiperf_tcp_client_send_more+0x136>

    if (err == ERR_OK) {
 8000742:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d106      	bne.n	8000758 <lwiperf_tcp_client_send_more+0x184>
      conn->bytes_transferred += txlen;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800074e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000750:	441a      	add	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	625a      	str	r2, [r3, #36]	@ 0x24
 8000756:	e001      	b.n	800075c <lwiperf_tcp_client_send_more+0x188>
    } else {
      send_more = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  } while (send_more);
 800075c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800075e:	2b00      	cmp	r3, #0
 8000760:	f47f af4e 	bne.w	8000600 <lwiperf_tcp_client_send_more+0x2c>

  tcp_output(conn->conn_pcb);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	4618      	mov	r0, r3
 800076a:	f011 f841 	bl	80117f0 <tcp_output>
  return ERR_OK;
 800076e:	2300      	movs	r3, #0
}
 8000770:	4618      	mov	r0, r3
 8000772:	3730      	adds	r7, #48	@ 0x30
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08018990 	.word	0x08018990
 800077c:	080189e8 	.word	0x080189e8
 8000780:	080189b8 	.word	0x080189b8
 8000784:	cccccccd 	.word	0xcccccccd
 8000788:	0801ba00 	.word	0x0801ba00

0800078c <lwiperf_tcp_client_sent>:

/** TCP sent callback, try to send more data */
static err_t
lwiperf_tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	4613      	mov	r3, r2
 8000798:	80fb      	strh	r3, [r7, #6]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	617b      	str	r3, [r7, #20]
  /* @todo: check 'len' (e.g. to time ACK of all data)? for now, we just send more... */
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	691b      	ldr	r3, [r3, #16]
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d006      	beq.n	80007b6 <lwiperf_tcp_client_sent+0x2a>
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <lwiperf_tcp_client_sent+0x44>)
 80007aa:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 80007ae:	4909      	ldr	r1, [pc, #36]	@ (80007d4 <lwiperf_tcp_client_sent+0x48>)
 80007b0:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <lwiperf_tcp_client_sent+0x4c>)
 80007b2:	f017 f981 	bl	8017ab8 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  conn->poll_count = 0;
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2020 	strb.w	r2, [r3, #32]

  return lwiperf_tcp_client_send_more(conn);
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff08 	bl	80005d4 <lwiperf_tcp_client_send_more>
 80007c4:	4603      	mov	r3, r0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	08018990 	.word	0x08018990
 80007d4:	080189f8 	.word	0x080189f8
 80007d8:	080189b8 	.word	0x080189b8

080007dc <lwiperf_tcp_client_connected>:

/** TCP connected callback (active connection), send data now */
static err_t
lwiperf_tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	4613      	mov	r3, r2
 80007e8:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d006      	beq.n	8000806 <lwiperf_tcp_client_connected+0x2a>
 80007f8:	4b10      	ldr	r3, [pc, #64]	@ (800083c <lwiperf_tcp_client_connected+0x60>)
 80007fa:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 80007fe:	4910      	ldr	r1, [pc, #64]	@ (8000840 <lwiperf_tcp_client_connected+0x64>)
 8000800:	4810      	ldr	r0, [pc, #64]	@ (8000844 <lwiperf_tcp_client_connected+0x68>)
 8000802:	f017 f959 	bl	8017ab8 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (err != ERR_OK) {
 8000806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d005      	beq.n	800081a <lwiperf_tcp_client_connected+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800080e:	2105      	movs	r1, #5
 8000810:	6978      	ldr	r0, [r7, #20]
 8000812:	f7ff fe7d 	bl	8000510 <lwiperf_tcp_close>
    return ERR_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	e00c      	b.n	8000834 <lwiperf_tcp_client_connected+0x58>
  }
  conn->poll_count = 0;
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2020 	strb.w	r2, [r3, #32]
  conn->time_started = sys_now();
 8000822:	f005 fae5 	bl	8005df0 <sys_now>
 8000826:	4602      	mov	r2, r0
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	615a      	str	r2, [r3, #20]
  return lwiperf_tcp_client_send_more(conn);
 800082c:	6978      	ldr	r0, [r7, #20]
 800082e:	f7ff fed1 	bl	80005d4 <lwiperf_tcp_client_send_more>
 8000832:	4603      	mov	r3, r0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	08018990 	.word	0x08018990
 8000840:	080189f8 	.word	0x080189f8
 8000844:	080189b8 	.word	0x080189b8

08000848 <lwiperf_tx_start_impl>:
 * receive test has finished.
 */
static err_t
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
                      void *report_arg, lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **new_conn)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	607a      	str	r2, [r7, #4]
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	460b      	mov	r3, r1
 8000856:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *client_conn;
  struct tcp_pcb *newpcb;
  ip_addr_t remote_addr;

  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d106      	bne.n	800086c <lwiperf_tx_start_impl+0x24>
 800085e:	4b4a      	ldr	r3, [pc, #296]	@ (8000988 <lwiperf_tx_start_impl+0x140>)
 8000860:	f240 128b 	movw	r2, #395	@ 0x18b
 8000864:	4949      	ldr	r1, [pc, #292]	@ (800098c <lwiperf_tx_start_impl+0x144>)
 8000866:	484a      	ldr	r0, [pc, #296]	@ (8000990 <lwiperf_tx_start_impl+0x148>)
 8000868:	f017 f926 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("remote_ip != NULL", settings != NULL);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d106      	bne.n	8000880 <lwiperf_tx_start_impl+0x38>
 8000872:	4b45      	ldr	r3, [pc, #276]	@ (8000988 <lwiperf_tx_start_impl+0x140>)
 8000874:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8000878:	4944      	ldr	r1, [pc, #272]	@ (800098c <lwiperf_tx_start_impl+0x144>)
 800087a:	4845      	ldr	r0, [pc, #276]	@ (8000990 <lwiperf_tx_start_impl+0x148>)
 800087c:	f017 f91c 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8000880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000882:	2b00      	cmp	r3, #0
 8000884:	d106      	bne.n	8000894 <lwiperf_tx_start_impl+0x4c>
 8000886:	4b40      	ldr	r3, [pc, #256]	@ (8000988 <lwiperf_tx_start_impl+0x140>)
 8000888:	f240 128d 	movw	r2, #397	@ 0x18d
 800088c:	4941      	ldr	r1, [pc, #260]	@ (8000994 <lwiperf_tx_start_impl+0x14c>)
 800088e:	4840      	ldr	r0, [pc, #256]	@ (8000990 <lwiperf_tx_start_impl+0x148>)
 8000890:	f017 f912 	bl	8017ab8 <iprintf>
  *new_conn = NULL;
 8000894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]

  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800089a:	2048      	movs	r0, #72	@ 0x48
 800089c:	f00a f97c 	bl	800ab98 <mem_malloc>
 80008a0:	61f8      	str	r0, [r7, #28]
  if (client_conn == NULL) {
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <lwiperf_tx_start_impl+0x66>
    return ERR_MEM;
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	e067      	b.n	800097e <lwiperf_tx_start_impl+0x136>
  }
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 80008ae:	2000      	movs	r0, #0
 80008b0:	f00d fa5c 	bl	800dd6c <tcp_new_ip_type>
 80008b4:	61b8      	str	r0, [r7, #24]
  if (newpcb == NULL) {
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d105      	bne.n	80008c8 <lwiperf_tx_start_impl+0x80>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 80008bc:	69f8      	ldr	r0, [r7, #28]
 80008be:	f009 ffd9 	bl	800a874 <mem_free>
    return ERR_MEM;
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	e05a      	b.n	800097e <lwiperf_tx_start_impl+0x136>
  }
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 80008c8:	2248      	movs	r2, #72	@ 0x48
 80008ca:	2100      	movs	r1, #0
 80008cc:	69f8      	ldr	r0, [r7, #28]
 80008ce:	f017 f958 	bl	8017b82 <memset>
  client_conn->base.tcp = 1;
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	2201      	movs	r2, #1
 80008d6:	711a      	strb	r2, [r3, #4]
  client_conn->base.related_master_state = related_master_state;
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80008dc:	609a      	str	r2, [r3, #8]
  client_conn->conn_pcb = newpcb;
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	611a      	str	r2, [r3, #16]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 80008e4:	f005 fa84 	bl	8005df0 <sys_now>
 80008e8:	4602      	mov	r2, r0
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	615a      	str	r2, [r3, #20]
  client_conn->report_fn = report_fn;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	619a      	str	r2, [r3, #24]
  client_conn->report_arg = report_arg;
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008f8:	61da      	str	r2, [r3, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	2204      	movs	r2, #4
 80008fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  client_conn->bytes_transferred = 0;
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	@ 0x24
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	3328      	adds	r3, #40	@ 0x28
 800090c:	2218      	movs	r2, #24
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	4618      	mov	r0, r3
 8000912:	f017 fa02 	bl	8017d1a <memcpy>
  client_conn->have_settings_buf = 1;
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	2201      	movs	r2, #1
 800091a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  tcp_arg(newpcb, client_conn);
 800091e:	69f9      	ldr	r1, [r7, #28]
 8000920:	69b8      	ldr	r0, [r7, #24]
 8000922:	f00d fa31 	bl	800dd88 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8000926:	491c      	ldr	r1, [pc, #112]	@ (8000998 <lwiperf_tx_start_impl+0x150>)
 8000928:	69b8      	ldr	r0, [r7, #24]
 800092a:	f00d fa63 	bl	800ddf4 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 800092e:	2202      	movs	r2, #2
 8000930:	491a      	ldr	r1, [pc, #104]	@ (800099c <lwiperf_tx_start_impl+0x154>)
 8000932:	69b8      	ldr	r0, [r7, #24]
 8000934:	f00d fabe 	bl	800deb4 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 8000938:	4919      	ldr	r1, [pc, #100]	@ (80009a0 <lwiperf_tx_start_impl+0x158>)
 800093a:	69b8      	ldr	r0, [r7, #24]
 800093c:	f00d fa7e 	bl	800de3c <tcp_err>

  ip_addr_copy(remote_addr, *remote_ip);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	613b      	str	r3, [r7, #16]

  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8000946:	897a      	ldrh	r2, [r7, #10]
 8000948:	f107 0110 	add.w	r1, r7, #16
 800094c:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <lwiperf_tx_start_impl+0x15c>)
 800094e:	69b8      	ldr	r0, [r7, #24]
 8000950:	f00c faca 	bl	800cee8 <tcp_connect>
 8000954:	4603      	mov	r3, r0
 8000956:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8000958:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d006      	beq.n	800096e <lwiperf_tx_start_impl+0x126>
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000960:	2102      	movs	r1, #2
 8000962:	69f8      	ldr	r0, [r7, #28]
 8000964:	f7ff fdd4 	bl	8000510 <lwiperf_tcp_close>
    return err;
 8000968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800096c:	e007      	b.n	800097e <lwiperf_tx_start_impl+0x136>
  }
  lwiperf_list_add(&client_conn->base);
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fd11 	bl	8000398 <lwiperf_list_add>
  *new_conn = client_conn;
 8000976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000978:	69fa      	ldr	r2, [r7, #28]
 800097a:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3720      	adds	r7, #32
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	08018990 	.word	0x08018990
 800098c:	08018a08 	.word	0x08018a08
 8000990:	080189b8 	.word	0x080189b8
 8000994:	08018a1c 	.word	0x08018a1c
 8000998:	0800078d 	.word	0x0800078d
 800099c:	08000ced 	.word	0x08000ced
 80009a0:	08000ccd 	.word	0x08000ccd
 80009a4:	080007dd 	.word	0x080007dd

080009a8 <lwiperf_tx_start_passive>:

static err_t
lwiperf_tx_start_passive(lwiperf_state_tcp_t *conn)
{
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	b089      	sub	sp, #36	@ 0x24
 80009ac:	af04      	add	r7, sp, #16
 80009ae:	6078      	str	r0, [r7, #4]
  err_t ret;
  lwiperf_state_tcp_t *new_conn = NULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b8:	4618      	mov	r0, r3
 80009ba:	f009 fd20 	bl	800a3fe <lwip_htonl>
 80009be:	4603      	mov	r3, r0
 80009c0:	81fb      	strh	r3, [r7, #14]

  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	1d18      	adds	r0, r3, #4
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f103 0528 	add.w	r5, r3, #40	@ 0x28
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	699e      	ldr	r6, [r3, #24]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	6892      	ldr	r2, [r2, #8]
 80009da:	89fc      	ldrh	r4, [r7, #14]
 80009dc:	f107 0108 	add.w	r1, r7, #8
 80009e0:	9102      	str	r1, [sp, #8]
 80009e2:	9201      	str	r2, [sp, #4]
 80009e4:	9300      	str	r3, [sp, #0]
 80009e6:	4633      	mov	r3, r6
 80009e8:	462a      	mov	r2, r5
 80009ea:	4621      	mov	r1, r4
 80009ec:	f7ff ff2c 	bl	8000848 <lwiperf_tx_start_impl>
 80009f0:	4603      	mov	r3, r0
 80009f2:	737b      	strb	r3, [r7, #13]
    conn->base.related_master_state, &new_conn);
  if (ret == ERR_OK) {
 80009f4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d10c      	bne.n	8000a16 <lwiperf_tx_start_passive+0x6e>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d106      	bne.n	8000a10 <lwiperf_tx_start_passive+0x68>
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <lwiperf_tx_start_passive+0x7c>)
 8000a04:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8000a08:	4907      	ldr	r1, [pc, #28]	@ (8000a28 <lwiperf_tx_start_passive+0x80>)
 8000a0a:	4808      	ldr	r0, [pc, #32]	@ (8000a2c <lwiperf_tx_start_passive+0x84>)
 8000a0c:	f017 f854 	bl	8017ab8 <iprintf>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	2200      	movs	r2, #0
 8000a14:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  return ret;
 8000a16:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a22:	bf00      	nop
 8000a24:	08018990 	.word	0x08018990
 8000a28:	08018a1c 	.word	0x08018a1c
 8000a2c:	080189b8 	.word	0x080189b8

08000a30 <lwiperf_tcp_recv>:

/** Receive data on an iperf tcp session */
static err_t
lwiperf_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	@ 0x30
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	70fb      	strb	r3, [r7, #3]
  u8_t tmp;
  u16_t tot_len;
  u32_t packet_idx;
  struct pbuf *q;
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	623b      	str	r3, [r7, #32]

  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000a42:	6a3b      	ldr	r3, [r7, #32]
 8000a44:	691b      	ldr	r3, [r3, #16]
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d006      	beq.n	8000a5a <lwiperf_tcp_recv+0x2a>
 8000a4c:	4b9a      	ldr	r3, [pc, #616]	@ (8000cb8 <lwiperf_tcp_recv+0x288>)
 8000a4e:	f44f 72e8 	mov.w	r2, #464	@ 0x1d0
 8000a52:	499a      	ldr	r1, [pc, #616]	@ (8000cbc <lwiperf_tcp_recv+0x28c>)
 8000a54:	489a      	ldr	r0, [pc, #616]	@ (8000cc0 <lwiperf_tcp_recv+0x290>)
 8000a56:	f017 f82f 	bl	8017ab8 <iprintf>
  LWIP_UNUSED_ARG(tpcb);

  if (err != ERR_OK) {
 8000a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d005      	beq.n	8000a6e <lwiperf_tcp_recv+0x3e>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000a62:	2105      	movs	r1, #5
 8000a64:	6a38      	ldr	r0, [r7, #32]
 8000a66:	f7ff fd53 	bl	8000510 <lwiperf_tcp_close>
    return ERR_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e11f      	b.n	8000cae <lwiperf_tcp_recv+0x27e>
  }
  if (p == NULL) {
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d114      	bne.n	8000a9e <lwiperf_tcp_recv+0x6e>
    /* connection closed -> test done */
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000a74:	6a3b      	ldr	r3, [r7, #32]
 8000a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d008      	beq.n	8000a92 <lwiperf_tcp_recv+0x62>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8000a80:	6a3b      	ldr	r3, [r7, #32]
 8000a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <lwiperf_tcp_recv+0x62>
        /* client requested transmission after end of test */
        lwiperf_tx_start_passive(conn);
 8000a8c:	6a38      	ldr	r0, [r7, #32]
 8000a8e:	f7ff ff8b 	bl	80009a8 <lwiperf_tx_start_passive>
      }
    }
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8000a92:	2100      	movs	r1, #0
 8000a94:	6a38      	ldr	r0, [r7, #32]
 8000a96:	f7ff fd3b 	bl	8000510 <lwiperf_tcp_close>
    return ERR_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e107      	b.n	8000cae <lwiperf_tcp_recv+0x27e>
  }
  tot_len = p->tot_len;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	891b      	ldrh	r3, [r3, #8]
 8000aa2:	83fb      	strh	r3, [r7, #30]

  conn->poll_count = 0;
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2020 	strb.w	r2, [r3, #32]

  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000aac:	6a3b      	ldr	r3, [r7, #32]
 8000aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d007      	beq.n	8000ac6 <lwiperf_tcp_recv+0x96>
 8000ab6:	6a3b      	ldr	r3, [r7, #32]
 8000ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aba:	3b18      	subs	r3, #24
 8000abc:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	f040 8090 	bne.w	8000be6 <lwiperf_tcp_recv+0x1b6>
    /* wait for 24-byte header */
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	891b      	ldrh	r3, [r3, #8]
 8000aca:	2b17      	cmp	r3, #23
 8000acc:	d808      	bhi.n	8000ae0 <lwiperf_tcp_recv+0xb0>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000ace:	2103      	movs	r1, #3
 8000ad0:	6a38      	ldr	r0, [r7, #32]
 8000ad2:	f7ff fd1d 	bl	8000510 <lwiperf_tcp_close>
      pbuf_free(p);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f00b f92c 	bl	800bd34 <pbuf_free>
      return ERR_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e0e6      	b.n	8000cae <lwiperf_tcp_recv+0x27e>
    }
    if (!conn->have_settings_buf) {
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
 8000ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d135      	bne.n	8000b56 <lwiperf_tcp_recv+0x126>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8000aea:	6a3b      	ldr	r3, [r7, #32]
 8000aec:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8000af0:	2300      	movs	r3, #0
 8000af2:	2218      	movs	r2, #24
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f00b fb23 	bl	800c140 <pbuf_copy_partial>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b18      	cmp	r3, #24
 8000afe:	d008      	beq.n	8000b12 <lwiperf_tcp_recv+0xe2>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000b00:	2102      	movs	r1, #2
 8000b02:	6a38      	ldr	r0, [r7, #32]
 8000b04:	f7ff fd04 	bl	8000510 <lwiperf_tcp_close>
        pbuf_free(p);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f00b f913 	bl	800bd34 <pbuf_free>
        return ERR_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e0cd      	b.n	8000cae <lwiperf_tcp_recv+0x27e>
      }
      conn->have_settings_buf = 1;
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	2201      	movs	r2, #1
 8000b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000b1a:	6a3b      	ldr	r3, [r7, #32]
 8000b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d031      	beq.n	8000b8a <lwiperf_tcp_recv+0x15a>
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000b26:	6a3b      	ldr	r3, [r7, #32]
 8000b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d02b      	beq.n	8000b8a <lwiperf_tcp_recv+0x15a>
          /* client requested parallel transmission test */
          err_t err2 = lwiperf_tx_start_passive(conn);
 8000b32:	6a38      	ldr	r0, [r7, #32]
 8000b34:	f7ff ff38 	bl	80009a8 <lwiperf_tx_start_passive>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	777b      	strb	r3, [r7, #29]
          if (err2 != ERR_OK) {
 8000b3c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d022      	beq.n	8000b8a <lwiperf_tcp_recv+0x15a>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8000b44:	2104      	movs	r1, #4
 8000b46:	6a38      	ldr	r0, [r7, #32]
 8000b48:	f7ff fce2 	bl	8000510 <lwiperf_tcp_close>
            pbuf_free(p);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f00b f8f1 	bl	800bd34 <pbuf_free>
            return ERR_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e0ab      	b.n	8000cae <lwiperf_tcp_recv+0x27e>
          }
        }
      }
    } else {
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000b56:	6a3b      	ldr	r3, [r7, #32]
 8000b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d013      	beq.n	8000b8a <lwiperf_tcp_recv+0x15a>
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8000b68:	2318      	movs	r3, #24
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f00b fbee 	bl	800c34e <pbuf_memcmp>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d008      	beq.n	8000b8a <lwiperf_tcp_recv+0x15a>
          lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000b78:	2103      	movs	r1, #3
 8000b7a:	6a38      	ldr	r0, [r7, #32]
 8000b7c:	f7ff fcc8 	bl	8000510 <lwiperf_tcp_close>
          pbuf_free(p);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f00b f8d7 	bl	800bd34 <pbuf_free>
          return ERR_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e091      	b.n	8000cae <lwiperf_tcp_recv+0x27e>
        }
      }
    }
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000b8a:	6a3b      	ldr	r3, [r7, #32]
 8000b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b8e:	f103 0218 	add.w	r2, r3, #24
 8000b92:	6a3b      	ldr	r3, [r7, #32]
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (conn->bytes_transferred <= 24) {
 8000b96:	6a3b      	ldr	r3, [r7, #32]
 8000b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b9a:	2b18      	cmp	r3, #24
 8000b9c:	d80f      	bhi.n	8000bbe <lwiperf_tcp_recv+0x18e>
      conn->time_started = sys_now();
 8000b9e:	f005 f927 	bl	8005df0 <sys_now>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	6a3b      	ldr	r3, [r7, #32]
 8000ba6:	615a      	str	r2, [r3, #20]
      tcp_recved(tpcb, p->tot_len);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	891b      	ldrh	r3, [r3, #8]
 8000bac:	4619      	mov	r1, r3
 8000bae:	68b8      	ldr	r0, [r7, #8]
 8000bb0:	f00c f900 	bl	800cdb4 <tcp_recved>
      pbuf_free(p);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f00b f8bd 	bl	800bd34 <pbuf_free>
      return ERR_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e077      	b.n	8000cae <lwiperf_tcp_recv+0x27e>
    }
    conn->next_num = 4; /* 24 bytes received... */
 8000bbe:	6a3b      	ldr	r3, [r7, #32]
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    tmp = pbuf_remove_header(p, 24);
 8000bc6:	2118      	movs	r1, #24
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f00b f82d 	bl	800bc28 <pbuf_remove_header>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	773b      	strb	r3, [r7, #28]
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 8000bd2:	7f3b      	ldrb	r3, [r7, #28]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <lwiperf_tcp_recv+0x1b6>
 8000bd8:	4b37      	ldr	r3, [pc, #220]	@ (8000cb8 <lwiperf_tcp_recv+0x288>)
 8000bda:	f240 2211 	movw	r2, #529	@ 0x211
 8000bde:	4939      	ldr	r1, [pc, #228]	@ (8000cc4 <lwiperf_tcp_recv+0x294>)
 8000be0:	4837      	ldr	r0, [pc, #220]	@ (8000cc0 <lwiperf_tcp_recv+0x290>)
 8000be2:	f016 ff69 	bl	8017ab8 <iprintf>
    LWIP_UNUSED_ARG(tmp); /* for LWIP_NOASSERT */
  }

  packet_idx = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (q = p; q != NULL; q = q->next) {
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bee:	e03f      	b.n	8000c70 <lwiperf_tcp_recv+0x240>
#if LWIPERF_CHECK_RX_DATA
    const u8_t *payload = (const u8_t *)q->payload;
 8000bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	61bb      	str	r3, [r7, #24]
    u16_t i;
    for (i = 0; i < q->len; i++) {
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000bfa:	e02b      	b.n	8000c54 <lwiperf_tcp_recv+0x224>
      u8_t val = payload[i];
 8000bfc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4413      	add	r3, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	75fb      	strb	r3, [r7, #23]
      u8_t num = val - '0';
 8000c06:	7dfb      	ldrb	r3, [r7, #23]
 8000c08:	3b30      	subs	r3, #48	@ 0x30
 8000c0a:	75bb      	strb	r3, [r7, #22]
      if (num == conn->next_num) {
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c12:	7dba      	ldrb	r2, [r7, #22]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d111      	bne.n	8000c3c <lwiperf_tcp_recv+0x20c>
        conn->next_num++;
 8000c18:	6a3b      	ldr	r3, [r7, #32]
 8000c1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        if (conn->next_num == 10) {
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c2e:	2b0a      	cmp	r3, #10
 8000c30:	d10d      	bne.n	8000c4e <lwiperf_tcp_recv+0x21e>
          conn->next_num = 0;
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8000c3a:	e008      	b.n	8000c4e <lwiperf_tcp_recv+0x21e>
        }
      } else {
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000c3c:	2103      	movs	r1, #3
 8000c3e:	6a38      	ldr	r0, [r7, #32]
 8000c40:	f7ff fc66 	bl	8000510 <lwiperf_tcp_close>
        pbuf_free(p);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f00b f875 	bl	800bd34 <pbuf_free>
        return ERR_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e02f      	b.n	8000cae <lwiperf_tcp_recv+0x27e>
    for (i = 0; i < q->len; i++) {
 8000c4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000c50:	3301      	adds	r3, #1
 8000c52:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c56:	895b      	ldrh	r3, [r3, #10]
 8000c58:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d3ce      	bcc.n	8000bfc <lwiperf_tcp_recv+0x1cc>
      }
    }
#endif
    packet_idx += q->len;
 8000c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c60:	895b      	ldrh	r3, [r3, #10]
 8000c62:	461a      	mov	r2, r3
 8000c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c66:	4413      	add	r3, r2
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (q = p; q != NULL; q = q->next) {
 8000c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1bc      	bne.n	8000bf0 <lwiperf_tcp_recv+0x1c0>
  }
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	891b      	ldrh	r3, [r3, #8]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d006      	beq.n	8000c90 <lwiperf_tcp_recv+0x260>
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <lwiperf_tcp_recv+0x288>)
 8000c84:	f240 222b 	movw	r2, #555	@ 0x22b
 8000c88:	490f      	ldr	r1, [pc, #60]	@ (8000cc8 <lwiperf_tcp_recv+0x298>)
 8000c8a:	480d      	ldr	r0, [pc, #52]	@ (8000cc0 <lwiperf_tcp_recv+0x290>)
 8000c8c:	f016 ff14 	bl	8017ab8 <iprintf>
  conn->bytes_transferred += packet_idx;
 8000c90:	6a3b      	ldr	r3, [r7, #32]
 8000c92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c96:	441a      	add	r2, r3
 8000c98:	6a3b      	ldr	r3, [r7, #32]
 8000c9a:	625a      	str	r2, [r3, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 8000c9c:	8bfb      	ldrh	r3, [r7, #30]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	68b8      	ldr	r0, [r7, #8]
 8000ca2:	f00c f887 	bl	800cdb4 <tcp_recved>
  pbuf_free(p);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f00b f844 	bl	800bd34 <pbuf_free>
  return ERR_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3730      	adds	r7, #48	@ 0x30
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	08018990 	.word	0x08018990
 8000cbc:	08018a30 	.word	0x08018a30
 8000cc0:	080189b8 	.word	0x080189b8
 8000cc4:	08018a40 	.word	0x08018a40
 8000cc8:	08018a5c 	.word	0x08018a5c

08000ccc <lwiperf_tcp_err>:

/** Error callback, iperf tcp session aborted */
static void
lwiperf_tcp_err(void *arg, err_t err)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70fb      	strb	r3, [r7, #3]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000cdc:	2105      	movs	r1, #5
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f7ff fc16 	bl	8000510 <lwiperf_tcp_close>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <lwiperf_tcp_poll>:

/** TCP poll callback, try to send more data */
static err_t
lwiperf_tcp_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  lwiperf_state_tcp_t *conn = (lwiperf_state_tcp_t *)arg;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	683a      	ldr	r2, [r7, #0]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d006      	beq.n	8000d12 <lwiperf_tcp_poll+0x26>
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <lwiperf_tcp_poll+0x64>)
 8000d06:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000d0a:	4912      	ldr	r1, [pc, #72]	@ (8000d54 <lwiperf_tcp_poll+0x68>)
 8000d0c:	4812      	ldr	r0, [pc, #72]	@ (8000d58 <lwiperf_tcp_poll+0x6c>)
 8000d0e:	f016 fed3 	bl	8017ab8 <iprintf>
  LWIP_UNUSED_ARG(tpcb);
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f883 2020 	strb.w	r2, [r3, #32]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d28:	2b09      	cmp	r3, #9
 8000d2a:	d905      	bls.n	8000d38 <lwiperf_tcp_poll+0x4c>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f7ff fbee 	bl	8000510 <lwiperf_tcp_close>
    return ERR_OK; /* lwiperf_tcp_close frees conn */
 8000d34:	2300      	movs	r3, #0
 8000d36:	e007      	b.n	8000d48 <lwiperf_tcp_poll+0x5c>
  }

  if (!conn->base.server) {
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	795b      	ldrb	r3, [r3, #5]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <lwiperf_tcp_poll+0x5a>
    lwiperf_tcp_client_send_more(conn);
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f7ff fc47 	bl	80005d4 <lwiperf_tcp_client_send_more>
  }

  return ERR_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	08018990 	.word	0x08018990
 8000d54:	08018a30 	.word	0x08018a30
 8000d58:	080189b8 	.word	0x080189b8

08000d5c <lwiperf_tcp_accept>:

/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	4613      	mov	r3, r2
 8000d68:	71fb      	strb	r3, [r7, #7]
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d105      	bne.n	8000d7e <lwiperf_tcp_accept+0x22>
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <lwiperf_tcp_accept+0x22>
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d102      	bne.n	8000d84 <lwiperf_tcp_accept+0x28>
    return ERR_VAL;
 8000d7e:	f06f 0305 	mvn.w	r3, #5
 8000d82:	e0a3      	b.n	8000ecc <lwiperf_tcp_accept+0x170>
  }

  s = (lwiperf_state_tcp_t *)arg;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("invalid session", s->base.server);
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	795b      	ldrb	r3, [r3, #5]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d106      	bne.n	8000d9e <lwiperf_tcp_accept+0x42>
 8000d90:	4b50      	ldr	r3, [pc, #320]	@ (8000ed4 <lwiperf_tcp_accept+0x178>)
 8000d92:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000d96:	4950      	ldr	r1, [pc, #320]	@ (8000ed8 <lwiperf_tcp_accept+0x17c>)
 8000d98:	4850      	ldr	r0, [pc, #320]	@ (8000edc <lwiperf_tcp_accept+0x180>)
 8000d9a:	f016 fe8d 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d106      	bne.n	8000db4 <lwiperf_tcp_accept+0x58>
 8000da6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ed4 <lwiperf_tcp_accept+0x178>)
 8000da8:	f240 2259 	movw	r2, #601	@ 0x259
 8000dac:	494c      	ldr	r1, [pc, #304]	@ (8000ee0 <lwiperf_tcp_accept+0x184>)
 8000dae:	484b      	ldr	r0, [pc, #300]	@ (8000edc <lwiperf_tcp_accept+0x180>)
 8000db0:	f016 fe82 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d006      	beq.n	8000dca <lwiperf_tcp_accept+0x6e>
 8000dbc:	4b45      	ldr	r3, [pc, #276]	@ (8000ed4 <lwiperf_tcp_accept+0x178>)
 8000dbe:	f240 225a 	movw	r2, #602	@ 0x25a
 8000dc2:	4948      	ldr	r1, [pc, #288]	@ (8000ee4 <lwiperf_tcp_accept+0x188>)
 8000dc4:	4845      	ldr	r0, [pc, #276]	@ (8000edc <lwiperf_tcp_accept+0x180>)
 8000dc6:	f016 fe77 	bl	8017ab8 <iprintf>
  if (s->specific_remote) {
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d013      	beq.n	8000dfc <lwiperf_tcp_accept+0xa0>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d106      	bne.n	8000dea <lwiperf_tcp_accept+0x8e>
 8000ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed4 <lwiperf_tcp_accept+0x178>)
 8000dde:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 8000de2:	4941      	ldr	r1, [pc, #260]	@ (8000ee8 <lwiperf_tcp_accept+0x18c>)
 8000de4:	483d      	ldr	r0, [pc, #244]	@ (8000edc <lwiperf_tcp_accept+0x180>)
 8000de6:	f016 fe67 	bl	8017ab8 <iprintf>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d00d      	beq.n	8000e12 <lwiperf_tcp_accept+0xb6>
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
 8000df6:	f06f 0305 	mvn.w	r3, #5
 8000dfa:	e067      	b.n	8000ecc <lwiperf_tcp_accept+0x170>
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d006      	beq.n	8000e12 <lwiperf_tcp_accept+0xb6>
 8000e04:	4b33      	ldr	r3, [pc, #204]	@ (8000ed4 <lwiperf_tcp_accept+0x178>)
 8000e06:	f240 2262 	movw	r2, #610	@ 0x262
 8000e0a:	4938      	ldr	r1, [pc, #224]	@ (8000eec <lwiperf_tcp_accept+0x190>)
 8000e0c:	4833      	ldr	r0, [pc, #204]	@ (8000edc <lwiperf_tcp_accept+0x180>)
 8000e0e:	f016 fe53 	bl	8017ab8 <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000e12:	2048      	movs	r0, #72	@ 0x48
 8000e14:	f009 fec0 	bl	800ab98 <mem_malloc>
 8000e18:	6138      	str	r0, [r7, #16]
  if (conn == NULL) {
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <lwiperf_tcp_accept+0xca>
    return ERR_MEM;
 8000e20:	f04f 33ff 	mov.w	r3, #4294967295
 8000e24:	e052      	b.n	8000ecc <lwiperf_tcp_accept+0x170>
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 8000e26:	2248      	movs	r2, #72	@ 0x48
 8000e28:	2100      	movs	r1, #0
 8000e2a:	6938      	ldr	r0, [r7, #16]
 8000e2c:	f016 fea9 	bl	8017b82 <memset>
  conn->base.tcp = 1;
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	2201      	movs	r2, #1
 8000e34:	711a      	strb	r2, [r3, #4]
  conn->base.server = 1;
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	715a      	strb	r2, [r3, #5]
  conn->base.related_master_state = &s->base;
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	609a      	str	r2, [r3, #8]
  conn->conn_pcb = newpcb;
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	611a      	str	r2, [r3, #16]
  conn->time_started = sys_now();
 8000e48:	f004 ffd2 	bl	8005df0 <sys_now>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	615a      	str	r2, [r3, #20]
  conn->report_fn = s->report_fn;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	699a      	ldr	r2, [r3, #24]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	619a      	str	r2, [r3, #24]
  conn->report_arg = s->report_arg;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	69da      	ldr	r2, [r3, #28]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	61da      	str	r2, [r3, #28]

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 8000e62:	6939      	ldr	r1, [r7, #16]
 8000e64:	68b8      	ldr	r0, [r7, #8]
 8000e66:	f00c ff8f 	bl	800dd88 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 8000e6a:	4921      	ldr	r1, [pc, #132]	@ (8000ef0 <lwiperf_tcp_accept+0x194>)
 8000e6c:	68b8      	ldr	r0, [r7, #8]
 8000e6e:	f00c ff9d 	bl	800ddac <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000e72:	2202      	movs	r2, #2
 8000e74:	491f      	ldr	r1, [pc, #124]	@ (8000ef4 <lwiperf_tcp_accept+0x198>)
 8000e76:	68b8      	ldr	r0, [r7, #8]
 8000e78:	f00d f81c 	bl	800deb4 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	491d      	ldr	r1, [pc, #116]	@ (8000ef8 <lwiperf_tcp_accept+0x19c>)
 8000e82:	4618      	mov	r0, r3
 8000e84:	f00c ffda 	bl	800de3c <tcp_err>

  if (s->specific_remote) {
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d017      	beq.n	8000ec2 <lwiperf_tcp_accept+0x166>
    /* this listener belongs to a client, so make the client the master of the newly created connection */
    conn->base.related_master_state = s->base.related_master_state;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	609a      	str	r2, [r3, #8]
    /* if dual mode or (tradeoff mode AND client is done): close the listener */
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d007      	beq.n	8000eb4 <lwiperf_tcp_accept+0x158>
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff facd 	bl	8000448 <lwiperf_list_find>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d106      	bne.n	8000ec2 <lwiperf_tcp_accept+0x166>
      /* prevent report when closing: this is expected */
      s->report_fn = NULL;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 8000eba:	2102      	movs	r1, #2
 8000ebc:	6978      	ldr	r0, [r7, #20]
 8000ebe:	f7ff fb27 	bl	8000510 <lwiperf_tcp_close>
    }
  }
  lwiperf_list_add(&conn->base);
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fa67 	bl	8000398 <lwiperf_list_add>
  return ERR_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	08018990 	.word	0x08018990
 8000ed8:	08018a6c 	.word	0x08018a6c
 8000edc:	080189b8 	.word	0x080189b8
 8000ee0:	08018a7c 	.word	0x08018a7c
 8000ee4:	08018a90 	.word	0x08018a90
 8000ee8:	08018aa4 	.word	0x08018aa4
 8000eec:	08018acc 	.word	0x08018acc
 8000ef0:	08000a31 	.word	0x08000a31
 8000ef4:	08000ced 	.word	0x08000ced
 8000ef8:	08000ccd 	.word	0x08000ccd

08000efc <lwiperf_start_tcp_server_default>:
 * @returns a connection handle that can be used to abort the server
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server_default(lwiperf_report_fn report_fn, void *report_arg)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  return lwiperf_start_tcp_server(IP_ADDR_ANY, LWIPERF_TCP_PORT_DEFAULT,
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	f241 3189 	movw	r1, #5001	@ 0x1389
 8000f0e:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <lwiperf_start_tcp_server_default+0x24>)
 8000f10:	f000 f808 	bl	8000f24 <lwiperf_start_tcp_server>
 8000f14:	4603      	mov	r3, r0
                                  report_fn, report_arg);
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	0801c1a8 	.word	0x0801c1a8

08000f24 <lwiperf_start_tcp_server>:
 *          by calling @ref lwiperf_abort()
 */
void *
lwiperf_start_tcp_server(const ip_addr_t *local_addr, u16_t local_port,
                         lwiperf_report_fn report_fn, void *report_arg)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	460b      	mov	r3, r1
 8000f32:	817b      	strh	r3, [r7, #10]
  err_t err;
  lwiperf_state_tcp_t *state = NULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]

  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000f38:	8979      	ldrh	r1, [r7, #10]
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	2300      	movs	r3, #0
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f000 f80d 	bl	8000f68 <lwiperf_start_tcp_server_impl>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	75fb      	strb	r3, [r7, #23]
    NULL, &state);
  if (err == ERR_OK) {
 8000f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <lwiperf_start_tcp_server+0x3a>
    return state;
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	e000      	b.n	8000f60 <lwiperf_start_tcp_server+0x3c>
  }
  return NULL;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <lwiperf_start_tcp_server_impl>:

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
                                           lwiperf_report_fn report_fn, void *report_arg,
                                           lwiperf_state_base_t *related_master_state, lwiperf_state_tcp_t **state)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	460b      	mov	r3, r1
 8000f76:	817b      	strh	r3, [r7, #10]
  err_t err;
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();
 8000f78:	f005 f9bc 	bl	80062f4 <sys_check_core_locking>

  LWIP_ASSERT("state != NULL", state != NULL);
 8000f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d106      	bne.n	8000f90 <lwiperf_start_tcp_server_impl+0x28>
 8000f82:	4b3a      	ldr	r3, [pc, #232]	@ (800106c <lwiperf_start_tcp_server_impl+0x104>)
 8000f84:	f240 22b6 	movw	r2, #694	@ 0x2b6
 8000f88:	4939      	ldr	r1, [pc, #228]	@ (8001070 <lwiperf_start_tcp_server_impl+0x108>)
 8000f8a:	483a      	ldr	r0, [pc, #232]	@ (8001074 <lwiperf_start_tcp_server_impl+0x10c>)
 8000f8c:	f016 fd94 	bl	8017ab8 <iprintf>

  if (local_addr == NULL) {
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d102      	bne.n	8000f9c <lwiperf_start_tcp_server_impl+0x34>
    return ERR_ARG;
 8000f96:	f06f 030f 	mvn.w	r3, #15
 8000f9a:	e063      	b.n	8001064 <lwiperf_start_tcp_server_impl+0xfc>
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000f9c:	2048      	movs	r0, #72	@ 0x48
 8000f9e:	f009 fdfb 	bl	800ab98 <mem_malloc>
 8000fa2:	61f8      	str	r0, [r7, #28]
  if (s == NULL) {
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d102      	bne.n	8000fb0 <lwiperf_start_tcp_server_impl+0x48>
    return ERR_MEM;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	e059      	b.n	8001064 <lwiperf_start_tcp_server_impl+0xfc>
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 8000fb0:	2248      	movs	r2, #72	@ 0x48
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	69f8      	ldr	r0, [r7, #28]
 8000fb6:	f016 fde4 	bl	8017b82 <memset>
  s->base.tcp = 1;
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	711a      	strb	r2, [r3, #4]
  s->base.server = 1;
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	715a      	strb	r2, [r3, #5]
  s->base.related_master_state = related_master_state;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000fca:	609a      	str	r2, [r3, #8]
  s->report_fn = report_fn;
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	619a      	str	r2, [r3, #24]
  s->report_arg = report_arg;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	61da      	str	r2, [r3, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8000fd8:	202e      	movs	r0, #46	@ 0x2e
 8000fda:	f00c fec7 	bl	800dd6c <tcp_new_ip_type>
 8000fde:	61b8      	str	r0, [r7, #24]
  if (pcb == NULL) {
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d102      	bne.n	8000fec <lwiperf_start_tcp_server_impl+0x84>
    return ERR_MEM;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	e03b      	b.n	8001064 <lwiperf_start_tcp_server_impl+0xfc>
  }
  err = tcp_bind(pcb, local_addr, local_port);
 8000fec:	897b      	ldrh	r3, [r7, #10]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68f9      	ldr	r1, [r7, #12]
 8000ff2:	69b8      	ldr	r0, [r7, #24]
 8000ff4:	f00b fd0a 	bl	800ca0c <tcp_bind>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8000ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <lwiperf_start_tcp_server_impl+0xa2>
    return err;
 8001004:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001008:	e02c      	b.n	8001064 <lwiperf_start_tcp_server_impl+0xfc>
  }
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 800100a:	2101      	movs	r1, #1
 800100c:	69b8      	ldr	r0, [r7, #24]
 800100e:	f00b fdb7 	bl	800cb80 <tcp_listen_with_backlog>
 8001012:	4602      	mov	r2, r0
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	60da      	str	r2, [r3, #12]
  if (s->server_pcb == NULL) {
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10b      	bne.n	8001038 <lwiperf_start_tcp_server_impl+0xd0>
    if (pcb != NULL) {
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <lwiperf_start_tcp_server_impl+0xc4>
      tcp_close(pcb);
 8001026:	69b8      	ldr	r0, [r7, #24]
 8001028:	f00b fbf6 	bl	800c818 <tcp_close>
    }
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 800102c:	69f8      	ldr	r0, [r7, #28]
 800102e:	f009 fc21 	bl	800a874 <mem_free>
    return ERR_MEM;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	e015      	b.n	8001064 <lwiperf_start_tcp_server_impl+0xfc>
  }
  pcb = NULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]

  tcp_arg(s->server_pcb, s);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	69f9      	ldr	r1, [r7, #28]
 8001042:	4618      	mov	r0, r3
 8001044:	f00c fea0 	bl	800dd88 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	490a      	ldr	r1, [pc, #40]	@ (8001078 <lwiperf_start_tcp_server_impl+0x110>)
 800104e:	4618      	mov	r0, r3
 8001050:	f00c ff18 	bl	800de84 <tcp_accept>

  lwiperf_list_add(&s->base);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f99e 	bl	8000398 <lwiperf_list_add>
  *state = s;
 800105c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	601a      	str	r2, [r3, #0]
  return ERR_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	08018990 	.word	0x08018990
 8001070:	08018af4 	.word	0x08018af4
 8001074:	080189b8 	.word	0x080189b8
 8001078:	08000d5d 	.word	0x08000d5d

0800107c <lwiperf_start_tcp_client_default>:
 * @returns a connection handle that can be used to abort the client
 *          by calling @ref lwiperf_abort()
 */
void* lwiperf_start_tcp_client_default(const ip_addr_t* remote_addr,
                               lwiperf_report_fn report_fn, void* report_arg)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  return lwiperf_start_tcp_client(remote_addr, LWIPERF_TCP_PORT_DEFAULT, LWIPERF_CLIENT,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2200      	movs	r2, #0
 8001090:	f241 3189 	movw	r1, #5001	@ 0x1389
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f805 	bl	80010a4 <lwiperf_start_tcp_client>
 800109a:	4603      	mov	r3, r0
                                  report_fn, report_arg);
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <lwiperf_start_tcp_client>:
 * @returns a connection handle that can be used to abort the client
 *          by calling @ref lwiperf_abort()
 */
void* lwiperf_start_tcp_client(const ip_addr_t* remote_addr, u16_t remote_port,
  enum lwiperf_client_type type, lwiperf_report_fn report_fn, void* report_arg)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b092      	sub	sp, #72	@ 0x48
 80010a8:	af04      	add	r7, sp, #16
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	817b      	strh	r3, [r7, #10]
 80010b2:	4613      	mov	r3, r2
 80010b4:	727b      	strb	r3, [r7, #9]
  err_t ret;
  lwiperf_settings_t settings;
  lwiperf_state_tcp_t *state = NULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]

  memset(&settings, 0, sizeof(settings));
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	2218      	movs	r2, #24
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f016 fd5d 	bl	8017b82 <memset>
  switch (type) {
 80010c8:	7a7b      	ldrb	r3, [r7, #9]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d00f      	beq.n	80010ee <lwiperf_start_tcp_client+0x4a>
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	dc14      	bgt.n	80010fc <lwiperf_start_tcp_client+0x58>
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <lwiperf_start_tcp_client+0x38>
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d003      	beq.n	80010e2 <lwiperf_start_tcp_client+0x3e>
 80010da:	e00f      	b.n	80010fc <lwiperf_start_tcp_client+0x58>
  case LWIPERF_CLIENT:
    /* Unidirectional tx only test */
    settings.flags = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
    break;
 80010e0:	e00e      	b.n	8001100 <lwiperf_start_tcp_client+0x5c>
  case LWIPERF_DUAL:
    /* Do a bidirectional test simultaneously */
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST | LWIPERF_FLAGS_ANSWER_NOW);
 80010e2:	483a      	ldr	r0, [pc, #232]	@ (80011cc <lwiperf_start_tcp_client+0x128>)
 80010e4:	f009 f98b 	bl	800a3fe <lwip_htonl>
 80010e8:	4603      	mov	r3, r0
 80010ea:	61fb      	str	r3, [r7, #28]
    break;
 80010ec:	e008      	b.n	8001100 <lwiperf_start_tcp_client+0x5c>
  case LWIPERF_TRADEOFF:
    /* Do a bidirectional test individually */
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST);
 80010ee:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80010f2:	f009 f984 	bl	800a3fe <lwip_htonl>
 80010f6:	4603      	mov	r3, r0
 80010f8:	61fb      	str	r3, [r7, #28]
    break;
 80010fa:	e001      	b.n	8001100 <lwiperf_start_tcp_client+0x5c>
  default:
    /* invalid argument */
    return NULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	e061      	b.n	80011c4 <lwiperf_start_tcp_client+0x120>
  }
  settings.num_threads = htonl(1);
 8001100:	2001      	movs	r0, #1
 8001102:	f009 f97c 	bl	800a3fe <lwip_htonl>
 8001106:	4603      	mov	r3, r0
 8001108:	623b      	str	r3, [r7, #32]
  settings.remote_port = htonl(LWIPERF_TCP_PORT_DEFAULT);
 800110a:	f241 3089 	movw	r0, #5001	@ 0x1389
 800110e:	f009 f976 	bl	800a3fe <lwip_htonl>
 8001112:	4603      	mov	r3, r0
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
  /* TODO: implement passing duration/amount of bytes to transfer */
  settings.amount = htonl((u32_t)-1000);
 8001116:	482e      	ldr	r0, [pc, #184]	@ (80011d0 <lwiperf_start_tcp_client+0x12c>)
 8001118:	f009 f971 	bl	800a3fe <lwip_htonl>
 800111c:	4603      	mov	r3, r0
 800111e:	633b      	str	r3, [r7, #48]	@ 0x30

  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8001120:	f107 021c 	add.w	r2, r7, #28
 8001124:	8979      	ldrh	r1, [r7, #10]
 8001126:	f107 0318 	add.w	r3, r7, #24
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2300      	movs	r3, #0
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff fb86 	bl	8000848 <lwiperf_tx_start_impl>
 800113c:	4603      	mov	r3, r0
 800113e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (ret == ERR_OK) {
 8001142:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001146:	2b00      	cmp	r3, #0
 8001148:	d13b      	bne.n	80011c2 <lwiperf_start_tcp_client+0x11e>
    LWIP_ASSERT("state != NULL", state != NULL);
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d106      	bne.n	800115e <lwiperf_start_tcp_client+0xba>
 8001150:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <lwiperf_start_tcp_client+0x130>)
 8001152:	f240 3216 	movw	r2, #790	@ 0x316
 8001156:	4920      	ldr	r1, [pc, #128]	@ (80011d8 <lwiperf_start_tcp_client+0x134>)
 8001158:	4820      	ldr	r0, [pc, #128]	@ (80011dc <lwiperf_start_tcp_client+0x138>)
 800115a:	f016 fcad 	bl	8017ab8 <iprintf>
    if (type != LWIPERF_CLIENT) {
 800115e:	7a7b      	ldrb	r3, [r7, #9]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d02c      	beq.n	80011be <lwiperf_start_tcp_client+0x11a>
      /* start corresponding server now */
      lwiperf_state_tcp_t *server = NULL;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	4618      	mov	r0, r3
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	f107 0214 	add.w	r2, r7, #20
 8001174:	9201      	str	r2, [sp, #4]
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	f241 3189 	movw	r1, #5001	@ 0x1389
 8001180:	f7ff fef2 	bl	8000f68 <lwiperf_start_tcp_server_impl>
 8001184:	4603      	mov	r3, r0
 8001186:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        report_fn, report_arg, (lwiperf_state_base_t *)state, &server);
      if (ret != ERR_OK) {
 800118a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <lwiperf_start_tcp_client+0xfa>
        /* starting server failed, abort client */
        lwiperf_abort(state);
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f823 	bl	80011e0 <lwiperf_abort>
        return NULL;
 800119a:	2300      	movs	r3, #0
 800119c:	e012      	b.n	80011c4 <lwiperf_start_tcp_client+0x120>
      }
      /* make this server accept one connection only */
      server->specific_remote = 1;
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      server->remote_addr = state->conn_pcb->remote_ip;
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	6852      	ldr	r2, [r2, #4]
 80011ae:	645a      	str	r2, [r3, #68]	@ 0x44
      if (type == LWIPERF_TRADEOFF) {
 80011b0:	7a7b      	ldrb	r3, [r7, #9]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d103      	bne.n	80011be <lwiperf_start_tcp_client+0x11a>
        /* tradeoff means that the remote host connects only after the client is done,
           so keep the listen pcb open until the client is done */
        server->client_tradeoff_mode = 1;
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
      }
    }
    return state;
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	e000      	b.n	80011c4 <lwiperf_start_tcp_client+0x120>
  }
  return NULL;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3738      	adds	r7, #56	@ 0x38
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	80000001 	.word	0x80000001
 80011d0:	fffffc18 	.word	0xfffffc18
 80011d4:	08018990 	.word	0x08018990
 80011d8:	08018af4 	.word	0x08018af4
 80011dc:	080189b8 	.word	0x080189b8

080011e0 <lwiperf_abort>:
 * @ingroup iperf
 * Abort an iperf session (handle returned by lwiperf_start_tcp_server*())
 */
void
lwiperf_abort(void *lwiperf_session)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  lwiperf_state_base_t *i, *dealloc, *last = NULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]

  LWIP_ASSERT_CORE_LOCKED();
 80011ec:	f005 f882 	bl	80062f4 <sys_check_core_locking>

  for (i = lwiperf_all_connections; i != NULL; ) {
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <lwiperf_abort+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	e01c      	b.n	8001232 <lwiperf_abort+0x52>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d004      	beq.n	800120a <lwiperf_abort+0x2a>
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	429a      	cmp	r2, r3
 8001208:	d10e      	bne.n	8001228 <lwiperf_abort+0x48>
      dealloc = i;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	60fb      	str	r3, [r7, #12]
      i = i->next;
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	617b      	str	r3, [r7, #20]
      if (last != NULL) {
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <lwiperf_abort+0x40>
        last->next = i;
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	601a      	str	r2, [r3, #0]
      }
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f009 fb27 	bl	800a874 <mem_free>
 8001226:	e004      	b.n	8001232 <lwiperf_abort+0x52>
    } else {
      last = i;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	613b      	str	r3, [r7, #16]
      i = i->next;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	617b      	str	r3, [r7, #20]
  for (i = lwiperf_all_connections; i != NULL; ) {
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1df      	bne.n	80011f8 <lwiperf_abort+0x18>
    }
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	240000bc 	.word	0x240000bc

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800124e:	f000 f9eb 	bl	8001628 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001252:	4b3e      	ldr	r3, [pc, #248]	@ (800134c <main+0x104>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d11b      	bne.n	8001296 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800125e:	f3bf 8f4f 	dsb	sy
}
 8001262:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001264:	f3bf 8f6f 	isb	sy
}
 8001268:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126a:	4b38      	ldr	r3, [pc, #224]	@ (800134c <main+0x104>)
 800126c:	2200      	movs	r2, #0
 800126e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001272:	f3bf 8f4f 	dsb	sy
}
 8001276:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001278:	f3bf 8f6f 	isb	sy
}
 800127c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800127e:	4b33      	ldr	r3, [pc, #204]	@ (800134c <main+0x104>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4a32      	ldr	r2, [pc, #200]	@ (800134c <main+0x104>)
 8001284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001288:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800128a:	f3bf 8f4f 	dsb	sy
}
 800128e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001290:	f3bf 8f6f 	isb	sy
}
 8001294:	e000      	b.n	8001298 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001296:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001298:	4b2c      	ldr	r3, [pc, #176]	@ (800134c <main+0x104>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d138      	bne.n	8001316 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80012a4:	4b29      	ldr	r3, [pc, #164]	@ (800134c <main+0x104>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80012ac:	f3bf 8f4f 	dsb	sy
}
 80012b0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80012b2:	4b26      	ldr	r3, [pc, #152]	@ (800134c <main+0x104>)
 80012b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012b8:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	0b5b      	lsrs	r3, r3, #13
 80012be:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012c2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	08db      	lsrs	r3, r3, #3
 80012c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012cc:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	015a      	lsls	r2, r3, #5
 80012d2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80012d6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012dc:	491b      	ldr	r1, [pc, #108]	@ (800134c <main+0x104>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	1e5a      	subs	r2, r3, #1
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1ef      	bne.n	80012ce <main+0x86>
    } while(sets-- != 0U);
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1e5a      	subs	r2, r3, #1
 80012f2:	60ba      	str	r2, [r7, #8]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1e5      	bne.n	80012c4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80012f8:	f3bf 8f4f 	dsb	sy
}
 80012fc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80012fe:	4b13      	ldr	r3, [pc, #76]	@ (800134c <main+0x104>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a12      	ldr	r2, [pc, #72]	@ (800134c <main+0x104>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001308:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800130a:	f3bf 8f4f 	dsb	sy
}
 800130e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001310:	f3bf 8f6f 	isb	sy
}
 8001314:	e000      	b.n	8001318 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001316:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001318:	f000 fe28 	bl	8001f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131c:	f000 f81e 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001320:	f000 f89a 	bl	8001458 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001324:	f005 f86c 	bl	8006400 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001328:	4a09      	ldr	r2, [pc, #36]	@ (8001350 <main+0x108>)
 800132a:	2100      	movs	r1, #0
 800132c:	4809      	ldr	r0, [pc, #36]	@ (8001354 <main+0x10c>)
 800132e:	f005 f8c6 	bl	80064be <osThreadNew>
 8001332:	4603      	mov	r3, r0
 8001334:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <main+0x110>)
 8001336:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001338:	2000      	movs	r0, #0
 800133a:	f000 fd4d 	bl	8001dd8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800133e:	2002      	movs	r0, #2
 8001340:	f000 fd4a 	bl	8001dd8 <BSP_LED_Init>

  /* Start scheduler */
  osKernelStart();
 8001344:	f005 f880 	bl	8006448 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <main+0x100>
 800134c:	e000ed00 	.word	0xe000ed00
 8001350:	0801c040 	.word	0x0801c040
 8001354:	080015bd 	.word	0x080015bd
 8001358:	240000c0 	.word	0x240000c0

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b09c      	sub	sp, #112	@ 0x70
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001366:	224c      	movs	r2, #76	@ 0x4c
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f016 fc09 	bl	8017b82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2220      	movs	r2, #32
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f016 fc03 	bl	8017b82 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800137c:	2002      	movs	r0, #2
 800137e:	f002 fefb 	bl	8004178 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b32      	ldr	r3, [pc, #200]	@ (8001450 <SystemClock_Config+0xf4>)
 8001388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138a:	4a31      	ldr	r2, [pc, #196]	@ (8001450 <SystemClock_Config+0xf4>)
 800138c:	f023 0301 	bic.w	r3, r3, #1
 8001390:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001392:	4b2f      	ldr	r3, [pc, #188]	@ (8001450 <SystemClock_Config+0xf4>)
 8001394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	4b2d      	ldr	r3, [pc, #180]	@ (8001454 <SystemClock_Config+0xf8>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001454 <SystemClock_Config+0xf8>)
 80013a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <SystemClock_Config+0xf8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013b8:	bf00      	nop
 80013ba:	4b26      	ldr	r3, [pc, #152]	@ (8001454 <SystemClock_Config+0xf8>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013c6:	d1f8      	bne.n	80013ba <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c8:	2302      	movs	r3, #2
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d0:	2340      	movs	r3, #64	@ 0x40
 80013d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d4:	2302      	movs	r3, #2
 80013d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013d8:	2300      	movs	r3, #0
 80013da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013dc:	2304      	movs	r3, #4
 80013de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 80013e0:	2325      	movs	r3, #37	@ 0x25
 80013e2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013e4:	2302      	movs	r3, #2
 80013e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013e8:	2304      	movs	r3, #4
 80013ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013f0:	230c      	movs	r3, #12
 80013f2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80013f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fef2 	bl	80041ec <HAL_RCC_OscConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800140e:	f000 f96f 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001412:	233f      	movs	r3, #63	@ 0x3f
 8001414:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001416:	2303      	movs	r3, #3
 8001418:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800141e:	2308      	movs	r3, #8
 8001420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001422:	2340      	movs	r3, #64	@ 0x40
 8001424:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001426:	2340      	movs	r3, #64	@ 0x40
 8001428:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800142a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800142e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001430:	2340      	movs	r3, #64	@ 0x40
 8001432:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2102      	movs	r1, #2
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fb31 	bl	8004aa0 <HAL_RCC_ClockConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001444:	f000 f954 	bl	80016f0 <Error_Handler>
  }
}
 8001448:	bf00      	nop
 800144a:	3770      	adds	r7, #112	@ 0x70
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	58000400 	.word	0x58000400
 8001454:	58024800 	.word	0x58024800

08001458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	@ 0x30
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	4b4f      	ldr	r3, [pc, #316]	@ (80015ac <MX_GPIO_Init+0x154>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001474:	4a4d      	ldr	r2, [pc, #308]	@ (80015ac <MX_GPIO_Init+0x154>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800147e:	4b4b      	ldr	r3, [pc, #300]	@ (80015ac <MX_GPIO_Init+0x154>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148c:	4b47      	ldr	r3, [pc, #284]	@ (80015ac <MX_GPIO_Init+0x154>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001492:	4a46      	ldr	r2, [pc, #280]	@ (80015ac <MX_GPIO_Init+0x154>)
 8001494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001498:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800149c:	4b43      	ldr	r3, [pc, #268]	@ (80015ac <MX_GPIO_Init+0x154>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b40      	ldr	r3, [pc, #256]	@ (80015ac <MX_GPIO_Init+0x154>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b0:	4a3e      	ldr	r2, [pc, #248]	@ (80015ac <MX_GPIO_Init+0x154>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ba:	4b3c      	ldr	r3, [pc, #240]	@ (80015ac <MX_GPIO_Init+0x154>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c8:	4b38      	ldr	r3, [pc, #224]	@ (80015ac <MX_GPIO_Init+0x154>)
 80014ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ce:	4a37      	ldr	r2, [pc, #220]	@ (80015ac <MX_GPIO_Init+0x154>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014d8:	4b34      	ldr	r3, [pc, #208]	@ (80015ac <MX_GPIO_Init+0x154>)
 80014da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e6:	4b31      	ldr	r3, [pc, #196]	@ (80015ac <MX_GPIO_Init+0x154>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ec:	4a2f      	ldr	r2, [pc, #188]	@ (80015ac <MX_GPIO_Init+0x154>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f6:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <MX_GPIO_Init+0x154>)
 80014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001504:	4b29      	ldr	r3, [pc, #164]	@ (80015ac <MX_GPIO_Init+0x154>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150a:	4a28      	ldr	r2, [pc, #160]	@ (80015ac <MX_GPIO_Init+0x154>)
 800150c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001510:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001514:	4b25      	ldr	r3, [pc, #148]	@ (80015ac <MX_GPIO_Init+0x154>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001522:	4b22      	ldr	r3, [pc, #136]	@ (80015ac <MX_GPIO_Init+0x154>)
 8001524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001528:	4a20      	ldr	r2, [pc, #128]	@ (80015ac <MX_GPIO_Init+0x154>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001532:	4b1e      	ldr	r3, [pc, #120]	@ (80015ac <MX_GPIO_Init+0x154>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2102      	movs	r1, #2
 8001544:	481a      	ldr	r0, [pc, #104]	@ (80015b0 <MX_GPIO_Init+0x158>)
 8001546:	f002 fdfd 	bl	8004144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800154a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	4815      	ldr	r0, [pc, #84]	@ (80015b4 <MX_GPIO_Init+0x15c>)
 8001560:	f002 fc40 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001564:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001576:	2307      	movs	r3, #7
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	480d      	ldr	r0, [pc, #52]	@ (80015b8 <MX_GPIO_Init+0x160>)
 8001582:	f002 fc2f 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001586:	2302      	movs	r3, #2
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158a:	2301      	movs	r3, #1
 800158c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4619      	mov	r1, r3
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <MX_GPIO_Init+0x158>)
 800159e:	f002 fc21 	bl	8003de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015a2:	bf00      	nop
 80015a4:	3730      	adds	r7, #48	@ 0x30
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58021000 	.word	0x58021000
 80015b4:	58020800 	.word	0x58020800
 80015b8:	58020c00 	.word	0x58020c00

080015bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80015c4:	f004 f8fc 	bl	80057c0 <MX_LWIP_Init>
   * iperf3 is not compatible at all.
   * Adding lwiperf.c file to the project is necessary.
   * The default include path should already contain
   * 'lwip/apps/lwiperf.h'
   */
  LOCK_TCPIP_CORE();
 80015c8:	f004 fe76 	bl	80062b8 <sys_lock_tcpip_core>
  lwiperf_start_tcp_server_default(NULL, NULL);
 80015cc:	2100      	movs	r1, #0
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff fc94 	bl	8000efc <lwiperf_start_tcp_server_default>

  ip4_addr_t remote_addr;
  IP4_ADDR(&remote_addr, 192, 168, 1, 1);
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <StartDefaultTask+0x64>)
 80015d6:	60fb      	str	r3, [r7, #12]
  lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fd4b 	bl	800107c <lwiperf_start_tcp_client_default>
  UNLOCK_TCPIP_CORE();
 80015e6:	f004 fe77 	bl	80062d8 <sys_unlock_tcpip_core>
  /* Infinite loop */
  for(;;)
  {
	if (netif_is_up(&gnetif)) {
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <StartDefaultTask+0x68>)
 80015ec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <StartDefaultTask+0x4c>
	        BSP_LED_On(LED_GREEN);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 fc62 	bl	8001ec4 <BSP_LED_On>
	        BSP_LED_Off(LED_RED);
 8001600:	2002      	movs	r0, #2
 8001602:	f000 fc89 	bl	8001f18 <BSP_LED_Off>
 8001606:	e005      	b.n	8001614 <StartDefaultTask+0x58>
	      } else {
	        BSP_LED_On(LED_RED);
 8001608:	2002      	movs	r0, #2
 800160a:	f000 fc5b 	bl	8001ec4 <BSP_LED_On>
	        BSP_LED_Off(LED_GREEN);
 800160e:	2000      	movs	r0, #0
 8001610:	f000 fc82 	bl	8001f18 <BSP_LED_Off>
	      }
    osDelay(1000);
 8001614:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001618:	f004 ffef 	bl	80065fa <osDelay>
	if (netif_is_up(&gnetif)) {
 800161c:	e7e5      	b.n	80015ea <StartDefaultTask+0x2e>
 800161e:	bf00      	nop
 8001620:	0101a8c0 	.word	0x0101a8c0
 8001624:	24000118 	.word	0x24000118

08001628 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800162e:	463b      	mov	r3, r7
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800163a:	f000 fdf3 	bl	8002224 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800163e:	2301      	movs	r3, #1
 8001640:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001642:	2300      	movs	r3, #0
 8001644:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800164a:	231f      	movs	r3, #31
 800164c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800164e:	2387      	movs	r3, #135	@ 0x87
 8001650:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001652:	2300      	movs	r3, #0
 8001654:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001656:	2300      	movs	r3, #0
 8001658:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800165a:	2301      	movs	r3, #1
 800165c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800165e:	2301      	movs	r3, #1
 8001660:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800166a:	463b      	mov	r3, r7
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fe11 	bl	8002294 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001672:	2301      	movs	r3, #1
 8001674:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8001676:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <MPU_Config+0x9c>)
 8001678:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800167a:	2310      	movs	r3, #16
 800167c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800167e:	2300      	movs	r3, #0
 8001680:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001682:	2301      	movs	r3, #1
 8001684:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001686:	2303      	movs	r3, #3
 8001688:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800168e:	463b      	mov	r3, r7
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fdff 	bl	8002294 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001696:	2302      	movs	r3, #2
 8001698:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <MPU_Config+0xa0>)
 800169c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 800169e:	2308      	movs	r3, #8
 80016a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016a6:	2301      	movs	r3, #1
 80016a8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016ae:	463b      	mov	r3, r7
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fdef 	bl	8002294 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016b6:	2004      	movs	r0, #4
 80016b8:	f000 fdcc 	bl	8002254 <HAL_MPU_Enable>

}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	30020000 	.word	0x30020000
 80016c8:	30040000 	.word	0x30040000

080016cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016de:	f000 fc81 	bl	8001fe4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40001000 	.word	0x40001000

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <Error_Handler+0x8>

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <HAL_MspInit+0x38>)
 8001704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001708:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <HAL_MspInit+0x38>)
 800170a:	f043 0302 	orr.w	r3, r3, #2
 800170e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001712:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <HAL_MspInit+0x38>)
 8001714:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	210f      	movs	r1, #15
 8001724:	f06f 0001 	mvn.w	r0, #1
 8001728:	f000 fd54 	bl	80021d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	58024400 	.word	0x58024400

08001738 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b090      	sub	sp, #64	@ 0x40
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b0f      	cmp	r3, #15
 8001744:	d827      	bhi.n	8001796 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001746:	2200      	movs	r2, #0
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	2036      	movs	r0, #54	@ 0x36
 800174c:	f000 fd42 	bl	80021d4 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001750:	2036      	movs	r0, #54	@ 0x36
 8001752:	f000 fd59 	bl	8002208 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001756:	4a29      	ldr	r2, [pc, #164]	@ (80017fc <HAL_InitTick+0xc4>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800175c:	4b28      	ldr	r3, [pc, #160]	@ (8001800 <HAL_InitTick+0xc8>)
 800175e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001762:	4a27      	ldr	r2, [pc, #156]	@ (8001800 <HAL_InitTick+0xc8>)
 8001764:	f043 0310 	orr.w	r3, r3, #16
 8001768:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800176c:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <HAL_InitTick+0xc8>)
 800176e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800177a:	f107 0210 	add.w	r2, r7, #16
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f003 fd01 	bl	800518c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800178a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800178e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001790:	2b00      	cmp	r3, #0
 8001792:	d106      	bne.n	80017a2 <HAL_InitTick+0x6a>
 8001794:	e001      	b.n	800179a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e02b      	b.n	80017f2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800179a:	f003 fce1 	bl	8005160 <HAL_RCC_GetPCLK1Freq>
 800179e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80017a0:	e004      	b.n	80017ac <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017a2:	f003 fcdd 	bl	8005160 <HAL_RCC_GetPCLK1Freq>
 80017a6:	4603      	mov	r3, r0
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017ae:	4a15      	ldr	r2, [pc, #84]	@ (8001804 <HAL_InitTick+0xcc>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	0c9b      	lsrs	r3, r3, #18
 80017b6:	3b01      	subs	r3, #1
 80017b8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017ba:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <HAL_InitTick+0xd0>)
 80017bc:	4a13      	ldr	r2, [pc, #76]	@ (800180c <HAL_InitTick+0xd4>)
 80017be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <HAL_InitTick+0xd0>)
 80017c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017c8:	4a0f      	ldr	r2, [pc, #60]	@ (8001808 <HAL_InitTick+0xd0>)
 80017ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <HAL_InitTick+0xd0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <HAL_InitTick+0xd0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017da:	480b      	ldr	r0, [pc, #44]	@ (8001808 <HAL_InitTick+0xd0>)
 80017dc:	f003 fd18 	bl	8005210 <HAL_TIM_Base_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d104      	bne.n	80017f0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017e6:	4808      	ldr	r0, [pc, #32]	@ (8001808 <HAL_InitTick+0xd0>)
 80017e8:	f003 fd74 	bl	80052d4 <HAL_TIM_Base_Start_IT>
 80017ec:	4603      	mov	r3, r0
 80017ee:	e000      	b.n	80017f2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3740      	adds	r7, #64	@ 0x40
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	24000014 	.word	0x24000014
 8001800:	58024400 	.word	0x58024400
 8001804:	431bde83 	.word	0x431bde83
 8001808:	240000c4 	.word	0x240000c4
 800180c:	40001000 	.word	0x40001000

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <NMI_Handler+0x4>

08001818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <MemManage_Handler+0x4>

08001828 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <UsageFault_Handler+0x4>

08001838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800184c:	4802      	ldr	r0, [pc, #8]	@ (8001858 <TIM6_DAC_IRQHandler+0x10>)
 800184e:	f003 fdb9 	bl	80053c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	240000c4 	.word	0x240000c4

0800185c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001860:	4802      	ldr	r0, [pc, #8]	@ (800186c <ETH_IRQHandler+0x10>)
 8001862:	f001 f92b 	bl	8002abc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	24000190 	.word	0x24000190

08001870 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return 1;
 8001874:	2301      	movs	r3, #1
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <_kill>:

int _kill(int pid, int sig)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800188a:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <_kill+0x20>)
 800188c:	2216      	movs	r2, #22
 800188e:	601a      	str	r2, [r3, #0]
  return -1;
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	24010848 	.word	0x24010848

080018a4 <_exit>:

void _exit (int status)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffe5 	bl	8001880 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018b6:	bf00      	nop
 80018b8:	e7fd      	b.n	80018b6 <_exit+0x12>

080018ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	e00a      	b.n	80018e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018cc:	f3af 8000 	nop.w
 80018d0:	4601      	mov	r1, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	60ba      	str	r2, [r7, #8]
 80018d8:	b2ca      	uxtb	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dbf0      	blt.n	80018cc <_read+0x12>
  }

  return len;
 80018ea:	687b      	ldr	r3, [r7, #4]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e009      	b.n	800191a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	60ba      	str	r2, [r7, #8]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	dbf1      	blt.n	8001906 <_write+0x12>
  }
  return len;
 8001922:	687b      	ldr	r3, [r7, #4]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_close>:

int _close(int file)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001954:	605a      	str	r2, [r3, #4]
  return 0;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_isatty>:

int _isatty(int file)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800196c:	2301      	movs	r3, #1
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800197a:	b480      	push	{r7}
 800197c:	b085      	sub	sp, #20
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800199c:	4a14      	ldr	r2, [pc, #80]	@ (80019f0 <_sbrk+0x5c>)
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <_sbrk+0x60>)
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a8:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b0:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <_sbrk+0x64>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	@ (80019fc <_sbrk+0x68>)
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d205      	bcs.n	80019d0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80019c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <_sbrk+0x6c>)
 80019c6:	220c      	movs	r2, #12
 80019c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	e009      	b.n	80019e4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d6:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a06      	ldr	r2, [pc, #24]	@ (80019f8 <_sbrk+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	24080000 	.word	0x24080000
 80019f4:	00000400 	.word	0x00000400
 80019f8:	24000110 	.word	0x24000110
 80019fc:	24010858 	.word	0x24010858
 8001a00:	24010848 	.word	0x24010848

08001a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a08:	4b43      	ldr	r3, [pc, #268]	@ (8001b18 <SystemInit+0x114>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0e:	4a42      	ldr	r2, [pc, #264]	@ (8001b18 <SystemInit+0x114>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a18:	4b40      	ldr	r3, [pc, #256]	@ (8001b1c <SystemInit+0x118>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	2b06      	cmp	r3, #6
 8001a22:	d807      	bhi.n	8001a34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a24:	4b3d      	ldr	r3, [pc, #244]	@ (8001b1c <SystemInit+0x118>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 030f 	bic.w	r3, r3, #15
 8001a2c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b1c <SystemInit+0x118>)
 8001a2e:	f043 0307 	orr.w	r3, r3, #7
 8001a32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a34:	4b3a      	ldr	r3, [pc, #232]	@ (8001b20 <SystemInit+0x11c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a39      	ldr	r2, [pc, #228]	@ (8001b20 <SystemInit+0x11c>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a40:	4b37      	ldr	r3, [pc, #220]	@ (8001b20 <SystemInit+0x11c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a46:	4b36      	ldr	r3, [pc, #216]	@ (8001b20 <SystemInit+0x11c>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4935      	ldr	r1, [pc, #212]	@ (8001b20 <SystemInit+0x11c>)
 8001a4c:	4b35      	ldr	r3, [pc, #212]	@ (8001b24 <SystemInit+0x120>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a52:	4b32      	ldr	r3, [pc, #200]	@ (8001b1c <SystemInit+0x118>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b1c <SystemInit+0x118>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 030f 	bic.w	r3, r3, #15
 8001a66:	4a2d      	ldr	r2, [pc, #180]	@ (8001b1c <SystemInit+0x118>)
 8001a68:	f043 0307 	orr.w	r3, r3, #7
 8001a6c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b20 <SystemInit+0x11c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a74:	4b2a      	ldr	r3, [pc, #168]	@ (8001b20 <SystemInit+0x11c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a7a:	4b29      	ldr	r3, [pc, #164]	@ (8001b20 <SystemInit+0x11c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a80:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <SystemInit+0x11c>)
 8001a82:	4a29      	ldr	r2, [pc, #164]	@ (8001b28 <SystemInit+0x124>)
 8001a84:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a86:	4b26      	ldr	r3, [pc, #152]	@ (8001b20 <SystemInit+0x11c>)
 8001a88:	4a28      	ldr	r2, [pc, #160]	@ (8001b2c <SystemInit+0x128>)
 8001a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a8c:	4b24      	ldr	r3, [pc, #144]	@ (8001b20 <SystemInit+0x11c>)
 8001a8e:	4a28      	ldr	r2, [pc, #160]	@ (8001b30 <SystemInit+0x12c>)
 8001a90:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a92:	4b23      	ldr	r3, [pc, #140]	@ (8001b20 <SystemInit+0x11c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a98:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <SystemInit+0x11c>)
 8001a9a:	4a25      	ldr	r2, [pc, #148]	@ (8001b30 <SystemInit+0x12c>)
 8001a9c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a9e:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <SystemInit+0x11c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b20 <SystemInit+0x11c>)
 8001aa6:	4a22      	ldr	r2, [pc, #136]	@ (8001b30 <SystemInit+0x12c>)
 8001aa8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <SystemInit+0x11c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b20 <SystemInit+0x11c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b20 <SystemInit+0x11c>)
 8001ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001abc:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <SystemInit+0x11c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b34 <SystemInit+0x130>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <SystemInit+0x134>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ace:	d202      	bcs.n	8001ad6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b3c <SystemInit+0x138>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001ad6:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <SystemInit+0x11c>)
 8001ad8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001adc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d113      	bne.n	8001b0c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <SystemInit+0x11c>)
 8001ae6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001aea:	4a0d      	ldr	r2, [pc, #52]	@ (8001b20 <SystemInit+0x11c>)
 8001aec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001af0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001af4:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <SystemInit+0x13c>)
 8001af6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001afa:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <SystemInit+0x11c>)
 8001afe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b02:	4a07      	ldr	r2, [pc, #28]	@ (8001b20 <SystemInit+0x11c>)
 8001b04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b08:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00
 8001b1c:	52002000 	.word	0x52002000
 8001b20:	58024400 	.word	0x58024400
 8001b24:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b28:	02020200 	.word	0x02020200
 8001b2c:	01ff0000 	.word	0x01ff0000
 8001b30:	01010280 	.word	0x01010280
 8001b34:	5c001000 	.word	0x5c001000
 8001b38:	ffff0000 	.word	0xffff0000
 8001b3c:	51008108 	.word	0x51008108
 8001b40:	52004000 	.word	0x52004000

08001b44 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001b48:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <ExitRun0Mode+0x2c>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4a08      	ldr	r2, [pc, #32]	@ (8001b70 <ExitRun0Mode+0x2c>)
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001b54:	bf00      	nop
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <ExitRun0Mode+0x2c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f9      	beq.n	8001b56 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001b62:	bf00      	nop
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	58024800 	.word	0x58024800

08001b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b74:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001bb0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001b78:	f7ff ffe4 	bl	8001b44 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b7c:	f7ff ff42 	bl	8001a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b80:	480c      	ldr	r0, [pc, #48]	@ (8001bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b82:	490d      	ldr	r1, [pc, #52]	@ (8001bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b84:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b96:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b98:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f016 f891 	bl	8017ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001baa:	f7ff fb4d 	bl	8001248 <main>
  bx  lr
 8001bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bb0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001bb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bb8:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 8001bbc:	0801c2ac 	.word	0x0801c2ac
  ldr r2, =_sbss
 8001bc0:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 8001bc4:	24010858 	.word	0x24010858

08001bc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc8:	e7fe      	b.n	8001bc8 <ADC3_IRQHandler>

08001bca <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <LAN8742_RegisterBusIO+0x28>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <LAN8742_RegisterBusIO+0x28>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <LAN8742_RegisterBusIO+0x28>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	e014      	b.n	8001c22 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d139      	bne.n	8001cbe <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e01c      	b.n	8001c9e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	f107 020c 	add.w	r2, r7, #12
 8001c6c:	2112      	movs	r1, #18
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	4798      	blx	r3
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	da03      	bge.n	8001c80 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001c78:	f06f 0304 	mvn.w	r3, #4
 8001c7c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001c7e:	e00b      	b.n	8001c98 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d105      	bne.n	8001c98 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
         break;
 8001c96:	e005      	b.n	8001ca4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2b1f      	cmp	r3, #31
 8001ca2:	d9df      	bls.n	8001c64 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b1f      	cmp	r3, #31
 8001caa:	d902      	bls.n	8001cb2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001cac:	f06f 0302 	mvn.w	r3, #2
 8001cb0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001cbe:	693b      	ldr	r3, [r7, #16]
 }
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6810      	ldr	r0, [r2, #0]
 8001cdc:	f107 020c 	add.w	r2, r7, #12
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4798      	blx	r3
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	da02      	bge.n	8001cf0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001cea:	f06f 0304 	mvn.w	r3, #4
 8001cee:	e06e      	b.n	8001dce <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6810      	ldr	r0, [r2, #0]
 8001cf8:	f107 020c 	add.w	r2, r7, #12
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4798      	blx	r3
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	da02      	bge.n	8001d0c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d06:	f06f 0304 	mvn.w	r3, #4
 8001d0a:	e060      	b.n	8001dce <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e059      	b.n	8001dce <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6810      	ldr	r0, [r2, #0]
 8001d22:	f107 020c 	add.w	r2, r7, #12
 8001d26:	2100      	movs	r1, #0
 8001d28:	4798      	blx	r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	da02      	bge.n	8001d36 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d30:	f06f 0304 	mvn.w	r3, #4
 8001d34:	e04b      	b.n	8001dce <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d11b      	bne.n	8001d78 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d006      	beq.n	8001d58 <LAN8742_GetLinkState+0x90>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001d54:	2302      	movs	r3, #2
 8001d56:	e03a      	b.n	8001dce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e033      	b.n	8001dce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001d70:	2304      	movs	r3, #4
 8001d72:	e02c      	b.n	8001dce <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001d74:	2305      	movs	r3, #5
 8001d76:	e02a      	b.n	8001dce <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6810      	ldr	r0, [r2, #0]
 8001d80:	f107 020c 	add.w	r2, r7, #12
 8001d84:	211f      	movs	r1, #31
 8001d86:	4798      	blx	r3
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	da02      	bge.n	8001d94 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001d8e:	f06f 0304 	mvn.w	r3, #4
 8001d92:	e01c      	b.n	8001dce <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001d9e:	2306      	movs	r3, #6
 8001da0:	e015      	b.n	8001dce <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f003 031c 	and.w	r3, r3, #28
 8001da8:	2b18      	cmp	r3, #24
 8001daa:	d101      	bne.n	8001db0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001dac:	2302      	movs	r3, #2
 8001dae:	e00e      	b.n	8001dce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 031c 	and.w	r3, r3, #28
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d101      	bne.n	8001dbe <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e007      	b.n	8001dce <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f003 031c 	and.w	r3, r3, #28
 8001dc4:	2b14      	cmp	r3, #20
 8001dc6:	d101      	bne.n	8001dcc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	e000      	b.n	8001dce <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001dcc:	2305      	movs	r3, #5
    }
  }
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	@ 0x30
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d009      	beq.n	8001e00 <BSP_LED_Init+0x28>
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d006      	beq.n	8001e00 <BSP_LED_Init+0x28>
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d003      	beq.n	8001e00 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001df8:	f06f 0301 	mvn.w	r3, #1
 8001dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dfe:	e055      	b.n	8001eac <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10f      	bne.n	8001e26 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001e06:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb8 <BSP_LED_Init+0xe0>)
 8001e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb8 <BSP_LED_Init+0xe0>)
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
 8001e12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e16:	4b28      	ldr	r3, [pc, #160]	@ (8001eb8 <BSP_LED_Init+0xe0>)
 8001e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	e021      	b.n	8001e6a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d10f      	bne.n	8001e4c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001e2c:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <BSP_LED_Init+0xe0>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e32:	4a21      	ldr	r2, [pc, #132]	@ (8001eb8 <BSP_LED_Init+0xe0>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb8 <BSP_LED_Init+0xe0>)
 8001e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	e00e      	b.n	8001e6a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb8 <BSP_LED_Init+0xe0>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e52:	4a19      	ldr	r2, [pc, #100]	@ (8001eb8 <BSP_LED_Init+0xe0>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e5c:	4b16      	ldr	r3, [pc, #88]	@ (8001eb8 <BSP_LED_Init+0xe0>)
 8001e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	4a13      	ldr	r2, [pc, #76]	@ (8001ebc <BSP_LED_Init+0xe4>)
 8001e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e72:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec0 <BSP_LED_Init+0xe8>)
 8001e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e88:	f107 0218 	add.w	r2, r7, #24
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f001 ffa8 	bl	8003de4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <BSP_LED_Init+0xe8>)
 8001e98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	4a07      	ldr	r2, [pc, #28]	@ (8001ebc <BSP_LED_Init+0xe4>)
 8001ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f002 f94c 	bl	8004144 <HAL_GPIO_WritePin>
  }

  return ret;
 8001eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3730      	adds	r7, #48	@ 0x30
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	0801c074 	.word	0x0801c074
 8001ec0:	24000008 	.word	0x24000008

08001ec4 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d009      	beq.n	8001eec <BSP_LED_On+0x28>
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d006      	beq.n	8001eec <BSP_LED_On+0x28>
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d003      	beq.n	8001eec <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ee4:	f06f 0301 	mvn.w	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	e00b      	b.n	8001f04 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	4a08      	ldr	r2, [pc, #32]	@ (8001f10 <BSP_LED_On+0x4c>)
 8001ef0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	4a07      	ldr	r2, [pc, #28]	@ (8001f14 <BSP_LED_On+0x50>)
 8001ef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001efc:	2201      	movs	r2, #1
 8001efe:	4619      	mov	r1, r3
 8001f00:	f002 f920 	bl	8004144 <HAL_GPIO_WritePin>
  }

  return ret;
 8001f04:	68fb      	ldr	r3, [r7, #12]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	24000008 	.word	0x24000008
 8001f14:	0801c074 	.word	0x0801c074

08001f18 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d009      	beq.n	8001f40 <BSP_LED_Off+0x28>
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d006      	beq.n	8001f40 <BSP_LED_Off+0x28>
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d003      	beq.n	8001f40 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f38:	f06f 0301 	mvn.w	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	e00b      	b.n	8001f58 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	4a08      	ldr	r2, [pc, #32]	@ (8001f64 <BSP_LED_Off+0x4c>)
 8001f44:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	4a07      	ldr	r2, [pc, #28]	@ (8001f68 <BSP_LED_Off+0x50>)
 8001f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f50:	2200      	movs	r2, #0
 8001f52:	4619      	mov	r1, r3
 8001f54:	f002 f8f6 	bl	8004144 <HAL_GPIO_WritePin>
  }

  return ret;
 8001f58:	68fb      	ldr	r3, [r7, #12]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	24000008 	.word	0x24000008
 8001f68:	0801c074 	.word	0x0801c074

08001f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f72:	2003      	movs	r0, #3
 8001f74:	f000 f923 	bl	80021be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f78:	f002 ff48 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_Init+0x68>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	4913      	ldr	r1, [pc, #76]	@ (8001fd8 <HAL_Init+0x6c>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
 8001f94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f96:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <HAL_Init+0x68>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd8 <HAL_Init+0x6c>)
 8001fa0:	5cd3      	ldrb	r3, [r2, r3]
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fac:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <HAL_Init+0x70>)
 8001fae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe0 <HAL_Init+0x74>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fb6:	200f      	movs	r0, #15
 8001fb8:	f7ff fbbe 	bl	8001738 <HAL_InitTick>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e002      	b.n	8001fcc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc6:	f7ff fb99 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	58024400 	.word	0x58024400
 8001fd8:	0801c064 	.word	0x0801c064
 8001fdc:	24000004 	.word	0x24000004
 8001fe0:	24000000 	.word	0x24000000

08001fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_IncTick+0x20>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_IncTick+0x24>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a04      	ldr	r2, [pc, #16]	@ (8002008 <HAL_IncTick+0x24>)
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	24000018 	.word	0x24000018
 8002008:	24000114 	.word	0x24000114

0800200c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return uwTick;
 8002010:	4b03      	ldr	r3, [pc, #12]	@ (8002020 <HAL_GetTick+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	24000114 	.word	0x24000114

08002024 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <HAL_GetREVID+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0c1b      	lsrs	r3, r3, #16
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	5c001000 	.word	0x5c001000

0800203c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800204c:	4904      	ldr	r1, [pc, #16]	@ (8002060 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	58000400 	.word	0x58000400

08002064 <__NVIC_SetPriorityGrouping>:
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 800208e:	4313      	orrs	r3, r2
 8002090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002092:	4a04      	ldr	r2, [pc, #16]	@ (80020a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	60d3      	str	r3, [r2, #12]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00
 80020a8:	05fa0000 	.word	0x05fa0000

080020ac <__NVIC_GetPriorityGrouping>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4907      	ldr	r1, [pc, #28]	@ (8002100 <__NVIC_EnableIRQ+0x38>)
 80020e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	@ (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	@ (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	@ 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ff4c 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021e2:	f7ff ff63 	bl	80020ac <__NVIC_GetPriorityGrouping>
 80021e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	68b9      	ldr	r1, [r7, #8]
 80021ec:	6978      	ldr	r0, [r7, #20]
 80021ee:	f7ff ffb3 	bl	8002158 <NVIC_EncodePriority>
 80021f2:	4602      	mov	r2, r0
 80021f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff82 	bl	8002104 <__NVIC_SetPriority>
}
 8002200:	bf00      	nop
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff ff56 	bl	80020c8 <__NVIC_EnableIRQ>
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002228:	f3bf 8f5f 	dmb	sy
}
 800222c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800222e:	4b07      	ldr	r3, [pc, #28]	@ (800224c <HAL_MPU_Disable+0x28>)
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	4a06      	ldr	r2, [pc, #24]	@ (800224c <HAL_MPU_Disable+0x28>)
 8002234:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002238:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800223a:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <HAL_MPU_Disable+0x2c>)
 800223c:	2200      	movs	r2, #0
 800223e:	605a      	str	r2, [r3, #4]
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00
 8002250:	e000ed90 	.word	0xe000ed90

08002254 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800225c:	4a0b      	ldr	r2, [pc, #44]	@ (800228c <HAL_MPU_Enable+0x38>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002266:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <HAL_MPU_Enable+0x3c>)
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	4a09      	ldr	r2, [pc, #36]	@ (8002290 <HAL_MPU_Enable+0x3c>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002270:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002272:	f3bf 8f4f 	dsb	sy
}
 8002276:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002278:	f3bf 8f6f 	isb	sy
}
 800227c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000ed90 	.word	0xe000ed90
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	785a      	ldrb	r2, [r3, #1]
 80022a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <HAL_MPU_ConfigRegion+0x7c>)
 80022a2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80022a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002310 <HAL_MPU_ConfigRegion+0x7c>)
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	4a19      	ldr	r2, [pc, #100]	@ (8002310 <HAL_MPU_ConfigRegion+0x7c>)
 80022aa:	f023 0301 	bic.w	r3, r3, #1
 80022ae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80022b0:	4a17      	ldr	r2, [pc, #92]	@ (8002310 <HAL_MPU_ConfigRegion+0x7c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7b1b      	ldrb	r3, [r3, #12]
 80022bc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7adb      	ldrb	r3, [r3, #11]
 80022c2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7a9b      	ldrb	r3, [r3, #10]
 80022ca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80022cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7b5b      	ldrb	r3, [r3, #13]
 80022d2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80022d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7b9b      	ldrb	r3, [r3, #14]
 80022da:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80022dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7bdb      	ldrb	r3, [r3, #15]
 80022e2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80022e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7a5b      	ldrb	r3, [r3, #9]
 80022ea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80022ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7a1b      	ldrb	r3, [r3, #8]
 80022f2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80022f4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80022fc:	4a04      	ldr	r2, [pc, #16]	@ (8002310 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80022fe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002300:	6113      	str	r3, [r2, #16]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000ed90 	.word	0xe000ed90

08002314 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e0e3      	b.n	80024ee <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800232c:	2b00      	cmp	r3, #0
 800232e:	d106      	bne.n	800233e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f003 fd61 	bl	8005e00 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	4b6e      	ldr	r3, [pc, #440]	@ (80024f8 <HAL_ETH_Init+0x1e4>)
 8002340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002344:	4a6c      	ldr	r2, [pc, #432]	@ (80024f8 <HAL_ETH_Init+0x1e4>)
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800234e:	4b6a      	ldr	r3, [pc, #424]	@ (80024f8 <HAL_ETH_Init+0x1e4>)
 8002350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7a1b      	ldrb	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d103      	bne.n	800236c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002364:	2000      	movs	r0, #0
 8002366:	f7ff fe69 	bl	800203c <HAL_SYSCFG_ETHInterfaceSelect>
 800236a:	e003      	b.n	8002374 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800236c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002370:	f7ff fe64 	bl	800203c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002374:	4b61      	ldr	r3, [pc, #388]	@ (80024fc <HAL_ETH_Init+0x1e8>)
 8002376:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800238e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002390:	f7ff fe3c 	bl	800200c <HAL_GetTick>
 8002394:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002396:	e011      	b.n	80023bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002398:	f7ff fe38 	bl	800200c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80023a6:	d909      	bls.n	80023bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2204      	movs	r2, #4
 80023ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	22e0      	movs	r2, #224	@ 0xe0
 80023b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e098      	b.n	80024ee <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1e4      	bne.n	8002398 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 ff1c 	bl	800320c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80023d4:	f002 fe94 	bl	8005100 <HAL_RCC_GetHCLKFreq>
 80023d8:	4603      	mov	r3, r0
 80023da:	4a49      	ldr	r2, [pc, #292]	@ (8002500 <HAL_ETH_Init+0x1ec>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	0c9a      	lsrs	r2, r3, #18
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3a01      	subs	r2, #1
 80023e8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f001 f919 	bl	8003624 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80023fe:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800240a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800240e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	22e0      	movs	r2, #224	@ 0xe0
 800242a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e05d      	b.n	80024ee <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800243a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800243e:	4b31      	ldr	r3, [pc, #196]	@ (8002504 <HAL_ETH_Init+0x1f0>)
 8002440:	4013      	ands	r3, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6952      	ldr	r2, [r2, #20]
 8002446:	0051      	lsls	r1, r2, #1
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	430b      	orrs	r3, r1
 800244e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002452:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f001 f981 	bl	800375e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f001 f9c7 	bl	80037f0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	3305      	adds	r3, #5
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	021a      	lsls	r2, r3, #8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	3304      	adds	r3, #4
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	3303      	adds	r3, #3
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	061a      	lsls	r2, r3, #24
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	3302      	adds	r3, #2
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	041b      	lsls	r3, r3, #16
 8002494:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	3301      	adds	r3, #1
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80024a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80024ae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80024b0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <HAL_ETH_Init+0x1f4>)
 80024c2:	430b      	orrs	r3, r1
 80024c4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <HAL_ETH_Init+0x1f8>)
 80024d6:	430b      	orrs	r3, r1
 80024d8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2210      	movs	r2, #16
 80024e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	58024400 	.word	0x58024400
 80024fc:	58000400 	.word	0x58000400
 8002500:	431bde83 	.word	0x431bde83
 8002504:	ffff8001 	.word	0xffff8001
 8002508:	0c020060 	.word	0x0c020060
 800250c:	0c20c000 	.word	0x0c20c000

08002510 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800251e:	2b10      	cmp	r3, #16
 8002520:	d165      	bne.n	80025ee <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2220      	movs	r2, #32
 8002526:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2204      	movs	r2, #4
 8002534:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f9e4 	bl	8002904 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002544:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002554:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002560:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002570:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800257c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8002588:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800258c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0201 	orr.w	r2, r2, #1
 80025a0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0202 	orr.w	r2, r2, #2
 80025b2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025cc:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 80025d8:	430b      	orrs	r3, r1
 80025da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025de:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2240      	movs	r2, #64	@ 0x40
 80025e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	e000      	b.n	80025f0 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
  }
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002606:	2b40      	cmp	r3, #64	@ 0x40
 8002608:	d165      	bne.n	80026d6 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2220      	movs	r2, #32
 800260e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800261a:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b30      	ldr	r3, [pc, #192]	@ (80026e4 <HAL_ETH_Stop_IT+0xec>)
 8002624:	400b      	ands	r3, r1
 8002626:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800262a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002636:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002646:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002652:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002662:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0201 	bic.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0202 	bic.w	r2, r2, #2
 8002698:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800269a:	2300      	movs	r3, #0
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	e00e      	b.n	80026be <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	3212      	adds	r2, #18
 80026a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026aa:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3301      	adds	r3, #1
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d9ed      	bls.n	80026a0 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2210      	movs	r2, #16
 80026ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
  }
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	ffff2f3e 	.word	0xffff2f3e

080026e8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d109      	bne.n	800270c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fe:	f043 0201 	orr.w	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e03a      	b.n	8002782 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002712:	2b40      	cmp	r3, #64	@ 0x40
 8002714:	d134      	bne.n	8002780 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800271e:	2201      	movs	r2, #1
 8002720:	6839      	ldr	r1, [r7, #0]
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f001 f8c2 	bl	80038ac <ETH_Prepare_Tx_Descriptors>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002734:	f043 0202 	orr.w	r2, r3, #2
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e01f      	b.n	8002782 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8002742:	f3bf 8f4f 	dsb	sy
}
 8002746:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	629a      	str	r2, [r3, #40]	@ 0x28
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002756:	2b03      	cmp	r3, #3
 8002758:	d904      	bls.n	8002764 <HAL_ETH_Transmit_IT+0x7c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275e:	1f1a      	subs	r2, r3, #4
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3106      	adds	r1, #6
 8002770:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002774:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002778:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	e000      	b.n	8002782 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
  }
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b088      	sub	sp, #32
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0a2      	b.n	80028fc <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027bc:	2b40      	cmp	r3, #64	@ 0x40
 80027be:	d001      	beq.n	80027c4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e09b      	b.n	80028fc <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	3212      	adds	r2, #18
 80027d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027da:	f1c3 0304 	rsb	r3, r3, #4
 80027de:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80027e0:	e064      	b.n	80028ac <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d103      	bne.n	8002812 <HAL_ETH_ReadData+0x88>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d03a      	beq.n	8002888 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800284e:	2301      	movs	r3, #1
 8002850:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002862:	461a      	mov	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	b29b      	uxth	r3, r3
 8002868:	f003 fcb2 	bl	80061d0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	441a      	add	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	3301      	adds	r3, #1
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d902      	bls.n	800289a <HAL_ETH_ReadData+0x110>
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	3b04      	subs	r3, #4
 8002898:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	3212      	adds	r2, #18
 80028a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a4:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3301      	adds	r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	db06      	blt.n	80028c2 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d202      	bcs.n	80028c2 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d08f      	beq.n	80027e2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	441a      	add	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f814 	bl	8002904 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d108      	bne.n	80028fa <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e000      	b.n	80028fc <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3720      	adds	r7, #32
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002910:	2301      	movs	r3, #1
 8002912:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002918:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	3212      	adds	r2, #18
 8002920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002924:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800292a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800292c:	e038      	b.n	80029a0 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d112      	bne.n	800295c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002936:	f107 0308 	add.w	r3, r7, #8
 800293a:	4618      	mov	r0, r3
 800293c:	f003 fc18 	bl	8006170 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	74fb      	strb	r3, [r7, #19]
 800294a:	e007      	b.n	800295c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	461a      	mov	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	461a      	mov	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01e      	beq.n	80029a0 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002966:	2b00      	cmp	r3, #0
 8002968:	d004      	beq.n	8002974 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	e003      	b.n	800297c <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 800297a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	3301      	adds	r3, #1
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d902      	bls.n	800298e <ETH_UpdateDescriptor+0x8a>
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	3b04      	subs	r3, #4
 800298c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	3212      	adds	r2, #18
 8002994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002998:	617b      	str	r3, [r7, #20]
      desccount--;
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	3b01      	subs	r3, #1
 800299e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <ETH_UpdateDescriptor+0xa8>
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1c0      	bne.n	800292e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d01b      	beq.n	80029ee <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3303      	adds	r3, #3
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80029c0:	f3bf 8f5f 	dmb	sy
}
 80029c4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6919      	ldr	r1, [r3, #16]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	18ca      	adds	r2, r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029de:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80029ee:	bf00      	nop
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b086      	sub	sp, #24
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3318      	adds	r3, #24
 8002a02:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0e:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002a14:	e047      	b.n	8002aa6 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	3304      	adds	r3, #4
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	3301      	adds	r3, #1
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d902      	bls.n	8002a42 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002a46:	7bbb      	ldrb	r3, [r7, #14]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d02c      	beq.n	8002aa6 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68d9      	ldr	r1, [r3, #12]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	440b      	add	r3, r1
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	db1f      	blt.n	8002aa2 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	3304      	adds	r3, #4
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fc16 	bl	80062a0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	2200      	movs	r2, #0
 8002a80:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	3301      	adds	r3, #1
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d902      	bls.n	8002a94 <HAL_ETH_ReleaseTxPacket+0x9e>
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	3b04      	subs	r3, #4
 8002a92:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002aa0:	e001      	b.n	8002aa6 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1b1      	bne.n	8002a16 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002ada:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ae4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002ae8:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8002aea:	4b6d      	ldr	r3, [pc, #436]	@ (8002ca0 <HAL_ETH_IRQHandler+0x1e4>)
 8002aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aee:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d010      	beq.n	8002b1c <HAL_ETH_IRQHandler+0x60>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00b      	beq.n	8002b1c <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f248 0340 	movw	r3, #32832	@ 0x8040
 8002b12:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f002 feb2 	bl	8005880 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_ETH_IRQHandler+0x8c>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00b      	beq.n	8002b48 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8002b3e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f002 feac 	bl	80058a0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d047      	beq.n	8002be2 <HAL_ETH_IRQHandler+0x126>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d042      	beq.n	8002be2 <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b62:	f043 0208 	orr.w	r2, r3, #8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01e      	beq.n	8002bb4 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b7e:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8002b82:	f241 1302 	movw	r3, #4354	@ 0x1102
 8002b86:	4013      	ands	r3, r2
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b96:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002ba2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ba6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	22e0      	movs	r2, #224	@ 0xe0
 8002bae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002bb2:	e013      	b.n	8002bdc <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bbc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002bc0:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8002bd8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f002 fe6f 	bl	80058c0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d019      	beq.n	8002c2a <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfc:	f043 0210 	orr.w	r2, r3, #16
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	22e0      	movs	r2, #224	@ 0xe0
 8002c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f002 fe4f 	bl	80058c0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00f      	beq.n	8002c54 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c3c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f82c 	bl	8002ca4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00f      	beq.n	8002c7e <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002c66:	f003 020f 	and.w	r2, r3, #15
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f821 	bl	8002cb8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <HAL_ETH_IRQHandler+0x1e4>)
 8002c8a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002c8e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f81b 	bl	8002ccc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8002c96:	bf00      	nop
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	58000080 	.word	0x58000080

08002ca4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e03e      	b.n	8002d80 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d0a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	055b      	lsls	r3, r3, #21
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	041b      	lsls	r3, r3, #16
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f043 030c 	orr.w	r3, r3, #12
 8002d2e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002d42:	f7ff f963 	bl	800200c <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002d48:	e009      	b.n	8002d5e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002d4a:	f7ff f95f 	bl	800200c <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d58:	d901      	bls.n	8002d5e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e010      	b.n	8002d80 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1ed      	bne.n	8002d4a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
 8002d94:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e03c      	b.n	8002e24 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002db2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	055b      	lsls	r3, r3, #21
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f023 030c 	bic.w	r3, r3, #12
 8002dd6:	f043 0304 	orr.w	r3, r3, #4
 8002dda:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	4b10      	ldr	r3, [pc, #64]	@ (8002e2c <HAL_ETH_WritePHYRegister+0xa4>)
 8002dea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002dee:	4a0f      	ldr	r2, [pc, #60]	@ (8002e2c <HAL_ETH_WritePHYRegister+0xa4>)
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002df6:	f7ff f909 	bl	800200c <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002dfc:	e009      	b.n	8002e12 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002dfe:	f7ff f905 	bl	800200c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e0c:	d901      	bls.n	8002e12 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e008      	b.n	8002e24 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ed      	bne.n	8002dfe <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40028000 	.word	0x40028000

08002e30 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e1c3      	b.n	80031cc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 020c 	and.w	r2, r3, #12
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf0c      	ite	eq
 8002e8a:	2301      	moveq	r3, #1
 8002e8c:	2300      	movne	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf14      	ite	ne
 8002ea6:	2301      	movne	r3, #1
 8002ea8:	2300      	moveq	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002ed2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bf14      	ite	ne
 8002eda:	2301      	movne	r3, #1
 8002edc:	2300      	moveq	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf14      	ite	ne
 8002ef4:	2301      	movne	r3, #1
 8002ef6:	2300      	moveq	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bf14      	ite	ne
 8002f2a:	2301      	movne	r3, #1
 8002f2c:	2300      	moveq	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf0c      	ite	eq
 8002f44:	2301      	moveq	r3, #1
 8002f46:	2300      	movne	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bf14      	ite	ne
 8002f92:	2301      	movne	r3, #1
 8002f94:	2300      	moveq	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002fbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bf14      	ite	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	2300      	moveq	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf14      	ite	ne
 8003040:	2301      	movne	r3, #1
 8003042:	2300      	moveq	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003054:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	0e5b      	lsrs	r3, r3, #25
 800308e:	f003 021f 	and.w	r2, r3, #31
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 020f 	and.w	r2, r3, #15
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bf0c      	ite	eq
 80030ea:	2301      	moveq	r3, #1
 80030ec:	2300      	movne	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310c:	0c1b      	lsrs	r3, r3, #16
 800310e:	b29a      	uxth	r2, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf14      	ite	ne
 8003142:	2301      	movne	r3, #1
 8003144:	2300      	moveq	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003158:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003168:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf14      	ite	ne
 8003180:	2301      	movne	r3, #1
 8003182:	2300      	moveq	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	bf14      	ite	ne
 800319e:	2301      	movne	r3, #1
 80031a0:	2300      	moveq	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80031b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e00b      	b.n	8003204 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d105      	bne.n	8003202 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80031f6:	6839      	ldr	r1, [r7, #0]
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f871 	bl	80032e0 <ETH_SetMACConfig>

    return HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	e000      	b.n	8003204 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
  }
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800321c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003224:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003226:	f001 ff6b 	bl	8005100 <HAL_RCC_GetHCLKFreq>
 800322a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4a1a      	ldr	r2, [pc, #104]	@ (8003298 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d804      	bhi.n	800323e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e022      	b.n	8003284 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4a16      	ldr	r2, [pc, #88]	@ (800329c <HAL_ETH_SetMDIOClockRange+0x90>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d204      	bcs.n	8003250 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	e019      	b.n	8003284 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4a13      	ldr	r2, [pc, #76]	@ (80032a0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d915      	bls.n	8003284 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4a12      	ldr	r2, [pc, #72]	@ (80032a4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d804      	bhi.n	800326a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	e00c      	b.n	8003284 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4a0e      	ldr	r2, [pc, #56]	@ (80032a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d804      	bhi.n	800327c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	e003      	b.n	8003284 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003282:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800328e:	bf00      	nop
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	02160ebf 	.word	0x02160ebf
 800329c:	03938700 	.word	0x03938700
 80032a0:	05f5e0ff 	.word	0x05f5e0ff
 80032a4:	08f0d17f 	.word	0x08f0d17f
 80032a8:	0ee6b27f 	.word	0x0ee6b27f

080032ac <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80032f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	791b      	ldrb	r3, [r3, #4]
 80032f8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80032fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	7b1b      	ldrb	r3, [r3, #12]
 8003300:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003302:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	7b5b      	ldrb	r3, [r3, #13]
 8003308:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800330a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	7b9b      	ldrb	r3, [r3, #14]
 8003310:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003312:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	7bdb      	ldrb	r3, [r3, #15]
 8003318:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800331a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	7c12      	ldrb	r2, [r2, #16]
 8003320:	2a00      	cmp	r2, #0
 8003322:	d102      	bne.n	800332a <ETH_SetMACConfig+0x4a>
 8003324:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003328:	e000      	b.n	800332c <ETH_SetMACConfig+0x4c>
 800332a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800332c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	7c52      	ldrb	r2, [r2, #17]
 8003332:	2a00      	cmp	r2, #0
 8003334:	d102      	bne.n	800333c <ETH_SetMACConfig+0x5c>
 8003336:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800333a:	e000      	b.n	800333e <ETH_SetMACConfig+0x5e>
 800333c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800333e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	7c9b      	ldrb	r3, [r3, #18]
 8003344:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003346:	431a      	orrs	r2, r3
               macconf->Speed |
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800334c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003352:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	7f1b      	ldrb	r3, [r3, #28]
 8003358:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800335a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	7f5b      	ldrb	r3, [r3, #29]
 8003360:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003362:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	7f92      	ldrb	r2, [r2, #30]
 8003368:	2a00      	cmp	r2, #0
 800336a:	d102      	bne.n	8003372 <ETH_SetMACConfig+0x92>
 800336c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003370:	e000      	b.n	8003374 <ETH_SetMACConfig+0x94>
 8003372:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003374:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	7fdb      	ldrb	r3, [r3, #31]
 800337a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800337c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003384:	2a00      	cmp	r2, #0
 8003386:	d102      	bne.n	800338e <ETH_SetMACConfig+0xae>
 8003388:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800338c:	e000      	b.n	8003390 <ETH_SetMACConfig+0xb0>
 800338e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003390:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003396:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800339e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80033a0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b56      	ldr	r3, [pc, #344]	@ (800350c <ETH_SetMACConfig+0x22c>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	68f9      	ldr	r1, [r7, #12]
 80033ba:	430b      	orrs	r3, r1
 80033bc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80033ca:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80033cc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033d4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80033d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80033de:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80033e0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80033e8:	2a00      	cmp	r2, #0
 80033ea:	d102      	bne.n	80033f2 <ETH_SetMACConfig+0x112>
 80033ec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80033f0:	e000      	b.n	80033f4 <ETH_SetMACConfig+0x114>
 80033f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80033f4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	4b42      	ldr	r3, [pc, #264]	@ (8003510 <ETH_SetMACConfig+0x230>)
 8003406:	4013      	ands	r3, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	68f9      	ldr	r1, [r7, #12]
 800340e:	430b      	orrs	r3, r1
 8003410:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003418:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	4b3a      	ldr	r3, [pc, #232]	@ (8003514 <ETH_SetMACConfig+0x234>)
 800342a:	4013      	ands	r3, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	68f9      	ldr	r1, [r7, #12]
 8003432:	430b      	orrs	r3, r1
 8003434:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800343c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003442:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800344a:	2a00      	cmp	r2, #0
 800344c:	d101      	bne.n	8003452 <ETH_SetMACConfig+0x172>
 800344e:	2280      	movs	r2, #128	@ 0x80
 8003450:	e000      	b.n	8003454 <ETH_SetMACConfig+0x174>
 8003452:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003454:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003466:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800346a:	4013      	ands	r3, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	68f9      	ldr	r1, [r7, #12]
 8003472:	430b      	orrs	r3, r1
 8003474:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800347c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003484:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003492:	f023 0103 	bic.w	r1, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	430a      	orrs	r2, r1
 800349e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80034aa:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80034c6:	2a00      	cmp	r2, #0
 80034c8:	d101      	bne.n	80034ce <ETH_SetMACConfig+0x1ee>
 80034ca:	2240      	movs	r2, #64	@ 0x40
 80034cc:	e000      	b.n	80034d0 <ETH_SetMACConfig+0x1f0>
 80034ce:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80034d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80034d8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80034da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80034e2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80034f0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	00048083 	.word	0x00048083
 8003510:	c0f88000 	.word	0xc0f88000
 8003514:	fffffef0 	.word	0xfffffef0

08003518 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4b38      	ldr	r3, [pc, #224]	@ (8003610 <ETH_SetDMAConfig+0xf8>)
 800352e:	4013      	ands	r3, r2
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	6811      	ldr	r1, [r2, #0]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	430b      	orrs	r3, r1
 800353a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800353e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	791b      	ldrb	r3, [r3, #4]
 8003544:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800354a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	7b1b      	ldrb	r3, [r3, #12]
 8003550:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	4b2c      	ldr	r3, [pc, #176]	@ (8003614 <ETH_SetDMAConfig+0xfc>)
 8003562:	4013      	ands	r3, r2
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	68f9      	ldr	r1, [r7, #12]
 800356a:	430b      	orrs	r3, r1
 800356c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003570:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	7b5b      	ldrb	r3, [r3, #13]
 8003576:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003588:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800358c:	4b22      	ldr	r3, [pc, #136]	@ (8003618 <ETH_SetDMAConfig+0x100>)
 800358e:	4013      	ands	r3, r2
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	68f9      	ldr	r1, [r7, #12]
 8003596:	430b      	orrs	r3, r1
 8003598:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800359c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	7d1b      	ldrb	r3, [r3, #20]
 80035a8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80035aa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	7f5b      	ldrb	r3, [r3, #29]
 80035b0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035be:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80035c2:	4b16      	ldr	r3, [pc, #88]	@ (800361c <ETH_SetDMAConfig+0x104>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	68f9      	ldr	r1, [r7, #12]
 80035cc:	430b      	orrs	r3, r1
 80035ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035d2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	7f1b      	ldrb	r3, [r3, #28]
 80035da:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035ec:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80035f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <ETH_SetDMAConfig+0x108>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	68f9      	ldr	r1, [r7, #12]
 80035fa:	430b      	orrs	r3, r1
 80035fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003600:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	ffff87fd 	.word	0xffff87fd
 8003614:	ffff2ffe 	.word	0xffff2ffe
 8003618:	fffec000 	.word	0xfffec000
 800361c:	ffc0efef 	.word	0xffc0efef
 8003620:	7fc0ffff 	.word	0x7fc0ffff

08003624 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b0a4      	sub	sp, #144	@ 0x90
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800362c:	2301      	movs	r3, #1
 800362e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003632:	2300      	movs	r3, #0
 8003634:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003636:	2300      	movs	r3, #0
 8003638:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800363c:	2300      	movs	r3, #0
 800363e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003642:	2301      	movs	r3, #1
 8003644:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003654:	2300      	movs	r3, #0
 8003656:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003660:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003664:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003666:	2300      	movs	r3, #0
 8003668:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800366c:	2300      	movs	r3, #0
 800366e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003670:	2300      	movs	r3, #0
 8003672:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003676:	2300      	movs	r3, #0
 8003678:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800367c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003680:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003682:	2300      	movs	r3, #0
 8003684:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003688:	2300      	movs	r3, #0
 800368a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003692:	2300      	movs	r3, #0
 8003694:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003698:	2300      	movs	r3, #0
 800369a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800369e:	2300      	movs	r3, #0
 80036a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80036a6:	2300      	movs	r3, #0
 80036a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80036bc:	2320      	movs	r3, #32
 80036be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80036ce:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80036d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80036d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80036d8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80036e0:	2302      	movs	r3, #2
 80036e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80036e6:	2300      	movs	r3, #0
 80036e8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80036fe:	2300      	movs	r3, #0
 8003700:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003708:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800370c:	4619      	mov	r1, r3
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff fde6 	bl	80032e0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003714:	2301      	movs	r3, #1
 8003716:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003718:	2301      	movs	r3, #1
 800371a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800371c:	2300      	movs	r3, #0
 800371e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003720:	2300      	movs	r3, #0
 8003722:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003726:	2300      	movs	r3, #0
 8003728:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800372a:	2300      	movs	r3, #0
 800372c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800372e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003732:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003734:	2300      	movs	r3, #0
 8003736:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003738:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800373c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800373e:	2300      	movs	r3, #0
 8003740:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003744:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003748:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800374a:	f107 0308 	add.w	r3, r7, #8
 800374e:	4619      	mov	r1, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff fee1 	bl	8003518 <ETH_SetDMAConfig>
}
 8003756:	bf00      	nop
 8003758:	3790      	adds	r7, #144	@ 0x90
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e01d      	b.n	80037a8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68d9      	ldr	r1, [r3, #12]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4613      	mov	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4413      	add	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	440b      	add	r3, r1
 800377c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2200      	movs	r2, #0
 8003788:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2200      	movs	r2, #0
 8003794:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	3206      	adds	r2, #6
 800379e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	3301      	adds	r3, #1
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d9de      	bls.n	800376c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037bc:	461a      	mov	r2, r3
 80037be:	2303      	movs	r3, #3
 80037c0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037d0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037e0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e023      	b.n	8003846 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6919      	ldr	r1, [r3, #16]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4613      	mov	r3, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4413      	add	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	440b      	add	r3, r1
 800380e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2200      	movs	r2, #0
 800381a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2200      	movs	r2, #0
 8003826:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2200      	movs	r2, #0
 8003832:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	3212      	adds	r2, #18
 800383c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	3301      	adds	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b03      	cmp	r3, #3
 800384a:	d9d8      	bls.n	80037fe <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003872:	461a      	mov	r2, r3
 8003874:	2303      	movs	r3, #3
 8003876:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003886:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800389a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b091      	sub	sp, #68	@ 0x44
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3318      	adds	r3, #24
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038d6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80038e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038ee:	d007      	beq.n	8003900 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80038f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f4:	3304      	adds	r3, #4
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003900:	2302      	movs	r3, #2
 8003902:	e266      	b.n	8003dd2 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d044      	beq.n	800399a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	4b75      	ldr	r3, [pc, #468]	@ (8003aec <ETH_Prepare_Tx_Descriptors+0x240>)
 8003916:	4013      	ands	r3, r2
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800391c:	431a      	orrs	r2, r3
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800392a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800393c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d027      	beq.n	800399a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800394a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	b29a      	uxth	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003954:	041b      	lsls	r3, r3, #16
 8003956:	431a      	orrs	r2, r3
 8003958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003966:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003974:	431a      	orrs	r2, r3
 8003976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003978:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003988:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003998:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00e      	beq.n	80039c4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80039a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	4b51      	ldr	r3, [pc, #324]	@ (8003af0 <ETH_Prepare_Tx_Descriptors+0x244>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	6992      	ldr	r2, [r2, #24]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80039b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80039c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c2:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d036      	beq.n	8003a4a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80039dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80039e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80039e8:	f3bf 8f5f 	dmb	sy
}
 80039ec:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80039ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80039f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80039fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039fc:	3301      	adds	r3, #1
 80039fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d902      	bls.n	8003a0c <ETH_Prepare_Tx_Descriptors+0x160>
 8003a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a08:	3b04      	subs	r3, #4
 8003a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a14:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8003a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a18:	3301      	adds	r3, #1
 8003a1a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a28:	d10f      	bne.n	8003a4a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	6a3a      	ldr	r2, [r7, #32]
 8003a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a32:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003a34:	f3bf 8f5f 	dmb	sy
}
 8003a38:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a44:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003a46:	2302      	movs	r3, #2
 8003a48:	e1c3      	b.n	8003dd2 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a58:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	4b24      	ldr	r3, [pc, #144]	@ (8003af0 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a64:	6852      	ldr	r2, [r2, #4]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d012      	beq.n	8003a9a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a82:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	4b1a      	ldr	r3, [pc, #104]	@ (8003af4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a8e:	6852      	ldr	r2, [r2, #4]
 8003a90:	0412      	lsls	r2, r2, #16
 8003a92:	431a      	orrs	r2, r3
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	e008      	b.n	8003aac <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	4b13      	ldr	r3, [pc, #76]	@ (8003af4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aaa:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d021      	beq.n	8003afc <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	04db      	lsls	r3, r3, #19
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aca:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	4b09      	ldr	r3, [pc, #36]	@ (8003af8 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	69d2      	ldr	r2, [r2, #28]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003adc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	e02e      	b.n	8003b4a <ETH_Prepare_Tx_Descriptors+0x29e>
 8003aec:	ffff0000 	.word	0xffff0000
 8003af0:	ffffc000 	.word	0xffffc000
 8003af4:	c000ffff 	.word	0xc000ffff
 8003af8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	4b7b      	ldr	r3, [pc, #492]	@ (8003cf0 <ETH_Prepare_Tx_Descriptors+0x444>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	6852      	ldr	r2, [r2, #4]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b48:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b62:	431a      	orrs	r2, r3
 8003b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b66:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b72:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003b80:	f3bf 8f5f 	dmb	sy
}
 8003b84:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b90:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80da 	beq.w	8003d54 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb0:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003bb2:	e0cf      	b.n	8003d54 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbe:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003bc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d902      	bls.n	8003bd2 <ETH_Prepare_Tx_Descriptors+0x326>
 8003bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bce:	3b04      	subs	r3, #4
 8003bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bda:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003bf4:	d007      	beq.n	8003c06 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d029      	beq.n	8003c5a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c12:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003c14:	2300      	movs	r3, #0
 8003c16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c18:	e019      	b.n	8003c4e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8003c1a:	f3bf 8f5f 	dmb	sy
}
 8003c1e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2e:	3301      	adds	r3, #1
 8003c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d902      	bls.n	8003c3e <ETH_Prepare_Tx_Descriptors+0x392>
 8003c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c3a:	3b04      	subs	r3, #4
 8003c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c46:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d3e1      	bcc.n	8003c1a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8003c56:	2302      	movs	r3, #2
 8003c58:	e0bb      	b.n	8003dd2 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf4 <ETH_Prepare_Tx_Descriptors+0x448>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c7a:	6852      	ldr	r2, [r2, #4]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d012      	beq.n	8003cb0 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	461a      	mov	r2, r3
 8003c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c98:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	4b16      	ldr	r3, [pc, #88]	@ (8003cf8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ca4:	6852      	ldr	r2, [r2, #4]
 8003ca6:	0412      	lsls	r2, r2, #16
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	e008      	b.n	8003cc2 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc0:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d018      	beq.n	8003d00 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8003cfc <ETH_Prepare_Tx_Descriptors+0x450>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	69d2      	ldr	r2, [r2, #28]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cde:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	e020      	b.n	8003d30 <ETH_Prepare_Tx_Descriptors+0x484>
 8003cee:	bf00      	nop
 8003cf0:	ffff8000 	.word	0xffff8000
 8003cf4:	ffffc000 	.word	0xffffc000
 8003cf8:	c000ffff 	.word	0xc000ffff
 8003cfc:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	4b36      	ldr	r3, [pc, #216]	@ (8003de0 <ETH_Prepare_Tx_Descriptors+0x534>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	6852      	ldr	r2, [r2, #4]
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d10:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d32:	3301      	adds	r3, #1
 8003d34:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003d36:	f3bf 8f5f 	dmb	sy
}
 8003d3a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d46:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d52:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f47f af2b 	bne.w	8003bb4 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d006      	beq.n	8003d72 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	e005      	b.n	8003d7e <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d88:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d92:	3304      	adds	r3, #4
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d9e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da0:	f3ef 8310 	mrs	r3, PRIMASK
 8003da4:	613b      	str	r3, [r7, #16]
  return(result);
 8003da6:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	2301      	movs	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f383 8810 	msr	PRIMASK, r3
}
 8003db4:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	4413      	add	r3, r2
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	f383 8810 	msr	PRIMASK, r3
}
 8003dce:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3744      	adds	r7, #68	@ 0x44
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	ffff8000 	.word	0xffff8000

08003de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b089      	sub	sp, #36	@ 0x24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003df2:	4b89      	ldr	r3, [pc, #548]	@ (8004018 <HAL_GPIO_Init+0x234>)
 8003df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003df6:	e194      	b.n	8004122 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	fa01 f303 	lsl.w	r3, r1, r3
 8003e04:	4013      	ands	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8186 	beq.w	800411c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d005      	beq.n	8003e28 <HAL_GPIO_Init+0x44>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d130      	bne.n	8003e8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	2203      	movs	r2, #3
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e5e:	2201      	movs	r2, #1
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	091b      	lsrs	r3, r3, #4
 8003e74:	f003 0201 	and.w	r2, r3, #1
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d017      	beq.n	8003ec6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d123      	bne.n	8003f1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	08da      	lsrs	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3208      	adds	r2, #8
 8003eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	220f      	movs	r2, #15
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	08da      	lsrs	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3208      	adds	r2, #8
 8003f14:	69b9      	ldr	r1, [r7, #24]
 8003f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	2203      	movs	r2, #3
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0203 	and.w	r2, r3, #3
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 80e0 	beq.w	800411c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800401c <HAL_GPIO_Init+0x238>)
 8003f5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f62:	4a2e      	ldr	r2, [pc, #184]	@ (800401c <HAL_GPIO_Init+0x238>)
 8003f64:	f043 0302 	orr.w	r3, r3, #2
 8003f68:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800401c <HAL_GPIO_Init+0x238>)
 8003f6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f7a:	4a29      	ldr	r2, [pc, #164]	@ (8004020 <HAL_GPIO_Init+0x23c>)
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	089b      	lsrs	r3, r3, #2
 8003f80:	3302      	adds	r3, #2
 8003f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	220f      	movs	r2, #15
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43db      	mvns	r3, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a20      	ldr	r2, [pc, #128]	@ (8004024 <HAL_GPIO_Init+0x240>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d052      	beq.n	800404c <HAL_GPIO_Init+0x268>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8004028 <HAL_GPIO_Init+0x244>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d031      	beq.n	8004012 <HAL_GPIO_Init+0x22e>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800402c <HAL_GPIO_Init+0x248>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d02b      	beq.n	800400e <HAL_GPIO_Init+0x22a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004030 <HAL_GPIO_Init+0x24c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d025      	beq.n	800400a <HAL_GPIO_Init+0x226>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8004034 <HAL_GPIO_Init+0x250>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01f      	beq.n	8004006 <HAL_GPIO_Init+0x222>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8004038 <HAL_GPIO_Init+0x254>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d019      	beq.n	8004002 <HAL_GPIO_Init+0x21e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800403c <HAL_GPIO_Init+0x258>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <HAL_GPIO_Init+0x21a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a19      	ldr	r2, [pc, #100]	@ (8004040 <HAL_GPIO_Init+0x25c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00d      	beq.n	8003ffa <HAL_GPIO_Init+0x216>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a18      	ldr	r2, [pc, #96]	@ (8004044 <HAL_GPIO_Init+0x260>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d007      	beq.n	8003ff6 <HAL_GPIO_Init+0x212>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a17      	ldr	r2, [pc, #92]	@ (8004048 <HAL_GPIO_Init+0x264>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d101      	bne.n	8003ff2 <HAL_GPIO_Init+0x20e>
 8003fee:	2309      	movs	r3, #9
 8003ff0:	e02d      	b.n	800404e <HAL_GPIO_Init+0x26a>
 8003ff2:	230a      	movs	r3, #10
 8003ff4:	e02b      	b.n	800404e <HAL_GPIO_Init+0x26a>
 8003ff6:	2308      	movs	r3, #8
 8003ff8:	e029      	b.n	800404e <HAL_GPIO_Init+0x26a>
 8003ffa:	2307      	movs	r3, #7
 8003ffc:	e027      	b.n	800404e <HAL_GPIO_Init+0x26a>
 8003ffe:	2306      	movs	r3, #6
 8004000:	e025      	b.n	800404e <HAL_GPIO_Init+0x26a>
 8004002:	2305      	movs	r3, #5
 8004004:	e023      	b.n	800404e <HAL_GPIO_Init+0x26a>
 8004006:	2304      	movs	r3, #4
 8004008:	e021      	b.n	800404e <HAL_GPIO_Init+0x26a>
 800400a:	2303      	movs	r3, #3
 800400c:	e01f      	b.n	800404e <HAL_GPIO_Init+0x26a>
 800400e:	2302      	movs	r3, #2
 8004010:	e01d      	b.n	800404e <HAL_GPIO_Init+0x26a>
 8004012:	2301      	movs	r3, #1
 8004014:	e01b      	b.n	800404e <HAL_GPIO_Init+0x26a>
 8004016:	bf00      	nop
 8004018:	58000080 	.word	0x58000080
 800401c:	58024400 	.word	0x58024400
 8004020:	58000400 	.word	0x58000400
 8004024:	58020000 	.word	0x58020000
 8004028:	58020400 	.word	0x58020400
 800402c:	58020800 	.word	0x58020800
 8004030:	58020c00 	.word	0x58020c00
 8004034:	58021000 	.word	0x58021000
 8004038:	58021400 	.word	0x58021400
 800403c:	58021800 	.word	0x58021800
 8004040:	58021c00 	.word	0x58021c00
 8004044:	58022000 	.word	0x58022000
 8004048:	58022400 	.word	0x58022400
 800404c:	2300      	movs	r3, #0
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	f002 0203 	and.w	r2, r2, #3
 8004054:	0092      	lsls	r2, r2, #2
 8004056:	4093      	lsls	r3, r2
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800405e:	4938      	ldr	r1, [pc, #224]	@ (8004140 <HAL_GPIO_Init+0x35c>)
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	089b      	lsrs	r3, r3, #2
 8004064:	3302      	adds	r3, #2
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800406c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	43db      	mvns	r3, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4013      	ands	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004092:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800409a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80040c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	43db      	mvns	r3, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4013      	ands	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	43db      	mvns	r3, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4013      	ands	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	3301      	adds	r3, #1
 8004120:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	f47f ae63 	bne.w	8003df8 <HAL_GPIO_Init+0x14>
  }
}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	3724      	adds	r7, #36	@ 0x24
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	58000400 	.word	0x58000400

08004144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]
 8004150:	4613      	mov	r3, r2
 8004152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004154:	787b      	ldrb	r3, [r7, #1]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800415a:	887a      	ldrh	r2, [r7, #2]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004160:	e003      	b.n	800416a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004162:	887b      	ldrh	r3, [r7, #2]
 8004164:	041a      	lsls	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	619a      	str	r2, [r3, #24]
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004180:	4b19      	ldr	r3, [pc, #100]	@ (80041e8 <HAL_PWREx_ConfigSupply+0x70>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b04      	cmp	r3, #4
 800418a:	d00a      	beq.n	80041a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800418c:	4b16      	ldr	r3, [pc, #88]	@ (80041e8 <HAL_PWREx_ConfigSupply+0x70>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	d001      	beq.n	800419e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e01f      	b.n	80041de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e01d      	b.n	80041de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80041a2:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <HAL_PWREx_ConfigSupply+0x70>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f023 0207 	bic.w	r2, r3, #7
 80041aa:	490f      	ldr	r1, [pc, #60]	@ (80041e8 <HAL_PWREx_ConfigSupply+0x70>)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80041b2:	f7fd ff2b 	bl	800200c <HAL_GetTick>
 80041b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041b8:	e009      	b.n	80041ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80041ba:	f7fd ff27 	bl	800200c <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041c8:	d901      	bls.n	80041ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e007      	b.n	80041de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80041ce:	4b06      	ldr	r3, [pc, #24]	@ (80041e8 <HAL_PWREx_ConfigSupply+0x70>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041da:	d1ee      	bne.n	80041ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	58024800 	.word	0x58024800

080041ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08c      	sub	sp, #48	@ 0x30
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d102      	bne.n	8004200 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	f000 bc48 	b.w	8004a90 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8088 	beq.w	800431e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800420e:	4b99      	ldr	r3, [pc, #612]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004216:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004218:	4b96      	ldr	r3, [pc, #600]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 800421a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800421e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004220:	2b10      	cmp	r3, #16
 8004222:	d007      	beq.n	8004234 <HAL_RCC_OscConfig+0x48>
 8004224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004226:	2b18      	cmp	r3, #24
 8004228:	d111      	bne.n	800424e <HAL_RCC_OscConfig+0x62>
 800422a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d10c      	bne.n	800424e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004234:	4b8f      	ldr	r3, [pc, #572]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d06d      	beq.n	800431c <HAL_RCC_OscConfig+0x130>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d169      	bne.n	800431c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f000 bc21 	b.w	8004a90 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004256:	d106      	bne.n	8004266 <HAL_RCC_OscConfig+0x7a>
 8004258:	4b86      	ldr	r3, [pc, #536]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a85      	ldr	r2, [pc, #532]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 800425e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	e02e      	b.n	80042c4 <HAL_RCC_OscConfig+0xd8>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10c      	bne.n	8004288 <HAL_RCC_OscConfig+0x9c>
 800426e:	4b81      	ldr	r3, [pc, #516]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a80      	ldr	r2, [pc, #512]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	4b7e      	ldr	r3, [pc, #504]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a7d      	ldr	r2, [pc, #500]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004280:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e01d      	b.n	80042c4 <HAL_RCC_OscConfig+0xd8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004290:	d10c      	bne.n	80042ac <HAL_RCC_OscConfig+0xc0>
 8004292:	4b78      	ldr	r3, [pc, #480]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a77      	ldr	r2, [pc, #476]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004298:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	4b75      	ldr	r3, [pc, #468]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a74      	ldr	r2, [pc, #464]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 80042a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	e00b      	b.n	80042c4 <HAL_RCC_OscConfig+0xd8>
 80042ac:	4b71      	ldr	r3, [pc, #452]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a70      	ldr	r2, [pc, #448]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 80042b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	4b6e      	ldr	r3, [pc, #440]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a6d      	ldr	r2, [pc, #436]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 80042be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d013      	beq.n	80042f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fd fe9e 	bl	800200c <HAL_GetTick>
 80042d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d4:	f7fd fe9a 	bl	800200c <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b64      	cmp	r3, #100	@ 0x64
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e3d4      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042e6:	4b63      	ldr	r3, [pc, #396]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0xe8>
 80042f2:	e014      	b.n	800431e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fd fe8a 	bl	800200c <HAL_GetTick>
 80042f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042fc:	f7fd fe86 	bl	800200c <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b64      	cmp	r3, #100	@ 0x64
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e3c0      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800430e:	4b59      	ldr	r3, [pc, #356]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0x110>
 800431a:	e000      	b.n	800431e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800431c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 80ca 	beq.w	80044c0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800432c:	4b51      	ldr	r3, [pc, #324]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004334:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004336:	4b4f      	ldr	r3, [pc, #316]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_RCC_OscConfig+0x166>
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	2b18      	cmp	r3, #24
 8004346:	d156      	bne.n	80043f6 <HAL_RCC_OscConfig+0x20a>
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d151      	bne.n	80043f6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004352:	4b48      	ldr	r3, [pc, #288]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_RCC_OscConfig+0x17e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e392      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800436a:	4b42      	ldr	r3, [pc, #264]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 0219 	bic.w	r2, r3, #25
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	493f      	ldr	r1, [pc, #252]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004378:	4313      	orrs	r3, r2
 800437a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fd fe46 	bl	800200c <HAL_GetTick>
 8004380:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004384:	f7fd fe42 	bl	800200c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e37c      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004396:	4b37      	ldr	r3, [pc, #220]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a2:	f7fd fe3f 	bl	8002024 <HAL_GetREVID>
 80043a6:	4603      	mov	r3, r0
 80043a8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d817      	bhi.n	80043e0 <HAL_RCC_OscConfig+0x1f4>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	2b40      	cmp	r3, #64	@ 0x40
 80043b6:	d108      	bne.n	80043ca <HAL_RCC_OscConfig+0x1de>
 80043b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80043c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 80043c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043c8:	e07a      	b.n	80044c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	031b      	lsls	r3, r3, #12
 80043d8:	4926      	ldr	r1, [pc, #152]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043de:	e06f      	b.n	80044c0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e0:	4b24      	ldr	r3, [pc, #144]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	061b      	lsls	r3, r3, #24
 80043ee:	4921      	ldr	r1, [pc, #132]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043f4:	e064      	b.n	80044c0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d047      	beq.n	800448e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 0219 	bic.w	r2, r3, #25
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	491a      	ldr	r1, [pc, #104]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 800440c:	4313      	orrs	r3, r2
 800440e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fd fdfc 	bl	800200c <HAL_GetTick>
 8004414:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004418:	f7fd fdf8 	bl	800200c <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e332      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800442a:	4b12      	ldr	r3, [pc, #72]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004436:	f7fd fdf5 	bl	8002024 <HAL_GetREVID>
 800443a:	4603      	mov	r3, r0
 800443c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004440:	4293      	cmp	r3, r2
 8004442:	d819      	bhi.n	8004478 <HAL_RCC_OscConfig+0x28c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b40      	cmp	r3, #64	@ 0x40
 800444a:	d108      	bne.n	800445e <HAL_RCC_OscConfig+0x272>
 800444c:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004454:	4a07      	ldr	r2, [pc, #28]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800445a:	6053      	str	r3, [r2, #4]
 800445c:	e030      	b.n	80044c0 <HAL_RCC_OscConfig+0x2d4>
 800445e:	4b05      	ldr	r3, [pc, #20]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	031b      	lsls	r3, r3, #12
 800446c:	4901      	ldr	r1, [pc, #4]	@ (8004474 <HAL_RCC_OscConfig+0x288>)
 800446e:	4313      	orrs	r3, r2
 8004470:	604b      	str	r3, [r1, #4]
 8004472:	e025      	b.n	80044c0 <HAL_RCC_OscConfig+0x2d4>
 8004474:	58024400 	.word	0x58024400
 8004478:	4b9a      	ldr	r3, [pc, #616]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	061b      	lsls	r3, r3, #24
 8004486:	4997      	ldr	r1, [pc, #604]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 8004488:	4313      	orrs	r3, r2
 800448a:	604b      	str	r3, [r1, #4]
 800448c:	e018      	b.n	80044c0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800448e:	4b95      	ldr	r3, [pc, #596]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a94      	ldr	r2, [pc, #592]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449a:	f7fd fdb7 	bl	800200c <HAL_GetTick>
 800449e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a2:	f7fd fdb3 	bl	800200c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e2ed      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80044b4:	4b8b      	ldr	r3, [pc, #556]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f0      	bne.n	80044a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 80a9 	beq.w	8004620 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044ce:	4b85      	ldr	r3, [pc, #532]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044d8:	4b82      	ldr	r3, [pc, #520]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80044da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044dc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d007      	beq.n	80044f4 <HAL_RCC_OscConfig+0x308>
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b18      	cmp	r3, #24
 80044e8:	d13a      	bne.n	8004560 <HAL_RCC_OscConfig+0x374>
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d135      	bne.n	8004560 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044f4:	4b7b      	ldr	r3, [pc, #492]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_RCC_OscConfig+0x320>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	2b80      	cmp	r3, #128	@ 0x80
 8004506:	d001      	beq.n	800450c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e2c1      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800450c:	f7fd fd8a 	bl	8002024 <HAL_GetREVID>
 8004510:	4603      	mov	r3, r0
 8004512:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004516:	4293      	cmp	r3, r2
 8004518:	d817      	bhi.n	800454a <HAL_RCC_OscConfig+0x35e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	2b20      	cmp	r3, #32
 8004520:	d108      	bne.n	8004534 <HAL_RCC_OscConfig+0x348>
 8004522:	4b70      	ldr	r3, [pc, #448]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800452a:	4a6e      	ldr	r2, [pc, #440]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 800452c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004530:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004532:	e075      	b.n	8004620 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004534:	4b6b      	ldr	r3, [pc, #428]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	069b      	lsls	r3, r3, #26
 8004542:	4968      	ldr	r1, [pc, #416]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 8004544:	4313      	orrs	r3, r2
 8004546:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004548:	e06a      	b.n	8004620 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800454a:	4b66      	ldr	r3, [pc, #408]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	061b      	lsls	r3, r3, #24
 8004558:	4962      	ldr	r1, [pc, #392]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 800455a:	4313      	orrs	r3, r2
 800455c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800455e:	e05f      	b.n	8004620 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d042      	beq.n	80045ee <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004568:	4b5e      	ldr	r3, [pc, #376]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a5d      	ldr	r2, [pc, #372]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 800456e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fd fd4a 	bl	800200c <HAL_GetTick>
 8004578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800457c:	f7fd fd46 	bl	800200c <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e280      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800458e:	4b55      	ldr	r3, [pc, #340]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800459a:	f7fd fd43 	bl	8002024 <HAL_GetREVID>
 800459e:	4603      	mov	r3, r0
 80045a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d817      	bhi.n	80045d8 <HAL_RCC_OscConfig+0x3ec>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d108      	bne.n	80045c2 <HAL_RCC_OscConfig+0x3d6>
 80045b0:	4b4c      	ldr	r3, [pc, #304]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80045b8:	4a4a      	ldr	r2, [pc, #296]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80045ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045be:	6053      	str	r3, [r2, #4]
 80045c0:	e02e      	b.n	8004620 <HAL_RCC_OscConfig+0x434>
 80045c2:	4b48      	ldr	r3, [pc, #288]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	069b      	lsls	r3, r3, #26
 80045d0:	4944      	ldr	r1, [pc, #272]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	604b      	str	r3, [r1, #4]
 80045d6:	e023      	b.n	8004620 <HAL_RCC_OscConfig+0x434>
 80045d8:	4b42      	ldr	r3, [pc, #264]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	061b      	lsls	r3, r3, #24
 80045e6:	493f      	ldr	r1, [pc, #252]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60cb      	str	r3, [r1, #12]
 80045ec:	e018      	b.n	8004620 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80045ee:	4b3d      	ldr	r3, [pc, #244]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a3c      	ldr	r2, [pc, #240]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80045f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fa:	f7fd fd07 	bl	800200c <HAL_GetTick>
 80045fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004602:	f7fd fd03 	bl	800200c <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e23d      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004614:	4b33      	ldr	r3, [pc, #204]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f0      	bne.n	8004602 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d036      	beq.n	800469a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d019      	beq.n	8004668 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004634:	4b2b      	ldr	r3, [pc, #172]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 8004636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004638:	4a2a      	ldr	r2, [pc, #168]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004640:	f7fd fce4 	bl	800200c <HAL_GetTick>
 8004644:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004648:	f7fd fce0 	bl	800200c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e21a      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800465a:	4b22      	ldr	r3, [pc, #136]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 800465c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <HAL_RCC_OscConfig+0x45c>
 8004666:	e018      	b.n	800469a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004668:	4b1e      	ldr	r3, [pc, #120]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 800466a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800466c:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 800466e:	f023 0301 	bic.w	r3, r3, #1
 8004672:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004674:	f7fd fcca 	bl	800200c <HAL_GetTick>
 8004678:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467c:	f7fd fcc6 	bl	800200c <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e200      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800468e:	4b15      	ldr	r3, [pc, #84]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 8004690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d039      	beq.n	800471a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d01c      	beq.n	80046e8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046ae:	4b0d      	ldr	r3, [pc, #52]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a0c      	ldr	r2, [pc, #48]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80046b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046ba:	f7fd fca7 	bl	800200c <HAL_GetTick>
 80046be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046c2:	f7fd fca3 	bl	800200c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e1dd      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80046d4:	4b03      	ldr	r3, [pc, #12]	@ (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x4d6>
 80046e0:	e01b      	b.n	800471a <HAL_RCC_OscConfig+0x52e>
 80046e2:	bf00      	nop
 80046e4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046e8:	4b9b      	ldr	r3, [pc, #620]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a9a      	ldr	r2, [pc, #616]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80046ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046f4:	f7fd fc8a 	bl	800200c <HAL_GetTick>
 80046f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046fc:	f7fd fc86 	bl	800200c <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e1c0      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800470e:	4b92      	ldr	r3, [pc, #584]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 8081 	beq.w	800482a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004728:	4b8c      	ldr	r3, [pc, #560]	@ (800495c <HAL_RCC_OscConfig+0x770>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a8b      	ldr	r2, [pc, #556]	@ (800495c <HAL_RCC_OscConfig+0x770>)
 800472e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004734:	f7fd fc6a 	bl	800200c <HAL_GetTick>
 8004738:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473c:	f7fd fc66 	bl	800200c <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b64      	cmp	r3, #100	@ 0x64
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e1a0      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800474e:	4b83      	ldr	r3, [pc, #524]	@ (800495c <HAL_RCC_OscConfig+0x770>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f0      	beq.n	800473c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d106      	bne.n	8004770 <HAL_RCC_OscConfig+0x584>
 8004762:	4b7d      	ldr	r3, [pc, #500]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004766:	4a7c      	ldr	r2, [pc, #496]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	6713      	str	r3, [r2, #112]	@ 0x70
 800476e:	e02d      	b.n	80047cc <HAL_RCC_OscConfig+0x5e0>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10c      	bne.n	8004792 <HAL_RCC_OscConfig+0x5a6>
 8004778:	4b77      	ldr	r3, [pc, #476]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477c:	4a76      	ldr	r2, [pc, #472]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	6713      	str	r3, [r2, #112]	@ 0x70
 8004784:	4b74      	ldr	r3, [pc, #464]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004788:	4a73      	ldr	r2, [pc, #460]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 800478a:	f023 0304 	bic.w	r3, r3, #4
 800478e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004790:	e01c      	b.n	80047cc <HAL_RCC_OscConfig+0x5e0>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b05      	cmp	r3, #5
 8004798:	d10c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x5c8>
 800479a:	4b6f      	ldr	r3, [pc, #444]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479e:	4a6e      	ldr	r2, [pc, #440]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80047a0:	f043 0304 	orr.w	r3, r3, #4
 80047a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047aa:	4a6b      	ldr	r2, [pc, #428]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b2:	e00b      	b.n	80047cc <HAL_RCC_OscConfig+0x5e0>
 80047b4:	4b68      	ldr	r3, [pc, #416]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80047b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b8:	4a67      	ldr	r2, [pc, #412]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	6713      	str	r3, [r2, #112]	@ 0x70
 80047c0:	4b65      	ldr	r3, [pc, #404]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c4:	4a64      	ldr	r2, [pc, #400]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80047c6:	f023 0304 	bic.w	r3, r3, #4
 80047ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d015      	beq.n	8004800 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fd fc1a 	bl	800200c <HAL_GetTick>
 80047d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047dc:	f7fd fc16 	bl	800200c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e14e      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047f2:	4b59      	ldr	r3, [pc, #356]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0ee      	beq.n	80047dc <HAL_RCC_OscConfig+0x5f0>
 80047fe:	e014      	b.n	800482a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004800:	f7fd fc04 	bl	800200c <HAL_GetTick>
 8004804:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004806:	e00a      	b.n	800481e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004808:	f7fd fc00 	bl	800200c <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e138      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800481e:	4b4e      	ldr	r3, [pc, #312]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1ee      	bne.n	8004808 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 812d 	beq.w	8004a8e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004834:	4b48      	ldr	r3, [pc, #288]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800483c:	2b18      	cmp	r3, #24
 800483e:	f000 80bd 	beq.w	80049bc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	2b02      	cmp	r3, #2
 8004848:	f040 809e 	bne.w	8004988 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484c:	4b42      	ldr	r3, [pc, #264]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a41      	ldr	r2, [pc, #260]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fd fbd8 	bl	800200c <HAL_GetTick>
 800485c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004860:	f7fd fbd4 	bl	800200c <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e10e      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004872:	4b39      	ldr	r3, [pc, #228]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800487e:	4b36      	ldr	r3, [pc, #216]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004880:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004882:	4b37      	ldr	r3, [pc, #220]	@ (8004960 <HAL_RCC_OscConfig+0x774>)
 8004884:	4013      	ands	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800488e:	0112      	lsls	r2, r2, #4
 8004890:	430a      	orrs	r2, r1
 8004892:	4931      	ldr	r1, [pc, #196]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004894:	4313      	orrs	r3, r2
 8004896:	628b      	str	r3, [r1, #40]	@ 0x28
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489c:	3b01      	subs	r3, #1
 800489e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a6:	3b01      	subs	r3, #1
 80048a8:	025b      	lsls	r3, r3, #9
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b2:	3b01      	subs	r3, #1
 80048b4:	041b      	lsls	r3, r3, #16
 80048b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c0:	3b01      	subs	r3, #1
 80048c2:	061b      	lsls	r3, r3, #24
 80048c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80048c8:	4923      	ldr	r1, [pc, #140]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80048ce:	4b22      	ldr	r3, [pc, #136]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80048d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d2:	4a21      	ldr	r2, [pc, #132]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048da:	4b1f      	ldr	r3, [pc, #124]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80048dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048de:	4b21      	ldr	r3, [pc, #132]	@ (8004964 <HAL_RCC_OscConfig+0x778>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80048e6:	00d2      	lsls	r2, r2, #3
 80048e8:	491b      	ldr	r1, [pc, #108]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80048ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f2:	f023 020c 	bic.w	r2, r3, #12
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	4917      	ldr	r1, [pc, #92]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004900:	4b15      	ldr	r3, [pc, #84]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004904:	f023 0202 	bic.w	r2, r3, #2
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490c:	4912      	ldr	r1, [pc, #72]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 800490e:	4313      	orrs	r3, r2
 8004910:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004912:	4b11      	ldr	r3, [pc, #68]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	4a10      	ldr	r2, [pc, #64]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800491c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800491e:	4b0e      	ldr	r3, [pc, #56]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004922:	4a0d      	ldr	r2, [pc, #52]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800492a:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 800492c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492e:	4a0a      	ldr	r2, [pc, #40]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004930:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004936:	4b08      	ldr	r3, [pc, #32]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493a:	4a07      	ldr	r2, [pc, #28]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004942:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a04      	ldr	r2, [pc, #16]	@ (8004958 <HAL_RCC_OscConfig+0x76c>)
 8004948:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800494c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494e:	f7fd fb5d 	bl	800200c <HAL_GetTick>
 8004952:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004954:	e011      	b.n	800497a <HAL_RCC_OscConfig+0x78e>
 8004956:	bf00      	nop
 8004958:	58024400 	.word	0x58024400
 800495c:	58024800 	.word	0x58024800
 8004960:	fffffc0c 	.word	0xfffffc0c
 8004964:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004968:	f7fd fb50 	bl	800200c <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e08a      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800497a:	4b47      	ldr	r3, [pc, #284]	@ (8004a98 <HAL_RCC_OscConfig+0x8ac>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x77c>
 8004986:	e082      	b.n	8004a8e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004988:	4b43      	ldr	r3, [pc, #268]	@ (8004a98 <HAL_RCC_OscConfig+0x8ac>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a42      	ldr	r2, [pc, #264]	@ (8004a98 <HAL_RCC_OscConfig+0x8ac>)
 800498e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fd fb3a 	bl	800200c <HAL_GetTick>
 8004998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499c:	f7fd fb36 	bl	800200c <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e070      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ae:	4b3a      	ldr	r3, [pc, #232]	@ (8004a98 <HAL_RCC_OscConfig+0x8ac>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x7b0>
 80049ba:	e068      	b.n	8004a8e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80049bc:	4b36      	ldr	r3, [pc, #216]	@ (8004a98 <HAL_RCC_OscConfig+0x8ac>)
 80049be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049c2:	4b35      	ldr	r3, [pc, #212]	@ (8004a98 <HAL_RCC_OscConfig+0x8ac>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d031      	beq.n	8004a34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f003 0203 	and.w	r2, r3, #3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d12a      	bne.n	8004a34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d122      	bne.n	8004a34 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d11a      	bne.n	8004a34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	0a5b      	lsrs	r3, r3, #9
 8004a02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d111      	bne.n	8004a34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	0c1b      	lsrs	r3, r3, #16
 8004a14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d108      	bne.n	8004a34 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	0e1b      	lsrs	r3, r3, #24
 8004a26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e02b      	b.n	8004a90 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004a38:	4b17      	ldr	r3, [pc, #92]	@ (8004a98 <HAL_RCC_OscConfig+0x8ac>)
 8004a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a3c:	08db      	lsrs	r3, r3, #3
 8004a3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a42:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d01f      	beq.n	8004a8e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004a4e:	4b12      	ldr	r3, [pc, #72]	@ (8004a98 <HAL_RCC_OscConfig+0x8ac>)
 8004a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a52:	4a11      	ldr	r2, [pc, #68]	@ (8004a98 <HAL_RCC_OscConfig+0x8ac>)
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a5a:	f7fd fad7 	bl	800200c <HAL_GetTick>
 8004a5e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004a60:	bf00      	nop
 8004a62:	f7fd fad3 	bl	800200c <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d0f9      	beq.n	8004a62 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a98 <HAL_RCC_OscConfig+0x8ac>)
 8004a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a72:	4b0a      	ldr	r3, [pc, #40]	@ (8004a9c <HAL_RCC_OscConfig+0x8b0>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a7a:	00d2      	lsls	r2, r2, #3
 8004a7c:	4906      	ldr	r1, [pc, #24]	@ (8004a98 <HAL_RCC_OscConfig+0x8ac>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004a82:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <HAL_RCC_OscConfig+0x8ac>)
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	4a04      	ldr	r2, [pc, #16]	@ (8004a98 <HAL_RCC_OscConfig+0x8ac>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3730      	adds	r7, #48	@ 0x30
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	58024400 	.word	0x58024400
 8004a9c:	ffff0007 	.word	0xffff0007

08004aa0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e19c      	b.n	8004dee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b8a      	ldr	r3, [pc, #552]	@ (8004ce0 <HAL_RCC_ClockConfig+0x240>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d910      	bls.n	8004ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b87      	ldr	r3, [pc, #540]	@ (8004ce0 <HAL_RCC_ClockConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f023 020f 	bic.w	r2, r3, #15
 8004aca:	4985      	ldr	r1, [pc, #532]	@ (8004ce0 <HAL_RCC_ClockConfig+0x240>)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	4b83      	ldr	r3, [pc, #524]	@ (8004ce0 <HAL_RCC_ClockConfig+0x240>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e184      	b.n	8004dee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d010      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d908      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b00:	4b78      	ldr	r3, [pc, #480]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	4975      	ldr	r1, [pc, #468]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d010      	beq.n	8004b40 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695a      	ldr	r2, [r3, #20]
 8004b22:	4b70      	ldr	r3, [pc, #448]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d908      	bls.n	8004b40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	496a      	ldr	r1, [pc, #424]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d010      	beq.n	8004b6e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699a      	ldr	r2, [r3, #24]
 8004b50:	4b64      	ldr	r3, [pc, #400]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d908      	bls.n	8004b6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b5c:	4b61      	ldr	r3, [pc, #388]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	495e      	ldr	r1, [pc, #376]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d010      	beq.n	8004b9c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69da      	ldr	r2, [r3, #28]
 8004b7e:	4b59      	ldr	r3, [pc, #356]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d908      	bls.n	8004b9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b8a:	4b56      	ldr	r3, [pc, #344]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	4953      	ldr	r1, [pc, #332]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d010      	beq.n	8004bca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	4b4d      	ldr	r3, [pc, #308]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d908      	bls.n	8004bca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb8:	4b4a      	ldr	r3, [pc, #296]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	f023 020f 	bic.w	r2, r3, #15
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4947      	ldr	r1, [pc, #284]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d055      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004bd6:	4b43      	ldr	r3, [pc, #268]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	4940      	ldr	r1, [pc, #256]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d107      	bne.n	8004c00 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d121      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0f6      	b.n	8004dee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d107      	bne.n	8004c18 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c08:	4b36      	ldr	r3, [pc, #216]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d115      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0ea      	b.n	8004dee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d107      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c20:	4b30      	ldr	r3, [pc, #192]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0de      	b.n	8004dee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c30:	4b2c      	ldr	r3, [pc, #176]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0d6      	b.n	8004dee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c40:	4b28      	ldr	r3, [pc, #160]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f023 0207 	bic.w	r2, r3, #7
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4925      	ldr	r1, [pc, #148]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c52:	f7fd f9db 	bl	800200c <HAL_GetTick>
 8004c56:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c58:	e00a      	b.n	8004c70 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c5a:	f7fd f9d7 	bl	800200c <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e0be      	b.n	8004dee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c70:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d1eb      	bne.n	8004c5a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d010      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	4b14      	ldr	r3, [pc, #80]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d208      	bcs.n	8004cb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c9e:	4b11      	ldr	r3, [pc, #68]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f023 020f 	bic.w	r2, r3, #15
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	490e      	ldr	r1, [pc, #56]	@ (8004ce4 <HAL_RCC_ClockConfig+0x244>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <HAL_RCC_ClockConfig+0x240>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d214      	bcs.n	8004ce8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbe:	4b08      	ldr	r3, [pc, #32]	@ (8004ce0 <HAL_RCC_ClockConfig+0x240>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 020f 	bic.w	r2, r3, #15
 8004cc6:	4906      	ldr	r1, [pc, #24]	@ (8004ce0 <HAL_RCC_ClockConfig+0x240>)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cce:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <HAL_RCC_ClockConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d005      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e086      	b.n	8004dee <HAL_RCC_ClockConfig+0x34e>
 8004ce0:	52002000 	.word	0x52002000
 8004ce4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d010      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8004df8 <HAL_RCC_ClockConfig+0x358>)
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d208      	bcs.n	8004d16 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d04:	4b3c      	ldr	r3, [pc, #240]	@ (8004df8 <HAL_RCC_ClockConfig+0x358>)
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	4939      	ldr	r1, [pc, #228]	@ (8004df8 <HAL_RCC_ClockConfig+0x358>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d010      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	4b34      	ldr	r3, [pc, #208]	@ (8004df8 <HAL_RCC_ClockConfig+0x358>)
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d208      	bcs.n	8004d44 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d32:	4b31      	ldr	r3, [pc, #196]	@ (8004df8 <HAL_RCC_ClockConfig+0x358>)
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	492e      	ldr	r1, [pc, #184]	@ (8004df8 <HAL_RCC_ClockConfig+0x358>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d010      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	4b28      	ldr	r3, [pc, #160]	@ (8004df8 <HAL_RCC_ClockConfig+0x358>)
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d208      	bcs.n	8004d72 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d60:	4b25      	ldr	r3, [pc, #148]	@ (8004df8 <HAL_RCC_ClockConfig+0x358>)
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	4922      	ldr	r1, [pc, #136]	@ (8004df8 <HAL_RCC_ClockConfig+0x358>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d010      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	4b1d      	ldr	r3, [pc, #116]	@ (8004df8 <HAL_RCC_ClockConfig+0x358>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d208      	bcs.n	8004da0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8004df8 <HAL_RCC_ClockConfig+0x358>)
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	4917      	ldr	r1, [pc, #92]	@ (8004df8 <HAL_RCC_ClockConfig+0x358>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004da0:	f000 f834 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
 8004da4:	4602      	mov	r2, r0
 8004da6:	4b14      	ldr	r3, [pc, #80]	@ (8004df8 <HAL_RCC_ClockConfig+0x358>)
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	0a1b      	lsrs	r3, r3, #8
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	4912      	ldr	r1, [pc, #72]	@ (8004dfc <HAL_RCC_ClockConfig+0x35c>)
 8004db2:	5ccb      	ldrb	r3, [r1, r3]
 8004db4:	f003 031f 	and.w	r3, r3, #31
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dbc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004df8 <HAL_RCC_ClockConfig+0x358>)
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8004dfc <HAL_RCC_ClockConfig+0x35c>)
 8004dc8:	5cd3      	ldrb	r3, [r2, r3]
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8004e00 <HAL_RCC_ClockConfig+0x360>)
 8004dd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8004e04 <HAL_RCC_ClockConfig+0x364>)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004dde:	4b0a      	ldr	r3, [pc, #40]	@ (8004e08 <HAL_RCC_ClockConfig+0x368>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fc fca8 	bl	8001738 <HAL_InitTick>
 8004de8:	4603      	mov	r3, r0
 8004dea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	58024400 	.word	0x58024400
 8004dfc:	0801c064 	.word	0x0801c064
 8004e00:	24000004 	.word	0x24000004
 8004e04:	24000000 	.word	0x24000000
 8004e08:	24000014 	.word	0x24000014

08004e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b089      	sub	sp, #36	@ 0x24
 8004e10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e12:	4bb3      	ldr	r3, [pc, #716]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e1a:	2b18      	cmp	r3, #24
 8004e1c:	f200 8155 	bhi.w	80050ca <HAL_RCC_GetSysClockFreq+0x2be>
 8004e20:	a201      	add	r2, pc, #4	@ (adr r2, 8004e28 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e26:	bf00      	nop
 8004e28:	08004e8d 	.word	0x08004e8d
 8004e2c:	080050cb 	.word	0x080050cb
 8004e30:	080050cb 	.word	0x080050cb
 8004e34:	080050cb 	.word	0x080050cb
 8004e38:	080050cb 	.word	0x080050cb
 8004e3c:	080050cb 	.word	0x080050cb
 8004e40:	080050cb 	.word	0x080050cb
 8004e44:	080050cb 	.word	0x080050cb
 8004e48:	08004eb3 	.word	0x08004eb3
 8004e4c:	080050cb 	.word	0x080050cb
 8004e50:	080050cb 	.word	0x080050cb
 8004e54:	080050cb 	.word	0x080050cb
 8004e58:	080050cb 	.word	0x080050cb
 8004e5c:	080050cb 	.word	0x080050cb
 8004e60:	080050cb 	.word	0x080050cb
 8004e64:	080050cb 	.word	0x080050cb
 8004e68:	08004eb9 	.word	0x08004eb9
 8004e6c:	080050cb 	.word	0x080050cb
 8004e70:	080050cb 	.word	0x080050cb
 8004e74:	080050cb 	.word	0x080050cb
 8004e78:	080050cb 	.word	0x080050cb
 8004e7c:	080050cb 	.word	0x080050cb
 8004e80:	080050cb 	.word	0x080050cb
 8004e84:	080050cb 	.word	0x080050cb
 8004e88:	08004ebf 	.word	0x08004ebf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e8c:	4b94      	ldr	r3, [pc, #592]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d009      	beq.n	8004eac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e98:	4b91      	ldr	r3, [pc, #580]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	08db      	lsrs	r3, r3, #3
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	4a90      	ldr	r2, [pc, #576]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004eaa:	e111      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004eac:	4b8d      	ldr	r3, [pc, #564]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004eae:	61bb      	str	r3, [r7, #24]
      break;
 8004eb0:	e10e      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004eb2:	4b8d      	ldr	r3, [pc, #564]	@ (80050e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004eb4:	61bb      	str	r3, [r7, #24]
      break;
 8004eb6:	e10b      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004eb8:	4b8c      	ldr	r3, [pc, #560]	@ (80050ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004eba:	61bb      	str	r3, [r7, #24]
      break;
 8004ebc:	e108      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ebe:	4b88      	ldr	r3, [pc, #544]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004ec8:	4b85      	ldr	r3, [pc, #532]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ed2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ed4:	4b82      	ldr	r3, [pc, #520]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004ede:	4b80      	ldr	r3, [pc, #512]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee2:	08db      	lsrs	r3, r3, #3
 8004ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80e1 	beq.w	80050c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	f000 8083 	beq.w	8005010 <HAL_RCC_GetSysClockFreq+0x204>
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	f200 80a1 	bhi.w	8005054 <HAL_RCC_GetSysClockFreq+0x248>
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0x114>
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d056      	beq.n	8004fcc <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f1e:	e099      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f20:	4b6f      	ldr	r3, [pc, #444]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d02d      	beq.n	8004f88 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	08db      	lsrs	r3, r3, #3
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	4a6b      	ldr	r2, [pc, #428]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	ee07 3a90 	vmov	s15, r3
 8004f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f56:	4b62      	ldr	r3, [pc, #392]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f66:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f6a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80050f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f82:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004f86:	e087      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f92:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80050f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f9a:	4b51      	ldr	r3, [pc, #324]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fae:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80050f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004fca:	e065      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80050f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fde:	4b40      	ldr	r3, [pc, #256]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ff2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80050f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800500e:	e043      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80050fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800501e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005022:	4b2f      	ldr	r3, [pc, #188]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005032:	ed97 6a02 	vldr	s12, [r7, #8]
 8005036:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80050f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800503a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800504a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005052:	e021      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80050f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005066:	4b1e      	ldr	r3, [pc, #120]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005076:	ed97 6a02 	vldr	s12, [r7, #8]
 800507a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80050f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800507e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800508a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005096:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005098:	4b11      	ldr	r3, [pc, #68]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800509a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509c:	0a5b      	lsrs	r3, r3, #9
 800509e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050a2:	3301      	adds	r3, #1
 80050a4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	ee07 3a90 	vmov	s15, r3
 80050ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80050b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050bc:	ee17 3a90 	vmov	r3, s15
 80050c0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80050c2:	e005      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61bb      	str	r3, [r7, #24]
      break;
 80050c8:	e002      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80050ca:	4b07      	ldr	r3, [pc, #28]	@ (80050e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050cc:	61bb      	str	r3, [r7, #24]
      break;
 80050ce:	bf00      	nop
  }

  return sysclockfreq;
 80050d0:	69bb      	ldr	r3, [r7, #24]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3724      	adds	r7, #36	@ 0x24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	58024400 	.word	0x58024400
 80050e4:	03d09000 	.word	0x03d09000
 80050e8:	003d0900 	.word	0x003d0900
 80050ec:	007a1200 	.word	0x007a1200
 80050f0:	46000000 	.word	0x46000000
 80050f4:	4c742400 	.word	0x4c742400
 80050f8:	4a742400 	.word	0x4a742400
 80050fc:	4af42400 	.word	0x4af42400

08005100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005106:	f7ff fe81 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
 800510a:	4602      	mov	r2, r0
 800510c:	4b10      	ldr	r3, [pc, #64]	@ (8005150 <HAL_RCC_GetHCLKFreq+0x50>)
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	0a1b      	lsrs	r3, r3, #8
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	490f      	ldr	r1, [pc, #60]	@ (8005154 <HAL_RCC_GetHCLKFreq+0x54>)
 8005118:	5ccb      	ldrb	r3, [r1, r3]
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	fa22 f303 	lsr.w	r3, r2, r3
 8005122:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005124:	4b0a      	ldr	r3, [pc, #40]	@ (8005150 <HAL_RCC_GetHCLKFreq+0x50>)
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	4a09      	ldr	r2, [pc, #36]	@ (8005154 <HAL_RCC_GetHCLKFreq+0x54>)
 800512e:	5cd3      	ldrb	r3, [r2, r3]
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	fa22 f303 	lsr.w	r3, r2, r3
 800513a:	4a07      	ldr	r2, [pc, #28]	@ (8005158 <HAL_RCC_GetHCLKFreq+0x58>)
 800513c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800513e:	4a07      	ldr	r2, [pc, #28]	@ (800515c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005144:	4b04      	ldr	r3, [pc, #16]	@ (8005158 <HAL_RCC_GetHCLKFreq+0x58>)
 8005146:	681b      	ldr	r3, [r3, #0]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	58024400 	.word	0x58024400
 8005154:	0801c064 	.word	0x0801c064
 8005158:	24000004 	.word	0x24000004
 800515c:	24000000 	.word	0x24000000

08005160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005164:	f7ff ffcc 	bl	8005100 <HAL_RCC_GetHCLKFreq>
 8005168:	4602      	mov	r2, r0
 800516a:	4b06      	ldr	r3, [pc, #24]	@ (8005184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	4904      	ldr	r1, [pc, #16]	@ (8005188 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005176:	5ccb      	ldrb	r3, [r1, r3]
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005180:	4618      	mov	r0, r3
 8005182:	bd80      	pop	{r7, pc}
 8005184:	58024400 	.word	0x58024400
 8005188:	0801c064 	.word	0x0801c064

0800518c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	223f      	movs	r2, #63	@ 0x3f
 800519a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800519c:	4b1a      	ldr	r3, [pc, #104]	@ (8005208 <HAL_RCC_GetClockConfig+0x7c>)
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f003 0207 	and.w	r2, r3, #7
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80051a8:	4b17      	ldr	r3, [pc, #92]	@ (8005208 <HAL_RCC_GetClockConfig+0x7c>)
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80051b4:	4b14      	ldr	r3, [pc, #80]	@ (8005208 <HAL_RCC_GetClockConfig+0x7c>)
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f003 020f 	and.w	r2, r3, #15
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80051c0:	4b11      	ldr	r3, [pc, #68]	@ (8005208 <HAL_RCC_GetClockConfig+0x7c>)
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80051cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005208 <HAL_RCC_GetClockConfig+0x7c>)
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80051d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <HAL_RCC_GetClockConfig+0x7c>)
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80051e4:	4b08      	ldr	r3, [pc, #32]	@ (8005208 <HAL_RCC_GetClockConfig+0x7c>)
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051f0:	4b06      	ldr	r3, [pc, #24]	@ (800520c <HAL_RCC_GetClockConfig+0x80>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 020f 	and.w	r2, r3, #15
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	601a      	str	r2, [r3, #0]
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	58024400 	.word	0x58024400
 800520c:	52002000 	.word	0x52002000

08005210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e049      	b.n	80052b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f841 	bl	80052be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f000 f9e8 	bl	8005624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
	...

080052d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d001      	beq.n	80052ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e054      	b.n	8005396 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a26      	ldr	r2, [pc, #152]	@ (80053a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d022      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0x80>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005316:	d01d      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0x80>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a22      	ldr	r2, [pc, #136]	@ (80053a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d018      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0x80>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a21      	ldr	r2, [pc, #132]	@ (80053ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d013      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0x80>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a1f      	ldr	r2, [pc, #124]	@ (80053b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00e      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0x80>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a1e      	ldr	r2, [pc, #120]	@ (80053b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d009      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0x80>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1c      	ldr	r2, [pc, #112]	@ (80053b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0x80>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1b      	ldr	r2, [pc, #108]	@ (80053bc <HAL_TIM_Base_Start_IT+0xe8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d115      	bne.n	8005380 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	4b19      	ldr	r3, [pc, #100]	@ (80053c0 <HAL_TIM_Base_Start_IT+0xec>)
 800535c:	4013      	ands	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b06      	cmp	r3, #6
 8005364:	d015      	beq.n	8005392 <HAL_TIM_Base_Start_IT+0xbe>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800536c:	d011      	beq.n	8005392 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537e:	e008      	b.n	8005392 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	e000      	b.n	8005394 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005392:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40010000 	.word	0x40010000
 80053a8:	40000400 	.word	0x40000400
 80053ac:	40000800 	.word	0x40000800
 80053b0:	40000c00 	.word	0x40000c00
 80053b4:	40010400 	.word	0x40010400
 80053b8:	40001800 	.word	0x40001800
 80053bc:	40014000 	.word	0x40014000
 80053c0:	00010007 	.word	0x00010007

080053c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d020      	beq.n	8005428 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01b      	beq.n	8005428 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0202 	mvn.w	r2, #2
 80053f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f8e9 	bl	80055e6 <HAL_TIM_IC_CaptureCallback>
 8005414:	e005      	b.n	8005422 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f8db 	bl	80055d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8ec 	bl	80055fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b00      	cmp	r3, #0
 8005430:	d020      	beq.n	8005474 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01b      	beq.n	8005474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0204 	mvn.w	r2, #4
 8005444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2202      	movs	r2, #2
 800544a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f8c3 	bl	80055e6 <HAL_TIM_IC_CaptureCallback>
 8005460:	e005      	b.n	800546e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f8b5 	bl	80055d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f8c6 	bl	80055fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d020      	beq.n	80054c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01b      	beq.n	80054c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0208 	mvn.w	r2, #8
 8005490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2204      	movs	r2, #4
 8005496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f89d 	bl	80055e6 <HAL_TIM_IC_CaptureCallback>
 80054ac:	e005      	b.n	80054ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f88f 	bl	80055d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f8a0 	bl	80055fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f003 0310 	and.w	r3, r3, #16
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d020      	beq.n	800550c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f003 0310 	and.w	r3, r3, #16
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01b      	beq.n	800550c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0210 	mvn.w	r2, #16
 80054dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2208      	movs	r2, #8
 80054e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f877 	bl	80055e6 <HAL_TIM_IC_CaptureCallback>
 80054f8:	e005      	b.n	8005506 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f869 	bl	80055d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f87a 	bl	80055fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00c      	beq.n	8005530 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d007      	beq.n	8005530 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0201 	mvn.w	r2, #1
 8005528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fc f8ce 	bl	80016cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005536:	2b00      	cmp	r3, #0
 8005538:	d104      	bne.n	8005544 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00c      	beq.n	800555e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f90d 	bl	8005778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00c      	beq.n	8005582 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556e:	2b00      	cmp	r3, #0
 8005570:	d007      	beq.n	8005582 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800557a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f905 	bl	800578c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00c      	beq.n	80055a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d007      	beq.n	80055a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800559e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f834 	bl	800560e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00c      	beq.n	80055ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f06f 0220 	mvn.w	r2, #32
 80055c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f8cd 	bl	8005764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a43      	ldr	r2, [pc, #268]	@ (8005744 <TIM_Base_SetConfig+0x120>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d013      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005642:	d00f      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a40      	ldr	r2, [pc, #256]	@ (8005748 <TIM_Base_SetConfig+0x124>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00b      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a3f      	ldr	r2, [pc, #252]	@ (800574c <TIM_Base_SetConfig+0x128>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d007      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a3e      	ldr	r2, [pc, #248]	@ (8005750 <TIM_Base_SetConfig+0x12c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_Base_SetConfig+0x40>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a3d      	ldr	r2, [pc, #244]	@ (8005754 <TIM_Base_SetConfig+0x130>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d108      	bne.n	8005676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800566a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a32      	ldr	r2, [pc, #200]	@ (8005744 <TIM_Base_SetConfig+0x120>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d01f      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005684:	d01b      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2f      	ldr	r2, [pc, #188]	@ (8005748 <TIM_Base_SetConfig+0x124>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d017      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2e      	ldr	r2, [pc, #184]	@ (800574c <TIM_Base_SetConfig+0x128>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d013      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2d      	ldr	r2, [pc, #180]	@ (8005750 <TIM_Base_SetConfig+0x12c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00f      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2c      	ldr	r2, [pc, #176]	@ (8005754 <TIM_Base_SetConfig+0x130>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00b      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005758 <TIM_Base_SetConfig+0x134>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d007      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2a      	ldr	r2, [pc, #168]	@ (800575c <TIM_Base_SetConfig+0x138>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d003      	beq.n	80056be <TIM_Base_SetConfig+0x9a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a29      	ldr	r2, [pc, #164]	@ (8005760 <TIM_Base_SetConfig+0x13c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d108      	bne.n	80056d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a14      	ldr	r2, [pc, #80]	@ (8005744 <TIM_Base_SetConfig+0x120>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00f      	beq.n	8005716 <TIM_Base_SetConfig+0xf2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a16      	ldr	r2, [pc, #88]	@ (8005754 <TIM_Base_SetConfig+0x130>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00b      	beq.n	8005716 <TIM_Base_SetConfig+0xf2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a15      	ldr	r2, [pc, #84]	@ (8005758 <TIM_Base_SetConfig+0x134>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d007      	beq.n	8005716 <TIM_Base_SetConfig+0xf2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a14      	ldr	r2, [pc, #80]	@ (800575c <TIM_Base_SetConfig+0x138>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d003      	beq.n	8005716 <TIM_Base_SetConfig+0xf2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a13      	ldr	r2, [pc, #76]	@ (8005760 <TIM_Base_SetConfig+0x13c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d103      	bne.n	800571e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f043 0204 	orr.w	r2, r3, #4
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	601a      	str	r2, [r3, #0]
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40010000 	.word	0x40010000
 8005748:	40000400 	.word	0x40000400
 800574c:	40000800 	.word	0x40000800
 8005750:	40000c00 	.word	0x40000c00
 8005754:	40010400 	.word	0x40010400
 8005758:	40014000 	.word	0x40014000
 800575c:	40014400 	.word	0x40014400
 8005760:	40014800 	.word	0x40014800

08005764 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <tcpip_init_wrap>:
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
/* ETH_CODE: workaround to call LOCK_TCPIP_CORE after tcpip_init in MX_LWIP_Init
 * This is to keep the code after MX code re-generation */
static inline void tcpip_init_wrap(tcpip_init_done_fn tcpip_init_done, void *arg){
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
	tcpip_init(tcpip_init_done, arg);
 80057aa:	6839      	ldr	r1, [r7, #0]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f004 fdc7 	bl	800a340 <tcpip_init>
	LOCK_TCPIP_CORE();
 80057b2:	f000 fd81 	bl	80062b8 <sys_lock_tcpip_core>
}
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80057c6:	2100      	movs	r1, #0
 80057c8:	2000      	movs	r0, #0
 80057ca:	f7ff ffe9 	bl	80057a0 <tcpip_init_wrap>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80057ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005844 <MX_LWIP_Init+0x84>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80057d4:	4b1c      	ldr	r3, [pc, #112]	@ (8005848 <MX_LWIP_Init+0x88>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80057da:	4b1c      	ldr	r3, [pc, #112]	@ (800584c <MX_LWIP_Init+0x8c>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80057e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005850 <MX_LWIP_Init+0x90>)
 80057e2:	9302      	str	r3, [sp, #8]
 80057e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005854 <MX_LWIP_Init+0x94>)
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	2300      	movs	r3, #0
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	4b17      	ldr	r3, [pc, #92]	@ (800584c <MX_LWIP_Init+0x8c>)
 80057ee:	4a16      	ldr	r2, [pc, #88]	@ (8005848 <MX_LWIP_Init+0x88>)
 80057f0:	4914      	ldr	r1, [pc, #80]	@ (8005844 <MX_LWIP_Init+0x84>)
 80057f2:	4819      	ldr	r0, [pc, #100]	@ (8005858 <MX_LWIP_Init+0x98>)
 80057f4:	f005 fc14 	bl	800b020 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80057f8:	4817      	ldr	r0, [pc, #92]	@ (8005858 <MX_LWIP_Init+0x98>)
 80057fa:	f005 fdcf 	bl	800b39c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80057fe:	4816      	ldr	r0, [pc, #88]	@ (8005858 <MX_LWIP_Init+0x98>)
 8005800:	f005 fddc 	bl	800b3bc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005804:	4915      	ldr	r1, [pc, #84]	@ (800585c <MX_LWIP_Init+0x9c>)
 8005806:	4814      	ldr	r0, [pc, #80]	@ (8005858 <MX_LWIP_Init+0x98>)
 8005808:	f005 fee6 	bl	800b5d8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800580c:	2224      	movs	r2, #36	@ 0x24
 800580e:	2100      	movs	r1, #0
 8005810:	4813      	ldr	r0, [pc, #76]	@ (8005860 <MX_LWIP_Init+0xa0>)
 8005812:	f012 f9b6 	bl	8017b82 <memset>
  attributes.name = "EthLink";
 8005816:	4b12      	ldr	r3, [pc, #72]	@ (8005860 <MX_LWIP_Init+0xa0>)
 8005818:	4a12      	ldr	r2, [pc, #72]	@ (8005864 <MX_LWIP_Init+0xa4>)
 800581a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800581c:	4b10      	ldr	r3, [pc, #64]	@ (8005860 <MX_LWIP_Init+0xa0>)
 800581e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005822:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005824:	4b0e      	ldr	r3, [pc, #56]	@ (8005860 <MX_LWIP_Init+0xa0>)
 8005826:	2210      	movs	r2, #16
 8005828:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800582a:	4a0d      	ldr	r2, [pc, #52]	@ (8005860 <MX_LWIP_Init+0xa0>)
 800582c:	490a      	ldr	r1, [pc, #40]	@ (8005858 <MX_LWIP_Init+0x98>)
 800582e:	480e      	ldr	r0, [pc, #56]	@ (8005868 <MX_LWIP_Init+0xa8>)
 8005830:	f000 fe45 	bl	80064be <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005834:	4808      	ldr	r0, [pc, #32]	@ (8005858 <MX_LWIP_Init+0x98>)
 8005836:	f00e f91d 	bl	8013a74 <dhcp_start>

/* USER CODE BEGIN 3 */
  /* ETH_CODE: call UNLOCK_TCPIP_CORE after we are done */
  UNLOCK_TCPIP_CORE();
 800583a:	f000 fd4d 	bl	80062d8 <sys_unlock_tcpip_core>
/* USER CODE END 3 */
}
 800583e:	bf00      	nop
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	24000150 	.word	0x24000150
 8005848:	24000154 	.word	0x24000154
 800584c:	24000158 	.word	0x24000158
 8005850:	0800a27d 	.word	0x0800a27d
 8005854:	08005d55 	.word	0x08005d55
 8005858:	24000118 	.word	0x24000118
 800585c:	0800586d 	.word	0x0800586d
 8005860:	2400015c 	.word	0x2400015c
 8005864:	08018b10 	.word	0x08018b10
 8005868:	08006049 	.word	0x08006049

0800586c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005888:	4b04      	ldr	r3, [pc, #16]	@ (800589c <HAL_ETH_RxCpltCallback+0x1c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	f001 f8b9 	bl	8006a04 <osSemaphoreRelease>
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	24000188 	.word	0x24000188

080058a0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80058a8:	4b04      	ldr	r3, [pc, #16]	@ (80058bc <HAL_ETH_TxCpltCallback+0x1c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 f8a9 	bl	8006a04 <osSemaphoreRelease>
}
 80058b2:	bf00      	nop
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	2400018c 	.word	0x2400018c

080058c0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fd fcfc 	bl	80032c6 <HAL_ETH_GetDMAError>
 80058ce:	4603      	mov	r3, r0
 80058d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d4:	2b80      	cmp	r3, #128	@ 0x80
 80058d6:	d104      	bne.n	80058e2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80058d8:	4b04      	ldr	r3, [pc, #16]	@ (80058ec <HAL_ETH_ErrorCallback+0x2c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f001 f891 	bl	8006a04 <osSemaphoreRelease>
  }
}
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	24000188 	.word	0x24000188

080058f0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b0aa      	sub	sp, #168	@ 0xa8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800590a:	f107 0310 	add.w	r3, r7, #16
 800590e:	2264      	movs	r2, #100	@ 0x64
 8005910:	2100      	movs	r1, #0
 8005912:	4618      	mov	r0, r3
 8005914:	f012 f935 	bl	8017b82 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005918:	4b89      	ldr	r3, [pc, #548]	@ (8005b40 <low_level_init+0x250>)
 800591a:	4a8a      	ldr	r2, [pc, #552]	@ (8005b44 <low_level_init+0x254>)
 800591c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800591e:	2300      	movs	r3, #0
 8005920:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005922:	2380      	movs	r3, #128	@ 0x80
 8005924:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005926:	23e1      	movs	r3, #225	@ 0xe1
 8005928:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800592a:	2300      	movs	r3, #0
 800592c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800592e:	2300      	movs	r3, #0
 8005930:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005932:	2300      	movs	r3, #0
 8005934:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005936:	4a82      	ldr	r2, [pc, #520]	@ (8005b40 <low_level_init+0x250>)
 8005938:	f107 0308 	add.w	r3, r7, #8
 800593c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800593e:	4b80      	ldr	r3, [pc, #512]	@ (8005b40 <low_level_init+0x250>)
 8005940:	2201      	movs	r2, #1
 8005942:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005944:	4b7e      	ldr	r3, [pc, #504]	@ (8005b40 <low_level_init+0x250>)
 8005946:	4a80      	ldr	r2, [pc, #512]	@ (8005b48 <low_level_init+0x258>)
 8005948:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800594a:	4b7d      	ldr	r3, [pc, #500]	@ (8005b40 <low_level_init+0x250>)
 800594c:	4a7f      	ldr	r2, [pc, #508]	@ (8005b4c <low_level_init+0x25c>)
 800594e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005950:	4b7b      	ldr	r3, [pc, #492]	@ (8005b40 <low_level_init+0x250>)
 8005952:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005956:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005958:	4879      	ldr	r0, [pc, #484]	@ (8005b40 <low_level_init+0x250>)
 800595a:	f7fc fcdb 	bl	8002314 <HAL_ETH_Init>
 800595e:	4603      	mov	r3, r0
 8005960:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005964:	2238      	movs	r2, #56	@ 0x38
 8005966:	2100      	movs	r1, #0
 8005968:	4879      	ldr	r0, [pc, #484]	@ (8005b50 <low_level_init+0x260>)
 800596a:	f012 f90a 	bl	8017b82 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800596e:	4b78      	ldr	r3, [pc, #480]	@ (8005b50 <low_level_init+0x260>)
 8005970:	2221      	movs	r2, #33	@ 0x21
 8005972:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005974:	4b76      	ldr	r3, [pc, #472]	@ (8005b50 <low_level_init+0x260>)
 8005976:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800597a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800597c:	4b74      	ldr	r3, [pc, #464]	@ (8005b50 <low_level_init+0x260>)
 800597e:	2200      	movs	r2, #0
 8005980:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005982:	4874      	ldr	r0, [pc, #464]	@ (8005b54 <low_level_init+0x264>)
 8005984:	f005 fa06 	bl	800ad94 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2206      	movs	r2, #6
 800598c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005990:	4b6b      	ldr	r3, [pc, #428]	@ (8005b40 <low_level_init+0x250>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	781a      	ldrb	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800599c:	4b68      	ldr	r3, [pc, #416]	@ (8005b40 <low_level_init+0x250>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	785a      	ldrb	r2, [r3, #1]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80059a8:	4b65      	ldr	r3, [pc, #404]	@ (8005b40 <low_level_init+0x250>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	789a      	ldrb	r2, [r3, #2]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80059b4:	4b62      	ldr	r3, [pc, #392]	@ (8005b40 <low_level_init+0x250>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	78da      	ldrb	r2, [r3, #3]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80059c0:	4b5f      	ldr	r3, [pc, #380]	@ (8005b40 <low_level_init+0x250>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	791a      	ldrb	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80059cc:	4b5c      	ldr	r3, [pc, #368]	@ (8005b40 <low_level_init+0x250>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	795a      	ldrb	r2, [r3, #5]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80059de:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80059e6:	f043 030a 	orr.w	r3, r3, #10
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80059f2:	2200      	movs	r2, #0
 80059f4:	2100      	movs	r1, #0
 80059f6:	2001      	movs	r0, #1
 80059f8:	f000 ff28 	bl	800684c <osSemaphoreNew>
 80059fc:	4603      	mov	r3, r0
 80059fe:	4a56      	ldr	r2, [pc, #344]	@ (8005b58 <low_level_init+0x268>)
 8005a00:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8005a02:	2200      	movs	r2, #0
 8005a04:	2100      	movs	r1, #0
 8005a06:	2001      	movs	r0, #1
 8005a08:	f000 ff20 	bl	800684c <osSemaphoreNew>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	4a53      	ldr	r2, [pc, #332]	@ (8005b5c <low_level_init+0x26c>)
 8005a10:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005a12:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8005a16:	2224      	movs	r2, #36	@ 0x24
 8005a18:	2100      	movs	r1, #0
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f012 f8b1 	bl	8017b82 <memset>
  attributes.name = "EthIf";
 8005a20:	4b4f      	ldr	r3, [pc, #316]	@ (8005b60 <low_level_init+0x270>)
 8005a22:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005a24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8005a2c:	2330      	movs	r3, #48	@ 0x30
 8005a2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005a32:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8005a36:	461a      	mov	r2, r3
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	484a      	ldr	r0, [pc, #296]	@ (8005b64 <low_level_init+0x274>)
 8005a3c:	f000 fd3f 	bl	80064be <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005a40:	4949      	ldr	r1, [pc, #292]	@ (8005b68 <low_level_init+0x278>)
 8005a42:	484a      	ldr	r0, [pc, #296]	@ (8005b6c <low_level_init+0x27c>)
 8005a44:	f7fc f8c1 	bl	8001bca <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8005a48:	4848      	ldr	r0, [pc, #288]	@ (8005b6c <low_level_init+0x27c>)
 8005a4a:	f7fc f8f0 	bl	8001c2e <LAN8742_Init>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d006      	beq.n	8005a62 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f005 fd8d 	bl	800b574 <netif_set_link_down>
    netif_set_down(netif);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f005 fd1c 	bl	800b498 <netif_set_down>
 8005a60:	e06b      	b.n	8005b3a <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8005a62:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d165      	bne.n	8005b36 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005a6a:	4840      	ldr	r0, [pc, #256]	@ (8005b6c <low_level_init+0x27c>)
 8005a6c:	f7fc f92c 	bl	8001cc8 <LAN8742_GetLinkState>
 8005a70:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	dc06      	bgt.n	8005a8a <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f005 fd79 	bl	800b574 <netif_set_link_down>
      netif_set_down(netif);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f005 fd08 	bl	800b498 <netif_set_down>
 8005a88:	e057      	b.n	8005b3a <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8005a8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a8e:	3b02      	subs	r3, #2
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d82b      	bhi.n	8005aec <low_level_init+0x1fc>
 8005a94:	a201      	add	r2, pc, #4	@ (adr r2, 8005a9c <low_level_init+0x1ac>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005aad 	.word	0x08005aad
 8005aa0:	08005abf 	.word	0x08005abf
 8005aa4:	08005acf 	.word	0x08005acf
 8005aa8:	08005adf 	.word	0x08005adf
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005aac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8005ab4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005abc:	e01f      	b.n	8005afe <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8005ac4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005ac8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005acc:	e017      	b.n	8005afe <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8005ace:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005adc:	e00f      	b.n	8005afe <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005aea:	e008      	b.n	8005afe <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8005aec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005af0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8005af4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005af8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8005afc:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005afe:	f107 0310 	add.w	r3, r7, #16
 8005b02:	4619      	mov	r1, r3
 8005b04:	480e      	ldr	r0, [pc, #56]	@ (8005b40 <low_level_init+0x250>)
 8005b06:	f7fd f993 	bl	8002e30 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005b0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8005b10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005b16:	f107 0310 	add.w	r3, r7, #16
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4808      	ldr	r0, [pc, #32]	@ (8005b40 <low_level_init+0x250>)
 8005b1e:	f7fd fb5b 	bl	80031d8 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8005b22:	4807      	ldr	r0, [pc, #28]	@ (8005b40 <low_level_init+0x250>)
 8005b24:	f7fc fcf4 	bl	8002510 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f005 fc47 	bl	800b3bc <netif_set_up>
    netif_set_link_up(netif);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f005 fce6 	bl	800b500 <netif_set_link_up>
 8005b34:	e001      	b.n	8005b3a <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8005b36:	f7fb fddb 	bl	80016f0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005b3a:	37a8      	adds	r7, #168	@ 0xa8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	24000190 	.word	0x24000190
 8005b44:	40028000 	.word	0x40028000
 8005b48:	30040060 	.word	0x30040060
 8005b4c:	30040000 	.word	0x30040000
 8005b50:	24000240 	.word	0x24000240
 8005b54:	0801c07c 	.word	0x0801c07c
 8005b58:	24000188 	.word	0x24000188
 8005b5c:	2400018c 	.word	0x2400018c
 8005b60:	08018b18 	.word	0x08018b18
 8005b64:	08005d01 	.word	0x08005d01
 8005b68:	2400001c 	.word	0x2400001c
 8005b6c:	24000278 	.word	0x24000278

08005b70 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b092      	sub	sp, #72	@ 0x48
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005b88:	f107 030c 	add.w	r3, r7, #12
 8005b8c:	2230      	movs	r2, #48	@ 0x30
 8005b8e:	2100      	movs	r1, #0
 8005b90:	4618      	mov	r0, r3
 8005b92:	f011 fff6 	bl	8017b82 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005b96:	f107 030c 	add.w	r3, r7, #12
 8005b9a:	2230      	movs	r2, #48	@ 0x30
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f011 ffef 	bl	8017b82 <memset>

  for(q = p; q != NULL; q = q->next)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ba8:	e045      	b.n	8005c36 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d902      	bls.n	8005bb6 <low_level_output+0x46>
      return ERR_IF;
 8005bb0:	f06f 030b 	mvn.w	r3, #11
 8005bb4:	e07f      	b.n	8005cb6 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8005bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bb8:	6859      	ldr	r1, [r3, #4]
 8005bba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	3348      	adds	r3, #72	@ 0x48
 8005bc6:	443b      	add	r3, r7
 8005bc8:	3b3c      	subs	r3, #60	@ 0x3c
 8005bca:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bce:	895b      	ldrh	r3, [r3, #10]
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	3348      	adds	r3, #72	@ 0x48
 8005bde:	443b      	add	r3, r7
 8005be0:	3b38      	subs	r3, #56	@ 0x38
 8005be2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d011      	beq.n	8005c0e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bec:	1e5a      	subs	r2, r3, #1
 8005bee:	f107 000c 	add.w	r0, r7, #12
 8005bf2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	440b      	add	r3, r1
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	18c1      	adds	r1, r0, r3
 8005bfe:	4613      	mov	r3, r2
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	3348      	adds	r3, #72	@ 0x48
 8005c08:	443b      	add	r3, r7
 8005c0a:	3b34      	subs	r3, #52	@ 0x34
 8005c0c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005c16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c18:	4613      	mov	r3, r2
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	3348      	adds	r3, #72	@ 0x48
 8005c22:	443b      	add	r3, r7
 8005c24:	3b34      	subs	r3, #52	@ 0x34
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1b6      	bne.n	8005baa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	891b      	ldrh	r3, [r3, #8]
 8005c40:	461a      	mov	r2, r3
 8005c42:	4b1f      	ldr	r3, [pc, #124]	@ (8005cc0 <low_level_output+0x150>)
 8005c44:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005c46:	4a1e      	ldr	r2, [pc, #120]	@ (8005cc0 <low_level_output+0x150>)
 8005c48:	f107 030c 	add.w	r3, r7, #12
 8005c4c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005cc0 <low_level_output+0x150>)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8005c54:	6838      	ldr	r0, [r7, #0]
 8005c56:	f006 f913 	bl	800be80 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8005c5a:	4919      	ldr	r1, [pc, #100]	@ (8005cc0 <low_level_output+0x150>)
 8005c5c:	4819      	ldr	r0, [pc, #100]	@ (8005cc4 <low_level_output+0x154>)
 8005c5e:	f7fc fd43 	bl	80026e8 <HAL_ETH_Transmit_IT>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d103      	bne.n	8005c70 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005c6e:	e01b      	b.n	8005ca8 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8005c70:	4814      	ldr	r0, [pc, #80]	@ (8005cc4 <low_level_output+0x154>)
 8005c72:	f7fd fb1b 	bl	80032ac <HAL_ETH_GetError>
 8005c76:	4603      	mov	r3, r0
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00d      	beq.n	8005c9c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8005c80:	4b11      	ldr	r3, [pc, #68]	@ (8005cc8 <low_level_output+0x158>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fe69 	bl	8006960 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8005c8e:	480d      	ldr	r0, [pc, #52]	@ (8005cc4 <low_level_output+0x154>)
 8005c90:	f7fc feb1 	bl	80029f6 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8005c94:	23fe      	movs	r3, #254	@ 0xfe
 8005c96:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005c9a:	e005      	b.n	8005ca8 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8005c9c:	6838      	ldr	r0, [r7, #0]
 8005c9e:	f006 f849 	bl	800bd34 <pbuf_free>
        errval =  ERR_IF;
 8005ca2:	23f4      	movs	r3, #244	@ 0xf4
 8005ca4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8005ca8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005cac:	f113 0f02 	cmn.w	r3, #2
 8005cb0:	d0d3      	beq.n	8005c5a <low_level_output+0xea>

  return errval;
 8005cb2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3748      	adds	r7, #72	@ 0x48
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	24000240 	.word	0x24000240
 8005cc4:	24000190 	.word	0x24000190
 8005cc8:	2400018c 	.word	0x2400018c

08005ccc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005cd8:	4b07      	ldr	r3, [pc, #28]	@ (8005cf8 <low_level_input+0x2c>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005ce0:	f107 030c 	add.w	r3, r7, #12
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4805      	ldr	r0, [pc, #20]	@ (8005cfc <low_level_input+0x30>)
 8005ce8:	f7fc fd4f 	bl	800278a <HAL_ETH_ReadData>
  }

  return p;
 8005cec:	68fb      	ldr	r3, [r7, #12]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	24000184 	.word	0x24000184
 8005cfc:	24000190 	.word	0x24000190

08005d00 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005d10:	4b0f      	ldr	r3, [pc, #60]	@ (8005d50 <ethernetif_input+0x50>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f04f 31ff 	mov.w	r1, #4294967295
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fe21 	bl	8006960 <osSemaphoreAcquire>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1f5      	bne.n	8005d10 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005d24:	68b8      	ldr	r0, [r7, #8]
 8005d26:	f7ff ffd1 	bl	8005ccc <low_level_input>
 8005d2a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	4798      	blx	r3
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f005 fff6 	bl	800bd34 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1ea      	bne.n	8005d24 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005d4e:	e7df      	b.n	8005d10 <ethernetif_input+0x10>
 8005d50:	24000188 	.word	0x24000188

08005d54 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <ethernetif_init+0x1c>
 8005d62:	4b0e      	ldr	r3, [pc, #56]	@ (8005d9c <ethernetif_init+0x48>)
 8005d64:	f44f 720e 	mov.w	r2, #568	@ 0x238
 8005d68:	490d      	ldr	r1, [pc, #52]	@ (8005da0 <ethernetif_init+0x4c>)
 8005d6a:	480e      	ldr	r0, [pc, #56]	@ (8005da4 <ethernetif_init+0x50>)
 8005d6c:	f011 fea4 	bl	8017ab8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2273      	movs	r2, #115	@ 0x73
 8005d74:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2274      	movs	r2, #116	@ 0x74
 8005d7c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a09      	ldr	r2, [pc, #36]	@ (8005da8 <ethernetif_init+0x54>)
 8005d84:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a08      	ldr	r2, [pc, #32]	@ (8005dac <ethernetif_init+0x58>)
 8005d8a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff fdaf 	bl	80058f0 <low_level_init>

  return ERR_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	08018b20 	.word	0x08018b20
 8005da0:	08018b3c 	.word	0x08018b3c
 8005da4:	08018b4c 	.word	0x08018b4c
 8005da8:	08015945 	.word	0x08015945
 8005dac:	08005b71 	.word	0x08005b71

08005db0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005dbc:	68f9      	ldr	r1, [r7, #12]
 8005dbe:	4809      	ldr	r0, [pc, #36]	@ (8005de4 <pbuf_free_custom+0x34>)
 8005dc0:	f005 f8d8 	bl	800af74 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005dc4:	4b08      	ldr	r3, [pc, #32]	@ (8005de8 <pbuf_free_custom+0x38>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d107      	bne.n	8005ddc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005dcc:	4b06      	ldr	r3, [pc, #24]	@ (8005de8 <pbuf_free_custom+0x38>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005dd2:	4b06      	ldr	r3, [pc, #24]	@ (8005dec <pbuf_free_custom+0x3c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fe14 	bl	8006a04 <osSemaphoreRelease>
  }
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	0801c07c 	.word	0x0801c07c
 8005de8:	24000184 	.word	0x24000184
 8005dec:	24000188 	.word	0x24000188

08005df0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005df4:	f7fc f90a 	bl	800200c <HAL_GetTick>
 8005df8:	4603      	mov	r3, r0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08e      	sub	sp, #56	@ 0x38
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	605a      	str	r2, [r3, #4]
 8005e12:	609a      	str	r2, [r3, #8]
 8005e14:	60da      	str	r2, [r3, #12]
 8005e16:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a5d      	ldr	r2, [pc, #372]	@ (8005f94 <HAL_ETH_MspInit+0x194>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	f040 80b3 	bne.w	8005f8a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005e24:	4b5c      	ldr	r3, [pc, #368]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005e26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e2a:	4a5b      	ldr	r2, [pc, #364]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005e2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e30:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005e34:	4b58      	ldr	r3, [pc, #352]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005e36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e3e:	623b      	str	r3, [r7, #32]
 8005e40:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8005e42:	4b55      	ldr	r3, [pc, #340]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e48:	4a53      	ldr	r2, [pc, #332]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005e52:	4b51      	ldr	r3, [pc, #324]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e5c:	61fb      	str	r3, [r7, #28]
 8005e5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8005e60:	4b4d      	ldr	r3, [pc, #308]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005e62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e66:	4a4c      	ldr	r2, [pc, #304]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e6c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005e70:	4b49      	ldr	r3, [pc, #292]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e7e:	4b46      	ldr	r3, [pc, #280]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e84:	4a44      	ldr	r2, [pc, #272]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005e86:	f043 0304 	orr.w	r3, r3, #4
 8005e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005e8e:	4b42      	ldr	r3, [pc, #264]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e9c:	4b3e      	ldr	r3, [pc, #248]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ea2:	4a3d      	ldr	r2, [pc, #244]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005ea4:	f043 0301 	orr.w	r3, r3, #1
 8005ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005eac:	4b3a      	ldr	r3, [pc, #232]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	613b      	str	r3, [r7, #16]
 8005eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eba:	4b37      	ldr	r3, [pc, #220]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ec0:	4a35      	ldr	r2, [pc, #212]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005ec2:	f043 0302 	orr.w	r3, r3, #2
 8005ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005eca:	4b33      	ldr	r3, [pc, #204]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ede:	4a2e      	ldr	r2, [pc, #184]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8005f98 <HAL_ETH_MspInit+0x198>)
 8005eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005ef6:	2332      	movs	r3, #50	@ 0x32
 8005ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005efa:	2302      	movs	r3, #2
 8005efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f02:	2303      	movs	r3, #3
 8005f04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f06:	230b      	movs	r3, #11
 8005f08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4822      	ldr	r0, [pc, #136]	@ (8005f9c <HAL_ETH_MspInit+0x19c>)
 8005f12:	f7fd ff67 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005f16:	2386      	movs	r3, #134	@ 0x86
 8005f18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f22:	2303      	movs	r3, #3
 8005f24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f26:	230b      	movs	r3, #11
 8005f28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f2e:	4619      	mov	r1, r3
 8005f30:	481b      	ldr	r0, [pc, #108]	@ (8005fa0 <HAL_ETH_MspInit+0x1a0>)
 8005f32:	f7fd ff57 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005f36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f44:	2303      	movs	r3, #3
 8005f46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f48:	230b      	movs	r3, #11
 8005f4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f50:	4619      	mov	r1, r3
 8005f52:	4814      	ldr	r0, [pc, #80]	@ (8005fa4 <HAL_ETH_MspInit+0x1a4>)
 8005f54:	f7fd ff46 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005f58:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f66:	2303      	movs	r3, #3
 8005f68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005f6a:	230b      	movs	r3, #11
 8005f6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005f6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f72:	4619      	mov	r1, r3
 8005f74:	480c      	ldr	r0, [pc, #48]	@ (8005fa8 <HAL_ETH_MspInit+0x1a8>)
 8005f76:	f7fd ff35 	bl	8003de4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2105      	movs	r1, #5
 8005f7e:	203d      	movs	r0, #61	@ 0x3d
 8005f80:	f7fc f928 	bl	80021d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005f84:	203d      	movs	r0, #61	@ 0x3d
 8005f86:	f7fc f93f 	bl	8002208 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005f8a:	bf00      	nop
 8005f8c:	3738      	adds	r7, #56	@ 0x38
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40028000 	.word	0x40028000
 8005f98:	58024400 	.word	0x58024400
 8005f9c:	58020800 	.word	0x58020800
 8005fa0:	58020000 	.word	0x58020000
 8005fa4:	58020400 	.word	0x58020400
 8005fa8:	58021800 	.word	0x58021800

08005fac <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005fb0:	4802      	ldr	r0, [pc, #8]	@ (8005fbc <ETH_PHY_IO_Init+0x10>)
 8005fb2:	f7fd f92b 	bl	800320c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	24000190 	.word	0x24000190

08005fc0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  return 0;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	68f9      	ldr	r1, [r7, #12]
 8005fe2:	4807      	ldr	r0, [pc, #28]	@ (8006000 <ETH_PHY_IO_ReadReg+0x30>)
 8005fe4:	f7fc fe7c 	bl	8002ce0 <HAL_ETH_ReadPHYRegister>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005fee:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff2:	e000      	b.n	8005ff6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	24000190 	.word	0x24000190

08006004 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	68f9      	ldr	r1, [r7, #12]
 8006016:	4807      	ldr	r0, [pc, #28]	@ (8006034 <ETH_PHY_IO_WriteReg+0x30>)
 8006018:	f7fc feb6 	bl	8002d88 <HAL_ETH_WritePHYRegister>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006022:	f04f 33ff 	mov.w	r3, #4294967295
 8006026:	e000      	b.n	800602a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	24000190 	.word	0x24000190

08006038 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800603c:	f7fb ffe6 	bl	800200c <HAL_GetTick>
 8006040:	4603      	mov	r3, r0
}
 8006042:	4618      	mov	r0, r3
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b0a0      	sub	sp, #128	@ 0x80
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006050:	f107 0308 	add.w	r3, r7, #8
 8006054:	2264      	movs	r2, #100	@ 0x64
 8006056:	2100      	movs	r1, #0
 8006058:	4618      	mov	r0, r3
 800605a:	f011 fd92 	bl	8017b82 <memset>
  int32_t PHYLinkState = 0;
 800605e:	2300      	movs	r3, #0
 8006060:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006066:	2300      	movs	r3, #0
 8006068:	67bb      	str	r3, [r7, #120]	@ 0x78
 800606a:	2300      	movs	r3, #0
 800606c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	66fb      	str	r3, [r7, #108]	@ 0x6c
   * This trick allows to keep this change through
   * code re-generation by STM32CubeMX
   */
#define HAL_ETH_Start HAL_ETH_Start_IT
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  LOCK_TCPIP_CORE();
 8006072:	f000 f921 	bl	80062b8 <sys_lock_tcpip_core>
/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006076:	483c      	ldr	r0, [pc, #240]	@ (8006168 <ethernet_link_thread+0x120>)
 8006078:	f7fb fe26 	bl	8001cc8 <LAN8742_GetLinkState>
 800607c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800607e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006080:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006084:	089b      	lsrs	r3, r3, #2
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00c      	beq.n	80060aa <ethernet_link_thread+0x62>
 8006090:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006092:	2b01      	cmp	r3, #1
 8006094:	dc09      	bgt.n	80060aa <ethernet_link_thread+0x62>
  {
    HAL_ETH_Stop_IT(&heth);
 8006096:	4835      	ldr	r0, [pc, #212]	@ (800616c <ethernet_link_thread+0x124>)
 8006098:	f7fc faae 	bl	80025f8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800609c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800609e:	f005 f9fb 	bl	800b498 <netif_set_down>
    netif_set_link_down(netif);
 80060a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80060a4:	f005 fa66 	bl	800b574 <netif_set_link_down>
 80060a8:	e055      	b.n	8006156 <ethernet_link_thread+0x10e>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80060aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060ac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d14e      	bne.n	8006156 <ethernet_link_thread+0x10e>
 80060b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	dd4b      	ble.n	8006156 <ethernet_link_thread+0x10e>
  {
    switch (PHYLinkState)
 80060be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060c0:	3b02      	subs	r3, #2
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	d82a      	bhi.n	800611c <ethernet_link_thread+0xd4>
 80060c6:	a201      	add	r2, pc, #4	@ (adr r2, 80060cc <ethernet_link_thread+0x84>)
 80060c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060cc:	080060dd 	.word	0x080060dd
 80060d0:	080060ef 	.word	0x080060ef
 80060d4:	080060ff 	.word	0x080060ff
 80060d8:	0800610f 	.word	0x0800610f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80060dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060e0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80060e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80060e6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80060e8:	2301      	movs	r3, #1
 80060ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80060ec:	e017      	b.n	800611e <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80060f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80060f6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80060f8:	2301      	movs	r3, #1
 80060fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80060fc:	e00f      	b.n	800611e <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80060fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006102:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006104:	2300      	movs	r3, #0
 8006106:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006108:	2301      	movs	r3, #1
 800610a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800610c:	e007      	b.n	800611e <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800610e:	2300      	movs	r3, #0
 8006110:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006112:	2300      	movs	r3, #0
 8006114:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006116:	2301      	movs	r3, #1
 8006118:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800611a:	e000      	b.n	800611e <ethernet_link_thread+0xd6>
    default:
      break;
 800611c:	bf00      	nop
    }

    if(linkchanged)
 800611e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d018      	beq.n	8006156 <ethernet_link_thread+0x10e>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006124:	f107 0308 	add.w	r3, r7, #8
 8006128:	4619      	mov	r1, r3
 800612a:	4810      	ldr	r0, [pc, #64]	@ (800616c <ethernet_link_thread+0x124>)
 800612c:	f7fc fe80 	bl	8002e30 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006132:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006136:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006138:	f107 0308 	add.w	r3, r7, #8
 800613c:	4619      	mov	r1, r3
 800613e:	480b      	ldr	r0, [pc, #44]	@ (800616c <ethernet_link_thread+0x124>)
 8006140:	f7fd f84a 	bl	80031d8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006144:	4809      	ldr	r0, [pc, #36]	@ (800616c <ethernet_link_thread+0x124>)
 8006146:	f7fc f9e3 	bl	8002510 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800614a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800614c:	f005 f936 	bl	800b3bc <netif_set_up>
      netif_set_link_up(netif);
 8006150:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006152:	f005 f9d5 	bl	800b500 <netif_set_link_up>
  }

/* USER CODE BEGIN ETH link Thread core code for User BSP */

  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  UNLOCK_TCPIP_CORE();
 8006156:	f000 f8bf 	bl	80062d8 <sys_unlock_tcpip_core>
  osDelay(100);
 800615a:	2064      	movs	r0, #100	@ 0x64
 800615c:	f000 fa4d 	bl	80065fa <osDelay>
  LOCK_TCPIP_CORE();
 8006160:	f000 f8aa 	bl	80062b8 <sys_lock_tcpip_core>
  continue; /* skip next osDelay */
 8006164:	bf00      	nop
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006166:	e786      	b.n	8006076 <ethernet_link_thread+0x2e>
 8006168:	24000278 	.word	0x24000278
 800616c:	24000190 	.word	0x24000190

08006170 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af02      	add	r7, sp, #8
 8006176:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006178:	4812      	ldr	r0, [pc, #72]	@ (80061c4 <HAL_ETH_RxAllocateCallback+0x54>)
 800617a:	f004 fe87 	bl	800ae8c <memp_malloc_pool>
 800617e:	60f8      	str	r0, [r7, #12]
  if (p)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d014      	beq.n	80061b0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f103 0220 	add.w	r2, r3, #32
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4a0d      	ldr	r2, [pc, #52]	@ (80061c8 <HAL_ETH_RxAllocateCallback+0x58>)
 8006194:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800619e:	9201      	str	r2, [sp, #4]
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2241      	movs	r2, #65	@ 0x41
 80061a6:	2100      	movs	r1, #0
 80061a8:	2000      	movs	r0, #0
 80061aa:	f005 fc0b 	bl	800b9c4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80061ae:	e005      	b.n	80061bc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80061b0:	4b06      	ldr	r3, [pc, #24]	@ (80061cc <HAL_ETH_RxAllocateCallback+0x5c>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	0801c07c 	.word	0x0801c07c
 80061c8:	08005db1 	.word	0x08005db1
 80061cc:	24000184 	.word	0x24000184

080061d0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b08d      	sub	sp, #52	@ 0x34
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	3b20      	subs	r3, #32
 80061ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 80061f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80061f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f8:	2200      	movs	r2, #0
 80061fa:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80061fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fe:	887a      	ldrh	r2, [r7, #2]
 8006200:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d103      	bne.n	8006212 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800620a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	e003      	b.n	800621a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006218:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800621e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006226:	e009      	b.n	800623c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622a:	891a      	ldrh	r2, [r3, #8]
 800622c:	887b      	ldrh	r3, [r7, #2]
 800622e:	4413      	add	r3, r2
 8006230:	b29a      	uxth	r2, r3
 8006232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006234:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800623c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f2      	bne.n	8006228 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006242:	887b      	ldrh	r3, [r7, #2]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	623a      	str	r2, [r7, #32]
 8006248:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	2b00      	cmp	r3, #0
 800624e:	dd1d      	ble.n	800628c <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	f003 021f 	and.w	r2, r3, #31
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006260:	f3bf 8f4f 	dsb	sy
}
 8006264:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8006266:	4a0d      	ldr	r2, [pc, #52]	@ (800629c <HAL_ETH_RxLinkCallback+0xcc>)
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	3320      	adds	r3, #32
 8006272:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	3b20      	subs	r3, #32
 8006278:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	2b00      	cmp	r3, #0
 800627e:	dcf2      	bgt.n	8006266 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8006280:	f3bf 8f4f 	dsb	sy
}
 8006284:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006286:	f3bf 8f6f 	isb	sy
}
 800628a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800628c:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800628e:	bf00      	nop
 8006290:	3734      	adds	r7, #52	@ 0x34
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	e000ed00 	.word	0xe000ed00

080062a0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f005 fd43 	bl	800bd34 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80062ae:	bf00      	nop
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 80062b8:	b580      	push	{r7, lr}
 80062ba:	af00      	add	r7, sp, #0
	sys_mutex_lock(&lock_tcpip_core);
 80062bc:	4804      	ldr	r0, [pc, #16]	@ (80062d0 <sys_lock_tcpip_core+0x18>)
 80062be:	f011 faa1 	bl	8017804 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 80062c2:	f000 f98f 	bl	80065e4 <osThreadGetId>
 80062c6:	4603      	mov	r3, r0
 80062c8:	4a02      	ldr	r2, [pc, #8]	@ (80062d4 <sys_lock_tcpip_core+0x1c>)
 80062ca:	6013      	str	r3, [r2, #0]
}
 80062cc:	bf00      	nop
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	24009a94 	.word	0x24009a94
 80062d4:	24000298 	.word	0x24000298

080062d8 <sys_unlock_tcpip_core>:

void sys_unlock_tcpip_core(void){
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
	lwip_core_lock_holder_thread_id = 0;
 80062dc:	4b03      	ldr	r3, [pc, #12]	@ (80062ec <sys_unlock_tcpip_core+0x14>)
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 80062e2:	4803      	ldr	r0, [pc, #12]	@ (80062f0 <sys_unlock_tcpip_core+0x18>)
 80062e4:	f011 fa9d 	bl	8017822 <sys_mutex_unlock>
}
 80062e8:	bf00      	nop
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	24000298 	.word	0x24000298
 80062f0:	24009a94 	.word	0x24009a94

080062f4 <sys_check_core_locking>:

void sys_check_core_locking(void){
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 80062fa:	4b12      	ldr	r3, [pc, #72]	@ (8006344 <sys_check_core_locking+0x50>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006302:	2b00      	cmp	r3, #0
 8006304:	d006      	beq.n	8006314 <sys_check_core_locking+0x20>
 8006306:	4b10      	ldr	r3, [pc, #64]	@ (8006348 <sys_check_core_locking+0x54>)
 8006308:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800630c:	490f      	ldr	r1, [pc, #60]	@ (800634c <sys_check_core_locking+0x58>)
 800630e:	4810      	ldr	r0, [pc, #64]	@ (8006350 <sys_check_core_locking+0x5c>)
 8006310:	f011 fbd2 	bl	8017ab8 <iprintf>

  if (lwip_tcpip_thread_id != 0) {
 8006314:	4b0f      	ldr	r3, [pc, #60]	@ (8006354 <sys_check_core_locking+0x60>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00e      	beq.n	800633a <sys_check_core_locking+0x46>
	  osThreadId_t current_thread_id = osThreadGetId();
 800631c:	f000 f962 	bl	80065e4 <osThreadGetId>
 8006320:	6078      	str	r0, [r7, #4]

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8006322:	4b0d      	ldr	r3, [pc, #52]	@ (8006358 <sys_check_core_locking+0x64>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	429a      	cmp	r2, r3
 800632a:	d006      	beq.n	800633a <sys_check_core_locking+0x46>
 800632c:	4b06      	ldr	r3, [pc, #24]	@ (8006348 <sys_check_core_locking+0x54>)
 800632e:	f240 32f7 	movw	r2, #1015	@ 0x3f7
 8006332:	490a      	ldr	r1, [pc, #40]	@ (800635c <sys_check_core_locking+0x68>)
 8006334:	4806      	ldr	r0, [pc, #24]	@ (8006350 <sys_check_core_locking+0x5c>)
 8006336:	f011 fbbf 	bl	8017ab8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	e000ed00 	.word	0xe000ed00
 8006348:	08018b20 	.word	0x08018b20
 800634c:	08018b74 	.word	0x08018b74
 8006350:	08018b4c 	.word	0x08018b4c
 8006354:	2400029c 	.word	0x2400029c
 8006358:	24000298 	.word	0x24000298
 800635c:	08018b9c 	.word	0x08018b9c

08006360 <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
	lwip_tcpip_thread_id = osThreadGetId();
 8006364:	f000 f93e 	bl	80065e4 <osThreadGetId>
 8006368:	4603      	mov	r3, r0
 800636a:	4a02      	ldr	r2, [pc, #8]	@ (8006374 <sys_mark_tcpip_thread+0x14>)
 800636c:	6013      	str	r3, [r2, #0]
}
 800636e:	bf00      	nop
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	2400029c 	.word	0x2400029c

08006378 <__NVIC_SetPriority>:
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	6039      	str	r1, [r7, #0]
 8006382:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006388:	2b00      	cmp	r3, #0
 800638a:	db0a      	blt.n	80063a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	b2da      	uxtb	r2, r3
 8006390:	490c      	ldr	r1, [pc, #48]	@ (80063c4 <__NVIC_SetPriority+0x4c>)
 8006392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006396:	0112      	lsls	r2, r2, #4
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	440b      	add	r3, r1
 800639c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80063a0:	e00a      	b.n	80063b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	4908      	ldr	r1, [pc, #32]	@ (80063c8 <__NVIC_SetPriority+0x50>)
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	3b04      	subs	r3, #4
 80063b0:	0112      	lsls	r2, r2, #4
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	440b      	add	r3, r1
 80063b6:	761a      	strb	r2, [r3, #24]
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	e000e100 	.word	0xe000e100
 80063c8:	e000ed00 	.word	0xe000ed00

080063cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80063d0:	4b05      	ldr	r3, [pc, #20]	@ (80063e8 <SysTick_Handler+0x1c>)
 80063d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80063d4:	f002 fce0 	bl	8008d98 <xTaskGetSchedulerState>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d001      	beq.n	80063e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80063de:	f003 fbdb 	bl	8009b98 <xPortSysTickHandler>
  }
}
 80063e2:	bf00      	nop
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	e000e010 	.word	0xe000e010

080063ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80063f0:	2100      	movs	r1, #0
 80063f2:	f06f 0004 	mvn.w	r0, #4
 80063f6:	f7ff ffbf 	bl	8006378 <__NVIC_SetPriority>
#endif
}
 80063fa:	bf00      	nop
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006406:	f3ef 8305 	mrs	r3, IPSR
 800640a:	603b      	str	r3, [r7, #0]
  return(result);
 800640c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006412:	f06f 0305 	mvn.w	r3, #5
 8006416:	607b      	str	r3, [r7, #4]
 8006418:	e00c      	b.n	8006434 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800641a:	4b0a      	ldr	r3, [pc, #40]	@ (8006444 <osKernelInitialize+0x44>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d105      	bne.n	800642e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006422:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <osKernelInitialize+0x44>)
 8006424:	2201      	movs	r2, #1
 8006426:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006428:	2300      	movs	r3, #0
 800642a:	607b      	str	r3, [r7, #4]
 800642c:	e002      	b.n	8006434 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800642e:	f04f 33ff 	mov.w	r3, #4294967295
 8006432:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006434:	687b      	ldr	r3, [r7, #4]
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	240002a0 	.word	0x240002a0

08006448 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800644e:	f3ef 8305 	mrs	r3, IPSR
 8006452:	603b      	str	r3, [r7, #0]
  return(result);
 8006454:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <osKernelStart+0x1a>
    stat = osErrorISR;
 800645a:	f06f 0305 	mvn.w	r3, #5
 800645e:	607b      	str	r3, [r7, #4]
 8006460:	e010      	b.n	8006484 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006462:	4b0b      	ldr	r3, [pc, #44]	@ (8006490 <osKernelStart+0x48>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d109      	bne.n	800647e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800646a:	f7ff ffbf 	bl	80063ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800646e:	4b08      	ldr	r3, [pc, #32]	@ (8006490 <osKernelStart+0x48>)
 8006470:	2202      	movs	r2, #2
 8006472:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006474:	f001 fffc 	bl	8008470 <vTaskStartScheduler>
      stat = osOK;
 8006478:	2300      	movs	r3, #0
 800647a:	607b      	str	r3, [r7, #4]
 800647c:	e002      	b.n	8006484 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800647e:	f04f 33ff 	mov.w	r3, #4294967295
 8006482:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006484:	687b      	ldr	r3, [r7, #4]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	240002a0 	.word	0x240002a0

08006494 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800649a:	f3ef 8305 	mrs	r3, IPSR
 800649e:	603b      	str	r3, [r7, #0]
  return(result);
 80064a0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80064a6:	f002 f90f 	bl	80086c8 <xTaskGetTickCountFromISR>
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	e002      	b.n	80064b4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80064ae:	f002 f8fb 	bl	80086a8 <xTaskGetTickCount>
 80064b2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80064b4:	687b      	ldr	r3, [r7, #4]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80064be:	b580      	push	{r7, lr}
 80064c0:	b08e      	sub	sp, #56	@ 0x38
 80064c2:	af04      	add	r7, sp, #16
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	60b9      	str	r1, [r7, #8]
 80064c8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ce:	f3ef 8305 	mrs	r3, IPSR
 80064d2:	617b      	str	r3, [r7, #20]
  return(result);
 80064d4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d17f      	bne.n	80065da <osThreadNew+0x11c>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d07c      	beq.n	80065da <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80064e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80064e6:	2318      	movs	r3, #24
 80064e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80064ee:	f04f 33ff 	mov.w	r3, #4294967295
 80064f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d045      	beq.n	8006586 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <osThreadNew+0x4a>
        name = attr->name;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d008      	beq.n	800652e <osThreadNew+0x70>
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	2b38      	cmp	r3, #56	@ 0x38
 8006520:	d805      	bhi.n	800652e <osThreadNew+0x70>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <osThreadNew+0x74>
        return (NULL);
 800652e:	2300      	movs	r3, #0
 8006530:	e054      	b.n	80065dc <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	089b      	lsrs	r3, r3, #2
 8006540:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00e      	beq.n	8006568 <osThreadNew+0xaa>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2ba7      	cmp	r3, #167	@ 0xa7
 8006550:	d90a      	bls.n	8006568 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006556:	2b00      	cmp	r3, #0
 8006558:	d006      	beq.n	8006568 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <osThreadNew+0xaa>
        mem = 1;
 8006562:	2301      	movs	r3, #1
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	e010      	b.n	800658a <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10c      	bne.n	800658a <osThreadNew+0xcc>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d108      	bne.n	800658a <osThreadNew+0xcc>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d104      	bne.n	800658a <osThreadNew+0xcc>
          mem = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	61bb      	str	r3, [r7, #24]
 8006584:	e001      	b.n	800658a <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8006586:	2300      	movs	r3, #0
 8006588:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d110      	bne.n	80065b2 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006598:	9202      	str	r2, [sp, #8]
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	6a3a      	ldr	r2, [r7, #32]
 80065a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f001 fd6e 	bl	8008088 <xTaskCreateStatic>
 80065ac:	4603      	mov	r3, r0
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	e013      	b.n	80065da <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d110      	bne.n	80065da <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	f107 0310 	add.w	r3, r7, #16
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f001 fdbc 	bl	8008148 <xTaskCreate>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d001      	beq.n	80065da <osThreadNew+0x11c>
            hTask = NULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065da:	693b      	ldr	r3, [r7, #16]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3728      	adds	r7, #40	@ 0x28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80065ea:	f002 fbc5 	bl	8008d78 <xTaskGetCurrentTaskHandle>
 80065ee:	6078      	str	r0, [r7, #4]

  return (id);
 80065f0:	687b      	ldr	r3, [r7, #4]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006602:	f3ef 8305 	mrs	r3, IPSR
 8006606:	60bb      	str	r3, [r7, #8]
  return(result);
 8006608:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <osDelay+0x1c>
    stat = osErrorISR;
 800660e:	f06f 0305 	mvn.w	r3, #5
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	e007      	b.n	8006626 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 feef 	bl	8008404 <vTaskDelay>
    }
  }

  return (stat);
 8006626:	68fb      	ldr	r3, [r7, #12]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006638:	2300      	movs	r3, #0
 800663a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800663c:	f3ef 8305 	mrs	r3, IPSR
 8006640:	60bb      	str	r3, [r7, #8]
  return(result);
 8006642:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006644:	2b00      	cmp	r3, #0
 8006646:	d174      	bne.n	8006732 <osMutexNew+0x102>
    if (attr != NULL) {
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <osMutexNew+0x26>
      type = attr->attr_bits;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	61bb      	str	r3, [r7, #24]
 8006654:	e001      	b.n	800665a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <osMutexNew+0x3a>
      rmtx = 1U;
 8006664:	2301      	movs	r3, #1
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	e001      	b.n	800666e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	f003 0308 	and.w	r3, r3, #8
 8006674:	2b00      	cmp	r3, #0
 8006676:	d15c      	bne.n	8006732 <osMutexNew+0x102>
      mem = -1;
 8006678:	f04f 33ff 	mov.w	r3, #4294967295
 800667c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d015      	beq.n	80066b0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d006      	beq.n	800669a <osMutexNew+0x6a>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	2b4f      	cmp	r3, #79	@ 0x4f
 8006692:	d902      	bls.n	800669a <osMutexNew+0x6a>
          mem = 1;
 8006694:	2301      	movs	r3, #1
 8006696:	613b      	str	r3, [r7, #16]
 8006698:	e00c      	b.n	80066b4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d108      	bne.n	80066b4 <osMutexNew+0x84>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <osMutexNew+0x84>
            mem = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	e001      	b.n	80066b4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d112      	bne.n	80066e0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d007      	beq.n	80066d0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	4619      	mov	r1, r3
 80066c6:	2004      	movs	r0, #4
 80066c8:	f000 fd71 	bl	80071ae <xQueueCreateMutexStatic>
 80066cc:	61f8      	str	r0, [r7, #28]
 80066ce:	e016      	b.n	80066fe <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	4619      	mov	r1, r3
 80066d6:	2001      	movs	r0, #1
 80066d8:	f000 fd69 	bl	80071ae <xQueueCreateMutexStatic>
 80066dc:	61f8      	str	r0, [r7, #28]
 80066de:	e00e      	b.n	80066fe <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10b      	bne.n	80066fe <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d004      	beq.n	80066f6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80066ec:	2004      	movs	r0, #4
 80066ee:	f000 fd46 	bl	800717e <xQueueCreateMutex>
 80066f2:	61f8      	str	r0, [r7, #28]
 80066f4:	e003      	b.n	80066fe <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80066f6:	2001      	movs	r0, #1
 80066f8:	f000 fd41 	bl	800717e <xQueueCreateMutex>
 80066fc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00c      	beq.n	800671e <osMutexNew+0xee>
        if (attr != NULL) {
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <osMutexNew+0xe2>
          name = attr->name;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	e001      	b.n	8006716 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006716:	68f9      	ldr	r1, [r7, #12]
 8006718:	69f8      	ldr	r0, [r7, #28]
 800671a:	f001 fc2d 	bl	8007f78 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d006      	beq.n	8006732 <osMutexNew+0x102>
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006732:	69fb      	ldr	r3, [r7, #28]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3720      	adds	r7, #32
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f023 0301 	bic.w	r3, r3, #1
 800674c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800675a:	f3ef 8305 	mrs	r3, IPSR
 800675e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006760:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006766:	f06f 0305 	mvn.w	r3, #5
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e02c      	b.n	80067c8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d103      	bne.n	800677c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006774:	f06f 0303 	mvn.w	r3, #3
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	e025      	b.n	80067c8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d011      	beq.n	80067a6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6938      	ldr	r0, [r7, #16]
 8006786:	f000 fd62 	bl	800724e <xQueueTakeMutexRecursive>
 800678a:	4603      	mov	r3, r0
 800678c:	2b01      	cmp	r3, #1
 800678e:	d01b      	beq.n	80067c8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006796:	f06f 0301 	mvn.w	r3, #1
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	e014      	b.n	80067c8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800679e:	f06f 0302 	mvn.w	r3, #2
 80067a2:	617b      	str	r3, [r7, #20]
 80067a4:	e010      	b.n	80067c8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6938      	ldr	r0, [r7, #16]
 80067aa:	f001 f907 	bl	80079bc <xQueueSemaphoreTake>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d009      	beq.n	80067c8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80067ba:	f06f 0301 	mvn.w	r3, #1
 80067be:	617b      	str	r3, [r7, #20]
 80067c0:	e002      	b.n	80067c8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80067c2:	f06f 0302 	mvn.w	r3, #2
 80067c6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80067c8:	697b      	ldr	r3, [r7, #20]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b086      	sub	sp, #24
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f023 0301 	bic.w	r3, r3, #1
 80067e0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ee:	f3ef 8305 	mrs	r3, IPSR
 80067f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80067f4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <osMutexRelease+0x30>
    stat = osErrorISR;
 80067fa:	f06f 0305 	mvn.w	r3, #5
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	e01f      	b.n	8006842 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d103      	bne.n	8006810 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006808:	f06f 0303 	mvn.w	r3, #3
 800680c:	617b      	str	r3, [r7, #20]
 800680e:	e018      	b.n	8006842 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d009      	beq.n	800682a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006816:	6938      	ldr	r0, [r7, #16]
 8006818:	f000 fce4 	bl	80071e4 <xQueueGiveMutexRecursive>
 800681c:	4603      	mov	r3, r0
 800681e:	2b01      	cmp	r3, #1
 8006820:	d00f      	beq.n	8006842 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006822:	f06f 0302 	mvn.w	r3, #2
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	e00b      	b.n	8006842 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800682a:	2300      	movs	r3, #0
 800682c:	2200      	movs	r2, #0
 800682e:	2100      	movs	r1, #0
 8006830:	6938      	ldr	r0, [r7, #16]
 8006832:	f000 fdb1 	bl	8007398 <xQueueGenericSend>
 8006836:	4603      	mov	r3, r0
 8006838:	2b01      	cmp	r3, #1
 800683a:	d002      	beq.n	8006842 <osMutexRelease+0x70>
        stat = osErrorResource;
 800683c:	f06f 0302 	mvn.w	r3, #2
 8006840:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006842:	697b      	ldr	r3, [r7, #20]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800684c:	b580      	push	{r7, lr}
 800684e:	b08a      	sub	sp, #40	@ 0x28
 8006850:	af02      	add	r7, sp, #8
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006858:	2300      	movs	r3, #0
 800685a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800685c:	f3ef 8305 	mrs	r3, IPSR
 8006860:	613b      	str	r3, [r7, #16]
  return(result);
 8006862:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006864:	2b00      	cmp	r3, #0
 8006866:	d175      	bne.n	8006954 <osSemaphoreNew+0x108>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d072      	beq.n	8006954 <osSemaphoreNew+0x108>
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	429a      	cmp	r2, r3
 8006874:	d86e      	bhi.n	8006954 <osSemaphoreNew+0x108>
    mem = -1;
 8006876:	f04f 33ff 	mov.w	r3, #4294967295
 800687a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d015      	beq.n	80068ae <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d006      	beq.n	8006898 <osSemaphoreNew+0x4c>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	2b4f      	cmp	r3, #79	@ 0x4f
 8006890:	d902      	bls.n	8006898 <osSemaphoreNew+0x4c>
        mem = 1;
 8006892:	2301      	movs	r3, #1
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	e00c      	b.n	80068b2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d108      	bne.n	80068b2 <osSemaphoreNew+0x66>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d104      	bne.n	80068b2 <osSemaphoreNew+0x66>
          mem = 0;
 80068a8:	2300      	movs	r3, #0
 80068aa:	61bb      	str	r3, [r7, #24]
 80068ac:	e001      	b.n	80068b2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b8:	d04c      	beq.n	8006954 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d128      	bne.n	8006912 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d10a      	bne.n	80068dc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	2203      	movs	r2, #3
 80068cc:	9200      	str	r2, [sp, #0]
 80068ce:	2200      	movs	r2, #0
 80068d0:	2100      	movs	r1, #0
 80068d2:	2001      	movs	r0, #1
 80068d4:	f000 fb5e 	bl	8006f94 <xQueueGenericCreateStatic>
 80068d8:	61f8      	str	r0, [r7, #28]
 80068da:	e005      	b.n	80068e8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80068dc:	2203      	movs	r2, #3
 80068de:	2100      	movs	r1, #0
 80068e0:	2001      	movs	r0, #1
 80068e2:	f000 fbd4 	bl	800708e <xQueueGenericCreate>
 80068e6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d022      	beq.n	8006934 <osSemaphoreNew+0xe8>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01f      	beq.n	8006934 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80068f4:	2300      	movs	r3, #0
 80068f6:	2200      	movs	r2, #0
 80068f8:	2100      	movs	r1, #0
 80068fa:	69f8      	ldr	r0, [r7, #28]
 80068fc:	f000 fd4c 	bl	8007398 <xQueueGenericSend>
 8006900:	4603      	mov	r3, r0
 8006902:	2b01      	cmp	r3, #1
 8006904:	d016      	beq.n	8006934 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006906:	69f8      	ldr	r0, [r7, #28]
 8006908:	f001 f9ea 	bl	8007ce0 <vQueueDelete>
            hSemaphore = NULL;
 800690c:	2300      	movs	r3, #0
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	e010      	b.n	8006934 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d108      	bne.n	800692a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	461a      	mov	r2, r3
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 fccb 	bl	80072bc <xQueueCreateCountingSemaphoreStatic>
 8006926:	61f8      	str	r0, [r7, #28]
 8006928:	e004      	b.n	8006934 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 fcfe 	bl	800732e <xQueueCreateCountingSemaphore>
 8006932:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00c      	beq.n	8006954 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	e001      	b.n	800694c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006948:	2300      	movs	r3, #0
 800694a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800694c:	6979      	ldr	r1, [r7, #20]
 800694e:	69f8      	ldr	r0, [r7, #28]
 8006950:	f001 fb12 	bl	8007f78 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006954:	69fb      	ldr	r3, [r7, #28]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d103      	bne.n	8006980 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006978:	f06f 0303 	mvn.w	r3, #3
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	e039      	b.n	80069f4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006980:	f3ef 8305 	mrs	r3, IPSR
 8006984:	60fb      	str	r3, [r7, #12]
  return(result);
 8006986:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006988:	2b00      	cmp	r3, #0
 800698a:	d022      	beq.n	80069d2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006992:	f06f 0303 	mvn.w	r3, #3
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	e02c      	b.n	80069f4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800699a:	2300      	movs	r3, #0
 800699c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800699e:	f107 0308 	add.w	r3, r7, #8
 80069a2:	461a      	mov	r2, r3
 80069a4:	2100      	movs	r1, #0
 80069a6:	6938      	ldr	r0, [r7, #16]
 80069a8:	f001 f918 	bl	8007bdc <xQueueReceiveFromISR>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d003      	beq.n	80069ba <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80069b2:	f06f 0302 	mvn.w	r3, #2
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	e01c      	b.n	80069f4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d019      	beq.n	80069f4 <osSemaphoreAcquire+0x94>
 80069c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006a00 <osSemaphoreAcquire+0xa0>)
 80069c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	e010      	b.n	80069f4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6938      	ldr	r0, [r7, #16]
 80069d6:	f000 fff1 	bl	80079bc <xQueueSemaphoreTake>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d009      	beq.n	80069f4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80069e6:	f06f 0301 	mvn.w	r3, #1
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	e002      	b.n	80069f4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80069ee:	f06f 0302 	mvn.w	r3, #2
 80069f2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80069f4:	697b      	ldr	r3, [r7, #20]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	e000ed04 	.word	0xe000ed04

08006a04 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d103      	bne.n	8006a22 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006a1a:	f06f 0303 	mvn.w	r3, #3
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	e02c      	b.n	8006a7c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a22:	f3ef 8305 	mrs	r3, IPSR
 8006a26:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a28:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d01a      	beq.n	8006a64 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006a32:	f107 0308 	add.w	r3, r7, #8
 8006a36:	4619      	mov	r1, r3
 8006a38:	6938      	ldr	r0, [r7, #16]
 8006a3a:	f000 fe4d 	bl	80076d8 <xQueueGiveFromISR>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d003      	beq.n	8006a4c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006a44:	f06f 0302 	mvn.w	r3, #2
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	e017      	b.n	8006a7c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d014      	beq.n	8006a7c <osSemaphoreRelease+0x78>
 8006a52:	4b0d      	ldr	r3, [pc, #52]	@ (8006a88 <osSemaphoreRelease+0x84>)
 8006a54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	e00b      	b.n	8006a7c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006a64:	2300      	movs	r3, #0
 8006a66:	2200      	movs	r2, #0
 8006a68:	2100      	movs	r1, #0
 8006a6a:	6938      	ldr	r0, [r7, #16]
 8006a6c:	f000 fc94 	bl	8007398 <xQueueGenericSend>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d002      	beq.n	8006a7c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006a76:	f06f 0302 	mvn.w	r3, #2
 8006a7a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006a7c:	697b      	ldr	r3, [r7, #20]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	@ 0x28
 8006a90:	af02      	add	r7, sp, #8
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a9c:	f3ef 8305 	mrs	r3, IPSR
 8006aa0:	613b      	str	r3, [r7, #16]
  return(result);
 8006aa2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d15f      	bne.n	8006b68 <osMessageQueueNew+0xdc>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d05c      	beq.n	8006b68 <osMessageQueueNew+0xdc>
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d059      	beq.n	8006b68 <osMessageQueueNew+0xdc>
    mem = -1;
 8006ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d029      	beq.n	8006b14 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d012      	beq.n	8006aee <osMessageQueueNew+0x62>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	2b4f      	cmp	r3, #79	@ 0x4f
 8006ace:	d90e      	bls.n	8006aee <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00a      	beq.n	8006aee <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	695a      	ldr	r2, [r3, #20]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	68b9      	ldr	r1, [r7, #8]
 8006ae0:	fb01 f303 	mul.w	r3, r1, r3
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d302      	bcc.n	8006aee <osMessageQueueNew+0x62>
        mem = 1;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	61bb      	str	r3, [r7, #24]
 8006aec:	e014      	b.n	8006b18 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d110      	bne.n	8006b18 <osMessageQueueNew+0x8c>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10c      	bne.n	8006b18 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d108      	bne.n	8006b18 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d104      	bne.n	8006b18 <osMessageQueueNew+0x8c>
          mem = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	e001      	b.n	8006b18 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d10b      	bne.n	8006b36 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691a      	ldr	r2, [r3, #16]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	2100      	movs	r1, #0
 8006b28:	9100      	str	r1, [sp, #0]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 fa31 	bl	8006f94 <xQueueGenericCreateStatic>
 8006b32:	61f8      	str	r0, [r7, #28]
 8006b34:	e008      	b.n	8006b48 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d105      	bne.n	8006b48 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 faa4 	bl	800708e <xQueueGenericCreate>
 8006b46:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00c      	beq.n	8006b68 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <osMessageQueueNew+0xd0>
        name = attr->name;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	e001      	b.n	8006b60 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006b60:	6979      	ldr	r1, [r7, #20]
 8006b62:	69f8      	ldr	r0, [r7, #28]
 8006b64:	f001 fa08 	bl	8007f78 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006b68:	69fb      	ldr	r3, [r7, #28]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3720      	adds	r7, #32
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	4613      	mov	r3, r2
 8006b82:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b8c:	f3ef 8305 	mrs	r3, IPSR
 8006b90:	617b      	str	r3, [r7, #20]
  return(result);
 8006b92:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d028      	beq.n	8006bea <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d005      	beq.n	8006baa <osMessageQueuePut+0x36>
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <osMessageQueuePut+0x36>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006baa:	f06f 0303 	mvn.w	r3, #3
 8006bae:	61fb      	str	r3, [r7, #28]
 8006bb0:	e038      	b.n	8006c24 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006bb6:	f107 0210 	add.w	r2, r7, #16
 8006bba:	2300      	movs	r3, #0
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	69b8      	ldr	r0, [r7, #24]
 8006bc0:	f000 fcec 	bl	800759c <xQueueGenericSendFromISR>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d003      	beq.n	8006bd2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006bca:	f06f 0302 	mvn.w	r3, #2
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	e028      	b.n	8006c24 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d025      	beq.n	8006c24 <osMessageQueuePut+0xb0>
 8006bd8:	4b15      	ldr	r3, [pc, #84]	@ (8006c30 <osMessageQueuePut+0xbc>)
 8006bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	e01c      	b.n	8006c24 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <osMessageQueuePut+0x82>
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006bf6:	f06f 0303 	mvn.w	r3, #3
 8006bfa:	61fb      	str	r3, [r7, #28]
 8006bfc:	e012      	b.n	8006c24 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006bfe:	2300      	movs	r3, #0
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	68b9      	ldr	r1, [r7, #8]
 8006c04:	69b8      	ldr	r0, [r7, #24]
 8006c06:	f000 fbc7 	bl	8007398 <xQueueGenericSend>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d009      	beq.n	8006c24 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006c16:	f06f 0301 	mvn.w	r3, #1
 8006c1a:	61fb      	str	r3, [r7, #28]
 8006c1c:	e002      	b.n	8006c24 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006c1e:	f06f 0302 	mvn.w	r3, #2
 8006c22:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006c24:	69fb      	ldr	r3, [r7, #28]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3720      	adds	r7, #32
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	e000ed04 	.word	0xe000ed04

08006c34 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c4a:	f3ef 8305 	mrs	r3, IPSR
 8006c4e:	617b      	str	r3, [r7, #20]
  return(result);
 8006c50:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d028      	beq.n	8006ca8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <osMessageQueueGet+0x34>
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <osMessageQueueGet+0x34>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006c68:	f06f 0303 	mvn.w	r3, #3
 8006c6c:	61fb      	str	r3, [r7, #28]
 8006c6e:	e037      	b.n	8006ce0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006c74:	f107 0310 	add.w	r3, r7, #16
 8006c78:	461a      	mov	r2, r3
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	69b8      	ldr	r0, [r7, #24]
 8006c7e:	f000 ffad 	bl	8007bdc <xQueueReceiveFromISR>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d003      	beq.n	8006c90 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006c88:	f06f 0302 	mvn.w	r3, #2
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	e027      	b.n	8006ce0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d024      	beq.n	8006ce0 <osMessageQueueGet+0xac>
 8006c96:	4b15      	ldr	r3, [pc, #84]	@ (8006cec <osMessageQueueGet+0xb8>)
 8006c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	e01b      	b.n	8006ce0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <osMessageQueueGet+0x80>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d103      	bne.n	8006cbc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006cb4:	f06f 0303 	mvn.w	r3, #3
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	e011      	b.n	8006ce0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	69b8      	ldr	r0, [r7, #24]
 8006cc2:	f000 fd99 	bl	80077f8 <xQueueReceive>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d009      	beq.n	8006ce0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006cd2:	f06f 0301 	mvn.w	r3, #1
 8006cd6:	61fb      	str	r3, [r7, #28]
 8006cd8:	e002      	b.n	8006ce0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006cda:	f06f 0302 	mvn.w	r3, #2
 8006cde:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006ce0:	69fb      	ldr	r3, [r7, #28]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3720      	adds	r7, #32
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	e000ed04 	.word	0xe000ed04

08006cf0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4a07      	ldr	r2, [pc, #28]	@ (8006d1c <vApplicationGetIdleTaskMemory+0x2c>)
 8006d00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	4a06      	ldr	r2, [pc, #24]	@ (8006d20 <vApplicationGetIdleTaskMemory+0x30>)
 8006d06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d0e:	601a      	str	r2, [r3, #0]
}
 8006d10:	bf00      	nop
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	240002a4 	.word	0x240002a4
 8006d20:	2400034c 	.word	0x2400034c

08006d24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4a07      	ldr	r2, [pc, #28]	@ (8006d50 <vApplicationGetTimerTaskMemory+0x2c>)
 8006d34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	4a06      	ldr	r2, [pc, #24]	@ (8006d54 <vApplicationGetTimerTaskMemory+0x30>)
 8006d3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d42:	601a      	str	r2, [r3, #0]
}
 8006d44:	bf00      	nop
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	24000b4c 	.word	0x24000b4c
 8006d54:	24000bf4 	.word	0x24000bf4

08006d58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f103 0208 	add.w	r2, r3, #8
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f103 0208 	add.w	r2, r3, #8
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f103 0208 	add.w	r2, r3, #8
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006db2:	b480      	push	{r7}
 8006db4:	b085      	sub	sp, #20
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	601a      	str	r2, [r3, #0]
}
 8006dee:	bf00      	nop
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b085      	sub	sp, #20
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e10:	d103      	bne.n	8006e1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	e00c      	b.n	8006e34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	e002      	b.n	8006e28 <vListInsert+0x2e>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d2f6      	bcs.n	8006e22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	601a      	str	r2, [r3, #0]
}
 8006e60:	bf00      	nop
 8006e62:	3714      	adds	r7, #20
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	6892      	ldr	r2, [r2, #8]
 8006e82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6852      	ldr	r2, [r2, #4]
 8006e8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d103      	bne.n	8006ea0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	1e5a      	subs	r2, r3, #1
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10b      	bne.n	8006eec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ee6:	bf00      	nop
 8006ee8:	bf00      	nop
 8006eea:	e7fd      	b.n	8006ee8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006eec:	f002 fdc4 	bl	8009a78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef8:	68f9      	ldr	r1, [r7, #12]
 8006efa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006efc:	fb01 f303 	mul.w	r3, r1, r3
 8006f00:	441a      	add	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	68f9      	ldr	r1, [r7, #12]
 8006f20:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f22:	fb01 f303 	mul.w	r3, r1, r3
 8006f26:	441a      	add	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	22ff      	movs	r2, #255	@ 0xff
 8006f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	22ff      	movs	r2, #255	@ 0xff
 8006f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d114      	bne.n	8006f6c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d01a      	beq.n	8006f80 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3310      	adds	r3, #16
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f001 fd4c 	bl	80089ec <xTaskRemoveFromEventList>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d012      	beq.n	8006f80 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f90 <xQueueGenericReset+0xd0>)
 8006f5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	e009      	b.n	8006f80 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	3310      	adds	r3, #16
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7ff fef1 	bl	8006d58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3324      	adds	r3, #36	@ 0x24
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff feec 	bl	8006d58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006f80:	f002 fdac 	bl	8009adc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006f84:	2301      	movs	r3, #1
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	e000ed04 	.word	0xe000ed04

08006f94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08e      	sub	sp, #56	@ 0x38
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10b      	bne.n	8006fc0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006fba:	bf00      	nop
 8006fbc:	bf00      	nop
 8006fbe:	e7fd      	b.n	8006fbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10b      	bne.n	8006fde <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	e7fd      	b.n	8006fda <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <xQueueGenericCreateStatic+0x56>
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <xQueueGenericCreateStatic+0x5a>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <xQueueGenericCreateStatic+0x5c>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10b      	bne.n	800700c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	623b      	str	r3, [r7, #32]
}
 8007006:	bf00      	nop
 8007008:	bf00      	nop
 800700a:	e7fd      	b.n	8007008 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d102      	bne.n	8007018 <xQueueGenericCreateStatic+0x84>
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <xQueueGenericCreateStatic+0x88>
 8007018:	2301      	movs	r3, #1
 800701a:	e000      	b.n	800701e <xQueueGenericCreateStatic+0x8a>
 800701c:	2300      	movs	r3, #0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10b      	bne.n	800703a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	61fb      	str	r3, [r7, #28]
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop
 8007038:	e7fd      	b.n	8007036 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800703a:	2350      	movs	r3, #80	@ 0x50
 800703c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2b50      	cmp	r3, #80	@ 0x50
 8007042:	d00b      	beq.n	800705c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	61bb      	str	r3, [r7, #24]
}
 8007056:	bf00      	nop
 8007058:	bf00      	nop
 800705a:	e7fd      	b.n	8007058 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800705c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00d      	beq.n	8007084 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007070:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	4613      	mov	r3, r2
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	68b9      	ldr	r1, [r7, #8]
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f000 f840 	bl	8007104 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007086:	4618      	mov	r0, r3
 8007088:	3730      	adds	r7, #48	@ 0x30
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800708e:	b580      	push	{r7, lr}
 8007090:	b08a      	sub	sp, #40	@ 0x28
 8007092:	af02      	add	r7, sp, #8
 8007094:	60f8      	str	r0, [r7, #12]
 8007096:	60b9      	str	r1, [r7, #8]
 8007098:	4613      	mov	r3, r2
 800709a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10b      	bne.n	80070ba <xQueueGenericCreate+0x2c>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	613b      	str	r3, [r7, #16]
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop
 80070b8:	e7fd      	b.n	80070b6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	fb02 f303 	mul.w	r3, r2, r3
 80070c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	3350      	adds	r3, #80	@ 0x50
 80070c8:	4618      	mov	r0, r3
 80070ca:	f002 fdf7 	bl	8009cbc <pvPortMalloc>
 80070ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d011      	beq.n	80070fa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	3350      	adds	r3, #80	@ 0x50
 80070de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070e8:	79fa      	ldrb	r2, [r7, #7]
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	4613      	mov	r3, r2
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f805 	bl	8007104 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070fa:	69bb      	ldr	r3, [r7, #24]
	}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3720      	adds	r7, #32
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d103      	bne.n	8007120 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	e002      	b.n	8007126 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007132:	2101      	movs	r1, #1
 8007134:	69b8      	ldr	r0, [r7, #24]
 8007136:	f7ff fec3 	bl	8006ec0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	78fa      	ldrb	r2, [r7, #3]
 800713e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007142:	bf00      	nop
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800714a:	b580      	push	{r7, lr}
 800714c:	b082      	sub	sp, #8
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00e      	beq.n	8007176 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800716a:	2300      	movs	r3, #0
 800716c:	2200      	movs	r2, #0
 800716e:	2100      	movs	r1, #0
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f911 	bl	8007398 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007176:	bf00      	nop
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800717e:	b580      	push	{r7, lr}
 8007180:	b086      	sub	sp, #24
 8007182:	af00      	add	r7, sp, #0
 8007184:	4603      	mov	r3, r0
 8007186:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007188:	2301      	movs	r3, #1
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	2300      	movs	r3, #0
 800718e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	461a      	mov	r2, r3
 8007194:	6939      	ldr	r1, [r7, #16]
 8007196:	6978      	ldr	r0, [r7, #20]
 8007198:	f7ff ff79 	bl	800708e <xQueueGenericCreate>
 800719c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7ff ffd3 	bl	800714a <prvInitialiseMutex>

		return xNewQueue;
 80071a4:	68fb      	ldr	r3, [r7, #12]
	}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b088      	sub	sp, #32
 80071b2:	af02      	add	r7, sp, #8
 80071b4:	4603      	mov	r3, r0
 80071b6:	6039      	str	r1, [r7, #0]
 80071b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80071ba:	2301      	movs	r3, #1
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	2300      	movs	r3, #0
 80071c0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2200      	movs	r2, #0
 80071ca:	6939      	ldr	r1, [r7, #16]
 80071cc:	6978      	ldr	r0, [r7, #20]
 80071ce:	f7ff fee1 	bl	8006f94 <xQueueGenericCreateStatic>
 80071d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f7ff ffb8 	bl	800714a <prvInitialiseMutex>

		return xNewQueue;
 80071da:	68fb      	ldr	r3, [r7, #12]
	}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80071e4:	b590      	push	{r4, r7, lr}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10b      	bne.n	800720e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	60fb      	str	r3, [r7, #12]
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	e7fd      	b.n	800720a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	689c      	ldr	r4, [r3, #8]
 8007212:	f001 fdb1 	bl	8008d78 <xTaskGetCurrentTaskHandle>
 8007216:	4603      	mov	r3, r0
 8007218:	429c      	cmp	r4, r3
 800721a:	d111      	bne.n	8007240 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	1e5a      	subs	r2, r3, #1
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d105      	bne.n	800723a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800722e:	2300      	movs	r3, #0
 8007230:	2200      	movs	r2, #0
 8007232:	2100      	movs	r1, #0
 8007234:	6938      	ldr	r0, [r7, #16]
 8007236:	f000 f8af 	bl	8007398 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800723a:	2301      	movs	r3, #1
 800723c:	617b      	str	r3, [r7, #20]
 800723e:	e001      	b.n	8007244 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007240:	2300      	movs	r3, #0
 8007242:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007244:	697b      	ldr	r3, [r7, #20]
	}
 8007246:	4618      	mov	r0, r3
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	bd90      	pop	{r4, r7, pc}

0800724e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800724e:	b590      	push	{r4, r7, lr}
 8007250:	b087      	sub	sp, #28
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10b      	bne.n	800727a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	60fb      	str	r3, [r7, #12]
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	e7fd      	b.n	8007276 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	689c      	ldr	r4, [r3, #8]
 800727e:	f001 fd7b 	bl	8008d78 <xTaskGetCurrentTaskHandle>
 8007282:	4603      	mov	r3, r0
 8007284:	429c      	cmp	r4, r3
 8007286:	d107      	bne.n	8007298 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007292:	2301      	movs	r3, #1
 8007294:	617b      	str	r3, [r7, #20]
 8007296:	e00c      	b.n	80072b2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6938      	ldr	r0, [r7, #16]
 800729c:	f000 fb8e 	bl	80079bc <xQueueSemaphoreTake>
 80072a0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d004      	beq.n	80072b2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80072b2:	697b      	ldr	r3, [r7, #20]
	}
 80072b4:	4618      	mov	r0, r3
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd90      	pop	{r4, r7, pc}

080072bc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08a      	sub	sp, #40	@ 0x28
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10b      	bne.n	80072e6 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	61bb      	str	r3, [r7, #24]
}
 80072e0:	bf00      	nop
 80072e2:	bf00      	nop
 80072e4:	e7fd      	b.n	80072e2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d90b      	bls.n	8007306 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	617b      	str	r3, [r7, #20]
}
 8007300:	bf00      	nop
 8007302:	bf00      	nop
 8007304:	e7fd      	b.n	8007302 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007306:	2302      	movs	r3, #2
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	2100      	movs	r1, #0
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7ff fe3f 	bl	8006f94 <xQueueGenericCreateStatic>
 8007316:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007324:	69fb      	ldr	r3, [r7, #28]
	}
 8007326:	4618      	mov	r0, r3
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800732e:	b580      	push	{r7, lr}
 8007330:	b086      	sub	sp, #24
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10b      	bne.n	8007356 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	613b      	str	r3, [r7, #16]
}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	e7fd      	b.n	8007352 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	429a      	cmp	r2, r3
 800735c:	d90b      	bls.n	8007376 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	60fb      	str	r3, [r7, #12]
}
 8007370:	bf00      	nop
 8007372:	bf00      	nop
 8007374:	e7fd      	b.n	8007372 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007376:	2202      	movs	r2, #2
 8007378:	2100      	movs	r1, #0
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff fe87 	bl	800708e <xQueueGenericCreate>
 8007380:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800738e:	697b      	ldr	r3, [r7, #20]
	}
 8007390:	4618      	mov	r0, r3
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08e      	sub	sp, #56	@ 0x38
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073a6:	2300      	movs	r3, #0
 80073a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80073ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10b      	bne.n	80073cc <xQueueGenericSend+0x34>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80073c6:	bf00      	nop
 80073c8:	bf00      	nop
 80073ca:	e7fd      	b.n	80073c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d103      	bne.n	80073da <xQueueGenericSend+0x42>
 80073d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <xQueueGenericSend+0x46>
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <xQueueGenericSend+0x48>
 80073de:	2300      	movs	r3, #0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10b      	bne.n	80073fc <xQueueGenericSend+0x64>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	e7fd      	b.n	80073f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d103      	bne.n	800740a <xQueueGenericSend+0x72>
 8007402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007406:	2b01      	cmp	r3, #1
 8007408:	d101      	bne.n	800740e <xQueueGenericSend+0x76>
 800740a:	2301      	movs	r3, #1
 800740c:	e000      	b.n	8007410 <xQueueGenericSend+0x78>
 800740e:	2300      	movs	r3, #0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10b      	bne.n	800742c <xQueueGenericSend+0x94>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	623b      	str	r3, [r7, #32]
}
 8007426:	bf00      	nop
 8007428:	bf00      	nop
 800742a:	e7fd      	b.n	8007428 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800742c:	f001 fcb4 	bl	8008d98 <xTaskGetSchedulerState>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d102      	bne.n	800743c <xQueueGenericSend+0xa4>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <xQueueGenericSend+0xa8>
 800743c:	2301      	movs	r3, #1
 800743e:	e000      	b.n	8007442 <xQueueGenericSend+0xaa>
 8007440:	2300      	movs	r3, #0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10b      	bne.n	800745e <xQueueGenericSend+0xc6>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	61fb      	str	r3, [r7, #28]
}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	e7fd      	b.n	800745a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800745e:	f002 fb0b 	bl	8009a78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746a:	429a      	cmp	r2, r3
 800746c:	d302      	bcc.n	8007474 <xQueueGenericSend+0xdc>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d129      	bne.n	80074c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	68b9      	ldr	r1, [r7, #8]
 8007478:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800747a:	f000 fc6d 	bl	8007d58 <prvCopyDataToQueue>
 800747e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007484:	2b00      	cmp	r3, #0
 8007486:	d010      	beq.n	80074aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748a:	3324      	adds	r3, #36	@ 0x24
 800748c:	4618      	mov	r0, r3
 800748e:	f001 faad 	bl	80089ec <xTaskRemoveFromEventList>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d013      	beq.n	80074c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007498:	4b3f      	ldr	r3, [pc, #252]	@ (8007598 <xQueueGenericSend+0x200>)
 800749a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	e00a      	b.n	80074c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d007      	beq.n	80074c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80074b0:	4b39      	ldr	r3, [pc, #228]	@ (8007598 <xQueueGenericSend+0x200>)
 80074b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074c0:	f002 fb0c 	bl	8009adc <vPortExitCritical>
				return pdPASS;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e063      	b.n	8007590 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d103      	bne.n	80074d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074ce:	f002 fb05 	bl	8009adc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	e05c      	b.n	8007590 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d106      	bne.n	80074ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074dc:	f107 0314 	add.w	r3, r7, #20
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 fae7 	bl	8008ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074e6:	2301      	movs	r3, #1
 80074e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074ea:	f002 faf7 	bl	8009adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074ee:	f001 f82f 	bl	8008550 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074f2:	f002 fac1 	bl	8009a78 <vPortEnterCritical>
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074fc:	b25b      	sxtb	r3, r3
 80074fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007502:	d103      	bne.n	800750c <xQueueGenericSend+0x174>
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800750c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007512:	b25b      	sxtb	r3, r3
 8007514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007518:	d103      	bne.n	8007522 <xQueueGenericSend+0x18a>
 800751a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007522:	f002 fadb 	bl	8009adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007526:	1d3a      	adds	r2, r7, #4
 8007528:	f107 0314 	add.w	r3, r7, #20
 800752c:	4611      	mov	r1, r2
 800752e:	4618      	mov	r0, r3
 8007530:	f001 fad6 	bl	8008ae0 <xTaskCheckForTimeOut>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d124      	bne.n	8007584 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800753a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800753c:	f000 fd04 	bl	8007f48 <prvIsQueueFull>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d018      	beq.n	8007578 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007548:	3310      	adds	r3, #16
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f001 f9fa 	bl	8008948 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007554:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007556:	f000 fc8f 	bl	8007e78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800755a:	f001 f807 	bl	800856c <xTaskResumeAll>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	f47f af7c 	bne.w	800745e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007566:	4b0c      	ldr	r3, [pc, #48]	@ (8007598 <xQueueGenericSend+0x200>)
 8007568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	e772      	b.n	800745e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007578:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800757a:	f000 fc7d 	bl	8007e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800757e:	f000 fff5 	bl	800856c <xTaskResumeAll>
 8007582:	e76c      	b.n	800745e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007584:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007586:	f000 fc77 	bl	8007e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800758a:	f000 ffef 	bl	800856c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800758e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007590:	4618      	mov	r0, r3
 8007592:	3738      	adds	r7, #56	@ 0x38
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b090      	sub	sp, #64	@ 0x40
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80075ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10b      	bne.n	80075cc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	e7fd      	b.n	80075c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d103      	bne.n	80075da <xQueueGenericSendFromISR+0x3e>
 80075d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <xQueueGenericSendFromISR+0x42>
 80075da:	2301      	movs	r3, #1
 80075dc:	e000      	b.n	80075e0 <xQueueGenericSendFromISR+0x44>
 80075de:	2300      	movs	r3, #0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10b      	bne.n	80075fc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80075e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80075f6:	bf00      	nop
 80075f8:	bf00      	nop
 80075fa:	e7fd      	b.n	80075f8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d103      	bne.n	800760a <xQueueGenericSendFromISR+0x6e>
 8007602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007606:	2b01      	cmp	r3, #1
 8007608:	d101      	bne.n	800760e <xQueueGenericSendFromISR+0x72>
 800760a:	2301      	movs	r3, #1
 800760c:	e000      	b.n	8007610 <xQueueGenericSendFromISR+0x74>
 800760e:	2300      	movs	r3, #0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10b      	bne.n	800762c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	623b      	str	r3, [r7, #32]
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	e7fd      	b.n	8007628 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800762c:	f002 fb04 	bl	8009c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007630:	f3ef 8211 	mrs	r2, BASEPRI
 8007634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	61fa      	str	r2, [r7, #28]
 8007646:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007648:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800764a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800764c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800764e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007654:	429a      	cmp	r2, r3
 8007656:	d302      	bcc.n	800765e <xQueueGenericSendFromISR+0xc2>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d12f      	bne.n	80076be <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800765e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007660:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007664:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800766c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	68b9      	ldr	r1, [r7, #8]
 8007672:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007674:	f000 fb70 	bl	8007d58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007678:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800767c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007680:	d112      	bne.n	80076a8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007686:	2b00      	cmp	r3, #0
 8007688:	d016      	beq.n	80076b8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800768a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800768c:	3324      	adds	r3, #36	@ 0x24
 800768e:	4618      	mov	r0, r3
 8007690:	f001 f9ac 	bl	80089ec <xTaskRemoveFromEventList>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00e      	beq.n	80076b8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00b      	beq.n	80076b8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	e007      	b.n	80076b8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80076ac:	3301      	adds	r3, #1
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	b25a      	sxtb	r2, r3
 80076b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80076b8:	2301      	movs	r3, #1
 80076ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80076bc:	e001      	b.n	80076c2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076c4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80076cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3740      	adds	r7, #64	@ 0x40
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08e      	sub	sp, #56	@ 0x38
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80076e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10b      	bne.n	8007704 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80076ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	623b      	str	r3, [r7, #32]
}
 80076fe:	bf00      	nop
 8007700:	bf00      	nop
 8007702:	e7fd      	b.n	8007700 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	61fb      	str	r3, [r7, #28]
}
 800771e:	bf00      	nop
 8007720:	bf00      	nop
 8007722:	e7fd      	b.n	8007720 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d103      	bne.n	8007734 <xQueueGiveFromISR+0x5c>
 800772c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <xQueueGiveFromISR+0x60>
 8007734:	2301      	movs	r3, #1
 8007736:	e000      	b.n	800773a <xQueueGiveFromISR+0x62>
 8007738:	2300      	movs	r3, #0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10b      	bne.n	8007756 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	61bb      	str	r3, [r7, #24]
}
 8007750:	bf00      	nop
 8007752:	bf00      	nop
 8007754:	e7fd      	b.n	8007752 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007756:	f002 fa6f 	bl	8009c38 <vPortValidateInterruptPriority>
	__asm volatile
 800775a:	f3ef 8211 	mrs	r2, BASEPRI
 800775e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	617a      	str	r2, [r7, #20]
 8007770:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007772:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007774:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800777a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800777c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007780:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007782:	429a      	cmp	r2, r3
 8007784:	d22b      	bcs.n	80077de <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800778c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007796:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007798:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800779c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a0:	d112      	bne.n	80077c8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d016      	beq.n	80077d8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ac:	3324      	adds	r3, #36	@ 0x24
 80077ae:	4618      	mov	r0, r3
 80077b0:	f001 f91c 	bl	80089ec <xTaskRemoveFromEventList>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00e      	beq.n	80077d8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00b      	beq.n	80077d8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2201      	movs	r2, #1
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	e007      	b.n	80077d8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077cc:	3301      	adds	r3, #1
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	b25a      	sxtb	r2, r3
 80077d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80077d8:	2301      	movs	r3, #1
 80077da:	637b      	str	r3, [r7, #52]	@ 0x34
 80077dc:	e001      	b.n	80077e2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f383 8811 	msr	BASEPRI, r3
}
 80077ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3738      	adds	r7, #56	@ 0x38
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08c      	sub	sp, #48	@ 0x30
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007804:	2300      	movs	r3, #0
 8007806:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800780c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10b      	bne.n	800782a <xQueueReceive+0x32>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	623b      	str	r3, [r7, #32]
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	e7fd      	b.n	8007826 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <xQueueReceive+0x40>
 8007830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <xQueueReceive+0x44>
 8007838:	2301      	movs	r3, #1
 800783a:	e000      	b.n	800783e <xQueueReceive+0x46>
 800783c:	2300      	movs	r3, #0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10b      	bne.n	800785a <xQueueReceive+0x62>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	61fb      	str	r3, [r7, #28]
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop
 8007858:	e7fd      	b.n	8007856 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800785a:	f001 fa9d 	bl	8008d98 <xTaskGetSchedulerState>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d102      	bne.n	800786a <xQueueReceive+0x72>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <xQueueReceive+0x76>
 800786a:	2301      	movs	r3, #1
 800786c:	e000      	b.n	8007870 <xQueueReceive+0x78>
 800786e:	2300      	movs	r3, #0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10b      	bne.n	800788c <xQueueReceive+0x94>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	61bb      	str	r3, [r7, #24]
}
 8007886:	bf00      	nop
 8007888:	bf00      	nop
 800788a:	e7fd      	b.n	8007888 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800788c:	f002 f8f4 	bl	8009a78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007894:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d01f      	beq.n	80078dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800789c:	68b9      	ldr	r1, [r7, #8]
 800789e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078a0:	f000 fac4 	bl	8007e2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a6:	1e5a      	subs	r2, r3, #1
 80078a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00f      	beq.n	80078d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b6:	3310      	adds	r3, #16
 80078b8:	4618      	mov	r0, r3
 80078ba:	f001 f897 	bl	80089ec <xTaskRemoveFromEventList>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d007      	beq.n	80078d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078c4:	4b3c      	ldr	r3, [pc, #240]	@ (80079b8 <xQueueReceive+0x1c0>)
 80078c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078d4:	f002 f902 	bl	8009adc <vPortExitCritical>
				return pdPASS;
 80078d8:	2301      	movs	r3, #1
 80078da:	e069      	b.n	80079b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d103      	bne.n	80078ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078e2:	f002 f8fb 	bl	8009adc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e062      	b.n	80079b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d106      	bne.n	80078fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078f0:	f107 0310 	add.w	r3, r7, #16
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 f8dd 	bl	8008ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078fa:	2301      	movs	r3, #1
 80078fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078fe:	f002 f8ed 	bl	8009adc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007902:	f000 fe25 	bl	8008550 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007906:	f002 f8b7 	bl	8009a78 <vPortEnterCritical>
 800790a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007910:	b25b      	sxtb	r3, r3
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007916:	d103      	bne.n	8007920 <xQueueReceive+0x128>
 8007918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007922:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007926:	b25b      	sxtb	r3, r3
 8007928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792c:	d103      	bne.n	8007936 <xQueueReceive+0x13e>
 800792e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007936:	f002 f8d1 	bl	8009adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800793a:	1d3a      	adds	r2, r7, #4
 800793c:	f107 0310 	add.w	r3, r7, #16
 8007940:	4611      	mov	r1, r2
 8007942:	4618      	mov	r0, r3
 8007944:	f001 f8cc 	bl	8008ae0 <xTaskCheckForTimeOut>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d123      	bne.n	8007996 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800794e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007950:	f000 fae4 	bl	8007f1c <prvIsQueueEmpty>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d017      	beq.n	800798a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800795a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795c:	3324      	adds	r3, #36	@ 0x24
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fff0 	bl	8008948 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007968:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800796a:	f000 fa85 	bl	8007e78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800796e:	f000 fdfd 	bl	800856c <xTaskResumeAll>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d189      	bne.n	800788c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007978:	4b0f      	ldr	r3, [pc, #60]	@ (80079b8 <xQueueReceive+0x1c0>)
 800797a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	e780      	b.n	800788c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800798a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800798c:	f000 fa74 	bl	8007e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007990:	f000 fdec 	bl	800856c <xTaskResumeAll>
 8007994:	e77a      	b.n	800788c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007998:	f000 fa6e 	bl	8007e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800799c:	f000 fde6 	bl	800856c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079a2:	f000 fabb 	bl	8007f1c <prvIsQueueEmpty>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f43f af6f 	beq.w	800788c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3730      	adds	r7, #48	@ 0x30
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	e000ed04 	.word	0xe000ed04

080079bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08e      	sub	sp, #56	@ 0x38
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80079c6:	2300      	movs	r3, #0
 80079c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80079ce:	2300      	movs	r3, #0
 80079d0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10b      	bne.n	80079f0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	623b      	str	r3, [r7, #32]
}
 80079ea:	bf00      	nop
 80079ec:	bf00      	nop
 80079ee:	e7fd      	b.n	80079ec <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00b      	beq.n	8007a10 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	61fb      	str	r3, [r7, #28]
}
 8007a0a:	bf00      	nop
 8007a0c:	bf00      	nop
 8007a0e:	e7fd      	b.n	8007a0c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a10:	f001 f9c2 	bl	8008d98 <xTaskGetSchedulerState>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d102      	bne.n	8007a20 <xQueueSemaphoreTake+0x64>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <xQueueSemaphoreTake+0x68>
 8007a20:	2301      	movs	r3, #1
 8007a22:	e000      	b.n	8007a26 <xQueueSemaphoreTake+0x6a>
 8007a24:	2300      	movs	r3, #0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10b      	bne.n	8007a42 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	61bb      	str	r3, [r7, #24]
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	e7fd      	b.n	8007a3e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a42:	f002 f819 	bl	8009a78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d024      	beq.n	8007a9c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a54:	1e5a      	subs	r2, r3, #1
 8007a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a58:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d104      	bne.n	8007a6c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a62:	f001 fb13 	bl	800908c <pvTaskIncrementMutexHeldCount>
 8007a66:	4602      	mov	r2, r0
 8007a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00f      	beq.n	8007a94 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a76:	3310      	adds	r3, #16
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 ffb7 	bl	80089ec <xTaskRemoveFromEventList>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d007      	beq.n	8007a94 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a84:	4b54      	ldr	r3, [pc, #336]	@ (8007bd8 <xQueueSemaphoreTake+0x21c>)
 8007a86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a94:	f002 f822 	bl	8009adc <vPortExitCritical>
				return pdPASS;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e098      	b.n	8007bce <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d112      	bne.n	8007ac8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00b      	beq.n	8007ac0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	617b      	str	r3, [r7, #20]
}
 8007aba:	bf00      	nop
 8007abc:	bf00      	nop
 8007abe:	e7fd      	b.n	8007abc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007ac0:	f002 f80c 	bl	8009adc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	e082      	b.n	8007bce <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d106      	bne.n	8007adc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ace:	f107 030c 	add.w	r3, r7, #12
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 ffee 	bl	8008ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007adc:	f001 fffe 	bl	8009adc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ae0:	f000 fd36 	bl	8008550 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ae4:	f001 ffc8 	bl	8009a78 <vPortEnterCritical>
 8007ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007aee:	b25b      	sxtb	r3, r3
 8007af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af4:	d103      	bne.n	8007afe <xQueueSemaphoreTake+0x142>
 8007af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b04:	b25b      	sxtb	r3, r3
 8007b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0a:	d103      	bne.n	8007b14 <xQueueSemaphoreTake+0x158>
 8007b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b14:	f001 ffe2 	bl	8009adc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b18:	463a      	mov	r2, r7
 8007b1a:	f107 030c 	add.w	r3, r7, #12
 8007b1e:	4611      	mov	r1, r2
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 ffdd 	bl	8008ae0 <xTaskCheckForTimeOut>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d132      	bne.n	8007b92 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b2e:	f000 f9f5 	bl	8007f1c <prvIsQueueEmpty>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d026      	beq.n	8007b86 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d109      	bne.n	8007b54 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007b40:	f001 ff9a 	bl	8009a78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f001 f943 	bl	8008dd4 <xTaskPriorityInherit>
 8007b4e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007b50:	f001 ffc4 	bl	8009adc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b56:	3324      	adds	r3, #36	@ 0x24
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 fef3 	bl	8008948 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b64:	f000 f988 	bl	8007e78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b68:	f000 fd00 	bl	800856c <xTaskResumeAll>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f47f af67 	bne.w	8007a42 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007b74:	4b18      	ldr	r3, [pc, #96]	@ (8007bd8 <xQueueSemaphoreTake+0x21c>)
 8007b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	e75d      	b.n	8007a42 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b88:	f000 f976 	bl	8007e78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b8c:	f000 fcee 	bl	800856c <xTaskResumeAll>
 8007b90:	e757      	b.n	8007a42 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b94:	f000 f970 	bl	8007e78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b98:	f000 fce8 	bl	800856c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b9e:	f000 f9bd 	bl	8007f1c <prvIsQueueEmpty>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f43f af4c 	beq.w	8007a42 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00d      	beq.n	8007bcc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007bb0:	f001 ff62 	bl	8009a78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007bb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007bb6:	f000 f8b7 	bl	8007d28 <prvGetDisinheritPriorityAfterTimeout>
 8007bba:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f001 f9de 	bl	8008f84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007bc8:	f001 ff88 	bl	8009adc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007bcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3738      	adds	r7, #56	@ 0x38
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08e      	sub	sp, #56	@ 0x38
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10b      	bne.n	8007c0a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	623b      	str	r3, [r7, #32]
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	e7fd      	b.n	8007c06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d103      	bne.n	8007c18 <xQueueReceiveFromISR+0x3c>
 8007c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <xQueueReceiveFromISR+0x40>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e000      	b.n	8007c1e <xQueueReceiveFromISR+0x42>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10b      	bne.n	8007c3a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	61fb      	str	r3, [r7, #28]
}
 8007c34:	bf00      	nop
 8007c36:	bf00      	nop
 8007c38:	e7fd      	b.n	8007c36 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c3a:	f001 fffd 	bl	8009c38 <vPortValidateInterruptPriority>
	__asm volatile
 8007c3e:	f3ef 8211 	mrs	r2, BASEPRI
 8007c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	61ba      	str	r2, [r7, #24]
 8007c54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d02f      	beq.n	8007cc6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c70:	68b9      	ldr	r1, [r7, #8]
 8007c72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c74:	f000 f8da 	bl	8007e2c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7a:	1e5a      	subs	r2, r3, #1
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c88:	d112      	bne.n	8007cb0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d016      	beq.n	8007cc0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c94:	3310      	adds	r3, #16
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 fea8 	bl	80089ec <xTaskRemoveFromEventList>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00e      	beq.n	8007cc0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	e007      	b.n	8007cc0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	b25a      	sxtb	r2, r3
 8007cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cc4:	e001      	b.n	8007cca <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ccc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f383 8811 	msr	BASEPRI, r3
}
 8007cd4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3738      	adds	r7, #56	@ 0x38
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10b      	bne.n	8007d0a <vQueueDelete+0x2a>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	60bb      	str	r3, [r7, #8]
}
 8007d04:	bf00      	nop
 8007d06:	bf00      	nop
 8007d08:	e7fd      	b.n	8007d06 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f95e 	bl	8007fcc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d102      	bne.n	8007d20 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f002 f89c 	bl	8009e58 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007d20:	bf00      	nop
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d006      	beq.n	8007d46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e001      	b.n	8007d4a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
	}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d64:	2300      	movs	r3, #0
 8007d66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10d      	bne.n	8007d92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d14d      	bne.n	8007e1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f001 f88e 	bl	8008ea4 <xTaskPriorityDisinherit>
 8007d88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	609a      	str	r2, [r3, #8]
 8007d90:	e043      	b.n	8007e1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d119      	bne.n	8007dcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6858      	ldr	r0, [r3, #4]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da0:	461a      	mov	r2, r3
 8007da2:	68b9      	ldr	r1, [r7, #8]
 8007da4:	f00f ffb9 	bl	8017d1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db0:	441a      	add	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d32b      	bcc.n	8007e1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	605a      	str	r2, [r3, #4]
 8007dca:	e026      	b.n	8007e1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	68d8      	ldr	r0, [r3, #12]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	68b9      	ldr	r1, [r7, #8]
 8007dd8:	f00f ff9f 	bl	8017d1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de4:	425b      	negs	r3, r3
 8007de6:	441a      	add	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	68da      	ldr	r2, [r3, #12]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d207      	bcs.n	8007e08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e00:	425b      	negs	r3, r3
 8007e02:	441a      	add	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d105      	bne.n	8007e1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007e22:	697b      	ldr	r3, [r7, #20]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3718      	adds	r7, #24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d018      	beq.n	8007e70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e46:	441a      	add	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68da      	ldr	r2, [r3, #12]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d303      	bcc.n	8007e60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68d9      	ldr	r1, [r3, #12]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6838      	ldr	r0, [r7, #0]
 8007e6c:	f00f ff55 	bl	8017d1a <memcpy>
	}
}
 8007e70:	bf00      	nop
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e80:	f001 fdfa 	bl	8009a78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e8c:	e011      	b.n	8007eb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d012      	beq.n	8007ebc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3324      	adds	r3, #36	@ 0x24
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 fda6 	bl	80089ec <xTaskRemoveFromEventList>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ea6:	f000 fe7f 	bl	8008ba8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dce9      	bgt.n	8007e8e <prvUnlockQueue+0x16>
 8007eba:	e000      	b.n	8007ebe <prvUnlockQueue+0x46>
					break;
 8007ebc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	22ff      	movs	r2, #255	@ 0xff
 8007ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007ec6:	f001 fe09 	bl	8009adc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007eca:	f001 fdd5 	bl	8009a78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ed4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ed6:	e011      	b.n	8007efc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d012      	beq.n	8007f06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3310      	adds	r3, #16
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 fd81 	bl	80089ec <xTaskRemoveFromEventList>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ef0:	f000 fe5a 	bl	8008ba8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dce9      	bgt.n	8007ed8 <prvUnlockQueue+0x60>
 8007f04:	e000      	b.n	8007f08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	22ff      	movs	r2, #255	@ 0xff
 8007f0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007f10:	f001 fde4 	bl	8009adc <vPortExitCritical>
}
 8007f14:	bf00      	nop
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f24:	f001 fda8 	bl	8009a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d102      	bne.n	8007f36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f30:	2301      	movs	r3, #1
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	e001      	b.n	8007f3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f36:	2300      	movs	r3, #0
 8007f38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f3a:	f001 fdcf 	bl	8009adc <vPortExitCritical>

	return xReturn;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f50:	f001 fd92 	bl	8009a78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d102      	bne.n	8007f66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f60:	2301      	movs	r3, #1
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	e001      	b.n	8007f6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f6a:	f001 fdb7 	bl	8009adc <vPortExitCritical>

	return xReturn;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f82:	2300      	movs	r3, #0
 8007f84:	60fb      	str	r3, [r7, #12]
 8007f86:	e014      	b.n	8007fb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f88:	4a0f      	ldr	r2, [pc, #60]	@ (8007fc8 <vQueueAddToRegistry+0x50>)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10b      	bne.n	8007fac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f94:	490c      	ldr	r1, [pc, #48]	@ (8007fc8 <vQueueAddToRegistry+0x50>)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8007fc8 <vQueueAddToRegistry+0x50>)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007faa:	e006      	b.n	8007fba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2b07      	cmp	r3, #7
 8007fb6:	d9e7      	bls.n	8007f88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	24001bf4 	.word	0x24001bf4

08007fcc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	e016      	b.n	8008008 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007fda:	4a10      	ldr	r2, [pc, #64]	@ (800801c <vQueueUnregisterQueue+0x50>)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	00db      	lsls	r3, r3, #3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d10b      	bne.n	8008002 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007fea:	4a0c      	ldr	r2, [pc, #48]	@ (800801c <vQueueUnregisterQueue+0x50>)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2100      	movs	r1, #0
 8007ff0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007ff4:	4a09      	ldr	r2, [pc, #36]	@ (800801c <vQueueUnregisterQueue+0x50>)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	00db      	lsls	r3, r3, #3
 8007ffa:	4413      	add	r3, r2
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	605a      	str	r2, [r3, #4]
				break;
 8008000:	e006      	b.n	8008010 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3301      	adds	r3, #1
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2b07      	cmp	r3, #7
 800800c:	d9e5      	bls.n	8007fda <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800800e:	bf00      	nop
 8008010:	bf00      	nop
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	24001bf4 	.word	0x24001bf4

08008020 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008030:	f001 fd22 	bl	8009a78 <vPortEnterCritical>
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800803a:	b25b      	sxtb	r3, r3
 800803c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008040:	d103      	bne.n	800804a <vQueueWaitForMessageRestricted+0x2a>
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008050:	b25b      	sxtb	r3, r3
 8008052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008056:	d103      	bne.n	8008060 <vQueueWaitForMessageRestricted+0x40>
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008060:	f001 fd3c 	bl	8009adc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	2b00      	cmp	r3, #0
 800806a:	d106      	bne.n	800807a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	3324      	adds	r3, #36	@ 0x24
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	68b9      	ldr	r1, [r7, #8]
 8008074:	4618      	mov	r0, r3
 8008076:	f000 fc8d 	bl	8008994 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800807a:	6978      	ldr	r0, [r7, #20]
 800807c:	f7ff fefc 	bl	8007e78 <prvUnlockQueue>
	}
 8008080:	bf00      	nop
 8008082:	3718      	adds	r7, #24
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08e      	sub	sp, #56	@ 0x38
 800808c:	af04      	add	r7, sp, #16
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10b      	bne.n	80080b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	623b      	str	r3, [r7, #32]
}
 80080ae:	bf00      	nop
 80080b0:	bf00      	nop
 80080b2:	e7fd      	b.n	80080b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10b      	bne.n	80080d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	61fb      	str	r3, [r7, #28]
}
 80080cc:	bf00      	nop
 80080ce:	bf00      	nop
 80080d0:	e7fd      	b.n	80080ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080d2:	23a8      	movs	r3, #168	@ 0xa8
 80080d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	2ba8      	cmp	r3, #168	@ 0xa8
 80080da:	d00b      	beq.n	80080f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	61bb      	str	r3, [r7, #24]
}
 80080ee:	bf00      	nop
 80080f0:	bf00      	nop
 80080f2:	e7fd      	b.n	80080f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80080f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80080f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d01e      	beq.n	800813a <xTaskCreateStatic+0xb2>
 80080fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d01b      	beq.n	800813a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008104:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008108:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800810a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800810c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810e:	2202      	movs	r2, #2
 8008110:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008114:	2300      	movs	r3, #0
 8008116:	9303      	str	r3, [sp, #12]
 8008118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811a:	9302      	str	r3, [sp, #8]
 800811c:	f107 0314 	add.w	r3, r7, #20
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	68b9      	ldr	r1, [r7, #8]
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 f851 	bl	80081d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008132:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008134:	f000 f8f6 	bl	8008324 <prvAddNewTaskToReadyList>
 8008138:	e001      	b.n	800813e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800813a:	2300      	movs	r3, #0
 800813c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800813e:	697b      	ldr	r3, [r7, #20]
	}
 8008140:	4618      	mov	r0, r3
 8008142:	3728      	adds	r7, #40	@ 0x28
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008148:	b580      	push	{r7, lr}
 800814a:	b08c      	sub	sp, #48	@ 0x30
 800814c:	af04      	add	r7, sp, #16
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	4613      	mov	r3, r2
 8008156:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008158:	88fb      	ldrh	r3, [r7, #6]
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4618      	mov	r0, r3
 800815e:	f001 fdad 	bl	8009cbc <pvPortMalloc>
 8008162:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00e      	beq.n	8008188 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800816a:	20a8      	movs	r0, #168	@ 0xa8
 800816c:	f001 fda6 	bl	8009cbc <pvPortMalloc>
 8008170:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	631a      	str	r2, [r3, #48]	@ 0x30
 800817e:	e005      	b.n	800818c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008180:	6978      	ldr	r0, [r7, #20]
 8008182:	f001 fe69 	bl	8009e58 <vPortFree>
 8008186:	e001      	b.n	800818c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008188:	2300      	movs	r3, #0
 800818a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d017      	beq.n	80081c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800819a:	88fa      	ldrh	r2, [r7, #6]
 800819c:	2300      	movs	r3, #0
 800819e:	9303      	str	r3, [sp, #12]
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	9302      	str	r3, [sp, #8]
 80081a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	68b9      	ldr	r1, [r7, #8]
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 f80f 	bl	80081d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081b6:	69f8      	ldr	r0, [r7, #28]
 80081b8:	f000 f8b4 	bl	8008324 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081bc:	2301      	movs	r3, #1
 80081be:	61bb      	str	r3, [r7, #24]
 80081c0:	e002      	b.n	80081c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081c2:	f04f 33ff 	mov.w	r3, #4294967295
 80081c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081c8:	69bb      	ldr	r3, [r7, #24]
	}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3720      	adds	r7, #32
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80081e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	461a      	mov	r2, r3
 80081ec:	21a5      	movs	r1, #165	@ 0xa5
 80081ee:	f00f fcc8 	bl	8017b82 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80081fc:	440b      	add	r3, r1
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	f023 0307 	bic.w	r3, r3, #7
 800820a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	f003 0307 	and.w	r3, r3, #7
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00b      	beq.n	800822e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	617b      	str	r3, [r7, #20]
}
 8008228:	bf00      	nop
 800822a:	bf00      	nop
 800822c:	e7fd      	b.n	800822a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d01f      	beq.n	8008274 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008234:	2300      	movs	r3, #0
 8008236:	61fb      	str	r3, [r7, #28]
 8008238:	e012      	b.n	8008260 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	4413      	add	r3, r2
 8008240:	7819      	ldrb	r1, [r3, #0]
 8008242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	4413      	add	r3, r2
 8008248:	3334      	adds	r3, #52	@ 0x34
 800824a:	460a      	mov	r2, r1
 800824c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	4413      	add	r3, r2
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d006      	beq.n	8008268 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	3301      	adds	r3, #1
 800825e:	61fb      	str	r3, [r7, #28]
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	2b0f      	cmp	r3, #15
 8008264:	d9e9      	bls.n	800823a <prvInitialiseNewTask+0x66>
 8008266:	e000      	b.n	800826a <prvInitialiseNewTask+0x96>
			{
				break;
 8008268:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800826a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008272:	e003      	b.n	800827c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008276:	2200      	movs	r2, #0
 8008278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800827c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827e:	2b37      	cmp	r3, #55	@ 0x37
 8008280:	d901      	bls.n	8008286 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008282:	2337      	movs	r3, #55	@ 0x37
 8008284:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800828a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800828c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008290:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008294:	2200      	movs	r2, #0
 8008296:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829a:	3304      	adds	r3, #4
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe fd7b 	bl	8006d98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a4:	3318      	adds	r3, #24
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fe fd76 	bl	8006d98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c4:	2200      	movs	r2, #0
 80082c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80082d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d4:	3354      	adds	r3, #84	@ 0x54
 80082d6:	224c      	movs	r2, #76	@ 0x4c
 80082d8:	2100      	movs	r1, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f00f fc51 	bl	8017b82 <memset>
 80082e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e2:	4a0d      	ldr	r2, [pc, #52]	@ (8008318 <prvInitialiseNewTask+0x144>)
 80082e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	4a0c      	ldr	r2, [pc, #48]	@ (800831c <prvInitialiseNewTask+0x148>)
 80082ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80082ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008320 <prvInitialiseNewTask+0x14c>)
 80082f0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	68f9      	ldr	r1, [r7, #12]
 80082f6:	69b8      	ldr	r0, [r7, #24]
 80082f8:	f001 fa8a 	bl	8009810 <pxPortInitialiseStack>
 80082fc:	4602      	mov	r2, r0
 80082fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008300:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800830c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800830e:	bf00      	nop
 8008310:	3720      	adds	r7, #32
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	2401070c 	.word	0x2401070c
 800831c:	24010774 	.word	0x24010774
 8008320:	240107dc 	.word	0x240107dc

08008324 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800832c:	f001 fba4 	bl	8009a78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008330:	4b2d      	ldr	r3, [pc, #180]	@ (80083e8 <prvAddNewTaskToReadyList+0xc4>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3301      	adds	r3, #1
 8008336:	4a2c      	ldr	r2, [pc, #176]	@ (80083e8 <prvAddNewTaskToReadyList+0xc4>)
 8008338:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800833a:	4b2c      	ldr	r3, [pc, #176]	@ (80083ec <prvAddNewTaskToReadyList+0xc8>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d109      	bne.n	8008356 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008342:	4a2a      	ldr	r2, [pc, #168]	@ (80083ec <prvAddNewTaskToReadyList+0xc8>)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008348:	4b27      	ldr	r3, [pc, #156]	@ (80083e8 <prvAddNewTaskToReadyList+0xc4>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d110      	bne.n	8008372 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008350:	f000 fc4e 	bl	8008bf0 <prvInitialiseTaskLists>
 8008354:	e00d      	b.n	8008372 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008356:	4b26      	ldr	r3, [pc, #152]	@ (80083f0 <prvAddNewTaskToReadyList+0xcc>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d109      	bne.n	8008372 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800835e:	4b23      	ldr	r3, [pc, #140]	@ (80083ec <prvAddNewTaskToReadyList+0xc8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008368:	429a      	cmp	r2, r3
 800836a:	d802      	bhi.n	8008372 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800836c:	4a1f      	ldr	r2, [pc, #124]	@ (80083ec <prvAddNewTaskToReadyList+0xc8>)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008372:	4b20      	ldr	r3, [pc, #128]	@ (80083f4 <prvAddNewTaskToReadyList+0xd0>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3301      	adds	r3, #1
 8008378:	4a1e      	ldr	r2, [pc, #120]	@ (80083f4 <prvAddNewTaskToReadyList+0xd0>)
 800837a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800837c:	4b1d      	ldr	r3, [pc, #116]	@ (80083f4 <prvAddNewTaskToReadyList+0xd0>)
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008388:	4b1b      	ldr	r3, [pc, #108]	@ (80083f8 <prvAddNewTaskToReadyList+0xd4>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d903      	bls.n	8008398 <prvAddNewTaskToReadyList+0x74>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008394:	4a18      	ldr	r2, [pc, #96]	@ (80083f8 <prvAddNewTaskToReadyList+0xd4>)
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800839c:	4613      	mov	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4a15      	ldr	r2, [pc, #84]	@ (80083fc <prvAddNewTaskToReadyList+0xd8>)
 80083a6:	441a      	add	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3304      	adds	r3, #4
 80083ac:	4619      	mov	r1, r3
 80083ae:	4610      	mov	r0, r2
 80083b0:	f7fe fcff 	bl	8006db2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083b4:	f001 fb92 	bl	8009adc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083b8:	4b0d      	ldr	r3, [pc, #52]	@ (80083f0 <prvAddNewTaskToReadyList+0xcc>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00e      	beq.n	80083de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083c0:	4b0a      	ldr	r3, [pc, #40]	@ (80083ec <prvAddNewTaskToReadyList+0xc8>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d207      	bcs.n	80083de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008400 <prvAddNewTaskToReadyList+0xdc>)
 80083d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083de:	bf00      	nop
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	24002108 	.word	0x24002108
 80083ec:	24001c34 	.word	0x24001c34
 80083f0:	24002114 	.word	0x24002114
 80083f4:	24002124 	.word	0x24002124
 80083f8:	24002110 	.word	0x24002110
 80083fc:	24001c38 	.word	0x24001c38
 8008400:	e000ed04 	.word	0xe000ed04

08008404 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800840c:	2300      	movs	r3, #0
 800840e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d018      	beq.n	8008448 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008416:	4b14      	ldr	r3, [pc, #80]	@ (8008468 <vTaskDelay+0x64>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00b      	beq.n	8008436 <vTaskDelay+0x32>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	60bb      	str	r3, [r7, #8]
}
 8008430:	bf00      	nop
 8008432:	bf00      	nop
 8008434:	e7fd      	b.n	8008432 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008436:	f000 f88b 	bl	8008550 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800843a:	2100      	movs	r1, #0
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fe39 	bl	80090b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008442:	f000 f893 	bl	800856c <xTaskResumeAll>
 8008446:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d107      	bne.n	800845e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800844e:	4b07      	ldr	r3, [pc, #28]	@ (800846c <vTaskDelay+0x68>)
 8008450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800845e:	bf00      	nop
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	24002130 	.word	0x24002130
 800846c:	e000ed04 	.word	0xe000ed04

08008470 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08a      	sub	sp, #40	@ 0x28
 8008474:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008476:	2300      	movs	r3, #0
 8008478:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800847a:	2300      	movs	r3, #0
 800847c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800847e:	463a      	mov	r2, r7
 8008480:	1d39      	adds	r1, r7, #4
 8008482:	f107 0308 	add.w	r3, r7, #8
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fc32 	bl	8006cf0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	9202      	str	r2, [sp, #8]
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	2300      	movs	r3, #0
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	2300      	movs	r3, #0
 800849c:	460a      	mov	r2, r1
 800849e:	4924      	ldr	r1, [pc, #144]	@ (8008530 <vTaskStartScheduler+0xc0>)
 80084a0:	4824      	ldr	r0, [pc, #144]	@ (8008534 <vTaskStartScheduler+0xc4>)
 80084a2:	f7ff fdf1 	bl	8008088 <xTaskCreateStatic>
 80084a6:	4603      	mov	r3, r0
 80084a8:	4a23      	ldr	r2, [pc, #140]	@ (8008538 <vTaskStartScheduler+0xc8>)
 80084aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084ac:	4b22      	ldr	r3, [pc, #136]	@ (8008538 <vTaskStartScheduler+0xc8>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084b4:	2301      	movs	r3, #1
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	e001      	b.n	80084be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d102      	bne.n	80084ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80084c4:	f000 fe4a 	bl	800915c <xTimerCreateTimerTask>
 80084c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d11b      	bne.n	8008508 <vTaskStartScheduler+0x98>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	613b      	str	r3, [r7, #16]
}
 80084e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084e4:	4b15      	ldr	r3, [pc, #84]	@ (800853c <vTaskStartScheduler+0xcc>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3354      	adds	r3, #84	@ 0x54
 80084ea:	4a15      	ldr	r2, [pc, #84]	@ (8008540 <vTaskStartScheduler+0xd0>)
 80084ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084ee:	4b15      	ldr	r3, [pc, #84]	@ (8008544 <vTaskStartScheduler+0xd4>)
 80084f0:	f04f 32ff 	mov.w	r2, #4294967295
 80084f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084f6:	4b14      	ldr	r3, [pc, #80]	@ (8008548 <vTaskStartScheduler+0xd8>)
 80084f8:	2201      	movs	r2, #1
 80084fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084fc:	4b13      	ldr	r3, [pc, #76]	@ (800854c <vTaskStartScheduler+0xdc>)
 80084fe:	2200      	movs	r2, #0
 8008500:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008502:	f001 fa15 	bl	8009930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008506:	e00f      	b.n	8008528 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850e:	d10b      	bne.n	8008528 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	60fb      	str	r3, [r7, #12]
}
 8008522:	bf00      	nop
 8008524:	bf00      	nop
 8008526:	e7fd      	b.n	8008524 <vTaskStartScheduler+0xb4>
}
 8008528:	bf00      	nop
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	08018bc0 	.word	0x08018bc0
 8008534:	08008bc1 	.word	0x08008bc1
 8008538:	2400212c 	.word	0x2400212c
 800853c:	24001c34 	.word	0x24001c34
 8008540:	24000050 	.word	0x24000050
 8008544:	24002128 	.word	0x24002128
 8008548:	24002114 	.word	0x24002114
 800854c:	2400210c 	.word	0x2400210c

08008550 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008554:	4b04      	ldr	r3, [pc, #16]	@ (8008568 <vTaskSuspendAll+0x18>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3301      	adds	r3, #1
 800855a:	4a03      	ldr	r2, [pc, #12]	@ (8008568 <vTaskSuspendAll+0x18>)
 800855c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800855e:	bf00      	nop
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr
 8008568:	24002130 	.word	0x24002130

0800856c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008576:	2300      	movs	r3, #0
 8008578:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800857a:	4b42      	ldr	r3, [pc, #264]	@ (8008684 <xTaskResumeAll+0x118>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10b      	bne.n	800859a <xTaskResumeAll+0x2e>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	603b      	str	r3, [r7, #0]
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	e7fd      	b.n	8008596 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800859a:	f001 fa6d 	bl	8009a78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800859e:	4b39      	ldr	r3, [pc, #228]	@ (8008684 <xTaskResumeAll+0x118>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	4a37      	ldr	r2, [pc, #220]	@ (8008684 <xTaskResumeAll+0x118>)
 80085a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085a8:	4b36      	ldr	r3, [pc, #216]	@ (8008684 <xTaskResumeAll+0x118>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d162      	bne.n	8008676 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085b0:	4b35      	ldr	r3, [pc, #212]	@ (8008688 <xTaskResumeAll+0x11c>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d05e      	beq.n	8008676 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085b8:	e02f      	b.n	800861a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ba:	4b34      	ldr	r3, [pc, #208]	@ (800868c <xTaskResumeAll+0x120>)
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3318      	adds	r3, #24
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe fc50 	bl	8006e6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3304      	adds	r3, #4
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fe fc4b 	bl	8006e6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085da:	4b2d      	ldr	r3, [pc, #180]	@ (8008690 <xTaskResumeAll+0x124>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d903      	bls.n	80085ea <xTaskResumeAll+0x7e>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008690 <xTaskResumeAll+0x124>)
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ee:	4613      	mov	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4a27      	ldr	r2, [pc, #156]	@ (8008694 <xTaskResumeAll+0x128>)
 80085f8:	441a      	add	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	3304      	adds	r3, #4
 80085fe:	4619      	mov	r1, r3
 8008600:	4610      	mov	r0, r2
 8008602:	f7fe fbd6 	bl	8006db2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800860a:	4b23      	ldr	r3, [pc, #140]	@ (8008698 <xTaskResumeAll+0x12c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008610:	429a      	cmp	r2, r3
 8008612:	d302      	bcc.n	800861a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008614:	4b21      	ldr	r3, [pc, #132]	@ (800869c <xTaskResumeAll+0x130>)
 8008616:	2201      	movs	r2, #1
 8008618:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800861a:	4b1c      	ldr	r3, [pc, #112]	@ (800868c <xTaskResumeAll+0x120>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1cb      	bne.n	80085ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008628:	f000 fb86 	bl	8008d38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800862c:	4b1c      	ldr	r3, [pc, #112]	@ (80086a0 <xTaskResumeAll+0x134>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d010      	beq.n	800865a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008638:	f000 f858 	bl	80086ec <xTaskIncrementTick>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008642:	4b16      	ldr	r3, [pc, #88]	@ (800869c <xTaskResumeAll+0x130>)
 8008644:	2201      	movs	r2, #1
 8008646:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	3b01      	subs	r3, #1
 800864c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1f1      	bne.n	8008638 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008654:	4b12      	ldr	r3, [pc, #72]	@ (80086a0 <xTaskResumeAll+0x134>)
 8008656:	2200      	movs	r2, #0
 8008658:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800865a:	4b10      	ldr	r3, [pc, #64]	@ (800869c <xTaskResumeAll+0x130>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008662:	2301      	movs	r3, #1
 8008664:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008666:	4b0f      	ldr	r3, [pc, #60]	@ (80086a4 <xTaskResumeAll+0x138>)
 8008668:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008676:	f001 fa31 	bl	8009adc <vPortExitCritical>

	return xAlreadyYielded;
 800867a:	68bb      	ldr	r3, [r7, #8]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	24002130 	.word	0x24002130
 8008688:	24002108 	.word	0x24002108
 800868c:	240020c8 	.word	0x240020c8
 8008690:	24002110 	.word	0x24002110
 8008694:	24001c38 	.word	0x24001c38
 8008698:	24001c34 	.word	0x24001c34
 800869c:	2400211c 	.word	0x2400211c
 80086a0:	24002118 	.word	0x24002118
 80086a4:	e000ed04 	.word	0xe000ed04

080086a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086ae:	4b05      	ldr	r3, [pc, #20]	@ (80086c4 <xTaskGetTickCount+0x1c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086b4:	687b      	ldr	r3, [r7, #4]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	2400210c 	.word	0x2400210c

080086c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086ce:	f001 fab3 	bl	8009c38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80086d2:	2300      	movs	r3, #0
 80086d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80086d6:	4b04      	ldr	r3, [pc, #16]	@ (80086e8 <xTaskGetTickCountFromISR+0x20>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086dc:	683b      	ldr	r3, [r7, #0]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	2400210c 	.word	0x2400210c

080086ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086f2:	2300      	movs	r3, #0
 80086f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086f6:	4b4f      	ldr	r3, [pc, #316]	@ (8008834 <xTaskIncrementTick+0x148>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f040 8090 	bne.w	8008820 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008700:	4b4d      	ldr	r3, [pc, #308]	@ (8008838 <xTaskIncrementTick+0x14c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3301      	adds	r3, #1
 8008706:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008708:	4a4b      	ldr	r2, [pc, #300]	@ (8008838 <xTaskIncrementTick+0x14c>)
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d121      	bne.n	8008758 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008714:	4b49      	ldr	r3, [pc, #292]	@ (800883c <xTaskIncrementTick+0x150>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <xTaskIncrementTick+0x4a>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	603b      	str	r3, [r7, #0]
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <xTaskIncrementTick+0x46>
 8008736:	4b41      	ldr	r3, [pc, #260]	@ (800883c <xTaskIncrementTick+0x150>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	4b40      	ldr	r3, [pc, #256]	@ (8008840 <xTaskIncrementTick+0x154>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a3e      	ldr	r2, [pc, #248]	@ (800883c <xTaskIncrementTick+0x150>)
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	4a3e      	ldr	r2, [pc, #248]	@ (8008840 <xTaskIncrementTick+0x154>)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	4b3e      	ldr	r3, [pc, #248]	@ (8008844 <xTaskIncrementTick+0x158>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3301      	adds	r3, #1
 8008750:	4a3c      	ldr	r2, [pc, #240]	@ (8008844 <xTaskIncrementTick+0x158>)
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	f000 faf0 	bl	8008d38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008758:	4b3b      	ldr	r3, [pc, #236]	@ (8008848 <xTaskIncrementTick+0x15c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	429a      	cmp	r2, r3
 8008760:	d349      	bcc.n	80087f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008762:	4b36      	ldr	r3, [pc, #216]	@ (800883c <xTaskIncrementTick+0x150>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d104      	bne.n	8008776 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800876c:	4b36      	ldr	r3, [pc, #216]	@ (8008848 <xTaskIncrementTick+0x15c>)
 800876e:	f04f 32ff 	mov.w	r2, #4294967295
 8008772:	601a      	str	r2, [r3, #0]
					break;
 8008774:	e03f      	b.n	80087f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008776:	4b31      	ldr	r3, [pc, #196]	@ (800883c <xTaskIncrementTick+0x150>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	429a      	cmp	r2, r3
 800878c:	d203      	bcs.n	8008796 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800878e:	4a2e      	ldr	r2, [pc, #184]	@ (8008848 <xTaskIncrementTick+0x15c>)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008794:	e02f      	b.n	80087f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	3304      	adds	r3, #4
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe fb66 	bl	8006e6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d004      	beq.n	80087b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	3318      	adds	r3, #24
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fe fb5d 	bl	8006e6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087b6:	4b25      	ldr	r3, [pc, #148]	@ (800884c <xTaskIncrementTick+0x160>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d903      	bls.n	80087c6 <xTaskIncrementTick+0xda>
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c2:	4a22      	ldr	r2, [pc, #136]	@ (800884c <xTaskIncrementTick+0x160>)
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ca:	4613      	mov	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4a1f      	ldr	r2, [pc, #124]	@ (8008850 <xTaskIncrementTick+0x164>)
 80087d4:	441a      	add	r2, r3
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	3304      	adds	r3, #4
 80087da:	4619      	mov	r1, r3
 80087dc:	4610      	mov	r0, r2
 80087de:	f7fe fae8 	bl	8006db2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087e6:	4b1b      	ldr	r3, [pc, #108]	@ (8008854 <xTaskIncrementTick+0x168>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d3b8      	bcc.n	8008762 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80087f0:	2301      	movs	r3, #1
 80087f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087f4:	e7b5      	b.n	8008762 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087f6:	4b17      	ldr	r3, [pc, #92]	@ (8008854 <xTaskIncrementTick+0x168>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087fc:	4914      	ldr	r1, [pc, #80]	@ (8008850 <xTaskIncrementTick+0x164>)
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	440b      	add	r3, r1
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d901      	bls.n	8008812 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800880e:	2301      	movs	r3, #1
 8008810:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008812:	4b11      	ldr	r3, [pc, #68]	@ (8008858 <xTaskIncrementTick+0x16c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d007      	beq.n	800882a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800881a:	2301      	movs	r3, #1
 800881c:	617b      	str	r3, [r7, #20]
 800881e:	e004      	b.n	800882a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008820:	4b0e      	ldr	r3, [pc, #56]	@ (800885c <xTaskIncrementTick+0x170>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3301      	adds	r3, #1
 8008826:	4a0d      	ldr	r2, [pc, #52]	@ (800885c <xTaskIncrementTick+0x170>)
 8008828:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800882a:	697b      	ldr	r3, [r7, #20]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	24002130 	.word	0x24002130
 8008838:	2400210c 	.word	0x2400210c
 800883c:	240020c0 	.word	0x240020c0
 8008840:	240020c4 	.word	0x240020c4
 8008844:	24002120 	.word	0x24002120
 8008848:	24002128 	.word	0x24002128
 800884c:	24002110 	.word	0x24002110
 8008850:	24001c38 	.word	0x24001c38
 8008854:	24001c34 	.word	0x24001c34
 8008858:	2400211c 	.word	0x2400211c
 800885c:	24002118 	.word	0x24002118

08008860 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008866:	4b32      	ldr	r3, [pc, #200]	@ (8008930 <vTaskSwitchContext+0xd0>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800886e:	4b31      	ldr	r3, [pc, #196]	@ (8008934 <vTaskSwitchContext+0xd4>)
 8008870:	2201      	movs	r2, #1
 8008872:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008874:	e058      	b.n	8008928 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 8008876:	4b2f      	ldr	r3, [pc, #188]	@ (8008934 <vTaskSwitchContext+0xd4>)
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800887c:	4b2e      	ldr	r3, [pc, #184]	@ (8008938 <vTaskSwitchContext+0xd8>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	4b2d      	ldr	r3, [pc, #180]	@ (8008938 <vTaskSwitchContext+0xd8>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008888:	429a      	cmp	r2, r3
 800888a:	d808      	bhi.n	800889e <vTaskSwitchContext+0x3e>
 800888c:	4b2a      	ldr	r3, [pc, #168]	@ (8008938 <vTaskSwitchContext+0xd8>)
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	4b29      	ldr	r3, [pc, #164]	@ (8008938 <vTaskSwitchContext+0xd8>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3334      	adds	r3, #52	@ 0x34
 8008896:	4619      	mov	r1, r3
 8008898:	4610      	mov	r0, r2
 800889a:	f7f7 fd71 	bl	8000380 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800889e:	4b27      	ldr	r3, [pc, #156]	@ (800893c <vTaskSwitchContext+0xdc>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	e011      	b.n	80088ca <vTaskSwitchContext+0x6a>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10b      	bne.n	80088c4 <vTaskSwitchContext+0x64>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	607b      	str	r3, [r7, #4]
}
 80088be:	bf00      	nop
 80088c0:	bf00      	nop
 80088c2:	e7fd      	b.n	80088c0 <vTaskSwitchContext+0x60>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	491d      	ldr	r1, [pc, #116]	@ (8008940 <vTaskSwitchContext+0xe0>)
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	440b      	add	r3, r1
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0e3      	beq.n	80088a6 <vTaskSwitchContext+0x46>
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	4613      	mov	r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	4413      	add	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4a15      	ldr	r2, [pc, #84]	@ (8008940 <vTaskSwitchContext+0xe0>)
 80088ea:	4413      	add	r3, r2
 80088ec:	60bb      	str	r3, [r7, #8]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	605a      	str	r2, [r3, #4]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	3308      	adds	r3, #8
 8008900:	429a      	cmp	r2, r3
 8008902:	d104      	bne.n	800890e <vTaskSwitchContext+0xae>
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	605a      	str	r2, [r3, #4]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	4a08      	ldr	r2, [pc, #32]	@ (8008938 <vTaskSwitchContext+0xd8>)
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	4a08      	ldr	r2, [pc, #32]	@ (800893c <vTaskSwitchContext+0xdc>)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800891e:	4b06      	ldr	r3, [pc, #24]	@ (8008938 <vTaskSwitchContext+0xd8>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3354      	adds	r3, #84	@ 0x54
 8008924:	4a07      	ldr	r2, [pc, #28]	@ (8008944 <vTaskSwitchContext+0xe4>)
 8008926:	6013      	str	r3, [r2, #0]
}
 8008928:	bf00      	nop
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	24002130 	.word	0x24002130
 8008934:	2400211c 	.word	0x2400211c
 8008938:	24001c34 	.word	0x24001c34
 800893c:	24002110 	.word	0x24002110
 8008940:	24001c38 	.word	0x24001c38
 8008944:	24000050 	.word	0x24000050

08008948 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10b      	bne.n	8008970 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	60fb      	str	r3, [r7, #12]
}
 800896a:	bf00      	nop
 800896c:	bf00      	nop
 800896e:	e7fd      	b.n	800896c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008970:	4b07      	ldr	r3, [pc, #28]	@ (8008990 <vTaskPlaceOnEventList+0x48>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3318      	adds	r3, #24
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7fe fa3e 	bl	8006dfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800897e:	2101      	movs	r1, #1
 8008980:	6838      	ldr	r0, [r7, #0]
 8008982:	f000 fb97 	bl	80090b4 <prvAddCurrentTaskToDelayedList>
}
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	24001c34 	.word	0x24001c34

08008994 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10b      	bne.n	80089be <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	617b      	str	r3, [r7, #20]
}
 80089b8:	bf00      	nop
 80089ba:	bf00      	nop
 80089bc:	e7fd      	b.n	80089ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089be:	4b0a      	ldr	r3, [pc, #40]	@ (80089e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3318      	adds	r3, #24
 80089c4:	4619      	mov	r1, r3
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f7fe f9f3 	bl	8006db2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d002      	beq.n	80089d8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80089d2:	f04f 33ff 	mov.w	r3, #4294967295
 80089d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089d8:	6879      	ldr	r1, [r7, #4]
 80089da:	68b8      	ldr	r0, [r7, #8]
 80089dc:	f000 fb6a 	bl	80090b4 <prvAddCurrentTaskToDelayedList>
	}
 80089e0:	bf00      	nop
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	24001c34 	.word	0x24001c34

080089ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10b      	bne.n	8008a1a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a06:	f383 8811 	msr	BASEPRI, r3
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	60fb      	str	r3, [r7, #12]
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop
 8008a18:	e7fd      	b.n	8008a16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	3318      	adds	r3, #24
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe fa24 	bl	8006e6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a24:	4b1d      	ldr	r3, [pc, #116]	@ (8008a9c <xTaskRemoveFromEventList+0xb0>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d11d      	bne.n	8008a68 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fa1b 	bl	8006e6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a3a:	4b19      	ldr	r3, [pc, #100]	@ (8008aa0 <xTaskRemoveFromEventList+0xb4>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d903      	bls.n	8008a4a <xTaskRemoveFromEventList+0x5e>
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a46:	4a16      	ldr	r2, [pc, #88]	@ (8008aa0 <xTaskRemoveFromEventList+0xb4>)
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a4e:	4613      	mov	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4413      	add	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4a13      	ldr	r2, [pc, #76]	@ (8008aa4 <xTaskRemoveFromEventList+0xb8>)
 8008a58:	441a      	add	r2, r3
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	4619      	mov	r1, r3
 8008a60:	4610      	mov	r0, r2
 8008a62:	f7fe f9a6 	bl	8006db2 <vListInsertEnd>
 8008a66:	e005      	b.n	8008a74 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	3318      	adds	r3, #24
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	480e      	ldr	r0, [pc, #56]	@ (8008aa8 <xTaskRemoveFromEventList+0xbc>)
 8008a70:	f7fe f99f 	bl	8006db2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a78:	4b0c      	ldr	r3, [pc, #48]	@ (8008aac <xTaskRemoveFromEventList+0xc0>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d905      	bls.n	8008a8e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a82:	2301      	movs	r3, #1
 8008a84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a86:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab0 <xTaskRemoveFromEventList+0xc4>)
 8008a88:	2201      	movs	r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]
 8008a8c:	e001      	b.n	8008a92 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a92:	697b      	ldr	r3, [r7, #20]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	24002130 	.word	0x24002130
 8008aa0:	24002110 	.word	0x24002110
 8008aa4:	24001c38 	.word	0x24001c38
 8008aa8:	240020c8 	.word	0x240020c8
 8008aac:	24001c34 	.word	0x24001c34
 8008ab0:	2400211c 	.word	0x2400211c

08008ab4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008abc:	4b06      	ldr	r3, [pc, #24]	@ (8008ad8 <vTaskInternalSetTimeOutState+0x24>)
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ac4:	4b05      	ldr	r3, [pc, #20]	@ (8008adc <vTaskInternalSetTimeOutState+0x28>)
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	605a      	str	r2, [r3, #4]
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr
 8008ad8:	24002120 	.word	0x24002120
 8008adc:	2400210c 	.word	0x2400210c

08008ae0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b088      	sub	sp, #32
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10b      	bne.n	8008b08 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	613b      	str	r3, [r7, #16]
}
 8008b02:	bf00      	nop
 8008b04:	bf00      	nop
 8008b06:	e7fd      	b.n	8008b04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10b      	bne.n	8008b26 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	60fb      	str	r3, [r7, #12]
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	e7fd      	b.n	8008b22 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008b26:	f000 ffa7 	bl	8009a78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8008ba0 <xTaskCheckForTimeOut+0xc0>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b42:	d102      	bne.n	8008b4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b44:	2300      	movs	r3, #0
 8008b46:	61fb      	str	r3, [r7, #28]
 8008b48:	e023      	b.n	8008b92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	4b15      	ldr	r3, [pc, #84]	@ (8008ba4 <xTaskCheckForTimeOut+0xc4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d007      	beq.n	8008b66 <xTaskCheckForTimeOut+0x86>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d302      	bcc.n	8008b66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b60:	2301      	movs	r3, #1
 8008b62:	61fb      	str	r3, [r7, #28]
 8008b64:	e015      	b.n	8008b92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d20b      	bcs.n	8008b88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	1ad2      	subs	r2, r2, r3
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff ff99 	bl	8008ab4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b82:	2300      	movs	r3, #0
 8008b84:	61fb      	str	r3, [r7, #28]
 8008b86:	e004      	b.n	8008b92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b92:	f000 ffa3 	bl	8009adc <vPortExitCritical>

	return xReturn;
 8008b96:	69fb      	ldr	r3, [r7, #28]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3720      	adds	r7, #32
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	2400210c 	.word	0x2400210c
 8008ba4:	24002120 	.word	0x24002120

08008ba8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008bac:	4b03      	ldr	r3, [pc, #12]	@ (8008bbc <vTaskMissedYield+0x14>)
 8008bae:	2201      	movs	r2, #1
 8008bb0:	601a      	str	r2, [r3, #0]
}
 8008bb2:	bf00      	nop
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	2400211c 	.word	0x2400211c

08008bc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bc8:	f000 f852 	bl	8008c70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bcc:	4b06      	ldr	r3, [pc, #24]	@ (8008be8 <prvIdleTask+0x28>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d9f9      	bls.n	8008bc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bd4:	4b05      	ldr	r3, [pc, #20]	@ (8008bec <prvIdleTask+0x2c>)
 8008bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bda:	601a      	str	r2, [r3, #0]
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008be4:	e7f0      	b.n	8008bc8 <prvIdleTask+0x8>
 8008be6:	bf00      	nop
 8008be8:	24001c38 	.word	0x24001c38
 8008bec:	e000ed04 	.word	0xe000ed04

08008bf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	607b      	str	r3, [r7, #4]
 8008bfa:	e00c      	b.n	8008c16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4a12      	ldr	r2, [pc, #72]	@ (8008c50 <prvInitialiseTaskLists+0x60>)
 8008c08:	4413      	add	r3, r2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe f8a4 	bl	8006d58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3301      	adds	r3, #1
 8008c14:	607b      	str	r3, [r7, #4]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b37      	cmp	r3, #55	@ 0x37
 8008c1a:	d9ef      	bls.n	8008bfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c1c:	480d      	ldr	r0, [pc, #52]	@ (8008c54 <prvInitialiseTaskLists+0x64>)
 8008c1e:	f7fe f89b 	bl	8006d58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c22:	480d      	ldr	r0, [pc, #52]	@ (8008c58 <prvInitialiseTaskLists+0x68>)
 8008c24:	f7fe f898 	bl	8006d58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c28:	480c      	ldr	r0, [pc, #48]	@ (8008c5c <prvInitialiseTaskLists+0x6c>)
 8008c2a:	f7fe f895 	bl	8006d58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c2e:	480c      	ldr	r0, [pc, #48]	@ (8008c60 <prvInitialiseTaskLists+0x70>)
 8008c30:	f7fe f892 	bl	8006d58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c34:	480b      	ldr	r0, [pc, #44]	@ (8008c64 <prvInitialiseTaskLists+0x74>)
 8008c36:	f7fe f88f 	bl	8006d58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c68 <prvInitialiseTaskLists+0x78>)
 8008c3c:	4a05      	ldr	r2, [pc, #20]	@ (8008c54 <prvInitialiseTaskLists+0x64>)
 8008c3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c40:	4b0a      	ldr	r3, [pc, #40]	@ (8008c6c <prvInitialiseTaskLists+0x7c>)
 8008c42:	4a05      	ldr	r2, [pc, #20]	@ (8008c58 <prvInitialiseTaskLists+0x68>)
 8008c44:	601a      	str	r2, [r3, #0]
}
 8008c46:	bf00      	nop
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	24001c38 	.word	0x24001c38
 8008c54:	24002098 	.word	0x24002098
 8008c58:	240020ac 	.word	0x240020ac
 8008c5c:	240020c8 	.word	0x240020c8
 8008c60:	240020dc 	.word	0x240020dc
 8008c64:	240020f4 	.word	0x240020f4
 8008c68:	240020c0 	.word	0x240020c0
 8008c6c:	240020c4 	.word	0x240020c4

08008c70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c76:	e019      	b.n	8008cac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c78:	f000 fefe 	bl	8009a78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c7c:	4b10      	ldr	r3, [pc, #64]	@ (8008cc0 <prvCheckTasksWaitingTermination+0x50>)
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	3304      	adds	r3, #4
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fe f8ef 	bl	8006e6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc4 <prvCheckTasksWaitingTermination+0x54>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	4a0b      	ldr	r2, [pc, #44]	@ (8008cc4 <prvCheckTasksWaitingTermination+0x54>)
 8008c96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c98:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc8 <prvCheckTasksWaitingTermination+0x58>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8008cc8 <prvCheckTasksWaitingTermination+0x58>)
 8008ca0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ca2:	f000 ff1b 	bl	8009adc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f810 	bl	8008ccc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cac:	4b06      	ldr	r3, [pc, #24]	@ (8008cc8 <prvCheckTasksWaitingTermination+0x58>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1e1      	bne.n	8008c78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	240020dc 	.word	0x240020dc
 8008cc4:	24002108 	.word	0x24002108
 8008cc8:	240020f0 	.word	0x240020f0

08008ccc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3354      	adds	r3, #84	@ 0x54
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f00e ff6b 	bl	8017bb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d108      	bne.n	8008cfa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cec:	4618      	mov	r0, r3
 8008cee:	f001 f8b3 	bl	8009e58 <vPortFree>
				vPortFree( pxTCB );
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f001 f8b0 	bl	8009e58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cf8:	e019      	b.n	8008d2e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d103      	bne.n	8008d0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 f8a7 	bl	8009e58 <vPortFree>
	}
 8008d0a:	e010      	b.n	8008d2e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d00b      	beq.n	8008d2e <prvDeleteTCB+0x62>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	60fb      	str	r3, [r7, #12]
}
 8008d28:	bf00      	nop
 8008d2a:	bf00      	nop
 8008d2c:	e7fd      	b.n	8008d2a <prvDeleteTCB+0x5e>
	}
 8008d2e:	bf00      	nop
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
	...

08008d38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d70 <prvResetNextTaskUnblockTime+0x38>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d104      	bne.n	8008d52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d48:	4b0a      	ldr	r3, [pc, #40]	@ (8008d74 <prvResetNextTaskUnblockTime+0x3c>)
 8008d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d50:	e008      	b.n	8008d64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d52:	4b07      	ldr	r3, [pc, #28]	@ (8008d70 <prvResetNextTaskUnblockTime+0x38>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	4a04      	ldr	r2, [pc, #16]	@ (8008d74 <prvResetNextTaskUnblockTime+0x3c>)
 8008d62:	6013      	str	r3, [r2, #0]
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	240020c0 	.word	0x240020c0
 8008d74:	24002128 	.word	0x24002128

08008d78 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008d7e:	4b05      	ldr	r3, [pc, #20]	@ (8008d94 <xTaskGetCurrentTaskHandle+0x1c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008d84:	687b      	ldr	r3, [r7, #4]
	}
 8008d86:	4618      	mov	r0, r3
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	24001c34 	.word	0x24001c34

08008d98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8008dcc <xTaskGetSchedulerState+0x34>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d102      	bne.n	8008dac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008da6:	2301      	movs	r3, #1
 8008da8:	607b      	str	r3, [r7, #4]
 8008daa:	e008      	b.n	8008dbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dac:	4b08      	ldr	r3, [pc, #32]	@ (8008dd0 <xTaskGetSchedulerState+0x38>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d102      	bne.n	8008dba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008db4:	2302      	movs	r3, #2
 8008db6:	607b      	str	r3, [r7, #4]
 8008db8:	e001      	b.n	8008dbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008dbe:	687b      	ldr	r3, [r7, #4]
	}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	24002114 	.word	0x24002114
 8008dd0:	24002130 	.word	0x24002130

08008dd4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d051      	beq.n	8008e8e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dee:	4b2a      	ldr	r3, [pc, #168]	@ (8008e98 <xTaskPriorityInherit+0xc4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d241      	bcs.n	8008e7c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	db06      	blt.n	8008e0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e00:	4b25      	ldr	r3, [pc, #148]	@ (8008e98 <xTaskPriorityInherit+0xc4>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e06:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	6959      	ldr	r1, [r3, #20]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e16:	4613      	mov	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8008e9c <xTaskPriorityInherit+0xc8>)
 8008e20:	4413      	add	r3, r2
 8008e22:	4299      	cmp	r1, r3
 8008e24:	d122      	bne.n	8008e6c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	3304      	adds	r3, #4
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe f81e 	bl	8006e6c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e30:	4b19      	ldr	r3, [pc, #100]	@ (8008e98 <xTaskPriorityInherit+0xc4>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e3e:	4b18      	ldr	r3, [pc, #96]	@ (8008ea0 <xTaskPriorityInherit+0xcc>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d903      	bls.n	8008e4e <xTaskPriorityInherit+0x7a>
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4a:	4a15      	ldr	r2, [pc, #84]	@ (8008ea0 <xTaskPriorityInherit+0xcc>)
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e52:	4613      	mov	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4a10      	ldr	r2, [pc, #64]	@ (8008e9c <xTaskPriorityInherit+0xc8>)
 8008e5c:	441a      	add	r2, r3
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	3304      	adds	r3, #4
 8008e62:	4619      	mov	r1, r3
 8008e64:	4610      	mov	r0, r2
 8008e66:	f7fd ffa4 	bl	8006db2 <vListInsertEnd>
 8008e6a:	e004      	b.n	8008e76 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e98 <xTaskPriorityInherit+0xc4>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008e76:	2301      	movs	r3, #1
 8008e78:	60fb      	str	r3, [r7, #12]
 8008e7a:	e008      	b.n	8008e8e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e80:	4b05      	ldr	r3, [pc, #20]	@ (8008e98 <xTaskPriorityInherit+0xc4>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d201      	bcs.n	8008e8e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
	}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	24001c34 	.word	0x24001c34
 8008e9c:	24001c38 	.word	0x24001c38
 8008ea0:	24002110 	.word	0x24002110

08008ea4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d058      	beq.n	8008f6c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008eba:	4b2f      	ldr	r3, [pc, #188]	@ (8008f78 <xTaskPriorityDisinherit+0xd4>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d00b      	beq.n	8008edc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	60fb      	str	r3, [r7, #12]
}
 8008ed6:	bf00      	nop
 8008ed8:	bf00      	nop
 8008eda:	e7fd      	b.n	8008ed8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10b      	bne.n	8008efc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	60bb      	str	r3, [r7, #8]
}
 8008ef6:	bf00      	nop
 8008ef8:	bf00      	nop
 8008efa:	e7fd      	b.n	8008ef8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f00:	1e5a      	subs	r2, r3, #1
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d02c      	beq.n	8008f6c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d128      	bne.n	8008f6c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fd ffa4 	bl	8006e6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8008f7c <xTaskPriorityDisinherit+0xd8>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d903      	bls.n	8008f4c <xTaskPriorityDisinherit+0xa8>
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f48:	4a0c      	ldr	r2, [pc, #48]	@ (8008f7c <xTaskPriorityDisinherit+0xd8>)
 8008f4a:	6013      	str	r3, [r2, #0]
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f50:	4613      	mov	r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	4413      	add	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4a09      	ldr	r2, [pc, #36]	@ (8008f80 <xTaskPriorityDisinherit+0xdc>)
 8008f5a:	441a      	add	r2, r3
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	3304      	adds	r3, #4
 8008f60:	4619      	mov	r1, r3
 8008f62:	4610      	mov	r0, r2
 8008f64:	f7fd ff25 	bl	8006db2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f6c:	697b      	ldr	r3, [r7, #20]
	}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	24001c34 	.word	0x24001c34
 8008f7c:	24002110 	.word	0x24002110
 8008f80:	24001c38 	.word	0x24001c38

08008f84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b088      	sub	sp, #32
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008f92:	2301      	movs	r3, #1
 8008f94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d06c      	beq.n	8009076 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10b      	bne.n	8008fbc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	60fb      	str	r3, [r7, #12]
}
 8008fb6:	bf00      	nop
 8008fb8:	bf00      	nop
 8008fba:	e7fd      	b.n	8008fb8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d902      	bls.n	8008fcc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	61fb      	str	r3, [r7, #28]
 8008fca:	e002      	b.n	8008fd2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fd0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd6:	69fa      	ldr	r2, [r7, #28]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d04c      	beq.n	8009076 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d147      	bne.n	8009076 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008fe6:	4b26      	ldr	r3, [pc, #152]	@ (8009080 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d10b      	bne.n	8009008 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	60bb      	str	r3, [r7, #8]
}
 8009002:	bf00      	nop
 8009004:	bf00      	nop
 8009006:	e7fd      	b.n	8009004 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800900c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	69fa      	ldr	r2, [r7, #28]
 8009012:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	2b00      	cmp	r3, #0
 800901a:	db04      	blt.n	8009026 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	6959      	ldr	r1, [r3, #20]
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	4613      	mov	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4a13      	ldr	r2, [pc, #76]	@ (8009084 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009036:	4413      	add	r3, r2
 8009038:	4299      	cmp	r1, r3
 800903a:	d11c      	bne.n	8009076 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	3304      	adds	r3, #4
 8009040:	4618      	mov	r0, r3
 8009042:	f7fd ff13 	bl	8006e6c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800904a:	4b0f      	ldr	r3, [pc, #60]	@ (8009088 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	429a      	cmp	r2, r3
 8009050:	d903      	bls.n	800905a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009056:	4a0c      	ldr	r2, [pc, #48]	@ (8009088 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009058:	6013      	str	r3, [r2, #0]
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800905e:	4613      	mov	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4413      	add	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4a07      	ldr	r2, [pc, #28]	@ (8009084 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009068:	441a      	add	r2, r3
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	3304      	adds	r3, #4
 800906e:	4619      	mov	r1, r3
 8009070:	4610      	mov	r0, r2
 8009072:	f7fd fe9e 	bl	8006db2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009076:	bf00      	nop
 8009078:	3720      	adds	r7, #32
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	24001c34 	.word	0x24001c34
 8009084:	24001c38 	.word	0x24001c38
 8009088:	24002110 	.word	0x24002110

0800908c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009090:	4b07      	ldr	r3, [pc, #28]	@ (80090b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d004      	beq.n	80090a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009098:	4b05      	ldr	r3, [pc, #20]	@ (80090b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800909e:	3201      	adds	r2, #1
 80090a0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80090a2:	4b03      	ldr	r3, [pc, #12]	@ (80090b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80090a4:	681b      	ldr	r3, [r3, #0]
	}
 80090a6:	4618      	mov	r0, r3
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	24001c34 	.word	0x24001c34

080090b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090be:	4b21      	ldr	r3, [pc, #132]	@ (8009144 <prvAddCurrentTaskToDelayedList+0x90>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090c4:	4b20      	ldr	r3, [pc, #128]	@ (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3304      	adds	r3, #4
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fd fece 	bl	8006e6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d6:	d10a      	bne.n	80090ee <prvAddCurrentTaskToDelayedList+0x3a>
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d007      	beq.n	80090ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090de:	4b1a      	ldr	r3, [pc, #104]	@ (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3304      	adds	r3, #4
 80090e4:	4619      	mov	r1, r3
 80090e6:	4819      	ldr	r0, [pc, #100]	@ (800914c <prvAddCurrentTaskToDelayedList+0x98>)
 80090e8:	f7fd fe63 	bl	8006db2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090ec:	e026      	b.n	800913c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4413      	add	r3, r2
 80090f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090f6:	4b14      	ldr	r3, [pc, #80]	@ (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	429a      	cmp	r2, r3
 8009104:	d209      	bcs.n	800911a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009106:	4b12      	ldr	r3, [pc, #72]	@ (8009150 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	4b0f      	ldr	r3, [pc, #60]	@ (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3304      	adds	r3, #4
 8009110:	4619      	mov	r1, r3
 8009112:	4610      	mov	r0, r2
 8009114:	f7fd fe71 	bl	8006dfa <vListInsert>
}
 8009118:	e010      	b.n	800913c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800911a:	4b0e      	ldr	r3, [pc, #56]	@ (8009154 <prvAddCurrentTaskToDelayedList+0xa0>)
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	4b0a      	ldr	r3, [pc, #40]	@ (8009148 <prvAddCurrentTaskToDelayedList+0x94>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3304      	adds	r3, #4
 8009124:	4619      	mov	r1, r3
 8009126:	4610      	mov	r0, r2
 8009128:	f7fd fe67 	bl	8006dfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800912c:	4b0a      	ldr	r3, [pc, #40]	@ (8009158 <prvAddCurrentTaskToDelayedList+0xa4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	429a      	cmp	r2, r3
 8009134:	d202      	bcs.n	800913c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009136:	4a08      	ldr	r2, [pc, #32]	@ (8009158 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	6013      	str	r3, [r2, #0]
}
 800913c:	bf00      	nop
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	2400210c 	.word	0x2400210c
 8009148:	24001c34 	.word	0x24001c34
 800914c:	240020f4 	.word	0x240020f4
 8009150:	240020c4 	.word	0x240020c4
 8009154:	240020c0 	.word	0x240020c0
 8009158:	24002128 	.word	0x24002128

0800915c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b08a      	sub	sp, #40	@ 0x28
 8009160:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009162:	2300      	movs	r3, #0
 8009164:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009166:	f000 fb13 	bl	8009790 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800916a:	4b1d      	ldr	r3, [pc, #116]	@ (80091e0 <xTimerCreateTimerTask+0x84>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d021      	beq.n	80091b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009172:	2300      	movs	r3, #0
 8009174:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009176:	2300      	movs	r3, #0
 8009178:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800917a:	1d3a      	adds	r2, r7, #4
 800917c:	f107 0108 	add.w	r1, r7, #8
 8009180:	f107 030c 	add.w	r3, r7, #12
 8009184:	4618      	mov	r0, r3
 8009186:	f7fd fdcd 	bl	8006d24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	9202      	str	r2, [sp, #8]
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	2302      	movs	r3, #2
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	2300      	movs	r3, #0
 800919a:	460a      	mov	r2, r1
 800919c:	4911      	ldr	r1, [pc, #68]	@ (80091e4 <xTimerCreateTimerTask+0x88>)
 800919e:	4812      	ldr	r0, [pc, #72]	@ (80091e8 <xTimerCreateTimerTask+0x8c>)
 80091a0:	f7fe ff72 	bl	8008088 <xTaskCreateStatic>
 80091a4:	4603      	mov	r3, r0
 80091a6:	4a11      	ldr	r2, [pc, #68]	@ (80091ec <xTimerCreateTimerTask+0x90>)
 80091a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091aa:	4b10      	ldr	r3, [pc, #64]	@ (80091ec <xTimerCreateTimerTask+0x90>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091b2:	2301      	movs	r3, #1
 80091b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10b      	bne.n	80091d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	613b      	str	r3, [r7, #16]
}
 80091ce:	bf00      	nop
 80091d0:	bf00      	nop
 80091d2:	e7fd      	b.n	80091d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80091d4:	697b      	ldr	r3, [r7, #20]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	24002164 	.word	0x24002164
 80091e4:	08018bc8 	.word	0x08018bc8
 80091e8:	08009329 	.word	0x08009329
 80091ec:	24002168 	.word	0x24002168

080091f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08a      	sub	sp, #40	@ 0x28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80091fe:	2300      	movs	r3, #0
 8009200:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10b      	bne.n	8009220 <xTimerGenericCommand+0x30>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	623b      	str	r3, [r7, #32]
}
 800921a:	bf00      	nop
 800921c:	bf00      	nop
 800921e:	e7fd      	b.n	800921c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009220:	4b19      	ldr	r3, [pc, #100]	@ (8009288 <xTimerGenericCommand+0x98>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d02a      	beq.n	800927e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b05      	cmp	r3, #5
 8009238:	dc18      	bgt.n	800926c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800923a:	f7ff fdad 	bl	8008d98 <xTaskGetSchedulerState>
 800923e:	4603      	mov	r3, r0
 8009240:	2b02      	cmp	r3, #2
 8009242:	d109      	bne.n	8009258 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009244:	4b10      	ldr	r3, [pc, #64]	@ (8009288 <xTimerGenericCommand+0x98>)
 8009246:	6818      	ldr	r0, [r3, #0]
 8009248:	f107 0110 	add.w	r1, r7, #16
 800924c:	2300      	movs	r3, #0
 800924e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009250:	f7fe f8a2 	bl	8007398 <xQueueGenericSend>
 8009254:	6278      	str	r0, [r7, #36]	@ 0x24
 8009256:	e012      	b.n	800927e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009258:	4b0b      	ldr	r3, [pc, #44]	@ (8009288 <xTimerGenericCommand+0x98>)
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	f107 0110 	add.w	r1, r7, #16
 8009260:	2300      	movs	r3, #0
 8009262:	2200      	movs	r2, #0
 8009264:	f7fe f898 	bl	8007398 <xQueueGenericSend>
 8009268:	6278      	str	r0, [r7, #36]	@ 0x24
 800926a:	e008      	b.n	800927e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800926c:	4b06      	ldr	r3, [pc, #24]	@ (8009288 <xTimerGenericCommand+0x98>)
 800926e:	6818      	ldr	r0, [r3, #0]
 8009270:	f107 0110 	add.w	r1, r7, #16
 8009274:	2300      	movs	r3, #0
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	f7fe f990 	bl	800759c <xQueueGenericSendFromISR>
 800927c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800927e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009280:	4618      	mov	r0, r3
 8009282:	3728      	adds	r7, #40	@ 0x28
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	24002164 	.word	0x24002164

0800928c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b088      	sub	sp, #32
 8009290:	af02      	add	r7, sp, #8
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009296:	4b23      	ldr	r3, [pc, #140]	@ (8009324 <prvProcessExpiredTimer+0x98>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	3304      	adds	r3, #4
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fd fde1 	bl	8006e6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d023      	beq.n	8009300 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	699a      	ldr	r2, [r3, #24]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	18d1      	adds	r1, r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	6978      	ldr	r0, [r7, #20]
 80092c6:	f000 f8d5 	bl	8009474 <prvInsertTimerInActiveList>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d020      	beq.n	8009312 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092d0:	2300      	movs	r3, #0
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	2300      	movs	r3, #0
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	2100      	movs	r1, #0
 80092da:	6978      	ldr	r0, [r7, #20]
 80092dc:	f7ff ff88 	bl	80091f0 <xTimerGenericCommand>
 80092e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d114      	bne.n	8009312 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	60fb      	str	r3, [r7, #12]
}
 80092fa:	bf00      	nop
 80092fc:	bf00      	nop
 80092fe:	e7fd      	b.n	80092fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009306:	f023 0301 	bic.w	r3, r3, #1
 800930a:	b2da      	uxtb	r2, r3
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	6978      	ldr	r0, [r7, #20]
 8009318:	4798      	blx	r3
}
 800931a:	bf00      	nop
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	2400215c 	.word	0x2400215c

08009328 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009330:	f107 0308 	add.w	r3, r7, #8
 8009334:	4618      	mov	r0, r3
 8009336:	f000 f859 	bl	80093ec <prvGetNextExpireTime>
 800933a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	4619      	mov	r1, r3
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 f805 	bl	8009350 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009346:	f000 f8d7 	bl	80094f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800934a:	bf00      	nop
 800934c:	e7f0      	b.n	8009330 <prvTimerTask+0x8>
	...

08009350 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800935a:	f7ff f8f9 	bl	8008550 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800935e:	f107 0308 	add.w	r3, r7, #8
 8009362:	4618      	mov	r0, r3
 8009364:	f000 f866 	bl	8009434 <prvSampleTimeNow>
 8009368:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d130      	bne.n	80093d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10a      	bne.n	800938c <prvProcessTimerOrBlockTask+0x3c>
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	429a      	cmp	r2, r3
 800937c:	d806      	bhi.n	800938c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800937e:	f7ff f8f5 	bl	800856c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009382:	68f9      	ldr	r1, [r7, #12]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7ff ff81 	bl	800928c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800938a:	e024      	b.n	80093d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d008      	beq.n	80093a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009392:	4b13      	ldr	r3, [pc, #76]	@ (80093e0 <prvProcessTimerOrBlockTask+0x90>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <prvProcessTimerOrBlockTask+0x50>
 800939c:	2301      	movs	r3, #1
 800939e:	e000      	b.n	80093a2 <prvProcessTimerOrBlockTask+0x52>
 80093a0:	2300      	movs	r3, #0
 80093a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093a4:	4b0f      	ldr	r3, [pc, #60]	@ (80093e4 <prvProcessTimerOrBlockTask+0x94>)
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	683a      	ldr	r2, [r7, #0]
 80093b0:	4619      	mov	r1, r3
 80093b2:	f7fe fe35 	bl	8008020 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093b6:	f7ff f8d9 	bl	800856c <xTaskResumeAll>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10a      	bne.n	80093d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093c0:	4b09      	ldr	r3, [pc, #36]	@ (80093e8 <prvProcessTimerOrBlockTask+0x98>)
 80093c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	f3bf 8f6f 	isb	sy
}
 80093d0:	e001      	b.n	80093d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093d2:	f7ff f8cb 	bl	800856c <xTaskResumeAll>
}
 80093d6:	bf00      	nop
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	24002160 	.word	0x24002160
 80093e4:	24002164 	.word	0x24002164
 80093e8:	e000ed04 	.word	0xe000ed04

080093ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009430 <prvGetNextExpireTime+0x44>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <prvGetNextExpireTime+0x16>
 80093fe:	2201      	movs	r2, #1
 8009400:	e000      	b.n	8009404 <prvGetNextExpireTime+0x18>
 8009402:	2200      	movs	r2, #0
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d105      	bne.n	800941c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009410:	4b07      	ldr	r3, [pc, #28]	@ (8009430 <prvGetNextExpireTime+0x44>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	60fb      	str	r3, [r7, #12]
 800941a:	e001      	b.n	8009420 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009420:	68fb      	ldr	r3, [r7, #12]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3714      	adds	r7, #20
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	2400215c 	.word	0x2400215c

08009434 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800943c:	f7ff f934 	bl	80086a8 <xTaskGetTickCount>
 8009440:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009442:	4b0b      	ldr	r3, [pc, #44]	@ (8009470 <prvSampleTimeNow+0x3c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	429a      	cmp	r2, r3
 800944a:	d205      	bcs.n	8009458 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800944c:	f000 f93a 	bl	80096c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	e002      	b.n	800945e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800945e:	4a04      	ldr	r2, [pc, #16]	@ (8009470 <prvSampleTimeNow+0x3c>)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009464:	68fb      	ldr	r3, [r7, #12]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	2400216c 	.word	0x2400216c

08009474 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009482:	2300      	movs	r3, #0
 8009484:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009492:	68ba      	ldr	r2, [r7, #8]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	429a      	cmp	r2, r3
 8009498:	d812      	bhi.n	80094c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	1ad2      	subs	r2, r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d302      	bcc.n	80094ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094a8:	2301      	movs	r3, #1
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	e01b      	b.n	80094e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094ae:	4b10      	ldr	r3, [pc, #64]	@ (80094f0 <prvInsertTimerInActiveList+0x7c>)
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3304      	adds	r3, #4
 80094b6:	4619      	mov	r1, r3
 80094b8:	4610      	mov	r0, r2
 80094ba:	f7fd fc9e 	bl	8006dfa <vListInsert>
 80094be:	e012      	b.n	80094e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d206      	bcs.n	80094d6 <prvInsertTimerInActiveList+0x62>
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d302      	bcc.n	80094d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094d0:	2301      	movs	r3, #1
 80094d2:	617b      	str	r3, [r7, #20]
 80094d4:	e007      	b.n	80094e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094d6:	4b07      	ldr	r3, [pc, #28]	@ (80094f4 <prvInsertTimerInActiveList+0x80>)
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3304      	adds	r3, #4
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	f7fd fc8a 	bl	8006dfa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094e6:	697b      	ldr	r3, [r7, #20]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3718      	adds	r7, #24
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	24002160 	.word	0x24002160
 80094f4:	2400215c 	.word	0x2400215c

080094f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b08e      	sub	sp, #56	@ 0x38
 80094fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094fe:	e0ce      	b.n	800969e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	da19      	bge.n	800953a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009506:	1d3b      	adds	r3, r7, #4
 8009508:	3304      	adds	r3, #4
 800950a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800950c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10b      	bne.n	800952a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009516:	f383 8811 	msr	BASEPRI, r3
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	61fb      	str	r3, [r7, #28]
}
 8009524:	bf00      	nop
 8009526:	bf00      	nop
 8009528:	e7fd      	b.n	8009526 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800952a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009530:	6850      	ldr	r0, [r2, #4]
 8009532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009534:	6892      	ldr	r2, [r2, #8]
 8009536:	4611      	mov	r1, r2
 8009538:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2b00      	cmp	r3, #0
 800953e:	f2c0 80ae 	blt.w	800969e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d004      	beq.n	8009558 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800954e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009550:	3304      	adds	r3, #4
 8009552:	4618      	mov	r0, r3
 8009554:	f7fd fc8a 	bl	8006e6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009558:	463b      	mov	r3, r7
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff ff6a 	bl	8009434 <prvSampleTimeNow>
 8009560:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b09      	cmp	r3, #9
 8009566:	f200 8097 	bhi.w	8009698 <prvProcessReceivedCommands+0x1a0>
 800956a:	a201      	add	r2, pc, #4	@ (adr r2, 8009570 <prvProcessReceivedCommands+0x78>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	08009599 	.word	0x08009599
 8009574:	08009599 	.word	0x08009599
 8009578:	08009599 	.word	0x08009599
 800957c:	0800960f 	.word	0x0800960f
 8009580:	08009623 	.word	0x08009623
 8009584:	0800966f 	.word	0x0800966f
 8009588:	08009599 	.word	0x08009599
 800958c:	08009599 	.word	0x08009599
 8009590:	0800960f 	.word	0x0800960f
 8009594:	08009623 	.word	0x08009623
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800959e:	f043 0301 	orr.w	r3, r3, #1
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	18d1      	adds	r1, r2, r3
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095b8:	f7ff ff5c 	bl	8009474 <prvInsertTimerInActiveList>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d06c      	beq.n	800969c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095d0:	f003 0304 	and.w	r3, r3, #4
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d061      	beq.n	800969c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	441a      	add	r2, r3
 80095e0:	2300      	movs	r3, #0
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	2300      	movs	r3, #0
 80095e6:	2100      	movs	r1, #0
 80095e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095ea:	f7ff fe01 	bl	80091f0 <xTimerGenericCommand>
 80095ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d152      	bne.n	800969c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80095f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	61bb      	str	r3, [r7, #24]
}
 8009608:	bf00      	nop
 800960a:	bf00      	nop
 800960c:	e7fd      	b.n	800960a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800960e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009610:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009614:	f023 0301 	bic.w	r3, r3, #1
 8009618:	b2da      	uxtb	r2, r3
 800961a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009620:	e03d      	b.n	800969e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009624:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009628:	f043 0301 	orr.w	r3, r3, #1
 800962c:	b2da      	uxtb	r2, r3
 800962e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009630:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009638:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800963a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10b      	bne.n	800965a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	617b      	str	r3, [r7, #20]
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	e7fd      	b.n	8009656 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800965a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965c:	699a      	ldr	r2, [r3, #24]
 800965e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009660:	18d1      	adds	r1, r2, r3
 8009662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009666:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009668:	f7ff ff04 	bl	8009474 <prvInsertTimerInActiveList>
					break;
 800966c:	e017      	b.n	800969e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800966e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009670:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b00      	cmp	r3, #0
 800967a:	d103      	bne.n	8009684 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800967c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800967e:	f000 fbeb 	bl	8009e58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009682:	e00c      	b.n	800969e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009686:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800968a:	f023 0301 	bic.w	r3, r3, #1
 800968e:	b2da      	uxtb	r2, r3
 8009690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009692:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009696:	e002      	b.n	800969e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009698:	bf00      	nop
 800969a:	e000      	b.n	800969e <prvProcessReceivedCommands+0x1a6>
					break;
 800969c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800969e:	4b08      	ldr	r3, [pc, #32]	@ (80096c0 <prvProcessReceivedCommands+0x1c8>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	1d39      	adds	r1, r7, #4
 80096a4:	2200      	movs	r2, #0
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe f8a6 	bl	80077f8 <xQueueReceive>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f47f af26 	bne.w	8009500 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop
 80096b8:	3730      	adds	r7, #48	@ 0x30
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	24002164 	.word	0x24002164

080096c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096ca:	e049      	b.n	8009760 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096cc:	4b2e      	ldr	r3, [pc, #184]	@ (8009788 <prvSwitchTimerLists+0xc4>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096d6:	4b2c      	ldr	r3, [pc, #176]	@ (8009788 <prvSwitchTimerLists+0xc4>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3304      	adds	r3, #4
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fd fbc1 	bl	8006e6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096f8:	f003 0304 	and.w	r3, r3, #4
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d02f      	beq.n	8009760 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	693a      	ldr	r2, [r7, #16]
 8009706:	4413      	add	r3, r2
 8009708:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	429a      	cmp	r2, r3
 8009710:	d90e      	bls.n	8009730 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800971e:	4b1a      	ldr	r3, [pc, #104]	@ (8009788 <prvSwitchTimerLists+0xc4>)
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3304      	adds	r3, #4
 8009726:	4619      	mov	r1, r3
 8009728:	4610      	mov	r0, r2
 800972a:	f7fd fb66 	bl	8006dfa <vListInsert>
 800972e:	e017      	b.n	8009760 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009730:	2300      	movs	r3, #0
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	2300      	movs	r3, #0
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	2100      	movs	r1, #0
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f7ff fd58 	bl	80091f0 <xTimerGenericCommand>
 8009740:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10b      	bne.n	8009760 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	603b      	str	r3, [r7, #0]
}
 800975a:	bf00      	nop
 800975c:	bf00      	nop
 800975e:	e7fd      	b.n	800975c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009760:	4b09      	ldr	r3, [pc, #36]	@ (8009788 <prvSwitchTimerLists+0xc4>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1b0      	bne.n	80096cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800976a:	4b07      	ldr	r3, [pc, #28]	@ (8009788 <prvSwitchTimerLists+0xc4>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009770:	4b06      	ldr	r3, [pc, #24]	@ (800978c <prvSwitchTimerLists+0xc8>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4a04      	ldr	r2, [pc, #16]	@ (8009788 <prvSwitchTimerLists+0xc4>)
 8009776:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009778:	4a04      	ldr	r2, [pc, #16]	@ (800978c <prvSwitchTimerLists+0xc8>)
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	6013      	str	r3, [r2, #0]
}
 800977e:	bf00      	nop
 8009780:	3718      	adds	r7, #24
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	2400215c 	.word	0x2400215c
 800978c:	24002160 	.word	0x24002160

08009790 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009796:	f000 f96f 	bl	8009a78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800979a:	4b15      	ldr	r3, [pc, #84]	@ (80097f0 <prvCheckForValidListAndQueue+0x60>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d120      	bne.n	80097e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097a2:	4814      	ldr	r0, [pc, #80]	@ (80097f4 <prvCheckForValidListAndQueue+0x64>)
 80097a4:	f7fd fad8 	bl	8006d58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097a8:	4813      	ldr	r0, [pc, #76]	@ (80097f8 <prvCheckForValidListAndQueue+0x68>)
 80097aa:	f7fd fad5 	bl	8006d58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097ae:	4b13      	ldr	r3, [pc, #76]	@ (80097fc <prvCheckForValidListAndQueue+0x6c>)
 80097b0:	4a10      	ldr	r2, [pc, #64]	@ (80097f4 <prvCheckForValidListAndQueue+0x64>)
 80097b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097b4:	4b12      	ldr	r3, [pc, #72]	@ (8009800 <prvCheckForValidListAndQueue+0x70>)
 80097b6:	4a10      	ldr	r2, [pc, #64]	@ (80097f8 <prvCheckForValidListAndQueue+0x68>)
 80097b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097ba:	2300      	movs	r3, #0
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	4b11      	ldr	r3, [pc, #68]	@ (8009804 <prvCheckForValidListAndQueue+0x74>)
 80097c0:	4a11      	ldr	r2, [pc, #68]	@ (8009808 <prvCheckForValidListAndQueue+0x78>)
 80097c2:	2110      	movs	r1, #16
 80097c4:	200a      	movs	r0, #10
 80097c6:	f7fd fbe5 	bl	8006f94 <xQueueGenericCreateStatic>
 80097ca:	4603      	mov	r3, r0
 80097cc:	4a08      	ldr	r2, [pc, #32]	@ (80097f0 <prvCheckForValidListAndQueue+0x60>)
 80097ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097d0:	4b07      	ldr	r3, [pc, #28]	@ (80097f0 <prvCheckForValidListAndQueue+0x60>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d005      	beq.n	80097e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097d8:	4b05      	ldr	r3, [pc, #20]	@ (80097f0 <prvCheckForValidListAndQueue+0x60>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	490b      	ldr	r1, [pc, #44]	@ (800980c <prvCheckForValidListAndQueue+0x7c>)
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe fbca 	bl	8007f78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097e4:	f000 f97a 	bl	8009adc <vPortExitCritical>
}
 80097e8:	bf00      	nop
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	24002164 	.word	0x24002164
 80097f4:	24002134 	.word	0x24002134
 80097f8:	24002148 	.word	0x24002148
 80097fc:	2400215c 	.word	0x2400215c
 8009800:	24002160 	.word	0x24002160
 8009804:	24002210 	.word	0x24002210
 8009808:	24002170 	.word	0x24002170
 800980c:	08018bd0 	.word	0x08018bd0

08009810 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3b04      	subs	r3, #4
 8009820:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3b04      	subs	r3, #4
 800982e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	f023 0201 	bic.w	r2, r3, #1
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3b04      	subs	r3, #4
 800983e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009840:	4a0c      	ldr	r2, [pc, #48]	@ (8009874 <pxPortInitialiseStack+0x64>)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3b14      	subs	r3, #20
 800984a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3b04      	subs	r3, #4
 8009856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f06f 0202 	mvn.w	r2, #2
 800985e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3b20      	subs	r3, #32
 8009864:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009866:	68fb      	ldr	r3, [r7, #12]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	08009879 	.word	0x08009879

08009878 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800987e:	2300      	movs	r3, #0
 8009880:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009882:	4b13      	ldr	r3, [pc, #76]	@ (80098d0 <prvTaskExitError+0x58>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988a:	d00b      	beq.n	80098a4 <prvTaskExitError+0x2c>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	60fb      	str	r3, [r7, #12]
}
 800989e:	bf00      	nop
 80098a0:	bf00      	nop
 80098a2:	e7fd      	b.n	80098a0 <prvTaskExitError+0x28>
	__asm volatile
 80098a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	60bb      	str	r3, [r7, #8]
}
 80098b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098b8:	bf00      	nop
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d0fc      	beq.n	80098ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098c0:	bf00      	nop
 80098c2:	bf00      	nop
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	24000030 	.word	0x24000030
	...

080098e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098e0:	4b07      	ldr	r3, [pc, #28]	@ (8009900 <pxCurrentTCBConst2>)
 80098e2:	6819      	ldr	r1, [r3, #0]
 80098e4:	6808      	ldr	r0, [r1, #0]
 80098e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ea:	f380 8809 	msr	PSP, r0
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f04f 0000 	mov.w	r0, #0
 80098f6:	f380 8811 	msr	BASEPRI, r0
 80098fa:	4770      	bx	lr
 80098fc:	f3af 8000 	nop.w

08009900 <pxCurrentTCBConst2>:
 8009900:	24001c34 	.word	0x24001c34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop

08009908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009908:	4808      	ldr	r0, [pc, #32]	@ (800992c <prvPortStartFirstTask+0x24>)
 800990a:	6800      	ldr	r0, [r0, #0]
 800990c:	6800      	ldr	r0, [r0, #0]
 800990e:	f380 8808 	msr	MSP, r0
 8009912:	f04f 0000 	mov.w	r0, #0
 8009916:	f380 8814 	msr	CONTROL, r0
 800991a:	b662      	cpsie	i
 800991c:	b661      	cpsie	f
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	df00      	svc	0
 8009928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800992a:	bf00      	nop
 800992c:	e000ed08 	.word	0xe000ed08

08009930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009936:	4b47      	ldr	r3, [pc, #284]	@ (8009a54 <xPortStartScheduler+0x124>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a47      	ldr	r2, [pc, #284]	@ (8009a58 <xPortStartScheduler+0x128>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d10b      	bne.n	8009958 <xPortStartScheduler+0x28>
	__asm volatile
 8009940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	613b      	str	r3, [r7, #16]
}
 8009952:	bf00      	nop
 8009954:	bf00      	nop
 8009956:	e7fd      	b.n	8009954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009958:	4b3e      	ldr	r3, [pc, #248]	@ (8009a54 <xPortStartScheduler+0x124>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a3f      	ldr	r2, [pc, #252]	@ (8009a5c <xPortStartScheduler+0x12c>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d10b      	bne.n	800997a <xPortStartScheduler+0x4a>
	__asm volatile
 8009962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	60fb      	str	r3, [r7, #12]
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop
 8009978:	e7fd      	b.n	8009976 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800997a:	4b39      	ldr	r3, [pc, #228]	@ (8009a60 <xPortStartScheduler+0x130>)
 800997c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	22ff      	movs	r2, #255	@ 0xff
 800998a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	b2db      	uxtb	r3, r3
 8009992:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009994:	78fb      	ldrb	r3, [r7, #3]
 8009996:	b2db      	uxtb	r3, r3
 8009998:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800999c:	b2da      	uxtb	r2, r3
 800999e:	4b31      	ldr	r3, [pc, #196]	@ (8009a64 <xPortStartScheduler+0x134>)
 80099a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099a2:	4b31      	ldr	r3, [pc, #196]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099a4:	2207      	movs	r2, #7
 80099a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099a8:	e009      	b.n	80099be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80099aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099b4:	78fb      	ldrb	r3, [r7, #3]
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	005b      	lsls	r3, r3, #1
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099be:	78fb      	ldrb	r3, [r7, #3]
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099c6:	2b80      	cmp	r3, #128	@ 0x80
 80099c8:	d0ef      	beq.n	80099aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099ca:	4b27      	ldr	r3, [pc, #156]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f1c3 0307 	rsb	r3, r3, #7
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	d00b      	beq.n	80099ee <xPortStartScheduler+0xbe>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099da:	f383 8811 	msr	BASEPRI, r3
 80099de:	f3bf 8f6f 	isb	sy
 80099e2:	f3bf 8f4f 	dsb	sy
 80099e6:	60bb      	str	r3, [r7, #8]
}
 80099e8:	bf00      	nop
 80099ea:	bf00      	nop
 80099ec:	e7fd      	b.n	80099ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	021b      	lsls	r3, r3, #8
 80099f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009a68 <xPortStartScheduler+0x138>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a00:	4a19      	ldr	r2, [pc, #100]	@ (8009a68 <xPortStartScheduler+0x138>)
 8009a02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a0c:	4b17      	ldr	r3, [pc, #92]	@ (8009a6c <xPortStartScheduler+0x13c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a16      	ldr	r2, [pc, #88]	@ (8009a6c <xPortStartScheduler+0x13c>)
 8009a12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009a16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a18:	4b14      	ldr	r3, [pc, #80]	@ (8009a6c <xPortStartScheduler+0x13c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a13      	ldr	r2, [pc, #76]	@ (8009a6c <xPortStartScheduler+0x13c>)
 8009a1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009a22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a24:	f000 f8da 	bl	8009bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a28:	4b11      	ldr	r3, [pc, #68]	@ (8009a70 <xPortStartScheduler+0x140>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a2e:	f000 f8f9 	bl	8009c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a32:	4b10      	ldr	r3, [pc, #64]	@ (8009a74 <xPortStartScheduler+0x144>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a0f      	ldr	r2, [pc, #60]	@ (8009a74 <xPortStartScheduler+0x144>)
 8009a38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009a3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a3e:	f7ff ff63 	bl	8009908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a42:	f7fe ff0d 	bl	8008860 <vTaskSwitchContext>
	prvTaskExitError();
 8009a46:	f7ff ff17 	bl	8009878 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	e000ed00 	.word	0xe000ed00
 8009a58:	410fc271 	.word	0x410fc271
 8009a5c:	410fc270 	.word	0x410fc270
 8009a60:	e000e400 	.word	0xe000e400
 8009a64:	24002260 	.word	0x24002260
 8009a68:	24002264 	.word	0x24002264
 8009a6c:	e000ed20 	.word	0xe000ed20
 8009a70:	24000030 	.word	0x24000030
 8009a74:	e000ef34 	.word	0xe000ef34

08009a78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	607b      	str	r3, [r7, #4]
}
 8009a90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a92:	4b10      	ldr	r3, [pc, #64]	@ (8009ad4 <vPortEnterCritical+0x5c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3301      	adds	r3, #1
 8009a98:	4a0e      	ldr	r2, [pc, #56]	@ (8009ad4 <vPortEnterCritical+0x5c>)
 8009a9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009ad4 <vPortEnterCritical+0x5c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d110      	bne.n	8009ac6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad8 <vPortEnterCritical+0x60>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00b      	beq.n	8009ac6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	603b      	str	r3, [r7, #0]
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	e7fd      	b.n	8009ac2 <vPortEnterCritical+0x4a>
	}
}
 8009ac6:	bf00      	nop
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	24000030 	.word	0x24000030
 8009ad8:	e000ed04 	.word	0xe000ed04

08009adc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009ae2:	4b12      	ldr	r3, [pc, #72]	@ (8009b2c <vPortExitCritical+0x50>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10b      	bne.n	8009b02 <vPortExitCritical+0x26>
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	607b      	str	r3, [r7, #4]
}
 8009afc:	bf00      	nop
 8009afe:	bf00      	nop
 8009b00:	e7fd      	b.n	8009afe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b02:	4b0a      	ldr	r3, [pc, #40]	@ (8009b2c <vPortExitCritical+0x50>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	4a08      	ldr	r2, [pc, #32]	@ (8009b2c <vPortExitCritical+0x50>)
 8009b0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b0c:	4b07      	ldr	r3, [pc, #28]	@ (8009b2c <vPortExitCritical+0x50>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d105      	bne.n	8009b20 <vPortExitCritical+0x44>
 8009b14:	2300      	movs	r3, #0
 8009b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	f383 8811 	msr	BASEPRI, r3
}
 8009b1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	24000030 	.word	0x24000030

08009b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b30:	f3ef 8009 	mrs	r0, PSP
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	4b15      	ldr	r3, [pc, #84]	@ (8009b90 <pxCurrentTCBConst>)
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	f01e 0f10 	tst.w	lr, #16
 8009b40:	bf08      	it	eq
 8009b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4a:	6010      	str	r0, [r2, #0]
 8009b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009b54:	f380 8811 	msr	BASEPRI, r0
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f7fe fe7e 	bl	8008860 <vTaskSwitchContext>
 8009b64:	f04f 0000 	mov.w	r0, #0
 8009b68:	f380 8811 	msr	BASEPRI, r0
 8009b6c:	bc09      	pop	{r0, r3}
 8009b6e:	6819      	ldr	r1, [r3, #0]
 8009b70:	6808      	ldr	r0, [r1, #0]
 8009b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b76:	f01e 0f10 	tst.w	lr, #16
 8009b7a:	bf08      	it	eq
 8009b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b80:	f380 8809 	msr	PSP, r0
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	f3af 8000 	nop.w

08009b90 <pxCurrentTCBConst>:
 8009b90:	24001c34 	.word	0x24001c34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b94:	bf00      	nop
 8009b96:	bf00      	nop

08009b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	607b      	str	r3, [r7, #4]
}
 8009bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009bb2:	f7fe fd9b 	bl	80086ec <xTaskIncrementTick>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bbc:	4b06      	ldr	r3, [pc, #24]	@ (8009bd8 <xPortSysTickHandler+0x40>)
 8009bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	f383 8811 	msr	BASEPRI, r3
}
 8009bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	e000ed04 	.word	0xe000ed04

08009bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bdc:	b480      	push	{r7}
 8009bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009be0:	4b0b      	ldr	r3, [pc, #44]	@ (8009c10 <vPortSetupTimerInterrupt+0x34>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009be6:	4b0b      	ldr	r3, [pc, #44]	@ (8009c14 <vPortSetupTimerInterrupt+0x38>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bec:	4b0a      	ldr	r3, [pc, #40]	@ (8009c18 <vPortSetupTimerInterrupt+0x3c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8009c1c <vPortSetupTimerInterrupt+0x40>)
 8009bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf6:	099b      	lsrs	r3, r3, #6
 8009bf8:	4a09      	ldr	r2, [pc, #36]	@ (8009c20 <vPortSetupTimerInterrupt+0x44>)
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bfe:	4b04      	ldr	r3, [pc, #16]	@ (8009c10 <vPortSetupTimerInterrupt+0x34>)
 8009c00:	2207      	movs	r2, #7
 8009c02:	601a      	str	r2, [r3, #0]
}
 8009c04:	bf00      	nop
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	e000e010 	.word	0xe000e010
 8009c14:	e000e018 	.word	0xe000e018
 8009c18:	24000000 	.word	0x24000000
 8009c1c:	10624dd3 	.word	0x10624dd3
 8009c20:	e000e014 	.word	0xe000e014

08009c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009c34 <vPortEnableVFP+0x10>
 8009c28:	6801      	ldr	r1, [r0, #0]
 8009c2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009c2e:	6001      	str	r1, [r0, #0]
 8009c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c32:	bf00      	nop
 8009c34:	e000ed88 	.word	0xe000ed88

08009c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c3e:	f3ef 8305 	mrs	r3, IPSR
 8009c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b0f      	cmp	r3, #15
 8009c48:	d915      	bls.n	8009c76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c4a:	4a18      	ldr	r2, [pc, #96]	@ (8009cac <vPortValidateInterruptPriority+0x74>)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c54:	4b16      	ldr	r3, [pc, #88]	@ (8009cb0 <vPortValidateInterruptPriority+0x78>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	7afa      	ldrb	r2, [r7, #11]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d20b      	bcs.n	8009c76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	607b      	str	r3, [r7, #4]
}
 8009c70:	bf00      	nop
 8009c72:	bf00      	nop
 8009c74:	e7fd      	b.n	8009c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c76:	4b0f      	ldr	r3, [pc, #60]	@ (8009cb4 <vPortValidateInterruptPriority+0x7c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009cb8 <vPortValidateInterruptPriority+0x80>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d90b      	bls.n	8009c9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	603b      	str	r3, [r7, #0]
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	e7fd      	b.n	8009c9a <vPortValidateInterruptPriority+0x62>
	}
 8009c9e:	bf00      	nop
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	e000e3f0 	.word	0xe000e3f0
 8009cb0:	24002260 	.word	0x24002260
 8009cb4:	e000ed0c 	.word	0xe000ed0c
 8009cb8:	24002264 	.word	0x24002264

08009cbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08a      	sub	sp, #40	@ 0x28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009cc8:	f7fe fc42 	bl	8008550 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ccc:	4b5c      	ldr	r3, [pc, #368]	@ (8009e40 <pvPortMalloc+0x184>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009cd4:	f000 f924 	bl	8009f20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8009e44 <pvPortMalloc+0x188>)
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4013      	ands	r3, r2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f040 8095 	bne.w	8009e10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d01e      	beq.n	8009d2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009cec:	2208      	movs	r2, #8
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d015      	beq.n	8009d2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f023 0307 	bic.w	r3, r3, #7
 8009d04:	3308      	adds	r3, #8
 8009d06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f003 0307 	and.w	r3, r3, #7
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00b      	beq.n	8009d2a <pvPortMalloc+0x6e>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	617b      	str	r3, [r7, #20]
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop
 8009d28:	e7fd      	b.n	8009d26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d06f      	beq.n	8009e10 <pvPortMalloc+0x154>
 8009d30:	4b45      	ldr	r3, [pc, #276]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d86a      	bhi.n	8009e10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d3a:	4b44      	ldr	r3, [pc, #272]	@ (8009e4c <pvPortMalloc+0x190>)
 8009d3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d3e:	4b43      	ldr	r3, [pc, #268]	@ (8009e4c <pvPortMalloc+0x190>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d44:	e004      	b.n	8009d50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d903      	bls.n	8009d62 <pvPortMalloc+0xa6>
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1f1      	bne.n	8009d46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d62:	4b37      	ldr	r3, [pc, #220]	@ (8009e40 <pvPortMalloc+0x184>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d051      	beq.n	8009e10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2208      	movs	r2, #8
 8009d72:	4413      	add	r3, r2
 8009d74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	1ad2      	subs	r2, r2, r3
 8009d86:	2308      	movs	r3, #8
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d920      	bls.n	8009dd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4413      	add	r3, r2
 8009d94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	f003 0307 	and.w	r3, r3, #7
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00b      	beq.n	8009db8 <pvPortMalloc+0xfc>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	613b      	str	r3, [r7, #16]
}
 8009db2:	bf00      	nop
 8009db4:	bf00      	nop
 8009db6:	e7fd      	b.n	8009db4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	1ad2      	subs	r2, r2, r3
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009dca:	69b8      	ldr	r0, [r7, #24]
 8009dcc:	f000 f90a 	bl	8009fe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	4a1b      	ldr	r2, [pc, #108]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009ddc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009dde:	4b1a      	ldr	r3, [pc, #104]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	4b1b      	ldr	r3, [pc, #108]	@ (8009e50 <pvPortMalloc+0x194>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d203      	bcs.n	8009df2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009dea:	4b17      	ldr	r3, [pc, #92]	@ (8009e48 <pvPortMalloc+0x18c>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a18      	ldr	r2, [pc, #96]	@ (8009e50 <pvPortMalloc+0x194>)
 8009df0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	4b13      	ldr	r3, [pc, #76]	@ (8009e44 <pvPortMalloc+0x188>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e06:	4b13      	ldr	r3, [pc, #76]	@ (8009e54 <pvPortMalloc+0x198>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	4a11      	ldr	r2, [pc, #68]	@ (8009e54 <pvPortMalloc+0x198>)
 8009e0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e10:	f7fe fbac 	bl	800856c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	f003 0307 	and.w	r3, r3, #7
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <pvPortMalloc+0x17a>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	60fb      	str	r3, [r7, #12]
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	e7fd      	b.n	8009e32 <pvPortMalloc+0x176>
	return pvReturn;
 8009e36:	69fb      	ldr	r3, [r7, #28]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3728      	adds	r7, #40	@ 0x28
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	24009a70 	.word	0x24009a70
 8009e44:	24009a84 	.word	0x24009a84
 8009e48:	24009a74 	.word	0x24009a74
 8009e4c:	24009a68 	.word	0x24009a68
 8009e50:	24009a78 	.word	0x24009a78
 8009e54:	24009a7c 	.word	0x24009a7c

08009e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d04f      	beq.n	8009f0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e6a:	2308      	movs	r3, #8
 8009e6c:	425b      	negs	r3, r3
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	4413      	add	r3, r2
 8009e72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	4b25      	ldr	r3, [pc, #148]	@ (8009f14 <vPortFree+0xbc>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4013      	ands	r3, r2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10b      	bne.n	8009e9e <vPortFree+0x46>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	60fb      	str	r3, [r7, #12]
}
 8009e98:	bf00      	nop
 8009e9a:	bf00      	nop
 8009e9c:	e7fd      	b.n	8009e9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00b      	beq.n	8009ebe <vPortFree+0x66>
	__asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	60bb      	str	r3, [r7, #8]
}
 8009eb8:	bf00      	nop
 8009eba:	bf00      	nop
 8009ebc:	e7fd      	b.n	8009eba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	685a      	ldr	r2, [r3, #4]
 8009ec2:	4b14      	ldr	r3, [pc, #80]	@ (8009f14 <vPortFree+0xbc>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d01e      	beq.n	8009f0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d11a      	bne.n	8009f0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8009f14 <vPortFree+0xbc>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	43db      	mvns	r3, r3
 8009ede:	401a      	ands	r2, r3
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ee4:	f7fe fb34 	bl	8008550 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	4b0a      	ldr	r3, [pc, #40]	@ (8009f18 <vPortFree+0xc0>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	4a09      	ldr	r2, [pc, #36]	@ (8009f18 <vPortFree+0xc0>)
 8009ef4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ef6:	6938      	ldr	r0, [r7, #16]
 8009ef8:	f000 f874 	bl	8009fe4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009efc:	4b07      	ldr	r3, [pc, #28]	@ (8009f1c <vPortFree+0xc4>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3301      	adds	r3, #1
 8009f02:	4a06      	ldr	r2, [pc, #24]	@ (8009f1c <vPortFree+0xc4>)
 8009f04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f06:	f7fe fb31 	bl	800856c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f0a:	bf00      	nop
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	24009a84 	.word	0x24009a84
 8009f18:	24009a74 	.word	0x24009a74
 8009f1c:	24009a80 	.word	0x24009a80

08009f20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f26:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8009f2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f2c:	4b27      	ldr	r3, [pc, #156]	@ (8009fcc <prvHeapInit+0xac>)
 8009f2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00c      	beq.n	8009f54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3307      	adds	r3, #7
 8009f3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f023 0307 	bic.w	r3, r3, #7
 8009f46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8009fcc <prvHeapInit+0xac>)
 8009f50:	4413      	add	r3, r2
 8009f52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f58:	4a1d      	ldr	r2, [pc, #116]	@ (8009fd0 <prvHeapInit+0xb0>)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8009fd0 <prvHeapInit+0xb0>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	4413      	add	r3, r2
 8009f6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f6c:	2208      	movs	r2, #8
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	1a9b      	subs	r3, r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0307 	bic.w	r3, r3, #7
 8009f7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4a15      	ldr	r2, [pc, #84]	@ (8009fd4 <prvHeapInit+0xb4>)
 8009f80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f82:	4b14      	ldr	r3, [pc, #80]	@ (8009fd4 <prvHeapInit+0xb4>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2200      	movs	r2, #0
 8009f88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f8a:	4b12      	ldr	r3, [pc, #72]	@ (8009fd4 <prvHeapInit+0xb4>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	1ad2      	subs	r2, r2, r3
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8009fd4 <prvHeapInit+0xb4>)
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	4a0a      	ldr	r2, [pc, #40]	@ (8009fd8 <prvHeapInit+0xb8>)
 8009fae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	4a09      	ldr	r2, [pc, #36]	@ (8009fdc <prvHeapInit+0xbc>)
 8009fb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fb8:	4b09      	ldr	r3, [pc, #36]	@ (8009fe0 <prvHeapInit+0xc0>)
 8009fba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009fbe:	601a      	str	r2, [r3, #0]
}
 8009fc0:	bf00      	nop
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	24002268 	.word	0x24002268
 8009fd0:	24009a68 	.word	0x24009a68
 8009fd4:	24009a70 	.word	0x24009a70
 8009fd8:	24009a78 	.word	0x24009a78
 8009fdc:	24009a74 	.word	0x24009a74
 8009fe0:	24009a84 	.word	0x24009a84

08009fe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fec:	4b28      	ldr	r3, [pc, #160]	@ (800a090 <prvInsertBlockIntoFreeList+0xac>)
 8009fee:	60fb      	str	r3, [r7, #12]
 8009ff0:	e002      	b.n	8009ff8 <prvInsertBlockIntoFreeList+0x14>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d8f7      	bhi.n	8009ff2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	4413      	add	r3, r2
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	429a      	cmp	r2, r3
 800a012:	d108      	bne.n	800a026 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	441a      	add	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	68ba      	ldr	r2, [r7, #8]
 800a030:	441a      	add	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	d118      	bne.n	800a06c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	4b15      	ldr	r3, [pc, #84]	@ (800a094 <prvInsertBlockIntoFreeList+0xb0>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	429a      	cmp	r2, r3
 800a044:	d00d      	beq.n	800a062 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	441a      	add	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	601a      	str	r2, [r3, #0]
 800a060:	e008      	b.n	800a074 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a062:	4b0c      	ldr	r3, [pc, #48]	@ (800a094 <prvInsertBlockIntoFreeList+0xb0>)
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	e003      	b.n	800a074 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d002      	beq.n	800a082 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a082:	bf00      	nop
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	24009a68 	.word	0x24009a68
 800a094:	24009a70 	.word	0x24009a70

0800a098 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();
 800a0a2:	f7fc f927 	bl	80062f4 <sys_check_core_locking>

  sleeptime = sys_timeouts_sleeptime();
 800a0a6:	f008 fc63 	bl	8012970 <sys_timeouts_sleeptime>
 800a0aa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b2:	d109      	bne.n	800a0c8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a0b4:	f7fc f910 	bl	80062d8 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f00d fb3d 	bl	801773c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a0c2:	f7fc f8f9 	bl	80062b8 <sys_lock_tcpip_core>
    return;
 800a0c6:	e016      	b.n	800a0f6 <tcpip_timeouts_mbox_fetch+0x5e>
  } else if (sleeptime == 0) {
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d102      	bne.n	800a0d4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a0ce:	f008 fc13 	bl	80128f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a0d2:	e7e6      	b.n	800a0a2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a0d4:	f7fc f900 	bl	80062d8 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f00d fb2d 	bl	801773c <sys_arch_mbox_fetch>
 800a0e2:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a0e4:	f7fc f8e8 	bl	80062b8 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ee:	d102      	bne.n	800a0f6 <tcpip_timeouts_mbox_fetch+0x5e>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a0f0:	f008 fc02 	bl	80128f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a0f4:	e7d5      	b.n	800a0a2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 800a104:	f7fc f92c 	bl	8006360 <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 800a108:	f7fc f8d6 	bl	80062b8 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 800a10c:	4b0f      	ldr	r3, [pc, #60]	@ (800a14c <tcpip_thread+0x50>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d005      	beq.n	800a120 <tcpip_thread+0x24>
    tcpip_init_done(tcpip_init_done_arg);
 800a114:	4b0d      	ldr	r3, [pc, #52]	@ (800a14c <tcpip_thread+0x50>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a0d      	ldr	r2, [pc, #52]	@ (800a150 <tcpip_thread+0x54>)
 800a11a:	6812      	ldr	r2, [r2, #0]
 800a11c:	4610      	mov	r0, r2
 800a11e:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a120:	f107 030c 	add.w	r3, r7, #12
 800a124:	4619      	mov	r1, r3
 800a126:	480b      	ldr	r0, [pc, #44]	@ (800a154 <tcpip_thread+0x58>)
 800a128:	f7ff ffb6 	bl	800a098 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d106      	bne.n	800a140 <tcpip_thread+0x44>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a132:	4b09      	ldr	r3, [pc, #36]	@ (800a158 <tcpip_thread+0x5c>)
 800a134:	2291      	movs	r2, #145	@ 0x91
 800a136:	4909      	ldr	r1, [pc, #36]	@ (800a15c <tcpip_thread+0x60>)
 800a138:	4809      	ldr	r0, [pc, #36]	@ (800a160 <tcpip_thread+0x64>)
 800a13a:	f00d fcbd 	bl	8017ab8 <iprintf>
      continue;
 800a13e:	e003      	b.n	800a148 <tcpip_thread+0x4c>
    }
    tcpip_thread_handle_msg(msg);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	4618      	mov	r0, r3
 800a144:	f000 f80e 	bl	800a164 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a148:	e7ea      	b.n	800a120 <tcpip_thread+0x24>
 800a14a:	bf00      	nop
 800a14c:	24009a88 	.word	0x24009a88
 800a150:	24009a8c 	.word	0x24009a8c
 800a154:	24009a90 	.word	0x24009a90
 800a158:	08018bd8 	.word	0x08018bd8
 800a15c:	08018c08 	.word	0x08018c08
 800a160:	08018c28 	.word	0x08018c28

0800a164 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	2b02      	cmp	r3, #2
 800a172:	d026      	beq.n	800a1c2 <tcpip_thread_handle_msg+0x5e>
 800a174:	2b02      	cmp	r3, #2
 800a176:	dc2b      	bgt.n	800a1d0 <tcpip_thread_handle_msg+0x6c>
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d002      	beq.n	800a182 <tcpip_thread_handle_msg+0x1e>
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d015      	beq.n	800a1ac <tcpip_thread_handle_msg+0x48>
 800a180:	e026      	b.n	800a1d0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	6850      	ldr	r0, [r2, #4]
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	6892      	ldr	r2, [r2, #8]
 800a18e:	4611      	mov	r1, r2
 800a190:	4798      	blx	r3
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d004      	beq.n	800a1a2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	4618      	mov	r0, r3
 800a19e:	f001 fdc9 	bl	800bd34 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a1a2:	6879      	ldr	r1, [r7, #4]
 800a1a4:	2009      	movs	r0, #9
 800a1a6:	f000 ff09 	bl	800afbc <memp_free>
      break;
 800a1aa:	e018      	b.n	800a1de <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	6892      	ldr	r2, [r2, #8]
 800a1b4:	4610      	mov	r0, r2
 800a1b6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	2008      	movs	r0, #8
 800a1bc:	f000 fefe 	bl	800afbc <memp_free>
      break;
 800a1c0:	e00d      	b.n	800a1de <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	6892      	ldr	r2, [r2, #8]
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	4798      	blx	r3
      break;
 800a1ce:	e006      	b.n	800a1de <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a1d0:	4b05      	ldr	r3, [pc, #20]	@ (800a1e8 <tcpip_thread_handle_msg+0x84>)
 800a1d2:	22cf      	movs	r2, #207	@ 0xcf
 800a1d4:	4905      	ldr	r1, [pc, #20]	@ (800a1ec <tcpip_thread_handle_msg+0x88>)
 800a1d6:	4806      	ldr	r0, [pc, #24]	@ (800a1f0 <tcpip_thread_handle_msg+0x8c>)
 800a1d8:	f00d fc6e 	bl	8017ab8 <iprintf>
      break;
 800a1dc:	bf00      	nop
  }
}
 800a1de:	bf00      	nop
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	08018bd8 	.word	0x08018bd8
 800a1ec:	08018c08 	.word	0x08018c08
 800a1f0:	08018c28 	.word	0x08018c28

0800a1f4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a200:	481a      	ldr	r0, [pc, #104]	@ (800a26c <tcpip_inpkt+0x78>)
 800a202:	f00d facc 	bl	801779e <sys_mbox_valid>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d105      	bne.n	800a218 <tcpip_inpkt+0x24>
 800a20c:	4b18      	ldr	r3, [pc, #96]	@ (800a270 <tcpip_inpkt+0x7c>)
 800a20e:	22fc      	movs	r2, #252	@ 0xfc
 800a210:	4918      	ldr	r1, [pc, #96]	@ (800a274 <tcpip_inpkt+0x80>)
 800a212:	4819      	ldr	r0, [pc, #100]	@ (800a278 <tcpip_inpkt+0x84>)
 800a214:	f00d fc50 	bl	8017ab8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a218:	2009      	movs	r0, #9
 800a21a:	f000 fe59 	bl	800aed0 <memp_malloc>
 800a21e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d102      	bne.n	800a22c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a226:	f04f 33ff 	mov.w	r3, #4294967295
 800a22a:	e01a      	b.n	800a262 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	2200      	movs	r2, #0
 800a230:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a244:	6979      	ldr	r1, [r7, #20]
 800a246:	4809      	ldr	r0, [pc, #36]	@ (800a26c <tcpip_inpkt+0x78>)
 800a248:	f00d fa5e 	bl	8017708 <sys_mbox_trypost>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d006      	beq.n	800a260 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a252:	6979      	ldr	r1, [r7, #20]
 800a254:	2009      	movs	r0, #9
 800a256:	f000 feb1 	bl	800afbc <memp_free>
    return ERR_MEM;
 800a25a:	f04f 33ff 	mov.w	r3, #4294967295
 800a25e:	e000      	b.n	800a262 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a260:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a262:	4618      	mov	r0, r3
 800a264:	3718      	adds	r7, #24
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	24009a90 	.word	0x24009a90
 800a270:	08018bd8 	.word	0x08018bd8
 800a274:	08018c50 	.word	0x08018c50
 800a278:	08018c28 	.word	0x08018c28

0800a27c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a28c:	f003 0318 	and.w	r3, r3, #24
 800a290:	2b00      	cmp	r3, #0
 800a292:	d006      	beq.n	800a2a2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a294:	4a08      	ldr	r2, [pc, #32]	@ (800a2b8 <tcpip_input+0x3c>)
 800a296:	6839      	ldr	r1, [r7, #0]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7ff ffab 	bl	800a1f4 <tcpip_inpkt>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	e005      	b.n	800a2ae <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a2a2:	4a06      	ldr	r2, [pc, #24]	@ (800a2bc <tcpip_input+0x40>)
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff ffa4 	bl	800a1f4 <tcpip_inpkt>
 800a2ac:	4603      	mov	r3, r0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	08017521 	.word	0x08017521
 800a2bc:	080163e5 	.word	0x080163e5

0800a2c0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a2ca:	4819      	ldr	r0, [pc, #100]	@ (800a330 <tcpip_try_callback+0x70>)
 800a2cc:	f00d fa67 	bl	801779e <sys_mbox_valid>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d106      	bne.n	800a2e4 <tcpip_try_callback+0x24>
 800a2d6:	4b17      	ldr	r3, [pc, #92]	@ (800a334 <tcpip_try_callback+0x74>)
 800a2d8:	f240 125d 	movw	r2, #349	@ 0x15d
 800a2dc:	4916      	ldr	r1, [pc, #88]	@ (800a338 <tcpip_try_callback+0x78>)
 800a2de:	4817      	ldr	r0, [pc, #92]	@ (800a33c <tcpip_try_callback+0x7c>)
 800a2e0:	f00d fbea 	bl	8017ab8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a2e4:	2008      	movs	r0, #8
 800a2e6:	f000 fdf3 	bl	800aed0 <memp_malloc>
 800a2ea:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d102      	bne.n	800a2f8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2f6:	e017      	b.n	800a328 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a30a:	68f9      	ldr	r1, [r7, #12]
 800a30c:	4808      	ldr	r0, [pc, #32]	@ (800a330 <tcpip_try_callback+0x70>)
 800a30e:	f00d f9fb 	bl	8017708 <sys_mbox_trypost>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d006      	beq.n	800a326 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a318:	68f9      	ldr	r1, [r7, #12]
 800a31a:	2008      	movs	r0, #8
 800a31c:	f000 fe4e 	bl	800afbc <memp_free>
    return ERR_MEM;
 800a320:	f04f 33ff 	mov.w	r3, #4294967295
 800a324:	e000      	b.n	800a328 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	24009a90 	.word	0x24009a90
 800a334:	08018bd8 	.word	0x08018bd8
 800a338:	08018c50 	.word	0x08018c50
 800a33c:	08018c28 	.word	0x08018c28

0800a340 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af02      	add	r7, sp, #8
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a34a:	f000 f92d 	bl	800a5a8 <lwip_init>

  tcpip_init_done = initfunc;
 800a34e:	4a17      	ldr	r2, [pc, #92]	@ (800a3ac <tcpip_init+0x6c>)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a354:	4a16      	ldr	r2, [pc, #88]	@ (800a3b0 <tcpip_init+0x70>)
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a35a:	2106      	movs	r1, #6
 800a35c:	4815      	ldr	r0, [pc, #84]	@ (800a3b4 <tcpip_init+0x74>)
 800a35e:	f00d f9b9 	bl	80176d4 <sys_mbox_new>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d006      	beq.n	800a376 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a368:	4b13      	ldr	r3, [pc, #76]	@ (800a3b8 <tcpip_init+0x78>)
 800a36a:	f240 2261 	movw	r2, #609	@ 0x261
 800a36e:	4913      	ldr	r1, [pc, #76]	@ (800a3bc <tcpip_init+0x7c>)
 800a370:	4813      	ldr	r0, [pc, #76]	@ (800a3c0 <tcpip_init+0x80>)
 800a372:	f00d fba1 	bl	8017ab8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a376:	4813      	ldr	r0, [pc, #76]	@ (800a3c4 <tcpip_init+0x84>)
 800a378:	f00d fa2e 	bl	80177d8 <sys_mutex_new>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d006      	beq.n	800a390 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a382:	4b0d      	ldr	r3, [pc, #52]	@ (800a3b8 <tcpip_init+0x78>)
 800a384:	f240 2265 	movw	r2, #613	@ 0x265
 800a388:	490f      	ldr	r1, [pc, #60]	@ (800a3c8 <tcpip_init+0x88>)
 800a38a:	480d      	ldr	r0, [pc, #52]	@ (800a3c0 <tcpip_init+0x80>)
 800a38c:	f00d fb94 	bl	8017ab8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a390:	2318      	movs	r3, #24
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a398:	2200      	movs	r2, #0
 800a39a:	490c      	ldr	r1, [pc, #48]	@ (800a3cc <tcpip_init+0x8c>)
 800a39c:	480c      	ldr	r0, [pc, #48]	@ (800a3d0 <tcpip_init+0x90>)
 800a39e:	f00d fa4d 	bl	801783c <sys_thread_new>
}
 800a3a2:	bf00      	nop
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	24009a88 	.word	0x24009a88
 800a3b0:	24009a8c 	.word	0x24009a8c
 800a3b4:	24009a90 	.word	0x24009a90
 800a3b8:	08018bd8 	.word	0x08018bd8
 800a3bc:	08018c60 	.word	0x08018c60
 800a3c0:	08018c28 	.word	0x08018c28
 800a3c4:	24009a94 	.word	0x24009a94
 800a3c8:	08018c84 	.word	0x08018c84
 800a3cc:	0800a0fd 	.word	0x0800a0fd
 800a3d0:	08018ca8 	.word	0x08018ca8

0800a3d4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a3de:	88fb      	ldrh	r3, [r7, #6]
 800a3e0:	021b      	lsls	r3, r3, #8
 800a3e2:	b21a      	sxth	r2, r3
 800a3e4:	88fb      	ldrh	r3, [r7, #6]
 800a3e6:	0a1b      	lsrs	r3, r3, #8
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	b21b      	sxth	r3, r3
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	b21b      	sxth	r3, r3
 800a3f0:	b29b      	uxth	r3, r3
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	370c      	adds	r7, #12
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a3fe:	b480      	push	{r7}
 800a400:	b083      	sub	sp, #12
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	061a      	lsls	r2, r3, #24
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	021b      	lsls	r3, r3, #8
 800a40e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a412:	431a      	orrs	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	0a1b      	lsrs	r3, r3, #8
 800a418:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a41c:	431a      	orrs	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	0e1b      	lsrs	r3, r3, #24
 800a422:	4313      	orrs	r3, r2
}
 800a424:	4618      	mov	r0, r3
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800a430:	b480      	push	{r7}
 800a432:	b089      	sub	sp, #36	@ 0x24
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00d      	beq.n	800a470 <lwip_standard_chksum+0x40>
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	dd0a      	ble.n	800a470 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800a45a:	69fa      	ldr	r2, [r7, #28]
 800a45c:	1c53      	adds	r3, r2, #1
 800a45e:	61fb      	str	r3, [r7, #28]
 800a460:	f107 030e 	add.w	r3, r7, #14
 800a464:	3301      	adds	r3, #1
 800a466:	7812      	ldrb	r2, [r2, #0]
 800a468:	701a      	strb	r2, [r3, #0]
    len--;
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	3b01      	subs	r3, #1
 800a46e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800a474:	e00a      	b.n	800a48c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	1c9a      	adds	r2, r3, #2
 800a47a:	61ba      	str	r2, [r7, #24]
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	4413      	add	r3, r2
 800a484:	617b      	str	r3, [r7, #20]
    len -= 2;
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	3b02      	subs	r3, #2
 800a48a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	dcf1      	bgt.n	800a476 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	dd04      	ble.n	800a4a2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800a498:	f107 030e 	add.w	r3, r7, #14
 800a49c:	69ba      	ldr	r2, [r7, #24]
 800a49e:	7812      	ldrb	r2, [r2, #0]
 800a4a0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800a4a2:	89fb      	ldrh	r3, [r7, #14]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	0c1a      	lsrs	r2, r3, #16
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	4413      	add	r3, r2
 800a4b6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	0c1a      	lsrs	r2, r3, #16
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	4413      	add	r3, r2
 800a4c2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d007      	beq.n	800a4da <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	021b      	lsls	r3, r3, #8
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	0a1b      	lsrs	r3, r3, #8
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	b29b      	uxth	r3, r3
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3724      	adds	r7, #36	@ 0x24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800a4f6:	887b      	ldrh	r3, [r7, #2]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f7ff ff98 	bl	800a430 <lwip_standard_chksum>
 800a500:	4603      	mov	r3, r0
 800a502:	43db      	mvns	r3, r3
 800a504:	b29b      	uxth	r3, r3
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b086      	sub	sp, #24
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800a516:	2300      	movs	r3, #0
 800a518:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	613b      	str	r3, [r7, #16]
 800a522:	e02b      	b.n	800a57c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	685a      	ldr	r2, [r3, #4]
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	895b      	ldrh	r3, [r3, #10]
 800a52c:	4619      	mov	r1, r3
 800a52e:	4610      	mov	r0, r2
 800a530:	f7ff ff7e 	bl	800a430 <lwip_standard_chksum>
 800a534:	4603      	mov	r3, r0
 800a536:	461a      	mov	r2, r3
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	4413      	add	r3, r2
 800a53c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	0c1a      	lsrs	r2, r3, #16
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	b29b      	uxth	r3, r3
 800a546:	4413      	add	r3, r2
 800a548:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	895b      	ldrh	r3, [r3, #10]
 800a54e:	f003 0301 	and.w	r3, r3, #1
 800a552:	b29b      	uxth	r3, r3
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00e      	beq.n	800a576 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bf0c      	ite	eq
 800a55e:	2301      	moveq	r3, #1
 800a560:	2300      	movne	r3, #0
 800a562:	b2db      	uxtb	r3, r3
 800a564:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	021b      	lsls	r3, r3, #8
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	0a1b      	lsrs	r3, r3, #8
 800a570:	b2db      	uxtb	r3, r3
 800a572:	4313      	orrs	r3, r2
 800a574:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	613b      	str	r3, [r7, #16]
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1d0      	bne.n	800a524 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d007      	beq.n	800a598 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	021b      	lsls	r3, r3, #8
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	0a1b      	lsrs	r3, r3, #8
 800a592:	b2db      	uxtb	r3, r3
 800a594:	4313      	orrs	r3, r2
 800a596:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	43db      	mvns	r3, r3
 800a59e:	b29b      	uxth	r3, r3
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a5b2:	f00d f905 	bl	80177c0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a5b6:	f000 f8d3 	bl	800a760 <mem_init>
  memp_init();
 800a5ba:	f000 fc1b 	bl	800adf4 <memp_init>
  pbuf_init();
  netif_init();
 800a5be:	f000 fd27 	bl	800b010 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a5c2:	f008 fa0f 	bl	80129e4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a5c6:	f001 ff17 	bl	800c3f8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a5ca:	f008 f94b 	bl	8012864 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a5ce:	bf00      	nop
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800a5e0:	4b04      	ldr	r3, [pc, #16]	@ (800a5f4 <ptr_to_mem+0x1c>)
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4413      	add	r3, r2
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr
 800a5f4:	24009ab0 	.word	0x24009ab0

0800a5f8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a600:	4b04      	ldr	r3, [pc, #16]	@ (800a614 <mem_to_ptr+0x1c>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	1ad3      	subs	r3, r2, r3
}
 800a608:	4618      	mov	r0, r3
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr
 800a614:	24009ab0 	.word	0x24009ab0

0800a618 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a618:	b590      	push	{r4, r7, lr}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a620:	4b45      	ldr	r3, [pc, #276]	@ (800a738 <plug_holes+0x120>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	429a      	cmp	r2, r3
 800a628:	d206      	bcs.n	800a638 <plug_holes+0x20>
 800a62a:	4b44      	ldr	r3, [pc, #272]	@ (800a73c <plug_holes+0x124>)
 800a62c:	f240 12df 	movw	r2, #479	@ 0x1df
 800a630:	4943      	ldr	r1, [pc, #268]	@ (800a740 <plug_holes+0x128>)
 800a632:	4844      	ldr	r0, [pc, #272]	@ (800a744 <plug_holes+0x12c>)
 800a634:	f00d fa40 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a638:	4b43      	ldr	r3, [pc, #268]	@ (800a748 <plug_holes+0x130>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	687a      	ldr	r2, [r7, #4]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d306      	bcc.n	800a650 <plug_holes+0x38>
 800a642:	4b3e      	ldr	r3, [pc, #248]	@ (800a73c <plug_holes+0x124>)
 800a644:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a648:	4940      	ldr	r1, [pc, #256]	@ (800a74c <plug_holes+0x134>)
 800a64a:	483e      	ldr	r0, [pc, #248]	@ (800a744 <plug_holes+0x12c>)
 800a64c:	f00d fa34 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	7a1b      	ldrb	r3, [r3, #8]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d006      	beq.n	800a666 <plug_holes+0x4e>
 800a658:	4b38      	ldr	r3, [pc, #224]	@ (800a73c <plug_holes+0x124>)
 800a65a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a65e:	493c      	ldr	r1, [pc, #240]	@ (800a750 <plug_holes+0x138>)
 800a660:	4838      	ldr	r0, [pc, #224]	@ (800a744 <plug_holes+0x12c>)
 800a662:	f00d fa29 	bl	8017ab8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a3a      	ldr	r2, [pc, #232]	@ (800a754 <plug_holes+0x13c>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d906      	bls.n	800a67e <plug_holes+0x66>
 800a670:	4b32      	ldr	r3, [pc, #200]	@ (800a73c <plug_holes+0x124>)
 800a672:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a676:	4938      	ldr	r1, [pc, #224]	@ (800a758 <plug_holes+0x140>)
 800a678:	4832      	ldr	r0, [pc, #200]	@ (800a744 <plug_holes+0x12c>)
 800a67a:	f00d fa1d 	bl	8017ab8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4618      	mov	r0, r3
 800a684:	f7ff ffa8 	bl	800a5d8 <ptr_to_mem>
 800a688:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d024      	beq.n	800a6dc <plug_holes+0xc4>
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	7a1b      	ldrb	r3, [r3, #8]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d120      	bne.n	800a6dc <plug_holes+0xc4>
 800a69a:	4b2b      	ldr	r3, [pc, #172]	@ (800a748 <plug_holes+0x130>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d01b      	beq.n	800a6dc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a6a4:	4b2d      	ldr	r3, [pc, #180]	@ (800a75c <plug_holes+0x144>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d102      	bne.n	800a6b4 <plug_holes+0x9c>
      lfree = mem;
 800a6ae:	4a2b      	ldr	r2, [pc, #172]	@ (800a75c <plug_holes+0x144>)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a24      	ldr	r2, [pc, #144]	@ (800a754 <plug_holes+0x13c>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d00a      	beq.n	800a6dc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7ff ff84 	bl	800a5d8 <ptr_to_mem>
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff ff90 	bl	800a5f8 <mem_to_ptr>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7ff ff79 	bl	800a5d8 <ptr_to_mem>
 800a6e6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a6e8:	68ba      	ldr	r2, [r7, #8]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d01f      	beq.n	800a730 <plug_holes+0x118>
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	7a1b      	ldrb	r3, [r3, #8]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d11b      	bne.n	800a730 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a6f8:	4b18      	ldr	r3, [pc, #96]	@ (800a75c <plug_holes+0x144>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d102      	bne.n	800a708 <plug_holes+0xf0>
      lfree = pmem;
 800a702:	4a16      	ldr	r2, [pc, #88]	@ (800a75c <plug_holes+0x144>)
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a0f      	ldr	r2, [pc, #60]	@ (800a754 <plug_holes+0x13c>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d00a      	beq.n	800a730 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4618      	mov	r0, r3
 800a720:	f7ff ff5a 	bl	800a5d8 <ptr_to_mem>
 800a724:	4604      	mov	r4, r0
 800a726:	68b8      	ldr	r0, [r7, #8]
 800a728:	f7ff ff66 	bl	800a5f8 <mem_to_ptr>
 800a72c:	4603      	mov	r3, r0
 800a72e:	6063      	str	r3, [r4, #4]
    }
  }
}
 800a730:	bf00      	nop
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	bd90      	pop	{r4, r7, pc}
 800a738:	24009ab0 	.word	0x24009ab0
 800a73c:	08018cb8 	.word	0x08018cb8
 800a740:	08018ce8 	.word	0x08018ce8
 800a744:	08018d00 	.word	0x08018d00
 800a748:	24009ab4 	.word	0x24009ab4
 800a74c:	08018d28 	.word	0x08018d28
 800a750:	08018d44 	.word	0x08018d44
 800a754:	0001ffe8 	.word	0x0001ffe8
 800a758:	08018d60 	.word	0x08018d60
 800a75c:	24009abc 	.word	0x24009abc

0800a760 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a766:	4b1b      	ldr	r3, [pc, #108]	@ (800a7d4 <mem_init+0x74>)
 800a768:	4a1b      	ldr	r2, [pc, #108]	@ (800a7d8 <mem_init+0x78>)
 800a76a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a76c:	4b19      	ldr	r3, [pc, #100]	@ (800a7d4 <mem_init+0x74>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a19      	ldr	r2, [pc, #100]	@ (800a7dc <mem_init+0x7c>)
 800a776:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a784:	4815      	ldr	r0, [pc, #84]	@ (800a7dc <mem_init+0x7c>)
 800a786:	f7ff ff27 	bl	800a5d8 <ptr_to_mem>
 800a78a:	4603      	mov	r3, r0
 800a78c:	4a14      	ldr	r2, [pc, #80]	@ (800a7e0 <mem_init+0x80>)
 800a78e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a790:	4b13      	ldr	r3, [pc, #76]	@ (800a7e0 <mem_init+0x80>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2201      	movs	r2, #1
 800a796:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a798:	4b11      	ldr	r3, [pc, #68]	@ (800a7e0 <mem_init+0x80>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a0f      	ldr	r2, [pc, #60]	@ (800a7dc <mem_init+0x7c>)
 800a79e:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a7a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a7e0 <mem_init+0x80>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a0d      	ldr	r2, [pc, #52]	@ (800a7dc <mem_init+0x7c>)
 800a7a6:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a7a8:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d4 <mem_init+0x74>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a0d      	ldr	r2, [pc, #52]	@ (800a7e4 <mem_init+0x84>)
 800a7ae:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a7b0:	480d      	ldr	r0, [pc, #52]	@ (800a7e8 <mem_init+0x88>)
 800a7b2:	f00d f811 	bl	80177d8 <sys_mutex_new>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d006      	beq.n	800a7ca <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a7ec <mem_init+0x8c>)
 800a7be:	f240 221f 	movw	r2, #543	@ 0x21f
 800a7c2:	490b      	ldr	r1, [pc, #44]	@ (800a7f0 <mem_init+0x90>)
 800a7c4:	480b      	ldr	r0, [pc, #44]	@ (800a7f4 <mem_init+0x94>)
 800a7c6:	f00d f977 	bl	8017ab8 <iprintf>
  }
}
 800a7ca:	bf00      	nop
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	24009ab0 	.word	0x24009ab0
 800a7d8:	30020000 	.word	0x30020000
 800a7dc:	0001ffe8 	.word	0x0001ffe8
 800a7e0:	24009ab4 	.word	0x24009ab4
 800a7e4:	24009abc 	.word	0x24009abc
 800a7e8:	24009ab8 	.word	0x24009ab8
 800a7ec:	08018cb8 	.word	0x08018cb8
 800a7f0:	08018d8c 	.word	0x08018d8c
 800a7f4:	08018d00 	.word	0x08018d00

0800a7f8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7ff fef9 	bl	800a5f8 <mem_to_ptr>
 800a806:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f7ff fee3 	bl	800a5d8 <ptr_to_mem>
 800a812:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	4618      	mov	r0, r3
 800a81a:	f7ff fedd 	bl	800a5d8 <ptr_to_mem>
 800a81e:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a11      	ldr	r2, [pc, #68]	@ (800a86c <mem_link_valid+0x74>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d818      	bhi.n	800a85c <mem_link_valid+0x64>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	4a0f      	ldr	r2, [pc, #60]	@ (800a86c <mem_link_valid+0x74>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d813      	bhi.n	800a85c <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a838:	697a      	ldr	r2, [r7, #20]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d004      	beq.n	800a848 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	697a      	ldr	r2, [r7, #20]
 800a844:	429a      	cmp	r2, r3
 800a846:	d109      	bne.n	800a85c <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a848:	4b09      	ldr	r3, [pc, #36]	@ (800a870 <mem_link_valid+0x78>)
 800a84a:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a84c:	693a      	ldr	r2, [r7, #16]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d006      	beq.n	800a860 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d001      	beq.n	800a860 <mem_link_valid+0x68>
    return 0;
 800a85c:	2300      	movs	r3, #0
 800a85e:	e000      	b.n	800a862 <mem_link_valid+0x6a>
  }
  return 1;
 800a860:	2301      	movs	r3, #1
}
 800a862:	4618      	mov	r0, r3
 800a864:	3718      	adds	r7, #24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	0001ffe8 	.word	0x0001ffe8
 800a870:	24009ab4 	.word	0x24009ab4

0800a874 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d070      	beq.n	800a964 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f003 0303 	and.w	r3, r3, #3
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00d      	beq.n	800a8a8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a88c:	4b37      	ldr	r3, [pc, #220]	@ (800a96c <mem_free+0xf8>)
 800a88e:	f240 2273 	movw	r2, #627	@ 0x273
 800a892:	4937      	ldr	r1, [pc, #220]	@ (800a970 <mem_free+0xfc>)
 800a894:	4837      	ldr	r0, [pc, #220]	@ (800a974 <mem_free+0x100>)
 800a896:	f00d f90f 	bl	8017ab8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a89a:	f00c ffef 	bl	801787c <sys_arch_protect>
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f00c fff9 	bl	8017898 <sys_arch_unprotect>
    return;
 800a8a6:	e05e      	b.n	800a966 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3b0c      	subs	r3, #12
 800a8ac:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a8ae:	4b32      	ldr	r3, [pc, #200]	@ (800a978 <mem_free+0x104>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	69fa      	ldr	r2, [r7, #28]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d306      	bcc.n	800a8c6 <mem_free+0x52>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f103 020c 	add.w	r2, r3, #12
 800a8be:	4b2f      	ldr	r3, [pc, #188]	@ (800a97c <mem_free+0x108>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d90d      	bls.n	800a8e2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a8c6:	4b29      	ldr	r3, [pc, #164]	@ (800a96c <mem_free+0xf8>)
 800a8c8:	f240 227f 	movw	r2, #639	@ 0x27f
 800a8cc:	492c      	ldr	r1, [pc, #176]	@ (800a980 <mem_free+0x10c>)
 800a8ce:	4829      	ldr	r0, [pc, #164]	@ (800a974 <mem_free+0x100>)
 800a8d0:	f00d f8f2 	bl	8017ab8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a8d4:	f00c ffd2 	bl	801787c <sys_arch_protect>
 800a8d8:	6138      	str	r0, [r7, #16]
 800a8da:	6938      	ldr	r0, [r7, #16]
 800a8dc:	f00c ffdc 	bl	8017898 <sys_arch_unprotect>
    return;
 800a8e0:	e041      	b.n	800a966 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a8e2:	4828      	ldr	r0, [pc, #160]	@ (800a984 <mem_free+0x110>)
 800a8e4:	f00c ff8e 	bl	8017804 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	7a1b      	ldrb	r3, [r3, #8]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d110      	bne.n	800a912 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a8f0:	4b1e      	ldr	r3, [pc, #120]	@ (800a96c <mem_free+0xf8>)
 800a8f2:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a8f6:	4924      	ldr	r1, [pc, #144]	@ (800a988 <mem_free+0x114>)
 800a8f8:	481e      	ldr	r0, [pc, #120]	@ (800a974 <mem_free+0x100>)
 800a8fa:	f00d f8dd 	bl	8017ab8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a8fe:	4821      	ldr	r0, [pc, #132]	@ (800a984 <mem_free+0x110>)
 800a900:	f00c ff8f 	bl	8017822 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a904:	f00c ffba 	bl	801787c <sys_arch_protect>
 800a908:	6178      	str	r0, [r7, #20]
 800a90a:	6978      	ldr	r0, [r7, #20]
 800a90c:	f00c ffc4 	bl	8017898 <sys_arch_unprotect>
    return;
 800a910:	e029      	b.n	800a966 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a912:	69f8      	ldr	r0, [r7, #28]
 800a914:	f7ff ff70 	bl	800a7f8 <mem_link_valid>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d110      	bne.n	800a940 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a91e:	4b13      	ldr	r3, [pc, #76]	@ (800a96c <mem_free+0xf8>)
 800a920:	f240 2295 	movw	r2, #661	@ 0x295
 800a924:	4919      	ldr	r1, [pc, #100]	@ (800a98c <mem_free+0x118>)
 800a926:	4813      	ldr	r0, [pc, #76]	@ (800a974 <mem_free+0x100>)
 800a928:	f00d f8c6 	bl	8017ab8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a92c:	4815      	ldr	r0, [pc, #84]	@ (800a984 <mem_free+0x110>)
 800a92e:	f00c ff78 	bl	8017822 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a932:	f00c ffa3 	bl	801787c <sys_arch_protect>
 800a936:	61b8      	str	r0, [r7, #24]
 800a938:	69b8      	ldr	r0, [r7, #24]
 800a93a:	f00c ffad 	bl	8017898 <sys_arch_unprotect>
    return;
 800a93e:	e012      	b.n	800a966 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	2200      	movs	r2, #0
 800a944:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800a946:	4b12      	ldr	r3, [pc, #72]	@ (800a990 <mem_free+0x11c>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	69fa      	ldr	r2, [r7, #28]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d202      	bcs.n	800a956 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a950:	4a0f      	ldr	r2, [pc, #60]	@ (800a990 <mem_free+0x11c>)
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a956:	69f8      	ldr	r0, [r7, #28]
 800a958:	f7ff fe5e 	bl	800a618 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a95c:	4809      	ldr	r0, [pc, #36]	@ (800a984 <mem_free+0x110>)
 800a95e:	f00c ff60 	bl	8017822 <sys_mutex_unlock>
 800a962:	e000      	b.n	800a966 <mem_free+0xf2>
    return;
 800a964:	bf00      	nop
}
 800a966:	3720      	adds	r7, #32
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	08018cb8 	.word	0x08018cb8
 800a970:	08018da8 	.word	0x08018da8
 800a974:	08018d00 	.word	0x08018d00
 800a978:	24009ab0 	.word	0x24009ab0
 800a97c:	24009ab4 	.word	0x24009ab4
 800a980:	08018dcc 	.word	0x08018dcc
 800a984:	24009ab8 	.word	0x24009ab8
 800a988:	08018de8 	.word	0x08018de8
 800a98c:	08018e10 	.word	0x08018e10
 800a990:	24009abc 	.word	0x24009abc

0800a994 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b08a      	sub	sp, #40	@ 0x28
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	3303      	adds	r3, #3
 800a9a2:	f023 0303 	bic.w	r3, r3, #3
 800a9a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9aa:	2b0b      	cmp	r3, #11
 800a9ac:	d801      	bhi.n	800a9b2 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a9ae:	230c      	movs	r3, #12
 800a9b0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b4:	4a6e      	ldr	r2, [pc, #440]	@ (800ab70 <mem_trim+0x1dc>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d803      	bhi.n	800a9c2 <mem_trim+0x2e>
 800a9ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d201      	bcs.n	800a9c6 <mem_trim+0x32>
    return NULL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	e0d0      	b.n	800ab68 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a9c6:	4b6b      	ldr	r3, [pc, #428]	@ (800ab74 <mem_trim+0x1e0>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d304      	bcc.n	800a9da <mem_trim+0x46>
 800a9d0:	4b69      	ldr	r3, [pc, #420]	@ (800ab78 <mem_trim+0x1e4>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d306      	bcc.n	800a9e8 <mem_trim+0x54>
 800a9da:	4b68      	ldr	r3, [pc, #416]	@ (800ab7c <mem_trim+0x1e8>)
 800a9dc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a9e0:	4967      	ldr	r1, [pc, #412]	@ (800ab80 <mem_trim+0x1ec>)
 800a9e2:	4868      	ldr	r0, [pc, #416]	@ (800ab84 <mem_trim+0x1f0>)
 800a9e4:	f00d f868 	bl	8017ab8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a9e8:	4b62      	ldr	r3, [pc, #392]	@ (800ab74 <mem_trim+0x1e0>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d304      	bcc.n	800a9fc <mem_trim+0x68>
 800a9f2:	4b61      	ldr	r3, [pc, #388]	@ (800ab78 <mem_trim+0x1e4>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d307      	bcc.n	800aa0c <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a9fc:	f00c ff3e 	bl	801787c <sys_arch_protect>
 800aa00:	60b8      	str	r0, [r7, #8]
 800aa02:	68b8      	ldr	r0, [r7, #8]
 800aa04:	f00c ff48 	bl	8017898 <sys_arch_unprotect>
    return rmem;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	e0ad      	b.n	800ab68 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	3b0c      	subs	r3, #12
 800aa10:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800aa12:	6a38      	ldr	r0, [r7, #32]
 800aa14:	f7ff fdf0 	bl	800a5f8 <mem_to_ptr>
 800aa18:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800aa1a:	6a3b      	ldr	r3, [r7, #32]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	3b0c      	subs	r3, #12
 800aa24:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800aa26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d906      	bls.n	800aa3c <mem_trim+0xa8>
 800aa2e:	4b53      	ldr	r3, [pc, #332]	@ (800ab7c <mem_trim+0x1e8>)
 800aa30:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800aa34:	4954      	ldr	r1, [pc, #336]	@ (800ab88 <mem_trim+0x1f4>)
 800aa36:	4853      	ldr	r0, [pc, #332]	@ (800ab84 <mem_trim+0x1f0>)
 800aa38:	f00d f83e 	bl	8017ab8 <iprintf>
  if (newsize > size) {
 800aa3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d901      	bls.n	800aa48 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800aa44:	2300      	movs	r3, #0
 800aa46:	e08f      	b.n	800ab68 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 800aa48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d101      	bne.n	800aa54 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	e089      	b.n	800ab68 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800aa54:	484d      	ldr	r0, [pc, #308]	@ (800ab8c <mem_trim+0x1f8>)
 800aa56:	f00c fed5 	bl	8017804 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800aa5a:	6a3b      	ldr	r3, [r7, #32]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7ff fdba 	bl	800a5d8 <ptr_to_mem>
 800aa64:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	7a1b      	ldrb	r3, [r3, #8]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d13c      	bne.n	800aae8 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aa6e:	6a3b      	ldr	r3, [r7, #32]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a3f      	ldr	r2, [pc, #252]	@ (800ab70 <mem_trim+0x1dc>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d106      	bne.n	800aa86 <mem_trim+0xf2>
 800aa78:	4b40      	ldr	r3, [pc, #256]	@ (800ab7c <mem_trim+0x1e8>)
 800aa7a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800aa7e:	4944      	ldr	r1, [pc, #272]	@ (800ab90 <mem_trim+0x1fc>)
 800aa80:	4840      	ldr	r0, [pc, #256]	@ (800ab84 <mem_trim+0x1f0>)
 800aa82:	f00d f819 	bl	8017ab8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aa8c:	69fa      	ldr	r2, [r7, #28]
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa90:	4413      	add	r3, r2
 800aa92:	330c      	adds	r3, #12
 800aa94:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800aa96:	4b3f      	ldr	r3, [pc, #252]	@ (800ab94 <mem_trim+0x200>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	697a      	ldr	r2, [r7, #20]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d105      	bne.n	800aaac <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 800aaa0:	6938      	ldr	r0, [r7, #16]
 800aaa2:	f7ff fd99 	bl	800a5d8 <ptr_to_mem>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	4a3a      	ldr	r2, [pc, #232]	@ (800ab94 <mem_trim+0x200>)
 800aaaa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800aaac:	6938      	ldr	r0, [r7, #16]
 800aaae:	f7ff fd93 	bl	800a5d8 <ptr_to_mem>
 800aab2:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2200      	movs	r2, #0
 800aab8:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	69fa      	ldr	r2, [r7, #28]
 800aac4:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a27      	ldr	r2, [pc, #156]	@ (800ab70 <mem_trim+0x1dc>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d044      	beq.n	800ab60 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff fd7c 	bl	800a5d8 <ptr_to_mem>
 800aae0:	4602      	mov	r2, r0
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	6053      	str	r3, [r2, #4]
 800aae6:	e03b      	b.n	800ab60 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800aae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaea:	3318      	adds	r3, #24
 800aaec:	69ba      	ldr	r2, [r7, #24]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d336      	bcc.n	800ab60 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aaf2:	69fa      	ldr	r2, [r7, #28]
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf6:	4413      	add	r3, r2
 800aaf8:	330c      	adds	r3, #12
 800aafa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aafc:	6a3b      	ldr	r3, [r7, #32]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a1b      	ldr	r2, [pc, #108]	@ (800ab70 <mem_trim+0x1dc>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d106      	bne.n	800ab14 <mem_trim+0x180>
 800ab06:	4b1d      	ldr	r3, [pc, #116]	@ (800ab7c <mem_trim+0x1e8>)
 800ab08:	f240 3216 	movw	r2, #790	@ 0x316
 800ab0c:	4920      	ldr	r1, [pc, #128]	@ (800ab90 <mem_trim+0x1fc>)
 800ab0e:	481d      	ldr	r0, [pc, #116]	@ (800ab84 <mem_trim+0x1f0>)
 800ab10:	f00c ffd2 	bl	8017ab8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ab14:	6938      	ldr	r0, [r7, #16]
 800ab16:	f7ff fd5f 	bl	800a5d8 <ptr_to_mem>
 800ab1a:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800ab1c:	4b1d      	ldr	r3, [pc, #116]	@ (800ab94 <mem_trim+0x200>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	697a      	ldr	r2, [r7, #20]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d202      	bcs.n	800ab2c <mem_trim+0x198>
      lfree = mem2;
 800ab26:	4a1b      	ldr	r2, [pc, #108]	@ (800ab94 <mem_trim+0x200>)
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800ab32:	6a3b      	ldr	r3, [r7, #32]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	69fa      	ldr	r2, [r7, #28]
 800ab3e:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a09      	ldr	r2, [pc, #36]	@ (800ab70 <mem_trim+0x1dc>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d007      	beq.n	800ab60 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff fd3f 	bl	800a5d8 <ptr_to_mem>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ab60:	480a      	ldr	r0, [pc, #40]	@ (800ab8c <mem_trim+0x1f8>)
 800ab62:	f00c fe5e 	bl	8017822 <sys_mutex_unlock>
  return rmem;
 800ab66:	687b      	ldr	r3, [r7, #4]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3728      	adds	r7, #40	@ 0x28
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	0001ffe8 	.word	0x0001ffe8
 800ab74:	24009ab0 	.word	0x24009ab0
 800ab78:	24009ab4 	.word	0x24009ab4
 800ab7c:	08018cb8 	.word	0x08018cb8
 800ab80:	08018e44 	.word	0x08018e44
 800ab84:	08018d00 	.word	0x08018d00
 800ab88:	08018e5c 	.word	0x08018e5c
 800ab8c:	24009ab8 	.word	0x24009ab8
 800ab90:	08018e7c 	.word	0x08018e7c
 800ab94:	24009abc 	.word	0x24009abc

0800ab98 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b088      	sub	sp, #32
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <mem_malloc+0x12>
    return NULL;
 800aba6:	2300      	movs	r3, #0
 800aba8:	e0d9      	b.n	800ad5e <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	3303      	adds	r3, #3
 800abae:	f023 0303 	bic.w	r3, r3, #3
 800abb2:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	2b0b      	cmp	r3, #11
 800abb8:	d801      	bhi.n	800abbe <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800abba:	230c      	movs	r3, #12
 800abbc:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	4a69      	ldr	r2, [pc, #420]	@ (800ad68 <mem_malloc+0x1d0>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d803      	bhi.n	800abce <mem_malloc+0x36>
 800abc6:	69ba      	ldr	r2, [r7, #24]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d201      	bcs.n	800abd2 <mem_malloc+0x3a>
    return NULL;
 800abce:	2300      	movs	r3, #0
 800abd0:	e0c5      	b.n	800ad5e <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800abd2:	4866      	ldr	r0, [pc, #408]	@ (800ad6c <mem_malloc+0x1d4>)
 800abd4:	f00c fe16 	bl	8017804 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800abd8:	4b65      	ldr	r3, [pc, #404]	@ (800ad70 <mem_malloc+0x1d8>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4618      	mov	r0, r3
 800abde:	f7ff fd0b 	bl	800a5f8 <mem_to_ptr>
 800abe2:	61f8      	str	r0, [r7, #28]
 800abe4:	e0b0      	b.n	800ad48 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800abe6:	69f8      	ldr	r0, [r7, #28]
 800abe8:	f7ff fcf6 	bl	800a5d8 <ptr_to_mem>
 800abec:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	7a1b      	ldrb	r3, [r3, #8]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f040 80a2 	bne.w	800ad3c <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800ac02:	69ba      	ldr	r2, [r7, #24]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	f200 8099 	bhi.w	800ad3c <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	f1a3 020c 	sub.w	r2, r3, #12
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	3318      	adds	r3, #24
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d331      	bcc.n	800ac82 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ac1e:	69fa      	ldr	r2, [r7, #28]
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	4413      	add	r3, r2
 800ac24:	330c      	adds	r3, #12
 800ac26:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4a4f      	ldr	r2, [pc, #316]	@ (800ad68 <mem_malloc+0x1d0>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d106      	bne.n	800ac3e <mem_malloc+0xa6>
 800ac30:	4b50      	ldr	r3, [pc, #320]	@ (800ad74 <mem_malloc+0x1dc>)
 800ac32:	f240 3287 	movw	r2, #903	@ 0x387
 800ac36:	4950      	ldr	r1, [pc, #320]	@ (800ad78 <mem_malloc+0x1e0>)
 800ac38:	4850      	ldr	r0, [pc, #320]	@ (800ad7c <mem_malloc+0x1e4>)
 800ac3a:	f00c ff3d 	bl	8017ab8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f7ff fcca 	bl	800a5d8 <ptr_to_mem>
 800ac44:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	69fa      	ldr	r2, [r7, #28]
 800ac58:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	2201      	movs	r2, #1
 800ac64:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a3f      	ldr	r2, [pc, #252]	@ (800ad68 <mem_malloc+0x1d0>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d00b      	beq.n	800ac88 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7ff fcaf 	bl	800a5d8 <ptr_to_mem>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6053      	str	r3, [r2, #4]
 800ac80:	e002      	b.n	800ac88 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	2201      	movs	r2, #1
 800ac86:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ac88:	4b39      	ldr	r3, [pc, #228]	@ (800ad70 <mem_malloc+0x1d8>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d127      	bne.n	800ace2 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 800ac92:	4b37      	ldr	r3, [pc, #220]	@ (800ad70 <mem_malloc+0x1d8>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ac98:	e005      	b.n	800aca6 <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7ff fc9a 	bl	800a5d8 <ptr_to_mem>
 800aca4:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	7a1b      	ldrb	r3, [r3, #8]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d004      	beq.n	800acb8 <mem_malloc+0x120>
 800acae:	4b34      	ldr	r3, [pc, #208]	@ (800ad80 <mem_malloc+0x1e8>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	697a      	ldr	r2, [r7, #20]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d1f0      	bne.n	800ac9a <mem_malloc+0x102>
          }
          lfree = cur;
 800acb8:	4a2d      	ldr	r2, [pc, #180]	@ (800ad70 <mem_malloc+0x1d8>)
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800acbe:	4b2c      	ldr	r3, [pc, #176]	@ (800ad70 <mem_malloc+0x1d8>)
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	4b2f      	ldr	r3, [pc, #188]	@ (800ad80 <mem_malloc+0x1e8>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d00b      	beq.n	800ace2 <mem_malloc+0x14a>
 800acca:	4b29      	ldr	r3, [pc, #164]	@ (800ad70 <mem_malloc+0x1d8>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	7a1b      	ldrb	r3, [r3, #8]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d006      	beq.n	800ace2 <mem_malloc+0x14a>
 800acd4:	4b27      	ldr	r3, [pc, #156]	@ (800ad74 <mem_malloc+0x1dc>)
 800acd6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800acda:	492a      	ldr	r1, [pc, #168]	@ (800ad84 <mem_malloc+0x1ec>)
 800acdc:	4827      	ldr	r0, [pc, #156]	@ (800ad7c <mem_malloc+0x1e4>)
 800acde:	f00c feeb 	bl	8017ab8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ace2:	4822      	ldr	r0, [pc, #136]	@ (800ad6c <mem_malloc+0x1d4>)
 800ace4:	f00c fd9d 	bl	8017822 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	4413      	add	r3, r2
 800acee:	330c      	adds	r3, #12
 800acf0:	4a23      	ldr	r2, [pc, #140]	@ (800ad80 <mem_malloc+0x1e8>)
 800acf2:	6812      	ldr	r2, [r2, #0]
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d906      	bls.n	800ad06 <mem_malloc+0x16e>
 800acf8:	4b1e      	ldr	r3, [pc, #120]	@ (800ad74 <mem_malloc+0x1dc>)
 800acfa:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800acfe:	4922      	ldr	r1, [pc, #136]	@ (800ad88 <mem_malloc+0x1f0>)
 800ad00:	481e      	ldr	r0, [pc, #120]	@ (800ad7c <mem_malloc+0x1e4>)
 800ad02:	f00c fed9 	bl	8017ab8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	f003 0303 	and.w	r3, r3, #3
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d006      	beq.n	800ad1e <mem_malloc+0x186>
 800ad10:	4b18      	ldr	r3, [pc, #96]	@ (800ad74 <mem_malloc+0x1dc>)
 800ad12:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800ad16:	491d      	ldr	r1, [pc, #116]	@ (800ad8c <mem_malloc+0x1f4>)
 800ad18:	4818      	ldr	r0, [pc, #96]	@ (800ad7c <mem_malloc+0x1e4>)
 800ad1a:	f00c fecd 	bl	8017ab8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	f003 0303 	and.w	r3, r3, #3
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d006      	beq.n	800ad36 <mem_malloc+0x19e>
 800ad28:	4b12      	ldr	r3, [pc, #72]	@ (800ad74 <mem_malloc+0x1dc>)
 800ad2a:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800ad2e:	4918      	ldr	r1, [pc, #96]	@ (800ad90 <mem_malloc+0x1f8>)
 800ad30:	4812      	ldr	r0, [pc, #72]	@ (800ad7c <mem_malloc+0x1e4>)
 800ad32:	f00c fec1 	bl	8017ab8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	330c      	adds	r3, #12
 800ad3a:	e010      	b.n	800ad5e <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 800ad3c:	69f8      	ldr	r0, [r7, #28]
 800ad3e:	f7ff fc4b 	bl	800a5d8 <ptr_to_mem>
 800ad42:	4603      	mov	r3, r0
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ad48:	69ba      	ldr	r2, [r7, #24]
 800ad4a:	4b07      	ldr	r3, [pc, #28]	@ (800ad68 <mem_malloc+0x1d0>)
 800ad4c:	1a9b      	subs	r3, r3, r2
 800ad4e:	69fa      	ldr	r2, [r7, #28]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	f4ff af48 	bcc.w	800abe6 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ad56:	4805      	ldr	r0, [pc, #20]	@ (800ad6c <mem_malloc+0x1d4>)
 800ad58:	f00c fd63 	bl	8017822 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3720      	adds	r7, #32
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	0001ffe8 	.word	0x0001ffe8
 800ad6c:	24009ab8 	.word	0x24009ab8
 800ad70:	24009abc 	.word	0x24009abc
 800ad74:	08018cb8 	.word	0x08018cb8
 800ad78:	08018e7c 	.word	0x08018e7c
 800ad7c:	08018d00 	.word	0x08018d00
 800ad80:	24009ab4 	.word	0x24009ab4
 800ad84:	08018e90 	.word	0x08018e90
 800ad88:	08018eac 	.word	0x08018eac
 800ad8c:	08018edc 	.word	0x08018edc
 800ad90:	08018f0c 	.word	0x08018f0c

0800ad94 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	2200      	movs	r2, #0
 800ada2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	3303      	adds	r3, #3
 800adaa:	f023 0303 	bic.w	r3, r3, #3
 800adae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800adb0:	2300      	movs	r3, #0
 800adb2:	60fb      	str	r3, [r7, #12]
 800adb4:	e011      	b.n	800adda <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	881b      	ldrh	r3, [r3, #0]
 800adcc:	461a      	mov	r2, r3
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	4413      	add	r3, r2
 800add2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	3301      	adds	r3, #1
 800add8:	60fb      	str	r3, [r7, #12]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	885b      	ldrh	r3, [r3, #2]
 800adde:	461a      	mov	r2, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4293      	cmp	r3, r2
 800ade4:	dbe7      	blt.n	800adb6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ade6:	bf00      	nop
 800ade8:	bf00      	nop
 800adea:	3714      	adds	r7, #20
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800adfa:	2300      	movs	r3, #0
 800adfc:	80fb      	strh	r3, [r7, #6]
 800adfe:	e009      	b.n	800ae14 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ae00:	88fb      	ldrh	r3, [r7, #6]
 800ae02:	4a08      	ldr	r2, [pc, #32]	@ (800ae24 <memp_init+0x30>)
 800ae04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7ff ffc3 	bl	800ad94 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ae0e:	88fb      	ldrh	r3, [r7, #6]
 800ae10:	3301      	adds	r3, #1
 800ae12:	80fb      	strh	r3, [r7, #6]
 800ae14:	88fb      	ldrh	r3, [r7, #6]
 800ae16:	2b0c      	cmp	r3, #12
 800ae18:	d9f2      	bls.n	800ae00 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ae1a:	bf00      	nop
 800ae1c:	bf00      	nop
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	0801c124 	.word	0x0801c124

0800ae28 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ae30:	f00c fd24 	bl	801787c <sys_arch_protect>
 800ae34:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d015      	beq.n	800ae70 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	6812      	ldr	r2, [r2, #0]
 800ae4c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	f003 0303 	and.w	r3, r3, #3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d006      	beq.n	800ae66 <do_memp_malloc_pool+0x3e>
 800ae58:	4b09      	ldr	r3, [pc, #36]	@ (800ae80 <do_memp_malloc_pool+0x58>)
 800ae5a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800ae5e:	4909      	ldr	r1, [pc, #36]	@ (800ae84 <do_memp_malloc_pool+0x5c>)
 800ae60:	4809      	ldr	r0, [pc, #36]	@ (800ae88 <do_memp_malloc_pool+0x60>)
 800ae62:	f00c fe29 	bl	8017ab8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f00c fd16 	bl	8017898 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	e003      	b.n	800ae78 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f00c fd11 	bl	8017898 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	08018f30 	.word	0x08018f30
 800ae84:	08018f60 	.word	0x08018f60
 800ae88:	08018f84 	.word	0x08018f84

0800ae8c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d106      	bne.n	800aea8 <memp_malloc_pool+0x1c>
 800ae9a:	4b0a      	ldr	r3, [pc, #40]	@ (800aec4 <memp_malloc_pool+0x38>)
 800ae9c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800aea0:	4909      	ldr	r1, [pc, #36]	@ (800aec8 <memp_malloc_pool+0x3c>)
 800aea2:	480a      	ldr	r0, [pc, #40]	@ (800aecc <memp_malloc_pool+0x40>)
 800aea4:	f00c fe08 	bl	8017ab8 <iprintf>
  if (desc == NULL) {
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <memp_malloc_pool+0x26>
    return NULL;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	e003      	b.n	800aeba <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff ffb8 	bl	800ae28 <do_memp_malloc_pool>
 800aeb8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	08018f30 	.word	0x08018f30
 800aec8:	08018fac 	.word	0x08018fac
 800aecc:	08018f84 	.word	0x08018f84

0800aed0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800aeda:	79fb      	ldrb	r3, [r7, #7]
 800aedc:	2b0c      	cmp	r3, #12
 800aede:	d908      	bls.n	800aef2 <memp_malloc+0x22>
 800aee0:	4b0a      	ldr	r3, [pc, #40]	@ (800af0c <memp_malloc+0x3c>)
 800aee2:	f240 1257 	movw	r2, #343	@ 0x157
 800aee6:	490a      	ldr	r1, [pc, #40]	@ (800af10 <memp_malloc+0x40>)
 800aee8:	480a      	ldr	r0, [pc, #40]	@ (800af14 <memp_malloc+0x44>)
 800aeea:	f00c fde5 	bl	8017ab8 <iprintf>
 800aeee:	2300      	movs	r3, #0
 800aef0:	e008      	b.n	800af04 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800aef2:	79fb      	ldrb	r3, [r7, #7]
 800aef4:	4a08      	ldr	r2, [pc, #32]	@ (800af18 <memp_malloc+0x48>)
 800aef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7ff ff94 	bl	800ae28 <do_memp_malloc_pool>
 800af00:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800af02:	68fb      	ldr	r3, [r7, #12]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	08018f30 	.word	0x08018f30
 800af10:	08018fc0 	.word	0x08018fc0
 800af14:	08018f84 	.word	0x08018f84
 800af18:	0801c124 	.word	0x0801c124

0800af1c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	f003 0303 	and.w	r3, r3, #3
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d006      	beq.n	800af3e <do_memp_free_pool+0x22>
 800af30:	4b0d      	ldr	r3, [pc, #52]	@ (800af68 <do_memp_free_pool+0x4c>)
 800af32:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800af36:	490d      	ldr	r1, [pc, #52]	@ (800af6c <do_memp_free_pool+0x50>)
 800af38:	480d      	ldr	r0, [pc, #52]	@ (800af70 <do_memp_free_pool+0x54>)
 800af3a:	f00c fdbd 	bl	8017ab8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800af42:	f00c fc9b 	bl	801787c <sys_arch_protect>
 800af46:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800af5a:	68b8      	ldr	r0, [r7, #8]
 800af5c:	f00c fc9c 	bl	8017898 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800af60:	bf00      	nop
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	08018f30 	.word	0x08018f30
 800af6c:	08018fe0 	.word	0x08018fe0
 800af70:	08018f84 	.word	0x08018f84

0800af74 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d106      	bne.n	800af92 <memp_free_pool+0x1e>
 800af84:	4b0a      	ldr	r3, [pc, #40]	@ (800afb0 <memp_free_pool+0x3c>)
 800af86:	f240 1295 	movw	r2, #405	@ 0x195
 800af8a:	490a      	ldr	r1, [pc, #40]	@ (800afb4 <memp_free_pool+0x40>)
 800af8c:	480a      	ldr	r0, [pc, #40]	@ (800afb8 <memp_free_pool+0x44>)
 800af8e:	f00c fd93 	bl	8017ab8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d007      	beq.n	800afa8 <memp_free_pool+0x34>
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d004      	beq.n	800afa8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800af9e:	6839      	ldr	r1, [r7, #0]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7ff ffbb 	bl	800af1c <do_memp_free_pool>
 800afa6:	e000      	b.n	800afaa <memp_free_pool+0x36>
    return;
 800afa8:	bf00      	nop
}
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	08018f30 	.word	0x08018f30
 800afb4:	08018fac 	.word	0x08018fac
 800afb8:	08018f84 	.word	0x08018f84

0800afbc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	6039      	str	r1, [r7, #0]
 800afc6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800afc8:	79fb      	ldrb	r3, [r7, #7]
 800afca:	2b0c      	cmp	r3, #12
 800afcc:	d907      	bls.n	800afde <memp_free+0x22>
 800afce:	4b0c      	ldr	r3, [pc, #48]	@ (800b000 <memp_free+0x44>)
 800afd0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800afd4:	490b      	ldr	r1, [pc, #44]	@ (800b004 <memp_free+0x48>)
 800afd6:	480c      	ldr	r0, [pc, #48]	@ (800b008 <memp_free+0x4c>)
 800afd8:	f00c fd6e 	bl	8017ab8 <iprintf>
 800afdc:	e00c      	b.n	800aff8 <memp_free+0x3c>

  if (mem == NULL) {
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d008      	beq.n	800aff6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800afe4:	79fb      	ldrb	r3, [r7, #7]
 800afe6:	4a09      	ldr	r2, [pc, #36]	@ (800b00c <memp_free+0x50>)
 800afe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	4618      	mov	r0, r3
 800aff0:	f7ff ff94 	bl	800af1c <do_memp_free_pool>
 800aff4:	e000      	b.n	800aff8 <memp_free+0x3c>
    return;
 800aff6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	08018f30 	.word	0x08018f30
 800b004:	08019000 	.word	0x08019000
 800b008:	08018f84 	.word	0x08018f84
 800b00c:	0801c124 	.word	0x0801c124

0800b010 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b010:	b480      	push	{r7}
 800b012:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b014:	bf00      	nop
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
	...

0800b020 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
 800b02c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT_CORE_LOCKED();
 800b02e:	f7fb f961 	bl	80062f4 <sys_check_core_locking>
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d108      	bne.n	800b04a <netif_add+0x2a>
 800b038:	4b5b      	ldr	r3, [pc, #364]	@ (800b1a8 <netif_add+0x188>)
 800b03a:	f240 1227 	movw	r2, #295	@ 0x127
 800b03e:	495b      	ldr	r1, [pc, #364]	@ (800b1ac <netif_add+0x18c>)
 800b040:	485b      	ldr	r0, [pc, #364]	@ (800b1b0 <netif_add+0x190>)
 800b042:	f00c fd39 	bl	8017ab8 <iprintf>
 800b046:	2300      	movs	r3, #0
 800b048:	e0a9      	b.n	800b19e <netif_add+0x17e>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d108      	bne.n	800b062 <netif_add+0x42>
 800b050:	4b55      	ldr	r3, [pc, #340]	@ (800b1a8 <netif_add+0x188>)
 800b052:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800b056:	4957      	ldr	r1, [pc, #348]	@ (800b1b4 <netif_add+0x194>)
 800b058:	4855      	ldr	r0, [pc, #340]	@ (800b1b0 <netif_add+0x190>)
 800b05a:	f00c fd2d 	bl	8017ab8 <iprintf>
 800b05e:	2300      	movs	r3, #0
 800b060:	e09d      	b.n	800b19e <netif_add+0x17e>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <netif_add+0x4c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b068:	4b53      	ldr	r3, [pc, #332]	@ (800b1b8 <netif_add+0x198>)
 800b06a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <netif_add+0x56>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b072:	4b51      	ldr	r3, [pc, #324]	@ (800b1b8 <netif_add+0x198>)
 800b074:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d101      	bne.n	800b080 <netif_add+0x60>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b07c:	4b4e      	ldr	r3, [pc, #312]	@ (800b1b8 <netif_add+0x198>)
 800b07e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	4a49      	ldr	r2, [pc, #292]	@ (800b1bc <netif_add+0x19c>)
 800b096:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	3324      	adds	r3, #36	@ 0x24
 800b0aa:	2204      	movs	r2, #4
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f00c fd67 	bl	8017b82 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6a3a      	ldr	r2, [r7, #32]
 800b0be:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b0c0:	4b3f      	ldr	r3, [pc, #252]	@ (800b1c0 <netif_add+0x1a0>)
 800b0c2:	781a      	ldrb	r2, [r3, #0]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0ce:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	68b9      	ldr	r1, [r7, #8]
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f000 f914 	bl	800b304 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	4798      	blx	r3
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <netif_add+0xcc>
    return NULL;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	e058      	b.n	800b19e <netif_add+0x17e>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b0f2:	2bff      	cmp	r3, #255	@ 0xff
 800b0f4:	d103      	bne.n	800b0fe <netif_add+0xde>
        netif->num = 0;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b102:	4b30      	ldr	r3, [pc, #192]	@ (800b1c4 <netif_add+0x1a4>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	617b      	str	r3, [r7, #20]
 800b108:	e02b      	b.n	800b162 <netif_add+0x142>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d106      	bne.n	800b120 <netif_add+0x100>
 800b112:	4b25      	ldr	r3, [pc, #148]	@ (800b1a8 <netif_add+0x188>)
 800b114:	f240 128b 	movw	r2, #395	@ 0x18b
 800b118:	492b      	ldr	r1, [pc, #172]	@ (800b1c8 <netif_add+0x1a8>)
 800b11a:	4825      	ldr	r0, [pc, #148]	@ (800b1b0 <netif_add+0x190>)
 800b11c:	f00c fccc 	bl	8017ab8 <iprintf>
        num_netifs++;
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	3301      	adds	r3, #1
 800b124:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	2bff      	cmp	r3, #255	@ 0xff
 800b12a:	dd06      	ble.n	800b13a <netif_add+0x11a>
 800b12c:	4b1e      	ldr	r3, [pc, #120]	@ (800b1a8 <netif_add+0x188>)
 800b12e:	f240 128d 	movw	r2, #397	@ 0x18d
 800b132:	4926      	ldr	r1, [pc, #152]	@ (800b1cc <netif_add+0x1ac>)
 800b134:	481e      	ldr	r0, [pc, #120]	@ (800b1b0 <netif_add+0x190>)
 800b136:	f00c fcbf 	bl	8017ab8 <iprintf>
        if (netif2->num == netif->num) {
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b146:	429a      	cmp	r2, r3
 800b148:	d108      	bne.n	800b15c <netif_add+0x13c>
          netif->num++;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b150:	3301      	adds	r3, #1
 800b152:	b2da      	uxtb	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800b15a:	e005      	b.n	800b168 <netif_add+0x148>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	617b      	str	r3, [r7, #20]
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d1d0      	bne.n	800b10a <netif_add+0xea>
        }
      }
    } while (netif2 != NULL);
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1be      	bne.n	800b0ec <netif_add+0xcc>
  }
  if (netif->num == 254) {
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b174:	2bfe      	cmp	r3, #254	@ 0xfe
 800b176:	d103      	bne.n	800b180 <netif_add+0x160>
    netif_num = 0;
 800b178:	4b11      	ldr	r3, [pc, #68]	@ (800b1c0 <netif_add+0x1a0>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	701a      	strb	r2, [r3, #0]
 800b17e:	e006      	b.n	800b18e <netif_add+0x16e>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b186:	3301      	adds	r3, #1
 800b188:	b2da      	uxtb	r2, r3
 800b18a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c0 <netif_add+0x1a0>)
 800b18c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b18e:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c4 <netif_add+0x1a4>)
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b196:	4a0b      	ldr	r2, [pc, #44]	@ (800b1c4 <netif_add+0x1a4>)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b19c:	68fb      	ldr	r3, [r7, #12]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3718      	adds	r7, #24
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	0801901c 	.word	0x0801901c
 800b1ac:	080190b0 	.word	0x080190b0
 800b1b0:	0801906c 	.word	0x0801906c
 800b1b4:	080190cc 	.word	0x080190cc
 800b1b8:	0801c1a8 	.word	0x0801c1a8
 800b1bc:	0800b5fb 	.word	0x0800b5fb
 800b1c0:	24010574 	.word	0x24010574
 800b1c4:	2401056c 	.word	0x2401056c
 800b1c8:	080190f0 	.word	0x080190f0
 800b1cc:	08019104 	.word	0x08019104

0800b1d0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b1da:	6839      	ldr	r1, [r7, #0]
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f003 f811 	bl	800e204 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b1e2:	6839      	ldr	r1, [r7, #0]
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f008 f897 	bl	8013318 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b1ea:	bf00      	nop
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
	...

0800b1f4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d106      	bne.n	800b214 <netif_do_set_ipaddr+0x20>
 800b206:	4b1d      	ldr	r3, [pc, #116]	@ (800b27c <netif_do_set_ipaddr+0x88>)
 800b208:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800b20c:	491c      	ldr	r1, [pc, #112]	@ (800b280 <netif_do_set_ipaddr+0x8c>)
 800b20e:	481d      	ldr	r0, [pc, #116]	@ (800b284 <netif_do_set_ipaddr+0x90>)
 800b210:	f00c fc52 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d106      	bne.n	800b228 <netif_do_set_ipaddr+0x34>
 800b21a:	4b18      	ldr	r3, [pc, #96]	@ (800b27c <netif_do_set_ipaddr+0x88>)
 800b21c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800b220:	4917      	ldr	r1, [pc, #92]	@ (800b280 <netif_do_set_ipaddr+0x8c>)
 800b222:	4818      	ldr	r0, [pc, #96]	@ (800b284 <netif_do_set_ipaddr+0x90>)
 800b224:	f00c fc48 	bl	8017ab8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	3304      	adds	r3, #4
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	429a      	cmp	r2, r3
 800b234:	d01c      	beq.n	800b270 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	3304      	adds	r3, #4
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b246:	f107 0314 	add.w	r3, r7, #20
 800b24a:	4619      	mov	r1, r3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f7ff ffbf 	bl	800b1d0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <netif_do_set_ipaddr+0x6a>
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	e000      	b.n	800b260 <netif_do_set_ipaddr+0x6c>
 800b25e:	2300      	movs	r3, #0
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b264:	2101      	movs	r1, #1
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f000 f8d6 	bl	800b418 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b26c:	2301      	movs	r3, #1
 800b26e:	e000      	b.n	800b272 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3718      	adds	r7, #24
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	0801901c 	.word	0x0801901c
 800b280:	08019134 	.word	0x08019134
 800b284:	0801906c 	.word	0x0801906c

0800b288 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	3308      	adds	r3, #8
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d00a      	beq.n	800b2b8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <netif_do_set_netmask+0x26>
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	e000      	b.n	800b2b0 <netif_do_set_netmask+0x28>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e000      	b.n	800b2ba <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b2c6:	b480      	push	{r7}
 800b2c8:	b085      	sub	sp, #20
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	60f8      	str	r0, [r7, #12]
 800b2ce:	60b9      	str	r1, [r7, #8]
 800b2d0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	330c      	adds	r3, #12
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d00a      	beq.n	800b2f6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d002      	beq.n	800b2ec <netif_do_set_gw+0x26>
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	e000      	b.n	800b2ee <netif_do_set_gw+0x28>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e000      	b.n	800b2f8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b088      	sub	sp, #32
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
 800b310:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b312:	2300      	movs	r3, #0
 800b314:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b316:	2300      	movs	r3, #0
 800b318:	61bb      	str	r3, [r7, #24]
#endif
  ip_addr_t old_addr;
  int remove;

  LWIP_ASSERT_CORE_LOCKED();
 800b31a:	f7fa ffeb 	bl	80062f4 <sys_check_core_locking>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <netif_set_addr+0x24>
    ipaddr = IP4_ADDR_ANY4;
 800b324:	4b1c      	ldr	r3, [pc, #112]	@ (800b398 <netif_set_addr+0x94>)
 800b326:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d101      	bne.n	800b332 <netif_set_addr+0x2e>
    netmask = IP4_ADDR_ANY4;
 800b32e:	4b1a      	ldr	r3, [pc, #104]	@ (800b398 <netif_set_addr+0x94>)
 800b330:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <netif_set_addr+0x38>
    gw = IP4_ADDR_ANY4;
 800b338:	4b17      	ldr	r3, [pc, #92]	@ (800b398 <netif_set_addr+0x94>)
 800b33a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d003      	beq.n	800b34a <netif_set_addr+0x46>
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d101      	bne.n	800b34e <netif_set_addr+0x4a>
 800b34a:	2301      	movs	r3, #1
 800b34c:	e000      	b.n	800b350 <netif_set_addr+0x4c>
 800b34e:	2300      	movs	r3, #0
 800b350:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d006      	beq.n	800b366 <netif_set_addr+0x62>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b358:	f107 0310 	add.w	r3, r7, #16
 800b35c:	461a      	mov	r2, r3
 800b35e:	68b9      	ldr	r1, [r7, #8]
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f7ff ff47 	bl	800b1f4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b366:	69fa      	ldr	r2, [r7, #28]
 800b368:	6879      	ldr	r1, [r7, #4]
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f7ff ff8c 	bl	800b288 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b370:	69ba      	ldr	r2, [r7, #24]
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f7ff ffa6 	bl	800b2c6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d106      	bne.n	800b38e <netif_set_addr+0x8a>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b380:	f107 0310 	add.w	r3, r7, #16
 800b384:	461a      	mov	r2, r3
 800b386:	68b9      	ldr	r1, [r7, #8]
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f7ff ff33 	bl	800b1f4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b38e:	bf00      	nop
 800b390:	3720      	adds	r7, #32
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	0801c1a8 	.word	0x0801c1a8

0800b39c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800b3a4:	f7fa ffa6 	bl	80062f4 <sys_check_core_locking>
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b3a8:	4a03      	ldr	r2, [pc, #12]	@ (800b3b8 <netif_set_default+0x1c>)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b3ae:	bf00      	nop
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	24010570 	.word	0x24010570

0800b3bc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800b3c4:	f7fa ff96 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d107      	bne.n	800b3de <netif_set_up+0x22>
 800b3ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b40c <netif_set_up+0x50>)
 800b3d0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800b3d4:	490e      	ldr	r1, [pc, #56]	@ (800b410 <netif_set_up+0x54>)
 800b3d6:	480f      	ldr	r0, [pc, #60]	@ (800b414 <netif_set_up+0x58>)
 800b3d8:	f00c fb6e 	bl	8017ab8 <iprintf>
 800b3dc:	e013      	b.n	800b406 <netif_set_up+0x4a>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b3e4:	f003 0301 	and.w	r3, r3, #1
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10c      	bne.n	800b406 <netif_set_up+0x4a>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b3f2:	f043 0301 	orr.w	r3, r3, #1
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b3fe:	2103      	movs	r1, #3
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f809 	bl	800b418 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	0801901c 	.word	0x0801901c
 800b410:	080191a4 	.word	0x080191a4
 800b414:	0801906c 	.word	0x0801906c

0800b418 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	460b      	mov	r3, r1
 800b422:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d106      	bne.n	800b438 <netif_issue_reports+0x20>
 800b42a:	4b18      	ldr	r3, [pc, #96]	@ (800b48c <netif_issue_reports+0x74>)
 800b42c:	f240 326d 	movw	r2, #877	@ 0x36d
 800b430:	4917      	ldr	r1, [pc, #92]	@ (800b490 <netif_issue_reports+0x78>)
 800b432:	4818      	ldr	r0, [pc, #96]	@ (800b494 <netif_issue_reports+0x7c>)
 800b434:	f00c fb40 	bl	8017ab8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b43e:	f003 0304 	and.w	r3, r3, #4
 800b442:	2b00      	cmp	r3, #0
 800b444:	d01e      	beq.n	800b484 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b44c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b450:	2b00      	cmp	r3, #0
 800b452:	d017      	beq.n	800b484 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b454:	78fb      	ldrb	r3, [r7, #3]
 800b456:	f003 0301 	and.w	r3, r3, #1
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d013      	beq.n	800b486 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	3304      	adds	r3, #4
 800b462:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b464:	2b00      	cmp	r3, #0
 800b466:	d00e      	beq.n	800b486 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b46e:	f003 0308 	and.w	r3, r3, #8
 800b472:	2b00      	cmp	r3, #0
 800b474:	d007      	beq.n	800b486 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	3304      	adds	r3, #4
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f00a fd51 	bl	8015f24 <etharp_request>
 800b482:	e000      	b.n	800b486 <netif_issue_reports+0x6e>
    return;
 800b484:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	0801901c 	.word	0x0801901c
 800b490:	080191c0 	.word	0x080191c0
 800b494:	0801906c 	.word	0x0801906c

0800b498 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800b4a0:	f7fa ff28 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d107      	bne.n	800b4ba <netif_set_down+0x22>
 800b4aa:	4b12      	ldr	r3, [pc, #72]	@ (800b4f4 <netif_set_down+0x5c>)
 800b4ac:	f240 329b 	movw	r2, #923	@ 0x39b
 800b4b0:	4911      	ldr	r1, [pc, #68]	@ (800b4f8 <netif_set_down+0x60>)
 800b4b2:	4812      	ldr	r0, [pc, #72]	@ (800b4fc <netif_set_down+0x64>)
 800b4b4:	f00c fb00 	bl	8017ab8 <iprintf>
 800b4b8:	e019      	b.n	800b4ee <netif_set_down+0x56>

  if (netif->flags & NETIF_FLAG_UP) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b4c0:	f003 0301 	and.w	r3, r3, #1
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d012      	beq.n	800b4ee <netif_set_down+0x56>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b4ce:	f023 0301 	bic.w	r3, r3, #1
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b4e0:	f003 0308 	and.w	r3, r3, #8
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d002      	beq.n	800b4ee <netif_set_down+0x56>
      etharp_cleanup_netif(netif);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f00a f8d1 	bl	8015690 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b4ee:	3708      	adds	r7, #8
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	0801901c 	.word	0x0801901c
 800b4f8:	080191e4 	.word	0x080191e4
 800b4fc:	0801906c 	.word	0x0801906c

0800b500 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800b508:	f7fa fef4 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d107      	bne.n	800b522 <netif_set_link_up+0x22>
 800b512:	4b15      	ldr	r3, [pc, #84]	@ (800b568 <netif_set_link_up+0x68>)
 800b514:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800b518:	4914      	ldr	r1, [pc, #80]	@ (800b56c <netif_set_link_up+0x6c>)
 800b51a:	4815      	ldr	r0, [pc, #84]	@ (800b570 <netif_set_link_up+0x70>)
 800b51c:	f00c facc 	bl	8017ab8 <iprintf>
 800b520:	e01e      	b.n	800b560 <netif_set_link_up+0x60>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d117      	bne.n	800b560 <netif_set_link_up+0x60>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b536:	f043 0304 	orr.w	r3, r3, #4
 800b53a:	b2da      	uxtb	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f008 fb16 	bl	8013b74 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b548:	2103      	movs	r1, #3
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7ff ff64 	bl	800b418 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	69db      	ldr	r3, [r3, #28]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d003      	beq.n	800b560 <netif_set_link_up+0x60>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	69db      	ldr	r3, [r3, #28]
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	0801901c 	.word	0x0801901c
 800b56c:	08019204 	.word	0x08019204
 800b570:	0801906c 	.word	0x0801906c

0800b574 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800b57c:	f7fa feba 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d107      	bne.n	800b596 <netif_set_link_down+0x22>
 800b586:	4b11      	ldr	r3, [pc, #68]	@ (800b5cc <netif_set_link_down+0x58>)
 800b588:	f240 4206 	movw	r2, #1030	@ 0x406
 800b58c:	4910      	ldr	r1, [pc, #64]	@ (800b5d0 <netif_set_link_down+0x5c>)
 800b58e:	4811      	ldr	r0, [pc, #68]	@ (800b5d4 <netif_set_link_down+0x60>)
 800b590:	f00c fa92 	bl	8017ab8 <iprintf>
 800b594:	e017      	b.n	800b5c6 <netif_set_link_down+0x52>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b59c:	f003 0304 	and.w	r3, r3, #4
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d010      	beq.n	800b5c6 <netif_set_link_down+0x52>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b5aa:	f023 0304 	bic.w	r3, r3, #4
 800b5ae:	b2da      	uxtb	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	69db      	ldr	r3, [r3, #28]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d003      	beq.n	800b5c6 <netif_set_link_down+0x52>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	69db      	ldr	r3, [r3, #28]
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	0801901c 	.word	0x0801901c
 800b5d0:	08019228 	.word	0x08019228
 800b5d4:	0801906c 	.word	0x0801906c

0800b5d8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800b5e2:	f7fa fe87 	bl	80062f4 <sys_check_core_locking>

  if (netif) {
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <netif_set_link_callback+0x1a>
    netif->link_callback = link_callback;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	61da      	str	r2, [r3, #28]
  }
}
 800b5f2:	bf00      	nop
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b5fa:	b480      	push	{r7}
 800b5fc:	b085      	sub	sp, #20
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	60f8      	str	r0, [r7, #12]
 800b602:	60b9      	str	r1, [r7, #8]
 800b604:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b606:	f06f 030b 	mvn.w	r3, #11
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3714      	adds	r7, #20
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
	...

0800b618 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	4603      	mov	r3, r0
 800b620:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800b622:	f7fa fe67 	bl	80062f4 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 800b626:	79fb      	ldrb	r3, [r7, #7]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d013      	beq.n	800b654 <netif_get_by_index+0x3c>
    NETIF_FOREACH(netif) {
 800b62c:	4b0c      	ldr	r3, [pc, #48]	@ (800b660 <netif_get_by_index+0x48>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	60fb      	str	r3, [r7, #12]
 800b632:	e00c      	b.n	800b64e <netif_get_by_index+0x36>
      if (idx == netif_get_index(netif)) {
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b63a:	3301      	adds	r3, #1
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	79fa      	ldrb	r2, [r7, #7]
 800b640:	429a      	cmp	r2, r3
 800b642:	d101      	bne.n	800b648 <netif_get_by_index+0x30>
        return netif; /* found! */
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	e006      	b.n	800b656 <netif_get_by_index+0x3e>
    NETIF_FOREACH(netif) {
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	60fb      	str	r3, [r7, #12]
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1ef      	bne.n	800b634 <netif_get_by_index+0x1c>
      }
    }
  }

  return NULL;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	2401056c 	.word	0x2401056c

0800b664 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b66a:	f00c f907 	bl	801787c <sys_arch_protect>
 800b66e:	6038      	str	r0, [r7, #0]
 800b670:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a8 <pbuf_free_ooseq+0x44>)
 800b672:	2200      	movs	r2, #0
 800b674:	701a      	strb	r2, [r3, #0]
 800b676:	6838      	ldr	r0, [r7, #0]
 800b678:	f00c f90e 	bl	8017898 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b67c:	4b0b      	ldr	r3, [pc, #44]	@ (800b6ac <pbuf_free_ooseq+0x48>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	607b      	str	r3, [r7, #4]
 800b682:	e00a      	b.n	800b69a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d003      	beq.n	800b694 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f002 fdf7 	bl	800e280 <tcp_free_ooseq>
      return;
 800b692:	e005      	b.n	800b6a0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	607b      	str	r3, [r7, #4]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1f1      	bne.n	800b684 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	24010575 	.word	0x24010575
 800b6ac:	24010584 	.word	0x24010584

0800b6b0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b6b8:	f7ff ffd4 	bl	800b664 <pbuf_free_ooseq>
}
 800b6bc:	bf00      	nop
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b6ca:	f00c f8d7 	bl	801787c <sys_arch_protect>
 800b6ce:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b6d0:	4b0f      	ldr	r3, [pc, #60]	@ (800b710 <pbuf_pool_is_empty+0x4c>)
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b6d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b710 <pbuf_pool_is_empty+0x4c>)
 800b6d8:	2201      	movs	r2, #1
 800b6da:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f00c f8db 	bl	8017898 <sys_arch_unprotect>

  if (!queued) {
 800b6e2:	78fb      	ldrb	r3, [r7, #3]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10f      	bne.n	800b708 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	480a      	ldr	r0, [pc, #40]	@ (800b714 <pbuf_pool_is_empty+0x50>)
 800b6ec:	f7fe fde8 	bl	800a2c0 <tcpip_try_callback>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d008      	beq.n	800b708 <pbuf_pool_is_empty+0x44>
 800b6f6:	f00c f8c1 	bl	801787c <sys_arch_protect>
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	4b04      	ldr	r3, [pc, #16]	@ (800b710 <pbuf_pool_is_empty+0x4c>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	701a      	strb	r2, [r3, #0]
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f00c f8c8 	bl	8017898 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b708:	bf00      	nop
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	24010575 	.word	0x24010575
 800b714:	0800b6b1 	.word	0x0800b6b1

0800b718 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	4611      	mov	r1, r2
 800b724:	461a      	mov	r2, r3
 800b726:	460b      	mov	r3, r1
 800b728:	80fb      	strh	r3, [r7, #6]
 800b72a:	4613      	mov	r3, r2
 800b72c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	88fa      	ldrh	r2, [r7, #6]
 800b73e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	88ba      	ldrh	r2, [r7, #4]
 800b744:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b746:	8b3b      	ldrh	r3, [r7, #24]
 800b748:	b2da      	uxtb	r2, r3
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	7f3a      	ldrb	r2, [r7, #28]
 800b752:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2201      	movs	r2, #1
 800b758:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	73da      	strb	r2, [r3, #15]
}
 800b760:	bf00      	nop
 800b762:	3714      	adds	r7, #20
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08c      	sub	sp, #48	@ 0x30
 800b770:	af02      	add	r7, sp, #8
 800b772:	4603      	mov	r3, r0
 800b774:	71fb      	strb	r3, [r7, #7]
 800b776:	460b      	mov	r3, r1
 800b778:	80bb      	strh	r3, [r7, #4]
 800b77a:	4613      	mov	r3, r2
 800b77c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b782:	887b      	ldrh	r3, [r7, #2]
 800b784:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b788:	f000 8082 	beq.w	800b890 <pbuf_alloc+0x124>
 800b78c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b790:	f300 80c9 	bgt.w	800b926 <pbuf_alloc+0x1ba>
 800b794:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b798:	d010      	beq.n	800b7bc <pbuf_alloc+0x50>
 800b79a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b79e:	f300 80c2 	bgt.w	800b926 <pbuf_alloc+0x1ba>
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d002      	beq.n	800b7ac <pbuf_alloc+0x40>
 800b7a6:	2b41      	cmp	r3, #65	@ 0x41
 800b7a8:	f040 80bd 	bne.w	800b926 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b7ac:	887a      	ldrh	r2, [r7, #2]
 800b7ae:	88bb      	ldrh	r3, [r7, #4]
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	2000      	movs	r0, #0
 800b7b4:	f000 f8d2 	bl	800b95c <pbuf_alloc_reference>
 800b7b8:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b7ba:	e0be      	b.n	800b93a <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b7c4:	88bb      	ldrh	r3, [r7, #4]
 800b7c6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b7c8:	200c      	movs	r0, #12
 800b7ca:	f7ff fb81 	bl	800aed0 <memp_malloc>
 800b7ce:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d109      	bne.n	800b7ea <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800b7d6:	f7ff ff75 	bl	800b6c4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d002      	beq.n	800b7e6 <pbuf_alloc+0x7a>
            pbuf_free(p);
 800b7e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b7e2:	f000 faa7 	bl	800bd34 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	e0a8      	b.n	800b93c <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b7ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b7ec:	3303      	adds	r3, #3
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	f023 0303 	bic.w	r3, r3, #3
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 800b7fa:	1a9b      	subs	r3, r3, r2
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	8b7a      	ldrh	r2, [r7, #26]
 800b800:	4293      	cmp	r3, r2
 800b802:	bf28      	it	cs
 800b804:	4613      	movcs	r3, r2
 800b806:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b808:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b80a:	3310      	adds	r3, #16
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	4413      	add	r3, r2
 800b810:	3303      	adds	r3, #3
 800b812:	f023 0303 	bic.w	r3, r3, #3
 800b816:	4618      	mov	r0, r3
 800b818:	89f9      	ldrh	r1, [r7, #14]
 800b81a:	8b7a      	ldrh	r2, [r7, #26]
 800b81c:	2300      	movs	r3, #0
 800b81e:	9301      	str	r3, [sp, #4]
 800b820:	887b      	ldrh	r3, [r7, #2]
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	460b      	mov	r3, r1
 800b826:	4601      	mov	r1, r0
 800b828:	6938      	ldr	r0, [r7, #16]
 800b82a:	f7ff ff75 	bl	800b718 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	f003 0303 	and.w	r3, r3, #3
 800b836:	2b00      	cmp	r3, #0
 800b838:	d006      	beq.n	800b848 <pbuf_alloc+0xdc>
 800b83a:	4b42      	ldr	r3, [pc, #264]	@ (800b944 <pbuf_alloc+0x1d8>)
 800b83c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b840:	4941      	ldr	r1, [pc, #260]	@ (800b948 <pbuf_alloc+0x1dc>)
 800b842:	4842      	ldr	r0, [pc, #264]	@ (800b94c <pbuf_alloc+0x1e0>)
 800b844:	f00c f938 	bl	8017ab8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b848:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b84a:	3303      	adds	r3, #3
 800b84c:	f023 0303 	bic.w	r3, r3, #3
 800b850:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 800b854:	4293      	cmp	r3, r2
 800b856:	d106      	bne.n	800b866 <pbuf_alloc+0xfa>
 800b858:	4b3a      	ldr	r3, [pc, #232]	@ (800b944 <pbuf_alloc+0x1d8>)
 800b85a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b85e:	493c      	ldr	r1, [pc, #240]	@ (800b950 <pbuf_alloc+0x1e4>)
 800b860:	483a      	ldr	r0, [pc, #232]	@ (800b94c <pbuf_alloc+0x1e0>)
 800b862:	f00c f929 	bl	8017ab8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d102      	bne.n	800b872 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b870:	e002      	b.n	800b878 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	693a      	ldr	r2, [r7, #16]
 800b876:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b87c:	8b7a      	ldrh	r2, [r7, #26]
 800b87e:	89fb      	ldrh	r3, [r7, #14]
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b884:	2300      	movs	r3, #0
 800b886:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b888:	8b7b      	ldrh	r3, [r7, #26]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d19c      	bne.n	800b7c8 <pbuf_alloc+0x5c>
      break;
 800b88e:	e054      	b.n	800b93a <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b890:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b892:	3303      	adds	r3, #3
 800b894:	b29b      	uxth	r3, r3
 800b896:	f023 0303 	bic.w	r3, r3, #3
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	88bb      	ldrh	r3, [r7, #4]
 800b89e:	3303      	adds	r3, #3
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	f023 0303 	bic.w	r3, r3, #3
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	4413      	add	r3, r2
 800b8aa:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b8ac:	8b3b      	ldrh	r3, [r7, #24]
 800b8ae:	3310      	adds	r3, #16
 800b8b0:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b8b2:	8b3a      	ldrh	r2, [r7, #24]
 800b8b4:	88bb      	ldrh	r3, [r7, #4]
 800b8b6:	3303      	adds	r3, #3
 800b8b8:	f023 0303 	bic.w	r3, r3, #3
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d306      	bcc.n	800b8ce <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b8c0:	88bb      	ldrh	r3, [r7, #4]
 800b8c2:	3303      	adds	r3, #3
 800b8c4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d201      	bcs.n	800b8d2 <pbuf_alloc+0x166>
        return NULL;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	e034      	b.n	800b93c <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b8d2:	6978      	ldr	r0, [r7, #20]
 800b8d4:	f7ff f960 	bl	800ab98 <mem_malloc>
 800b8d8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d101      	bne.n	800b8e4 <pbuf_alloc+0x178>
        return NULL;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	e02b      	b.n	800b93c <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b8e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b8e6:	3310      	adds	r3, #16
 800b8e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8ea:	4413      	add	r3, r2
 800b8ec:	3303      	adds	r3, #3
 800b8ee:	f023 0303 	bic.w	r3, r3, #3
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	88b9      	ldrh	r1, [r7, #4]
 800b8f6:	88ba      	ldrh	r2, [r7, #4]
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	9301      	str	r3, [sp, #4]
 800b8fc:	887b      	ldrh	r3, [r7, #2]
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	460b      	mov	r3, r1
 800b902:	4601      	mov	r1, r0
 800b904:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b906:	f7ff ff07 	bl	800b718 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	f003 0303 	and.w	r3, r3, #3
 800b912:	2b00      	cmp	r3, #0
 800b914:	d010      	beq.n	800b938 <pbuf_alloc+0x1cc>
 800b916:	4b0b      	ldr	r3, [pc, #44]	@ (800b944 <pbuf_alloc+0x1d8>)
 800b918:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b91c:	490d      	ldr	r1, [pc, #52]	@ (800b954 <pbuf_alloc+0x1e8>)
 800b91e:	480b      	ldr	r0, [pc, #44]	@ (800b94c <pbuf_alloc+0x1e0>)
 800b920:	f00c f8ca 	bl	8017ab8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b924:	e008      	b.n	800b938 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b926:	4b07      	ldr	r3, [pc, #28]	@ (800b944 <pbuf_alloc+0x1d8>)
 800b928:	f240 1227 	movw	r2, #295	@ 0x127
 800b92c:	490a      	ldr	r1, [pc, #40]	@ (800b958 <pbuf_alloc+0x1ec>)
 800b92e:	4807      	ldr	r0, [pc, #28]	@ (800b94c <pbuf_alloc+0x1e0>)
 800b930:	f00c f8c2 	bl	8017ab8 <iprintf>
      return NULL;
 800b934:	2300      	movs	r3, #0
 800b936:	e001      	b.n	800b93c <pbuf_alloc+0x1d0>
      break;
 800b938:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3728      	adds	r7, #40	@ 0x28
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	0801924c 	.word	0x0801924c
 800b948:	0801927c 	.word	0x0801927c
 800b94c:	080192ac 	.word	0x080192ac
 800b950:	080192d4 	.word	0x080192d4
 800b954:	08019308 	.word	0x08019308
 800b958:	08019334 	.word	0x08019334

0800b95c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b086      	sub	sp, #24
 800b960:	af02      	add	r7, sp, #8
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	807b      	strh	r3, [r7, #2]
 800b968:	4613      	mov	r3, r2
 800b96a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b96c:	883b      	ldrh	r3, [r7, #0]
 800b96e:	2b41      	cmp	r3, #65	@ 0x41
 800b970:	d009      	beq.n	800b986 <pbuf_alloc_reference+0x2a>
 800b972:	883b      	ldrh	r3, [r7, #0]
 800b974:	2b01      	cmp	r3, #1
 800b976:	d006      	beq.n	800b986 <pbuf_alloc_reference+0x2a>
 800b978:	4b0f      	ldr	r3, [pc, #60]	@ (800b9b8 <pbuf_alloc_reference+0x5c>)
 800b97a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b97e:	490f      	ldr	r1, [pc, #60]	@ (800b9bc <pbuf_alloc_reference+0x60>)
 800b980:	480f      	ldr	r0, [pc, #60]	@ (800b9c0 <pbuf_alloc_reference+0x64>)
 800b982:	f00c f899 	bl	8017ab8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b986:	200b      	movs	r0, #11
 800b988:	f7ff faa2 	bl	800aed0 <memp_malloc>
 800b98c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d101      	bne.n	800b998 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b994:	2300      	movs	r3, #0
 800b996:	e00b      	b.n	800b9b0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b998:	8879      	ldrh	r1, [r7, #2]
 800b99a:	887a      	ldrh	r2, [r7, #2]
 800b99c:	2300      	movs	r3, #0
 800b99e:	9301      	str	r3, [sp, #4]
 800b9a0:	883b      	ldrh	r3, [r7, #0]
 800b9a2:	9300      	str	r3, [sp, #0]
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	6879      	ldr	r1, [r7, #4]
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f7ff feb5 	bl	800b718 <pbuf_init_alloced_pbuf>
  return p;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	0801924c 	.word	0x0801924c
 800b9bc:	08019350 	.word	0x08019350
 800b9c0:	080192ac 	.word	0x080192ac

0800b9c4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b088      	sub	sp, #32
 800b9c8:	af02      	add	r7, sp, #8
 800b9ca:	607b      	str	r3, [r7, #4]
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	73fb      	strb	r3, [r7, #15]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	81bb      	strh	r3, [r7, #12]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b9d8:	7bfb      	ldrb	r3, [r7, #15]
 800b9da:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b9dc:	8a7b      	ldrh	r3, [r7, #18]
 800b9de:	3303      	adds	r3, #3
 800b9e0:	f023 0203 	bic.w	r2, r3, #3
 800b9e4:	89bb      	ldrh	r3, [r7, #12]
 800b9e6:	441a      	add	r2, r3
 800b9e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d901      	bls.n	800b9f2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	e018      	b.n	800ba24 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b9f2:	6a3b      	ldr	r3, [r7, #32]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d007      	beq.n	800ba08 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b9f8:	8a7b      	ldrh	r3, [r7, #18]
 800b9fa:	3303      	adds	r3, #3
 800b9fc:	f023 0303 	bic.w	r3, r3, #3
 800ba00:	6a3a      	ldr	r2, [r7, #32]
 800ba02:	4413      	add	r3, r2
 800ba04:	617b      	str	r3, [r7, #20]
 800ba06:	e001      	b.n	800ba0c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	89b9      	ldrh	r1, [r7, #12]
 800ba10:	89ba      	ldrh	r2, [r7, #12]
 800ba12:	2302      	movs	r3, #2
 800ba14:	9301      	str	r3, [sp, #4]
 800ba16:	897b      	ldrh	r3, [r7, #10]
 800ba18:	9300      	str	r3, [sp, #0]
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	6979      	ldr	r1, [r7, #20]
 800ba1e:	f7ff fe7b 	bl	800b718 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ba22:	687b      	ldr	r3, [r7, #4]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	460b      	mov	r3, r1
 800ba36:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d106      	bne.n	800ba4c <pbuf_realloc+0x20>
 800ba3e:	4b39      	ldr	r3, [pc, #228]	@ (800bb24 <pbuf_realloc+0xf8>)
 800ba40:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800ba44:	4938      	ldr	r1, [pc, #224]	@ (800bb28 <pbuf_realloc+0xfc>)
 800ba46:	4839      	ldr	r0, [pc, #228]	@ (800bb2c <pbuf_realloc+0x100>)
 800ba48:	f00c f836 	bl	8017ab8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	891b      	ldrh	r3, [r3, #8]
 800ba50:	887a      	ldrh	r2, [r7, #2]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d261      	bcs.n	800bb1a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	891a      	ldrh	r2, [r3, #8]
 800ba5a:	887b      	ldrh	r3, [r7, #2]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ba60:	887b      	ldrh	r3, [r7, #2]
 800ba62:	817b      	strh	r3, [r7, #10]
  q = p;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ba68:	e018      	b.n	800ba9c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	895b      	ldrh	r3, [r3, #10]
 800ba6e:	897a      	ldrh	r2, [r7, #10]
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	891a      	ldrh	r2, [r3, #8]
 800ba78:	893b      	ldrh	r3, [r7, #8]
 800ba7a:	1ad3      	subs	r3, r2, r3
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d106      	bne.n	800ba9c <pbuf_realloc+0x70>
 800ba8e:	4b25      	ldr	r3, [pc, #148]	@ (800bb24 <pbuf_realloc+0xf8>)
 800ba90:	f240 12af 	movw	r2, #431	@ 0x1af
 800ba94:	4926      	ldr	r1, [pc, #152]	@ (800bb30 <pbuf_realloc+0x104>)
 800ba96:	4825      	ldr	r0, [pc, #148]	@ (800bb2c <pbuf_realloc+0x100>)
 800ba98:	f00c f80e 	bl	8017ab8 <iprintf>
  while (rem_len > q->len) {
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	895b      	ldrh	r3, [r3, #10]
 800baa0:	897a      	ldrh	r2, [r7, #10]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d8e1      	bhi.n	800ba6a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	7b1b      	ldrb	r3, [r3, #12]
 800baaa:	f003 030f 	and.w	r3, r3, #15
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d11f      	bne.n	800baf2 <pbuf_realloc+0xc6>
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	895b      	ldrh	r3, [r3, #10]
 800bab6:	897a      	ldrh	r2, [r7, #10]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d01a      	beq.n	800baf2 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	7b5b      	ldrb	r3, [r3, #13]
 800bac0:	f003 0302 	and.w	r3, r3, #2
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d114      	bne.n	800baf2 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	1ad2      	subs	r2, r2, r3
 800bad0:	897b      	ldrh	r3, [r7, #10]
 800bad2:	4413      	add	r3, r2
 800bad4:	4619      	mov	r1, r3
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f7fe ff5c 	bl	800a994 <mem_trim>
 800badc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d106      	bne.n	800baf2 <pbuf_realloc+0xc6>
 800bae4:	4b0f      	ldr	r3, [pc, #60]	@ (800bb24 <pbuf_realloc+0xf8>)
 800bae6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800baea:	4912      	ldr	r1, [pc, #72]	@ (800bb34 <pbuf_realloc+0x108>)
 800baec:	480f      	ldr	r0, [pc, #60]	@ (800bb2c <pbuf_realloc+0x100>)
 800baee:	f00b ffe3 	bl	8017ab8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	897a      	ldrh	r2, [r7, #10]
 800baf6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	895a      	ldrh	r2, [r3, #10]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d004      	beq.n	800bb12 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f000 f911 	bl	800bd34 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	601a      	str	r2, [r3, #0]
 800bb18:	e000      	b.n	800bb1c <pbuf_realloc+0xf0>
    return;
 800bb1a:	bf00      	nop

}
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	0801924c 	.word	0x0801924c
 800bb28:	08019364 	.word	0x08019364
 800bb2c:	080192ac 	.word	0x080192ac
 800bb30:	0801937c 	.word	0x0801937c
 800bb34:	08019394 	.word	0x08019394

0800bb38 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	4613      	mov	r3, r2
 800bb44:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d106      	bne.n	800bb5a <pbuf_add_header_impl+0x22>
 800bb4c:	4b2b      	ldr	r3, [pc, #172]	@ (800bbfc <pbuf_add_header_impl+0xc4>)
 800bb4e:	f240 12df 	movw	r2, #479	@ 0x1df
 800bb52:	492b      	ldr	r1, [pc, #172]	@ (800bc00 <pbuf_add_header_impl+0xc8>)
 800bb54:	482b      	ldr	r0, [pc, #172]	@ (800bc04 <pbuf_add_header_impl+0xcc>)
 800bb56:	f00b ffaf 	bl	8017ab8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d003      	beq.n	800bb68 <pbuf_add_header_impl+0x30>
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb66:	d301      	bcc.n	800bb6c <pbuf_add_header_impl+0x34>
    return 1;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e043      	b.n	800bbf4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d101      	bne.n	800bb76 <pbuf_add_header_impl+0x3e>
    return 0;
 800bb72:	2300      	movs	r3, #0
 800bb74:	e03e      	b.n	800bbf4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	891a      	ldrh	r2, [r3, #8]
 800bb7e:	8a7b      	ldrh	r3, [r7, #18]
 800bb80:	4413      	add	r3, r2
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	8a7a      	ldrh	r2, [r7, #18]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d901      	bls.n	800bb8e <pbuf_add_header_impl+0x56>
    return 1;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e032      	b.n	800bbf4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	7b1b      	ldrb	r3, [r3, #12]
 800bb92:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bb94:	8a3b      	ldrh	r3, [r7, #16]
 800bb96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00c      	beq.n	800bbb8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	425b      	negs	r3, r3
 800bba6:	4413      	add	r3, r2
 800bba8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	3310      	adds	r3, #16
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d20d      	bcs.n	800bbd0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	e01d      	b.n	800bbf4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bbb8:	79fb      	ldrb	r3, [r7, #7]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d006      	beq.n	800bbcc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	685a      	ldr	r2, [r3, #4]
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	425b      	negs	r3, r3
 800bbc6:	4413      	add	r3, r2
 800bbc8:	617b      	str	r3, [r7, #20]
 800bbca:	e001      	b.n	800bbd0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e011      	b.n	800bbf4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	895a      	ldrh	r2, [r3, #10]
 800bbda:	8a7b      	ldrh	r3, [r7, #18]
 800bbdc:	4413      	add	r3, r2
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	891a      	ldrh	r2, [r3, #8]
 800bbe8:	8a7b      	ldrh	r3, [r7, #18]
 800bbea:	4413      	add	r3, r2
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	811a      	strh	r2, [r3, #8]


  return 0;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3718      	adds	r7, #24
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	0801924c 	.word	0x0801924c
 800bc00:	080193b0 	.word	0x080193b0
 800bc04:	080192ac 	.word	0x080192ac

0800bc08 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bc12:	2200      	movs	r2, #0
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f7ff ff8e 	bl	800bb38 <pbuf_add_header_impl>
 800bc1c:	4603      	mov	r3, r0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3708      	adds	r7, #8
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
	...

0800bc28 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d106      	bne.n	800bc46 <pbuf_remove_header+0x1e>
 800bc38:	4b20      	ldr	r3, [pc, #128]	@ (800bcbc <pbuf_remove_header+0x94>)
 800bc3a:	f240 224b 	movw	r2, #587	@ 0x24b
 800bc3e:	4920      	ldr	r1, [pc, #128]	@ (800bcc0 <pbuf_remove_header+0x98>)
 800bc40:	4820      	ldr	r0, [pc, #128]	@ (800bcc4 <pbuf_remove_header+0x9c>)
 800bc42:	f00b ff39 	bl	8017ab8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d003      	beq.n	800bc54 <pbuf_remove_header+0x2c>
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc52:	d301      	bcc.n	800bc58 <pbuf_remove_header+0x30>
    return 1;
 800bc54:	2301      	movs	r3, #1
 800bc56:	e02c      	b.n	800bcb2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <pbuf_remove_header+0x3a>
    return 0;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	e027      	b.n	800bcb2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	895b      	ldrh	r3, [r3, #10]
 800bc6a:	89fa      	ldrh	r2, [r7, #14]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d908      	bls.n	800bc82 <pbuf_remove_header+0x5a>
 800bc70:	4b12      	ldr	r3, [pc, #72]	@ (800bcbc <pbuf_remove_header+0x94>)
 800bc72:	f240 2255 	movw	r2, #597	@ 0x255
 800bc76:	4914      	ldr	r1, [pc, #80]	@ (800bcc8 <pbuf_remove_header+0xa0>)
 800bc78:	4812      	ldr	r0, [pc, #72]	@ (800bcc4 <pbuf_remove_header+0x9c>)
 800bc7a:	f00b ff1d 	bl	8017ab8 <iprintf>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e017      	b.n	800bcb2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	441a      	add	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	895a      	ldrh	r2, [r3, #10]
 800bc98:	89fb      	ldrh	r3, [r7, #14]
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	891a      	ldrh	r2, [r3, #8]
 800bca6:	89fb      	ldrh	r3, [r7, #14]
 800bca8:	1ad3      	subs	r3, r2, r3
 800bcaa:	b29a      	uxth	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	0801924c 	.word	0x0801924c
 800bcc0:	080193b0 	.word	0x080193b0
 800bcc4:	080192ac 	.word	0x080192ac
 800bcc8:	080193bc 	.word	0x080193bc

0800bccc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	807b      	strh	r3, [r7, #2]
 800bcd8:	4613      	mov	r3, r2
 800bcda:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bcdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	da08      	bge.n	800bcf6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bce4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bce8:	425b      	negs	r3, r3
 800bcea:	4619      	mov	r1, r3
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f7ff ff9b 	bl	800bc28 <pbuf_remove_header>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	e007      	b.n	800bd06 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bcf6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bcfa:	787a      	ldrb	r2, [r7, #1]
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f7ff ff1a 	bl	800bb38 <pbuf_add_header_impl>
 800bd04:	4603      	mov	r3, r0
  }
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b082      	sub	sp, #8
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	460b      	mov	r3, r1
 800bd18:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bd1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	4619      	mov	r1, r3
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7ff ffd2 	bl	800bccc <pbuf_header_impl>
 800bd28:	4603      	mov	r3, r0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
	...

0800bd34 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10b      	bne.n	800bd5a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d106      	bne.n	800bd56 <pbuf_free+0x22>
 800bd48:	4b3b      	ldr	r3, [pc, #236]	@ (800be38 <pbuf_free+0x104>)
 800bd4a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800bd4e:	493b      	ldr	r1, [pc, #236]	@ (800be3c <pbuf_free+0x108>)
 800bd50:	483b      	ldr	r0, [pc, #236]	@ (800be40 <pbuf_free+0x10c>)
 800bd52:	f00b feb1 	bl	8017ab8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bd56:	2300      	movs	r3, #0
 800bd58:	e069      	b.n	800be2e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bd5e:	e062      	b.n	800be26 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bd60:	f00b fd8c 	bl	801787c <sys_arch_protect>
 800bd64:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	7b9b      	ldrb	r3, [r3, #14]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d106      	bne.n	800bd7c <pbuf_free+0x48>
 800bd6e:	4b32      	ldr	r3, [pc, #200]	@ (800be38 <pbuf_free+0x104>)
 800bd70:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800bd74:	4933      	ldr	r1, [pc, #204]	@ (800be44 <pbuf_free+0x110>)
 800bd76:	4832      	ldr	r0, [pc, #200]	@ (800be40 <pbuf_free+0x10c>)
 800bd78:	f00b fe9e 	bl	8017ab8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	7b9b      	ldrb	r3, [r3, #14]
 800bd80:	3b01      	subs	r3, #1
 800bd82:	b2da      	uxtb	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	739a      	strb	r2, [r3, #14]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	7b9b      	ldrb	r3, [r3, #14]
 800bd8c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bd8e:	69b8      	ldr	r0, [r7, #24]
 800bd90:	f00b fd82 	bl	8017898 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bd94:	7dfb      	ldrb	r3, [r7, #23]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d143      	bne.n	800be22 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	7b1b      	ldrb	r3, [r3, #12]
 800bda4:	f003 030f 	and.w	r3, r3, #15
 800bda8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	7b5b      	ldrb	r3, [r3, #13]
 800bdae:	f003 0302 	and.w	r3, r3, #2
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d011      	beq.n	800bdda <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d106      	bne.n	800bdd0 <pbuf_free+0x9c>
 800bdc2:	4b1d      	ldr	r3, [pc, #116]	@ (800be38 <pbuf_free+0x104>)
 800bdc4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800bdc8:	491f      	ldr	r1, [pc, #124]	@ (800be48 <pbuf_free+0x114>)
 800bdca:	481d      	ldr	r0, [pc, #116]	@ (800be40 <pbuf_free+0x10c>)
 800bdcc:	f00b fe74 	bl	8017ab8 <iprintf>
        pc->custom_free_function(p);
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	4798      	blx	r3
 800bdd8:	e01d      	b.n	800be16 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	d104      	bne.n	800bdea <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bde0:	6879      	ldr	r1, [r7, #4]
 800bde2:	200c      	movs	r0, #12
 800bde4:	f7ff f8ea 	bl	800afbc <memp_free>
 800bde8:	e015      	b.n	800be16 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d104      	bne.n	800bdfa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bdf0:	6879      	ldr	r1, [r7, #4]
 800bdf2:	200b      	movs	r0, #11
 800bdf4:	f7ff f8e2 	bl	800afbc <memp_free>
 800bdf8:	e00d      	b.n	800be16 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d103      	bne.n	800be08 <pbuf_free+0xd4>
          mem_free(p);
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f7fe fd37 	bl	800a874 <mem_free>
 800be06:	e006      	b.n	800be16 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800be08:	4b0b      	ldr	r3, [pc, #44]	@ (800be38 <pbuf_free+0x104>)
 800be0a:	f240 320f 	movw	r2, #783	@ 0x30f
 800be0e:	490f      	ldr	r1, [pc, #60]	@ (800be4c <pbuf_free+0x118>)
 800be10:	480b      	ldr	r0, [pc, #44]	@ (800be40 <pbuf_free+0x10c>)
 800be12:	f00b fe51 	bl	8017ab8 <iprintf>
        }
      }
      count++;
 800be16:	7ffb      	ldrb	r3, [r7, #31]
 800be18:	3301      	adds	r3, #1
 800be1a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	607b      	str	r3, [r7, #4]
 800be20:	e001      	b.n	800be26 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800be22:	2300      	movs	r3, #0
 800be24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d199      	bne.n	800bd60 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800be2c:	7ffb      	ldrb	r3, [r7, #31]
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3720      	adds	r7, #32
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	0801924c 	.word	0x0801924c
 800be3c:	080193b0 	.word	0x080193b0
 800be40:	080192ac 	.word	0x080192ac
 800be44:	080193dc 	.word	0x080193dc
 800be48:	080193f4 	.word	0x080193f4
 800be4c:	08019418 	.word	0x08019418

0800be50 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800be58:	2300      	movs	r3, #0
 800be5a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800be5c:	e005      	b.n	800be6a <pbuf_clen+0x1a>
    ++len;
 800be5e:	89fb      	ldrh	r3, [r7, #14]
 800be60:	3301      	adds	r3, #1
 800be62:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1f6      	bne.n	800be5e <pbuf_clen+0xe>
  }
  return len;
 800be70:	89fb      	ldrh	r3, [r7, #14]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3714      	adds	r7, #20
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
	...

0800be80 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d016      	beq.n	800bebc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800be8e:	f00b fcf5 	bl	801787c <sys_arch_protect>
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	7b9b      	ldrb	r3, [r3, #14]
 800be98:	3301      	adds	r3, #1
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	739a      	strb	r2, [r3, #14]
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f00b fcf9 	bl	8017898 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	7b9b      	ldrb	r3, [r3, #14]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d106      	bne.n	800bebc <pbuf_ref+0x3c>
 800beae:	4b05      	ldr	r3, [pc, #20]	@ (800bec4 <pbuf_ref+0x44>)
 800beb0:	f240 3242 	movw	r2, #834	@ 0x342
 800beb4:	4904      	ldr	r1, [pc, #16]	@ (800bec8 <pbuf_ref+0x48>)
 800beb6:	4805      	ldr	r0, [pc, #20]	@ (800becc <pbuf_ref+0x4c>)
 800beb8:	f00b fdfe 	bl	8017ab8 <iprintf>
  }
}
 800bebc:	bf00      	nop
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	0801924c 	.word	0x0801924c
 800bec8:	0801942c 	.word	0x0801942c
 800becc:	080192ac 	.word	0x080192ac

0800bed0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <pbuf_cat+0x16>
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d107      	bne.n	800bef6 <pbuf_cat+0x26>
 800bee6:	4b20      	ldr	r3, [pc, #128]	@ (800bf68 <pbuf_cat+0x98>)
 800bee8:	f240 3259 	movw	r2, #857	@ 0x359
 800beec:	491f      	ldr	r1, [pc, #124]	@ (800bf6c <pbuf_cat+0x9c>)
 800beee:	4820      	ldr	r0, [pc, #128]	@ (800bf70 <pbuf_cat+0xa0>)
 800bef0:	f00b fde2 	bl	8017ab8 <iprintf>
 800bef4:	e034      	b.n	800bf60 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	60fb      	str	r3, [r7, #12]
 800befa:	e00a      	b.n	800bf12 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	891a      	ldrh	r2, [r3, #8]
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	891b      	ldrh	r3, [r3, #8]
 800bf04:	4413      	add	r3, r2
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	60fb      	str	r3, [r7, #12]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1f0      	bne.n	800befc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	891a      	ldrh	r2, [r3, #8]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	895b      	ldrh	r3, [r3, #10]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d006      	beq.n	800bf34 <pbuf_cat+0x64>
 800bf26:	4b10      	ldr	r3, [pc, #64]	@ (800bf68 <pbuf_cat+0x98>)
 800bf28:	f240 3262 	movw	r2, #866	@ 0x362
 800bf2c:	4911      	ldr	r1, [pc, #68]	@ (800bf74 <pbuf_cat+0xa4>)
 800bf2e:	4810      	ldr	r0, [pc, #64]	@ (800bf70 <pbuf_cat+0xa0>)
 800bf30:	f00b fdc2 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d006      	beq.n	800bf4a <pbuf_cat+0x7a>
 800bf3c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf68 <pbuf_cat+0x98>)
 800bf3e:	f240 3263 	movw	r2, #867	@ 0x363
 800bf42:	490d      	ldr	r1, [pc, #52]	@ (800bf78 <pbuf_cat+0xa8>)
 800bf44:	480a      	ldr	r0, [pc, #40]	@ (800bf70 <pbuf_cat+0xa0>)
 800bf46:	f00b fdb7 	bl	8017ab8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	891a      	ldrh	r2, [r3, #8]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	891b      	ldrh	r3, [r3, #8]
 800bf52:	4413      	add	r3, r2
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	0801924c 	.word	0x0801924c
 800bf6c:	08019440 	.word	0x08019440
 800bf70:	080192ac 	.word	0x080192ac
 800bf74:	08019478 	.word	0x08019478
 800bf78:	080194a8 	.word	0x080194a8

0800bf7c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7ff ffa1 	bl	800bed0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bf8e:	6838      	ldr	r0, [r7, #0]
 800bf90:	f7ff ff76 	bl	800be80 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bf94:	bf00      	nop
 800bf96:	3708      	adds	r7, #8
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b086      	sub	sp, #24
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	617b      	str	r3, [r7, #20]
 800bfaa:	2300      	movs	r3, #0
 800bfac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d008      	beq.n	800bfc6 <pbuf_copy+0x2a>
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d005      	beq.n	800bfc6 <pbuf_copy+0x2a>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	891a      	ldrh	r2, [r3, #8]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	891b      	ldrh	r3, [r3, #8]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d209      	bcs.n	800bfda <pbuf_copy+0x3e>
 800bfc6:	4b57      	ldr	r3, [pc, #348]	@ (800c124 <pbuf_copy+0x188>)
 800bfc8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800bfcc:	4956      	ldr	r1, [pc, #344]	@ (800c128 <pbuf_copy+0x18c>)
 800bfce:	4857      	ldr	r0, [pc, #348]	@ (800c12c <pbuf_copy+0x190>)
 800bfd0:	f00b fd72 	bl	8017ab8 <iprintf>
 800bfd4:	f06f 030f 	mvn.w	r3, #15
 800bfd8:	e09f      	b.n	800c11a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	895b      	ldrh	r3, [r3, #10]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	1ad2      	subs	r2, r2, r3
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	895b      	ldrh	r3, [r3, #10]
 800bfe8:	4619      	mov	r1, r3
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	1acb      	subs	r3, r1, r3
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d306      	bcc.n	800c000 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	895b      	ldrh	r3, [r3, #10]
 800bff6:	461a      	mov	r2, r3
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	1ad3      	subs	r3, r2, r3
 800bffc:	60fb      	str	r3, [r7, #12]
 800bffe:	e005      	b.n	800c00c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	895b      	ldrh	r3, [r3, #10]
 800c004:	461a      	mov	r2, r3
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	1ad3      	subs	r3, r2, r3
 800c00a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	18d0      	adds	r0, r2, r3
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	685a      	ldr	r2, [r3, #4]
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	4413      	add	r3, r2
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	4619      	mov	r1, r3
 800c020:	f00b fe7b 	bl	8017d1a <memcpy>
    offset_to += len;
 800c024:	697a      	ldr	r2, [r7, #20]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	4413      	add	r3, r2
 800c02a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	4413      	add	r3, r2
 800c032:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	895b      	ldrh	r3, [r3, #10]
 800c038:	461a      	mov	r2, r3
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d906      	bls.n	800c04e <pbuf_copy+0xb2>
 800c040:	4b38      	ldr	r3, [pc, #224]	@ (800c124 <pbuf_copy+0x188>)
 800c042:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800c046:	493a      	ldr	r1, [pc, #232]	@ (800c130 <pbuf_copy+0x194>)
 800c048:	4838      	ldr	r0, [pc, #224]	@ (800c12c <pbuf_copy+0x190>)
 800c04a:	f00b fd35 	bl	8017ab8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	895b      	ldrh	r3, [r3, #10]
 800c052:	461a      	mov	r2, r3
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	4293      	cmp	r3, r2
 800c058:	d906      	bls.n	800c068 <pbuf_copy+0xcc>
 800c05a:	4b32      	ldr	r3, [pc, #200]	@ (800c124 <pbuf_copy+0x188>)
 800c05c:	f240 32da 	movw	r2, #986	@ 0x3da
 800c060:	4934      	ldr	r1, [pc, #208]	@ (800c134 <pbuf_copy+0x198>)
 800c062:	4832      	ldr	r0, [pc, #200]	@ (800c12c <pbuf_copy+0x190>)
 800c064:	f00b fd28 	bl	8017ab8 <iprintf>
    if (offset_from >= p_from->len) {
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	895b      	ldrh	r3, [r3, #10]
 800c06c:	461a      	mov	r2, r3
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	4293      	cmp	r3, r2
 800c072:	d304      	bcc.n	800c07e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	895b      	ldrh	r3, [r3, #10]
 800c082:	461a      	mov	r2, r3
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	4293      	cmp	r3, r2
 800c088:	d114      	bne.n	800c0b4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c08a:	2300      	movs	r3, #0
 800c08c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d10c      	bne.n	800c0b4 <pbuf_copy+0x118>
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d009      	beq.n	800c0b4 <pbuf_copy+0x118>
 800c0a0:	4b20      	ldr	r3, [pc, #128]	@ (800c124 <pbuf_copy+0x188>)
 800c0a2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800c0a6:	4924      	ldr	r1, [pc, #144]	@ (800c138 <pbuf_copy+0x19c>)
 800c0a8:	4820      	ldr	r0, [pc, #128]	@ (800c12c <pbuf_copy+0x190>)
 800c0aa:	f00b fd05 	bl	8017ab8 <iprintf>
 800c0ae:	f06f 030f 	mvn.w	r3, #15
 800c0b2:	e032      	b.n	800c11a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d013      	beq.n	800c0e2 <pbuf_copy+0x146>
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	895a      	ldrh	r2, [r3, #10]
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	891b      	ldrh	r3, [r3, #8]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d10d      	bne.n	800c0e2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d009      	beq.n	800c0e2 <pbuf_copy+0x146>
 800c0ce:	4b15      	ldr	r3, [pc, #84]	@ (800c124 <pbuf_copy+0x188>)
 800c0d0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800c0d4:	4919      	ldr	r1, [pc, #100]	@ (800c13c <pbuf_copy+0x1a0>)
 800c0d6:	4815      	ldr	r0, [pc, #84]	@ (800c12c <pbuf_copy+0x190>)
 800c0d8:	f00b fcee 	bl	8017ab8 <iprintf>
 800c0dc:	f06f 0305 	mvn.w	r3, #5
 800c0e0:	e01b      	b.n	800c11a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d013      	beq.n	800c110 <pbuf_copy+0x174>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	895a      	ldrh	r2, [r3, #10]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	891b      	ldrh	r3, [r3, #8]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d10d      	bne.n	800c110 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d009      	beq.n	800c110 <pbuf_copy+0x174>
 800c0fc:	4b09      	ldr	r3, [pc, #36]	@ (800c124 <pbuf_copy+0x188>)
 800c0fe:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c102:	490e      	ldr	r1, [pc, #56]	@ (800c13c <pbuf_copy+0x1a0>)
 800c104:	4809      	ldr	r0, [pc, #36]	@ (800c12c <pbuf_copy+0x190>)
 800c106:	f00b fcd7 	bl	8017ab8 <iprintf>
 800c10a:	f06f 0305 	mvn.w	r3, #5
 800c10e:	e004      	b.n	800c11a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	f47f af61 	bne.w	800bfda <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3718      	adds	r7, #24
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	0801924c 	.word	0x0801924c
 800c128:	080194f4 	.word	0x080194f4
 800c12c:	080192ac 	.word	0x080192ac
 800c130:	08019524 	.word	0x08019524
 800c134:	0801953c 	.word	0x0801953c
 800c138:	08019558 	.word	0x08019558
 800c13c:	08019568 	.word	0x08019568

0800c140 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b088      	sub	sp, #32
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	4611      	mov	r1, r2
 800c14c:	461a      	mov	r2, r3
 800c14e:	460b      	mov	r3, r1
 800c150:	80fb      	strh	r3, [r7, #6]
 800c152:	4613      	mov	r3, r2
 800c154:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c156:	2300      	movs	r3, #0
 800c158:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c15a:	2300      	movs	r3, #0
 800c15c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d108      	bne.n	800c176 <pbuf_copy_partial+0x36>
 800c164:	4b2b      	ldr	r3, [pc, #172]	@ (800c214 <pbuf_copy_partial+0xd4>)
 800c166:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c16a:	492b      	ldr	r1, [pc, #172]	@ (800c218 <pbuf_copy_partial+0xd8>)
 800c16c:	482b      	ldr	r0, [pc, #172]	@ (800c21c <pbuf_copy_partial+0xdc>)
 800c16e:	f00b fca3 	bl	8017ab8 <iprintf>
 800c172:	2300      	movs	r3, #0
 800c174:	e04a      	b.n	800c20c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d108      	bne.n	800c18e <pbuf_copy_partial+0x4e>
 800c17c:	4b25      	ldr	r3, [pc, #148]	@ (800c214 <pbuf_copy_partial+0xd4>)
 800c17e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c182:	4927      	ldr	r1, [pc, #156]	@ (800c220 <pbuf_copy_partial+0xe0>)
 800c184:	4825      	ldr	r0, [pc, #148]	@ (800c21c <pbuf_copy_partial+0xdc>)
 800c186:	f00b fc97 	bl	8017ab8 <iprintf>
 800c18a:	2300      	movs	r3, #0
 800c18c:	e03e      	b.n	800c20c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	61fb      	str	r3, [r7, #28]
 800c192:	e034      	b.n	800c1fe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c194:	88bb      	ldrh	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00a      	beq.n	800c1b0 <pbuf_copy_partial+0x70>
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	895b      	ldrh	r3, [r3, #10]
 800c19e:	88ba      	ldrh	r2, [r7, #4]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d305      	bcc.n	800c1b0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	895b      	ldrh	r3, [r3, #10]
 800c1a8:	88ba      	ldrh	r2, [r7, #4]
 800c1aa:	1ad3      	subs	r3, r2, r3
 800c1ac:	80bb      	strh	r3, [r7, #4]
 800c1ae:	e023      	b.n	800c1f8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	895a      	ldrh	r2, [r3, #10]
 800c1b4:	88bb      	ldrh	r3, [r7, #4]
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c1ba:	8b3a      	ldrh	r2, [r7, #24]
 800c1bc:	88fb      	ldrh	r3, [r7, #6]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d901      	bls.n	800c1c6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c1c2:	88fb      	ldrh	r3, [r7, #6]
 800c1c4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c1c6:	8b7b      	ldrh	r3, [r7, #26]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	18d0      	adds	r0, r2, r3
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	685a      	ldr	r2, [r3, #4]
 800c1d0:	88bb      	ldrh	r3, [r7, #4]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	8b3a      	ldrh	r2, [r7, #24]
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	f00b fd9f 	bl	8017d1a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c1dc:	8afa      	ldrh	r2, [r7, #22]
 800c1de:	8b3b      	ldrh	r3, [r7, #24]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c1e4:	8b7a      	ldrh	r2, [r7, #26]
 800c1e6:	8b3b      	ldrh	r3, [r7, #24]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c1ec:	88fa      	ldrh	r2, [r7, #6]
 800c1ee:	8b3b      	ldrh	r3, [r7, #24]
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	61fb      	str	r3, [r7, #28]
 800c1fe:	88fb      	ldrh	r3, [r7, #6]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d002      	beq.n	800c20a <pbuf_copy_partial+0xca>
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1c4      	bne.n	800c194 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c20a:	8afb      	ldrh	r3, [r7, #22]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3720      	adds	r7, #32
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	0801924c 	.word	0x0801924c
 800c218:	08019594 	.word	0x08019594
 800c21c:	080192ac 	.word	0x080192ac
 800c220:	080195b4 	.word	0x080195b4

0800c224 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800c224:	b480      	push	{r7}
 800c226:	b087      	sub	sp, #28
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	460b      	mov	r3, r1
 800c22e:	607a      	str	r2, [r7, #4]
 800c230:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800c232:	897b      	ldrh	r3, [r7, #10]
 800c234:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800c23a:	e007      	b.n	800c24c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	895b      	ldrh	r3, [r3, #10]
 800c240:	8afa      	ldrh	r2, [r7, #22]
 800c242:	1ad3      	subs	r3, r2, r3
 800c244:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d004      	beq.n	800c25c <pbuf_skip_const+0x38>
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	895b      	ldrh	r3, [r3, #10]
 800c256:	8afa      	ldrh	r2, [r7, #22]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d2ef      	bcs.n	800c23c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d002      	beq.n	800c268 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	8afa      	ldrh	r2, [r7, #22]
 800c266:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800c268:	693b      	ldr	r3, [r7, #16]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	371c      	adds	r7, #28
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
	...

0800c278 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	4603      	mov	r3, r0
 800c280:	603a      	str	r2, [r7, #0]
 800c282:	71fb      	strb	r3, [r7, #7]
 800c284:	460b      	mov	r3, r1
 800c286:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	8919      	ldrh	r1, [r3, #8]
 800c28c:	88ba      	ldrh	r2, [r7, #4]
 800c28e:	79fb      	ldrb	r3, [r7, #7]
 800c290:	4618      	mov	r0, r3
 800c292:	f7ff fa6b 	bl	800b76c <pbuf_alloc>
 800c296:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d101      	bne.n	800c2a2 <pbuf_clone+0x2a>
    return NULL;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	e011      	b.n	800c2c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c2a2:	6839      	ldr	r1, [r7, #0]
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	f7ff fe79 	bl	800bf9c <pbuf_copy>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c2ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d006      	beq.n	800c2c4 <pbuf_clone+0x4c>
 800c2b6:	4b06      	ldr	r3, [pc, #24]	@ (800c2d0 <pbuf_clone+0x58>)
 800c2b8:	f240 5224 	movw	r2, #1316	@ 0x524
 800c2bc:	4905      	ldr	r1, [pc, #20]	@ (800c2d4 <pbuf_clone+0x5c>)
 800c2be:	4806      	ldr	r0, [pc, #24]	@ (800c2d8 <pbuf_clone+0x60>)
 800c2c0:	f00b fbfa 	bl	8017ab8 <iprintf>
  return q;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	0801924c 	.word	0x0801924c
 800c2d4:	080196c0 	.word	0x080196c0
 800c2d8:	080192ac 	.word	0x080192ac

0800c2dc <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800c2e8:	887b      	ldrh	r3, [r7, #2]
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 f80c 	bl	800c30a <pbuf_try_get_at>
 800c2f2:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	db02      	blt.n	800c300 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	e000      	b.n	800c302 <pbuf_get_at+0x26>
  }
  return 0;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b084      	sub	sp, #16
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
 800c312:	460b      	mov	r3, r1
 800c314:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800c316:	f107 020a 	add.w	r2, r7, #10
 800c31a:	887b      	ldrh	r3, [r7, #2]
 800c31c:	4619      	mov	r1, r3
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f7ff ff80 	bl	800c224 <pbuf_skip_const>
 800c324:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00a      	beq.n	800c342 <pbuf_try_get_at+0x38>
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	895a      	ldrh	r2, [r3, #10]
 800c330:	897b      	ldrh	r3, [r7, #10]
 800c332:	429a      	cmp	r2, r3
 800c334:	d905      	bls.n	800c342 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	897a      	ldrh	r2, [r7, #10]
 800c33c:	4413      	add	r3, r2
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	e001      	b.n	800c346 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800c342:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b088      	sub	sp, #32
 800c352:	af00      	add	r7, sp, #0
 800c354:	60f8      	str	r0, [r7, #12]
 800c356:	607a      	str	r2, [r7, #4]
 800c358:	461a      	mov	r2, r3
 800c35a:	460b      	mov	r3, r1
 800c35c:	817b      	strh	r3, [r7, #10]
 800c35e:	4613      	mov	r3, r2
 800c360:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 800c362:	897b      	ldrh	r3, [r7, #10]
 800c364:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	891b      	ldrh	r3, [r3, #8]
 800c36e:	4619      	mov	r1, r3
 800c370:	897a      	ldrh	r2, [r7, #10]
 800c372:	893b      	ldrh	r3, [r7, #8]
 800c374:	4413      	add	r3, r2
 800c376:	4299      	cmp	r1, r3
 800c378:	da0a      	bge.n	800c390 <pbuf_memcmp+0x42>
    return 0xffff;
 800c37a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c37e:	e037      	b.n	800c3f0 <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	895b      	ldrh	r3, [r3, #10]
 800c384:	8bfa      	ldrh	r2, [r7, #30]
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d004      	beq.n	800c3a0 <pbuf_memcmp+0x52>
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	895b      	ldrh	r3, [r3, #10]
 800c39a:	8bfa      	ldrh	r2, [r7, #30]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d2ef      	bcs.n	800c380 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	82fb      	strh	r3, [r7, #22]
 800c3a4:	e01f      	b.n	800c3e6 <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800c3a6:	8bfa      	ldrh	r2, [r7, #30]
 800c3a8:	8afb      	ldrh	r3, [r7, #22]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	69b8      	ldr	r0, [r7, #24]
 800c3b2:	f7ff ff93 	bl	800c2dc <pbuf_get_at>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 800c3ba:	8afb      	ldrh	r3, [r7, #22]
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	4413      	add	r3, r2
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 800c3c4:	7d7a      	ldrb	r2, [r7, #21]
 800c3c6:	7d3b      	ldrb	r3, [r7, #20]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d009      	beq.n	800c3e0 <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800c3cc:	8afb      	ldrh	r3, [r7, #22]
 800c3ce:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	bf28      	it	cs
 800c3d6:	4613      	movcs	r3, r2
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	3301      	adds	r3, #1
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	e007      	b.n	800c3f0 <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 800c3e0:	8afb      	ldrh	r3, [r7, #22]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	82fb      	strh	r3, [r7, #22]
 800c3e6:	8afa      	ldrh	r2, [r7, #22]
 800c3e8:	893b      	ldrh	r3, [r7, #8]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d3db      	bcc.n	800c3a6 <pbuf_memcmp+0x58>
    }
  }
  return 0;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3720      	adds	r7, #32
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c3fc:	f00b fa5c 	bl	80178b8 <rand>
 800c400:	4603      	mov	r3, r0
 800c402:	b29b      	uxth	r3, r3
 800c404:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c408:	b29b      	uxth	r3, r3
 800c40a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c40e:	b29a      	uxth	r2, r3
 800c410:	4b01      	ldr	r3, [pc, #4]	@ (800c418 <tcp_init+0x20>)
 800c412:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c414:	bf00      	nop
 800c416:	bd80      	pop	{r7, pc}
 800c418:	24000034 	.word	0x24000034

0800c41c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	7d1b      	ldrb	r3, [r3, #20]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d105      	bne.n	800c438 <tcp_free+0x1c>
 800c42c:	4b06      	ldr	r3, [pc, #24]	@ (800c448 <tcp_free+0x2c>)
 800c42e:	22d4      	movs	r2, #212	@ 0xd4
 800c430:	4906      	ldr	r1, [pc, #24]	@ (800c44c <tcp_free+0x30>)
 800c432:	4807      	ldr	r0, [pc, #28]	@ (800c450 <tcp_free+0x34>)
 800c434:	f00b fb40 	bl	8017ab8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c438:	6879      	ldr	r1, [r7, #4]
 800c43a:	2001      	movs	r0, #1
 800c43c:	f7fe fdbe 	bl	800afbc <memp_free>
}
 800c440:	bf00      	nop
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}
 800c448:	0801974c 	.word	0x0801974c
 800c44c:	0801977c 	.word	0x0801977c
 800c450:	08019790 	.word	0x08019790

0800c454 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	7d1b      	ldrb	r3, [r3, #20]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d105      	bne.n	800c470 <tcp_free_listen+0x1c>
 800c464:	4b06      	ldr	r3, [pc, #24]	@ (800c480 <tcp_free_listen+0x2c>)
 800c466:	22df      	movs	r2, #223	@ 0xdf
 800c468:	4906      	ldr	r1, [pc, #24]	@ (800c484 <tcp_free_listen+0x30>)
 800c46a:	4807      	ldr	r0, [pc, #28]	@ (800c488 <tcp_free_listen+0x34>)
 800c46c:	f00b fb24 	bl	8017ab8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c470:	6879      	ldr	r1, [r7, #4]
 800c472:	2002      	movs	r0, #2
 800c474:	f7fe fda2 	bl	800afbc <memp_free>
}
 800c478:	bf00      	nop
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	0801974c 	.word	0x0801974c
 800c484:	080197b8 	.word	0x080197b8
 800c488:	08019790 	.word	0x08019790

0800c48c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c490:	f001 f986 	bl	800d7a0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c494:	4b07      	ldr	r3, [pc, #28]	@ (800c4b4 <tcp_tmr+0x28>)
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	3301      	adds	r3, #1
 800c49a:	b2da      	uxtb	r2, r3
 800c49c:	4b05      	ldr	r3, [pc, #20]	@ (800c4b4 <tcp_tmr+0x28>)
 800c49e:	701a      	strb	r2, [r3, #0]
 800c4a0:	4b04      	ldr	r3, [pc, #16]	@ (800c4b4 <tcp_tmr+0x28>)
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	f003 0301 	and.w	r3, r3, #1
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d001      	beq.n	800c4b0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c4ac:	f000 fe36 	bl	800d11c <tcp_slowtmr>
  }
}
 800c4b0:	bf00      	nop
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	2401058d 	.word	0x2401058d

0800c4b8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d105      	bne.n	800c4d4 <tcp_remove_listener+0x1c>
 800c4c8:	4b0d      	ldr	r3, [pc, #52]	@ (800c500 <tcp_remove_listener+0x48>)
 800c4ca:	22ff      	movs	r2, #255	@ 0xff
 800c4cc:	490d      	ldr	r1, [pc, #52]	@ (800c504 <tcp_remove_listener+0x4c>)
 800c4ce:	480e      	ldr	r0, [pc, #56]	@ (800c508 <tcp_remove_listener+0x50>)
 800c4d0:	f00b faf2 	bl	8017ab8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	60fb      	str	r3, [r7, #12]
 800c4d8:	e00a      	b.n	800c4f0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4de:	683a      	ldr	r2, [r7, #0]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d102      	bne.n	800c4ea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	68db      	ldr	r3, [r3, #12]
 800c4ee:	60fb      	str	r3, [r7, #12]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1f1      	bne.n	800c4da <tcp_remove_listener+0x22>
    }
  }
}
 800c4f6:	bf00      	nop
 800c4f8:	bf00      	nop
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	0801974c 	.word	0x0801974c
 800c504:	080197d4 	.word	0x080197d4
 800c508:	08019790 	.word	0x08019790

0800c50c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d106      	bne.n	800c528 <tcp_listen_closed+0x1c>
 800c51a:	4b14      	ldr	r3, [pc, #80]	@ (800c56c <tcp_listen_closed+0x60>)
 800c51c:	f240 1211 	movw	r2, #273	@ 0x111
 800c520:	4913      	ldr	r1, [pc, #76]	@ (800c570 <tcp_listen_closed+0x64>)
 800c522:	4814      	ldr	r0, [pc, #80]	@ (800c574 <tcp_listen_closed+0x68>)
 800c524:	f00b fac8 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	7d1b      	ldrb	r3, [r3, #20]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d006      	beq.n	800c53e <tcp_listen_closed+0x32>
 800c530:	4b0e      	ldr	r3, [pc, #56]	@ (800c56c <tcp_listen_closed+0x60>)
 800c532:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c536:	4910      	ldr	r1, [pc, #64]	@ (800c578 <tcp_listen_closed+0x6c>)
 800c538:	480e      	ldr	r0, [pc, #56]	@ (800c574 <tcp_listen_closed+0x68>)
 800c53a:	f00b fabd 	bl	8017ab8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c53e:	2301      	movs	r3, #1
 800c540:	60fb      	str	r3, [r7, #12]
 800c542:	e00b      	b.n	800c55c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c544:	4a0d      	ldr	r2, [pc, #52]	@ (800c57c <tcp_listen_closed+0x70>)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6879      	ldr	r1, [r7, #4]
 800c550:	4618      	mov	r0, r3
 800c552:	f7ff ffb1 	bl	800c4b8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	3301      	adds	r3, #1
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b03      	cmp	r3, #3
 800c560:	d9f0      	bls.n	800c544 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c562:	bf00      	nop
 800c564:	bf00      	nop
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	0801974c 	.word	0x0801974c
 800c570:	080197fc 	.word	0x080197fc
 800c574:	08019790 	.word	0x08019790
 800c578:	08019808 	.word	0x08019808
 800c57c:	0801c170 	.word	0x0801c170

0800c580 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c580:	b5b0      	push	{r4, r5, r7, lr}
 800c582:	b088      	sub	sp, #32
 800c584:	af04      	add	r7, sp, #16
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	460b      	mov	r3, r1
 800c58a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d106      	bne.n	800c5a0 <tcp_close_shutdown+0x20>
 800c592:	4b63      	ldr	r3, [pc, #396]	@ (800c720 <tcp_close_shutdown+0x1a0>)
 800c594:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c598:	4962      	ldr	r1, [pc, #392]	@ (800c724 <tcp_close_shutdown+0x1a4>)
 800c59a:	4863      	ldr	r0, [pc, #396]	@ (800c728 <tcp_close_shutdown+0x1a8>)
 800c59c:	f00b fa8c 	bl	8017ab8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c5a0:	78fb      	ldrb	r3, [r7, #3]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d067      	beq.n	800c676 <tcp_close_shutdown+0xf6>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	7d1b      	ldrb	r3, [r3, #20]
 800c5aa:	2b04      	cmp	r3, #4
 800c5ac:	d003      	beq.n	800c5b6 <tcp_close_shutdown+0x36>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	7d1b      	ldrb	r3, [r3, #20]
 800c5b2:	2b07      	cmp	r3, #7
 800c5b4:	d15f      	bne.n	800c676 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d105      	bne.n	800c5ca <tcp_close_shutdown+0x4a>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5c2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d055      	beq.n	800c676 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	8b5b      	ldrh	r3, [r3, #26]
 800c5ce:	f003 0310 	and.w	r3, r3, #16
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d106      	bne.n	800c5e4 <tcp_close_shutdown+0x64>
 800c5d6:	4b52      	ldr	r3, [pc, #328]	@ (800c720 <tcp_close_shutdown+0x1a0>)
 800c5d8:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800c5dc:	4953      	ldr	r1, [pc, #332]	@ (800c72c <tcp_close_shutdown+0x1ac>)
 800c5de:	4852      	ldr	r0, [pc, #328]	@ (800c728 <tcp_close_shutdown+0x1a8>)
 800c5e0:	f00b fa6a 	bl	8017ab8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c5ec:	687d      	ldr	r5, [r7, #4]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	3304      	adds	r3, #4
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	8ad2      	ldrh	r2, [r2, #22]
 800c5f6:	6879      	ldr	r1, [r7, #4]
 800c5f8:	8b09      	ldrh	r1, [r1, #24]
 800c5fa:	9102      	str	r1, [sp, #8]
 800c5fc:	9201      	str	r2, [sp, #4]
 800c5fe:	9300      	str	r3, [sp, #0]
 800c600:	462b      	mov	r3, r5
 800c602:	4622      	mov	r2, r4
 800c604:	4601      	mov	r1, r0
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f005 fea8 	bl	801235c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f001 fc83 	bl	800df18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c612:	4b47      	ldr	r3, [pc, #284]	@ (800c730 <tcp_close_shutdown+0x1b0>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d105      	bne.n	800c628 <tcp_close_shutdown+0xa8>
 800c61c:	4b44      	ldr	r3, [pc, #272]	@ (800c730 <tcp_close_shutdown+0x1b0>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	4a43      	ldr	r2, [pc, #268]	@ (800c730 <tcp_close_shutdown+0x1b0>)
 800c624:	6013      	str	r3, [r2, #0]
 800c626:	e013      	b.n	800c650 <tcp_close_shutdown+0xd0>
 800c628:	4b41      	ldr	r3, [pc, #260]	@ (800c730 <tcp_close_shutdown+0x1b0>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	60fb      	str	r3, [r7, #12]
 800c62e:	e00c      	b.n	800c64a <tcp_close_shutdown+0xca>
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	429a      	cmp	r2, r3
 800c638:	d104      	bne.n	800c644 <tcp_close_shutdown+0xc4>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	68da      	ldr	r2, [r3, #12]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	60da      	str	r2, [r3, #12]
 800c642:	e005      	b.n	800c650 <tcp_close_shutdown+0xd0>
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	60fb      	str	r3, [r7, #12]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d1ef      	bne.n	800c630 <tcp_close_shutdown+0xb0>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	60da      	str	r2, [r3, #12]
 800c656:	4b37      	ldr	r3, [pc, #220]	@ (800c734 <tcp_close_shutdown+0x1b4>)
 800c658:	2201      	movs	r2, #1
 800c65a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c65c:	4b36      	ldr	r3, [pc, #216]	@ (800c738 <tcp_close_shutdown+0x1b8>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	429a      	cmp	r2, r3
 800c664:	d102      	bne.n	800c66c <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c666:	f004 f91b 	bl	80108a0 <tcp_trigger_input_pcb_close>
 800c66a:	e002      	b.n	800c672 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f7ff fed5 	bl	800c41c <tcp_free>
      }
      return ERR_OK;
 800c672:	2300      	movs	r3, #0
 800c674:	e050      	b.n	800c718 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	7d1b      	ldrb	r3, [r3, #20]
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d03b      	beq.n	800c6f6 <tcp_close_shutdown+0x176>
 800c67e:	2b02      	cmp	r3, #2
 800c680:	dc44      	bgt.n	800c70c <tcp_close_shutdown+0x18c>
 800c682:	2b00      	cmp	r3, #0
 800c684:	d002      	beq.n	800c68c <tcp_close_shutdown+0x10c>
 800c686:	2b01      	cmp	r3, #1
 800c688:	d02a      	beq.n	800c6e0 <tcp_close_shutdown+0x160>
 800c68a:	e03f      	b.n	800c70c <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	8adb      	ldrh	r3, [r3, #22]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d021      	beq.n	800c6d8 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c694:	4b29      	ldr	r3, [pc, #164]	@ (800c73c <tcp_close_shutdown+0x1bc>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d105      	bne.n	800c6aa <tcp_close_shutdown+0x12a>
 800c69e:	4b27      	ldr	r3, [pc, #156]	@ (800c73c <tcp_close_shutdown+0x1bc>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	4a25      	ldr	r2, [pc, #148]	@ (800c73c <tcp_close_shutdown+0x1bc>)
 800c6a6:	6013      	str	r3, [r2, #0]
 800c6a8:	e013      	b.n	800c6d2 <tcp_close_shutdown+0x152>
 800c6aa:	4b24      	ldr	r3, [pc, #144]	@ (800c73c <tcp_close_shutdown+0x1bc>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	60bb      	str	r3, [r7, #8]
 800c6b0:	e00c      	b.n	800c6cc <tcp_close_shutdown+0x14c>
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d104      	bne.n	800c6c6 <tcp_close_shutdown+0x146>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	68da      	ldr	r2, [r3, #12]
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	60da      	str	r2, [r3, #12]
 800c6c4:	e005      	b.n	800c6d2 <tcp_close_shutdown+0x152>
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	60bb      	str	r3, [r7, #8]
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1ef      	bne.n	800c6b2 <tcp_close_shutdown+0x132>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f7ff fe9f 	bl	800c41c <tcp_free>
      break;
 800c6de:	e01a      	b.n	800c716 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f7ff ff13 	bl	800c50c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c6e6:	6879      	ldr	r1, [r7, #4]
 800c6e8:	4815      	ldr	r0, [pc, #84]	@ (800c740 <tcp_close_shutdown+0x1c0>)
 800c6ea:	f001 fc65 	bl	800dfb8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f7ff feb0 	bl	800c454 <tcp_free_listen>
      break;
 800c6f4:	e00f      	b.n	800c716 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c6f6:	6879      	ldr	r1, [r7, #4]
 800c6f8:	480d      	ldr	r0, [pc, #52]	@ (800c730 <tcp_close_shutdown+0x1b0>)
 800c6fa:	f001 fc5d 	bl	800dfb8 <tcp_pcb_remove>
 800c6fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c734 <tcp_close_shutdown+0x1b4>)
 800c700:	2201      	movs	r2, #1
 800c702:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7ff fe89 	bl	800c41c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c70a:	e004      	b.n	800c716 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 f819 	bl	800c744 <tcp_close_shutdown_fin>
 800c712:	4603      	mov	r3, r0
 800c714:	e000      	b.n	800c718 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3710      	adds	r7, #16
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bdb0      	pop	{r4, r5, r7, pc}
 800c720:	0801974c 	.word	0x0801974c
 800c724:	08019820 	.word	0x08019820
 800c728:	08019790 	.word	0x08019790
 800c72c:	08019840 	.word	0x08019840
 800c730:	24010584 	.word	0x24010584
 800c734:	2401058c 	.word	0x2401058c
 800c738:	240105c4 	.word	0x240105c4
 800c73c:	2401057c 	.word	0x2401057c
 800c740:	24010580 	.word	0x24010580

0800c744 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d106      	bne.n	800c760 <tcp_close_shutdown_fin+0x1c>
 800c752:	4b2e      	ldr	r3, [pc, #184]	@ (800c80c <tcp_close_shutdown_fin+0xc8>)
 800c754:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c758:	492d      	ldr	r1, [pc, #180]	@ (800c810 <tcp_close_shutdown_fin+0xcc>)
 800c75a:	482e      	ldr	r0, [pc, #184]	@ (800c814 <tcp_close_shutdown_fin+0xd0>)
 800c75c:	f00b f9ac 	bl	8017ab8 <iprintf>

  switch (pcb->state) {
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	7d1b      	ldrb	r3, [r3, #20]
 800c764:	2b07      	cmp	r3, #7
 800c766:	d020      	beq.n	800c7aa <tcp_close_shutdown_fin+0x66>
 800c768:	2b07      	cmp	r3, #7
 800c76a:	dc2b      	bgt.n	800c7c4 <tcp_close_shutdown_fin+0x80>
 800c76c:	2b03      	cmp	r3, #3
 800c76e:	d002      	beq.n	800c776 <tcp_close_shutdown_fin+0x32>
 800c770:	2b04      	cmp	r3, #4
 800c772:	d00d      	beq.n	800c790 <tcp_close_shutdown_fin+0x4c>
 800c774:	e026      	b.n	800c7c4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f004 fefc 	bl	8011574 <tcp_send_fin>
 800c77c:	4603      	mov	r3, r0
 800c77e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d11f      	bne.n	800c7c8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2205      	movs	r2, #5
 800c78c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c78e:	e01b      	b.n	800c7c8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f004 feef 	bl	8011574 <tcp_send_fin>
 800c796:	4603      	mov	r3, r0
 800c798:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c79a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d114      	bne.n	800c7cc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2205      	movs	r2, #5
 800c7a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c7a8:	e010      	b.n	800c7cc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f004 fee2 	bl	8011574 <tcp_send_fin>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c7b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d109      	bne.n	800c7d0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2209      	movs	r2, #9
 800c7c0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c7c2:	e005      	b.n	800c7d0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	e01c      	b.n	800c802 <tcp_close_shutdown_fin+0xbe>
      break;
 800c7c8:	bf00      	nop
 800c7ca:	e002      	b.n	800c7d2 <tcp_close_shutdown_fin+0x8e>
      break;
 800c7cc:	bf00      	nop
 800c7ce:	e000      	b.n	800c7d2 <tcp_close_shutdown_fin+0x8e>
      break;
 800c7d0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c7d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d103      	bne.n	800c7e2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f005 f808 	bl	80117f0 <tcp_output>
 800c7e0:	e00d      	b.n	800c7fe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c7e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ea:	d108      	bne.n	800c7fe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	8b5b      	ldrh	r3, [r3, #26]
 800c7f0:	f043 0308 	orr.w	r3, r3, #8
 800c7f4:	b29a      	uxth	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	e001      	b.n	800c802 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c7fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	0801974c 	.word	0x0801974c
 800c810:	080197fc 	.word	0x080197fc
 800c814:	08019790 	.word	0x08019790

0800c818 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800c820:	f7f9 fd68 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d109      	bne.n	800c83e <tcp_close+0x26>
 800c82a:	4b0f      	ldr	r3, [pc, #60]	@ (800c868 <tcp_close+0x50>)
 800c82c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800c830:	490e      	ldr	r1, [pc, #56]	@ (800c86c <tcp_close+0x54>)
 800c832:	480f      	ldr	r0, [pc, #60]	@ (800c870 <tcp_close+0x58>)
 800c834:	f00b f940 	bl	8017ab8 <iprintf>
 800c838:	f06f 030f 	mvn.w	r3, #15
 800c83c:	e00f      	b.n	800c85e <tcp_close+0x46>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	7d1b      	ldrb	r3, [r3, #20]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d006      	beq.n	800c854 <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	8b5b      	ldrh	r3, [r3, #26]
 800c84a:	f043 0310 	orr.w	r3, r3, #16
 800c84e:	b29a      	uxth	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c854:	2101      	movs	r1, #1
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7ff fe92 	bl	800c580 <tcp_close_shutdown>
 800c85c:	4603      	mov	r3, r0
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3708      	adds	r7, #8
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	0801974c 	.word	0x0801974c
 800c86c:	0801985c 	.word	0x0801985c
 800c870:	08019790 	.word	0x08019790

0800c874 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08e      	sub	sp, #56	@ 0x38
 800c878:	af04      	add	r7, sp, #16
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
#if LWIP_CALLBACK_API
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();
 800c87e:	f7f9 fd39 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d107      	bne.n	800c898 <tcp_abandon+0x24>
 800c888:	4b52      	ldr	r3, [pc, #328]	@ (800c9d4 <tcp_abandon+0x160>)
 800c88a:	f240 223d 	movw	r2, #573	@ 0x23d
 800c88e:	4952      	ldr	r1, [pc, #328]	@ (800c9d8 <tcp_abandon+0x164>)
 800c890:	4852      	ldr	r0, [pc, #328]	@ (800c9dc <tcp_abandon+0x168>)
 800c892:	f00b f911 	bl	8017ab8 <iprintf>
 800c896:	e099      	b.n	800c9cc <tcp_abandon+0x158>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	7d1b      	ldrb	r3, [r3, #20]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d106      	bne.n	800c8ae <tcp_abandon+0x3a>
 800c8a0:	4b4c      	ldr	r3, [pc, #304]	@ (800c9d4 <tcp_abandon+0x160>)
 800c8a2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800c8a6:	494e      	ldr	r1, [pc, #312]	@ (800c9e0 <tcp_abandon+0x16c>)
 800c8a8:	484c      	ldr	r0, [pc, #304]	@ (800c9dc <tcp_abandon+0x168>)
 800c8aa:	f00b f905 	bl	8017ab8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	7d1b      	ldrb	r3, [r3, #20]
 800c8b2:	2b0a      	cmp	r3, #10
 800c8b4:	d107      	bne.n	800c8c6 <tcp_abandon+0x52>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c8b6:	6879      	ldr	r1, [r7, #4]
 800c8b8:	484a      	ldr	r0, [pc, #296]	@ (800c9e4 <tcp_abandon+0x170>)
 800c8ba:	f001 fb7d 	bl	800dfb8 <tcp_pcb_remove>
    tcp_free(pcb);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f7ff fdac 	bl	800c41c <tcp_free>
 800c8c4:	e082      	b.n	800c9cc <tcp_abandon+0x158>
  } else {
    int send_rst = 0;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8d2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8e0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	7d1b      	ldrb	r3, [r3, #20]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d126      	bne.n	800c93e <tcp_abandon+0xca>
      if (pcb->local_port != 0) {
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	8adb      	ldrh	r3, [r3, #22]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d02e      	beq.n	800c956 <tcp_abandon+0xe2>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c8f8:	4b3b      	ldr	r3, [pc, #236]	@ (800c9e8 <tcp_abandon+0x174>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d105      	bne.n	800c90e <tcp_abandon+0x9a>
 800c902:	4b39      	ldr	r3, [pc, #228]	@ (800c9e8 <tcp_abandon+0x174>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	4a37      	ldr	r2, [pc, #220]	@ (800c9e8 <tcp_abandon+0x174>)
 800c90a:	6013      	str	r3, [r2, #0]
 800c90c:	e013      	b.n	800c936 <tcp_abandon+0xc2>
 800c90e:	4b36      	ldr	r3, [pc, #216]	@ (800c9e8 <tcp_abandon+0x174>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	61fb      	str	r3, [r7, #28]
 800c914:	e00c      	b.n	800c930 <tcp_abandon+0xbc>
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d104      	bne.n	800c92a <tcp_abandon+0xb6>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	68da      	ldr	r2, [r3, #12]
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	60da      	str	r2, [r3, #12]
 800c928:	e005      	b.n	800c936 <tcp_abandon+0xc2>
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	61fb      	str	r3, [r7, #28]
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1ef      	bne.n	800c916 <tcp_abandon+0xa2>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	60da      	str	r2, [r3, #12]
 800c93c:	e00b      	b.n	800c956 <tcp_abandon+0xe2>
      }
    } else {
      send_rst = reset;
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	8adb      	ldrh	r3, [r3, #22]
 800c946:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c948:	6879      	ldr	r1, [r7, #4]
 800c94a:	4828      	ldr	r0, [pc, #160]	@ (800c9ec <tcp_abandon+0x178>)
 800c94c:	f001 fb34 	bl	800dfb8 <tcp_pcb_remove>
 800c950:	4b27      	ldr	r3, [pc, #156]	@ (800c9f0 <tcp_abandon+0x17c>)
 800c952:	2201      	movs	r2, #1
 800c954:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d004      	beq.n	800c968 <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unacked);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c962:	4618      	mov	r0, r3
 800c964:	f000 fffe 	bl	800d964 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d004      	beq.n	800c97a <tcp_abandon+0x106>
      tcp_segs_free(pcb->unsent);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c974:	4618      	mov	r0, r3
 800c976:	f000 fff5 	bl	800d964 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d004      	beq.n	800c98c <tcp_abandon+0x118>
      tcp_segs_free(pcb->ooseq);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c986:	4618      	mov	r0, r3
 800c988:	f000 ffec 	bl	800d964 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00e      	beq.n	800c9b0 <tcp_abandon+0x13c>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c992:	6879      	ldr	r1, [r7, #4]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	3304      	adds	r3, #4
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	8b12      	ldrh	r2, [r2, #24]
 800c99c:	9202      	str	r2, [sp, #8]
 800c99e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c9a0:	9201      	str	r2, [sp, #4]
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	697a      	ldr	r2, [r7, #20]
 800c9a8:	69b9      	ldr	r1, [r7, #24]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f005 fcd6 	bl	801235c <tcp_rst>
    }
    last_state = pcb->state;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	7d1b      	ldrb	r3, [r3, #20]
 800c9b4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f7ff fd30 	bl	800c41c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d004      	beq.n	800c9cc <tcp_abandon+0x158>
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	f06f 010c 	mvn.w	r1, #12
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	4798      	blx	r3
  }
}
 800c9cc:	3728      	adds	r7, #40	@ 0x28
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	0801974c 	.word	0x0801974c
 800c9d8:	08019890 	.word	0x08019890
 800c9dc:	08019790 	.word	0x08019790
 800c9e0:	080198ac 	.word	0x080198ac
 800c9e4:	24010588 	.word	0x24010588
 800c9e8:	2401057c 	.word	0x2401057c
 800c9ec:	24010584 	.word	0x24010584
 800c9f0:	2401058c 	.word	0x2401058c

0800c9f4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c9fc:	2101      	movs	r1, #1
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7ff ff38 	bl	800c874 <tcp_abandon>
}
 800ca04:	bf00      	nop
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b088      	sub	sp, #32
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	4613      	mov	r3, r2
 800ca18:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ca1a:	2304      	movs	r3, #4
 800ca1c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 800ca1e:	f7f9 fc69 	bl	80062f4 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d101      	bne.n	800ca2c <tcp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
 800ca28:	4b3e      	ldr	r3, [pc, #248]	@ (800cb24 <tcp_bind+0x118>)
 800ca2a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d109      	bne.n	800ca46 <tcp_bind+0x3a>
 800ca32:	4b3d      	ldr	r3, [pc, #244]	@ (800cb28 <tcp_bind+0x11c>)
 800ca34:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800ca38:	493c      	ldr	r1, [pc, #240]	@ (800cb2c <tcp_bind+0x120>)
 800ca3a:	483d      	ldr	r0, [pc, #244]	@ (800cb30 <tcp_bind+0x124>)
 800ca3c:	f00b f83c 	bl	8017ab8 <iprintf>
 800ca40:	f06f 030f 	mvn.w	r3, #15
 800ca44:	e06a      	b.n	800cb1c <tcp_bind+0x110>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	7d1b      	ldrb	r3, [r3, #20]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d009      	beq.n	800ca62 <tcp_bind+0x56>
 800ca4e:	4b36      	ldr	r3, [pc, #216]	@ (800cb28 <tcp_bind+0x11c>)
 800ca50:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ca54:	4937      	ldr	r1, [pc, #220]	@ (800cb34 <tcp_bind+0x128>)
 800ca56:	4836      	ldr	r0, [pc, #216]	@ (800cb30 <tcp_bind+0x124>)
 800ca58:	f00b f82e 	bl	8017ab8 <iprintf>
 800ca5c:	f06f 0305 	mvn.w	r3, #5
 800ca60:	e05c      	b.n	800cb1c <tcp_bind+0x110>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ca62:	88fb      	ldrh	r3, [r7, #6]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d109      	bne.n	800ca7c <tcp_bind+0x70>
    port = tcp_new_port();
 800ca68:	f000 f9f8 	bl	800ce5c <tcp_new_port>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ca70:	88fb      	ldrh	r3, [r7, #6]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d135      	bne.n	800cae2 <tcp_bind+0xd6>
      return ERR_BUF;
 800ca76:	f06f 0301 	mvn.w	r3, #1
 800ca7a:	e04f      	b.n	800cb1c <tcp_bind+0x110>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	61fb      	str	r3, [r7, #28]
 800ca80:	e02b      	b.n	800cada <tcp_bind+0xce>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ca82:	4a2d      	ldr	r2, [pc, #180]	@ (800cb38 <tcp_bind+0x12c>)
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	61bb      	str	r3, [r7, #24]
 800ca8e:	e01e      	b.n	800cace <tcp_bind+0xc2>
        if (cpcb->local_port == port) {
 800ca90:	69bb      	ldr	r3, [r7, #24]
 800ca92:	8adb      	ldrh	r3, [r3, #22]
 800ca94:	88fa      	ldrh	r2, [r7, #6]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d116      	bne.n	800cac8 <tcp_bind+0xbc>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ca9a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d010      	beq.n	800cac2 <tcp_bind+0xb6>
                (ip_addr_isany(&cpcb->local_ip) ||
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00c      	beq.n	800cac2 <tcp_bind+0xb6>
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d009      	beq.n	800cac2 <tcp_bind+0xb6>
                 ip_addr_isany(ipaddr) ||
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d005      	beq.n	800cac2 <tcp_bind+0xb6>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d102      	bne.n	800cac8 <tcp_bind+0xbc>
              return ERR_USE;
 800cac2:	f06f 0307 	mvn.w	r3, #7
 800cac6:	e029      	b.n	800cb1c <tcp_bind+0x110>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	61bb      	str	r3, [r7, #24]
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d1dd      	bne.n	800ca90 <tcp_bind+0x84>
    for (i = 0; i < max_pcb_list; i++) {
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	3301      	adds	r3, #1
 800cad8:	61fb      	str	r3, [r7, #28]
 800cada:	69fa      	ldr	r2, [r7, #28]
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	429a      	cmp	r2, r3
 800cae0:	dbcf      	blt.n	800ca82 <tcp_bind+0x76>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00c      	beq.n	800cb02 <tcp_bind+0xf6>
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d008      	beq.n	800cb02 <tcp_bind+0xf6>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d002      	beq.n	800cafc <tcp_bind+0xf0>
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	e000      	b.n	800cafe <tcp_bind+0xf2>
 800cafc:	2300      	movs	r3, #0
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	88fa      	ldrh	r2, [r7, #6]
 800cb06:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cb08:	4b0c      	ldr	r3, [pc, #48]	@ (800cb3c <tcp_bind+0x130>)
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	60da      	str	r2, [r3, #12]
 800cb10:	4a0a      	ldr	r2, [pc, #40]	@ (800cb3c <tcp_bind+0x130>)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	6013      	str	r3, [r2, #0]
 800cb16:	f005 fde3 	bl	80126e0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800cb1a:	2300      	movs	r3, #0
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3720      	adds	r7, #32
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	0801c1a8 	.word	0x0801c1a8
 800cb28:	0801974c 	.word	0x0801974c
 800cb2c:	080198e0 	.word	0x080198e0
 800cb30:	08019790 	.word	0x08019790
 800cb34:	080198f8 	.word	0x080198f8
 800cb38:	0801c170 	.word	0x0801c170
 800cb3c:	2401057c 	.word	0x2401057c

0800cb40 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d106      	bne.n	800cb62 <tcp_accept_null+0x22>
 800cb54:	4b07      	ldr	r3, [pc, #28]	@ (800cb74 <tcp_accept_null+0x34>)
 800cb56:	f240 320f 	movw	r2, #783	@ 0x30f
 800cb5a:	4907      	ldr	r1, [pc, #28]	@ (800cb78 <tcp_accept_null+0x38>)
 800cb5c:	4807      	ldr	r0, [pc, #28]	@ (800cb7c <tcp_accept_null+0x3c>)
 800cb5e:	f00a ffab 	bl	8017ab8 <iprintf>

  tcp_abort(pcb);
 800cb62:	68b8      	ldr	r0, [r7, #8]
 800cb64:	f7ff ff46 	bl	800c9f4 <tcp_abort>

  return ERR_ABRT;
 800cb68:	f06f 030c 	mvn.w	r3, #12
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3710      	adds	r7, #16
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	0801974c 	.word	0x0801974c
 800cb78:	08019920 	.word	0x08019920
 800cb7c:	08019790 	.word	0x08019790

0800cb80 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	460b      	mov	r3, r1
 800cb8a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
 800cb8c:	f7f9 fbb2 	bl	80062f4 <sys_check_core_locking>
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800cb90:	78fb      	ldrb	r3, [r7, #3]
 800cb92:	2200      	movs	r2, #0
 800cb94:	4619      	mov	r1, r3
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 f806 	bl	800cba8 <tcp_listen_with_backlog_and_err>
 800cb9c:	4603      	mov	r3, r0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3708      	adds	r7, #8
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
	...

0800cba8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b088      	sub	sp, #32
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	607a      	str	r2, [r7, #4]
 800cbb4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();
 800cbba:	f7f9 fb9b 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d109      	bne.n	800cbd8 <tcp_listen_with_backlog_and_err+0x30>
 800cbc4:	4b47      	ldr	r3, [pc, #284]	@ (800cce4 <tcp_listen_with_backlog_and_err+0x13c>)
 800cbc6:	f240 3259 	movw	r2, #857	@ 0x359
 800cbca:	4947      	ldr	r1, [pc, #284]	@ (800cce8 <tcp_listen_with_backlog_and_err+0x140>)
 800cbcc:	4847      	ldr	r0, [pc, #284]	@ (800ccec <tcp_listen_with_backlog_and_err+0x144>)
 800cbce:	f00a ff73 	bl	8017ab8 <iprintf>
 800cbd2:	23f0      	movs	r3, #240	@ 0xf0
 800cbd4:	76fb      	strb	r3, [r7, #27]
 800cbd6:	e079      	b.n	800cccc <tcp_listen_with_backlog_and_err+0x124>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	7d1b      	ldrb	r3, [r3, #20]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d009      	beq.n	800cbf4 <tcp_listen_with_backlog_and_err+0x4c>
 800cbe0:	4b40      	ldr	r3, [pc, #256]	@ (800cce4 <tcp_listen_with_backlog_and_err+0x13c>)
 800cbe2:	f240 325a 	movw	r2, #858	@ 0x35a
 800cbe6:	4942      	ldr	r1, [pc, #264]	@ (800ccf0 <tcp_listen_with_backlog_and_err+0x148>)
 800cbe8:	4840      	ldr	r0, [pc, #256]	@ (800ccec <tcp_listen_with_backlog_and_err+0x144>)
 800cbea:	f00a ff65 	bl	8017ab8 <iprintf>
 800cbee:	23f1      	movs	r3, #241	@ 0xf1
 800cbf0:	76fb      	strb	r3, [r7, #27]
 800cbf2:	e06b      	b.n	800cccc <tcp_listen_with_backlog_and_err+0x124>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	7d1b      	ldrb	r3, [r3, #20]
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d104      	bne.n	800cc06 <tcp_listen_with_backlog_and_err+0x5e>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800cc00:	23f7      	movs	r3, #247	@ 0xf7
 800cc02:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cc04:	e062      	b.n	800cccc <tcp_listen_with_backlog_and_err+0x124>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800cc06:	2002      	movs	r0, #2
 800cc08:	f7fe f962 	bl	800aed0 <memp_malloc>
 800cc0c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d102      	bne.n	800cc1a <tcp_listen_with_backlog_and_err+0x72>
    res = ERR_MEM;
 800cc14:	23ff      	movs	r3, #255	@ 0xff
 800cc16:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cc18:	e058      	b.n	800cccc <tcp_listen_with_backlog_and_err+0x124>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	691a      	ldr	r2, [r3, #16]
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	8ada      	ldrh	r2, [r3, #22]
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	7d5a      	ldrb	r2, [r3, #21]
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	7a5a      	ldrb	r2, [r3, #9]
 800cc3c:	69fb      	ldr	r3, [r7, #28]
 800cc3e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	2200      	movs	r2, #0
 800cc44:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	7ada      	ldrb	r2, [r3, #11]
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	7a9a      	ldrb	r2, [r3, #10]
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	8adb      	ldrh	r3, [r3, #22]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d021      	beq.n	800ccaa <tcp_listen_with_backlog_and_err+0x102>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800cc66:	4b23      	ldr	r3, [pc, #140]	@ (800ccf4 <tcp_listen_with_backlog_and_err+0x14c>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	68fa      	ldr	r2, [r7, #12]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d105      	bne.n	800cc7c <tcp_listen_with_backlog_and_err+0xd4>
 800cc70:	4b20      	ldr	r3, [pc, #128]	@ (800ccf4 <tcp_listen_with_backlog_and_err+0x14c>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	68db      	ldr	r3, [r3, #12]
 800cc76:	4a1f      	ldr	r2, [pc, #124]	@ (800ccf4 <tcp_listen_with_backlog_and_err+0x14c>)
 800cc78:	6013      	str	r3, [r2, #0]
 800cc7a:	e013      	b.n	800cca4 <tcp_listen_with_backlog_and_err+0xfc>
 800cc7c:	4b1d      	ldr	r3, [pc, #116]	@ (800ccf4 <tcp_listen_with_backlog_and_err+0x14c>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	617b      	str	r3, [r7, #20]
 800cc82:	e00c      	b.n	800cc9e <tcp_listen_with_backlog_and_err+0xf6>
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	68db      	ldr	r3, [r3, #12]
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d104      	bne.n	800cc98 <tcp_listen_with_backlog_and_err+0xf0>
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	68da      	ldr	r2, [r3, #12]
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	60da      	str	r2, [r3, #12]
 800cc96:	e005      	b.n	800cca4 <tcp_listen_with_backlog_and_err+0xfc>
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	617b      	str	r3, [r7, #20]
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1ef      	bne.n	800cc84 <tcp_listen_with_backlog_and_err+0xdc>
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2200      	movs	r2, #0
 800cca8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f7ff fbb6 	bl	800c41c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	4a11      	ldr	r2, [pc, #68]	@ (800ccf8 <tcp_listen_with_backlog_and_err+0x150>)
 800ccb4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ccb6:	4b11      	ldr	r3, [pc, #68]	@ (800ccfc <tcp_listen_with_backlog_and_err+0x154>)
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	60da      	str	r2, [r3, #12]
 800ccbe:	4a0f      	ldr	r2, [pc, #60]	@ (800ccfc <tcp_listen_with_backlog_and_err+0x154>)
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	6013      	str	r3, [r2, #0]
 800ccc4:	f005 fd0c 	bl	80126e0 <tcp_timer_needed>
  res = ERR_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d002      	beq.n	800ccd8 <tcp_listen_with_backlog_and_err+0x130>
    *err = res;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	7efa      	ldrb	r2, [r7, #27]
 800ccd6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ccd8:	69fb      	ldr	r3, [r7, #28]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3720      	adds	r7, #32
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	0801974c 	.word	0x0801974c
 800cce8:	08019940 	.word	0x08019940
 800ccec:	08019790 	.word	0x08019790
 800ccf0:	08019970 	.word	0x08019970
 800ccf4:	2401057c 	.word	0x2401057c
 800ccf8:	0800cb41 	.word	0x0800cb41
 800ccfc:	24010580 	.word	0x24010580

0800cd00 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d106      	bne.n	800cd1c <tcp_update_rcv_ann_wnd+0x1c>
 800cd0e:	4b25      	ldr	r3, [pc, #148]	@ (800cda4 <tcp_update_rcv_ann_wnd+0xa4>)
 800cd10:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800cd14:	4924      	ldr	r1, [pc, #144]	@ (800cda8 <tcp_update_rcv_ann_wnd+0xa8>)
 800cd16:	4825      	ldr	r0, [pc, #148]	@ (800cdac <tcp_update_rcv_ann_wnd+0xac>)
 800cd18:	f00a fece 	bl	8017ab8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800cd24:	4413      	add	r3, r2
 800cd26:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800cd30:	f640 3168 	movw	r1, #2920	@ 0xb68
 800cd34:	428a      	cmp	r2, r1
 800cd36:	bf28      	it	cs
 800cd38:	460a      	movcs	r2, r1
 800cd3a:	b292      	uxth	r2, r2
 800cd3c:	4413      	add	r3, r2
 800cd3e:	68fa      	ldr	r2, [r7, #12]
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	db08      	blt.n	800cd58 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	1ad3      	subs	r3, r2, r3
 800cd56:	e020      	b.n	800cd9a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd60:	1ad3      	subs	r3, r2, r3
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	dd03      	ble.n	800cd6e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cd6c:	e014      	b.n	800cd98 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd76:	1ad3      	subs	r3, r2, r3
 800cd78:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd80:	d306      	bcc.n	800cd90 <tcp_update_rcv_ann_wnd+0x90>
 800cd82:	4b08      	ldr	r3, [pc, #32]	@ (800cda4 <tcp_update_rcv_ann_wnd+0xa4>)
 800cd84:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800cd88:	4909      	ldr	r1, [pc, #36]	@ (800cdb0 <tcp_update_rcv_ann_wnd+0xb0>)
 800cd8a:	4808      	ldr	r0, [pc, #32]	@ (800cdac <tcp_update_rcv_ann_wnd+0xac>)
 800cd8c:	f00a fe94 	bl	8017ab8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800cd98:	2300      	movs	r3, #0
  }
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	0801974c 	.word	0x0801974c
 800cda8:	080199a8 	.word	0x080199a8
 800cdac:	08019790 	.word	0x08019790
 800cdb0:	080199cc 	.word	0x080199cc

0800cdb4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
 800cdbc:	460b      	mov	r3, r1
 800cdbe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();
 800cdc0:	f7f9 fa98 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d107      	bne.n	800cdda <tcp_recved+0x26>
 800cdca:	4b20      	ldr	r3, [pc, #128]	@ (800ce4c <tcp_recved+0x98>)
 800cdcc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800cdd0:	491f      	ldr	r1, [pc, #124]	@ (800ce50 <tcp_recved+0x9c>)
 800cdd2:	4820      	ldr	r0, [pc, #128]	@ (800ce54 <tcp_recved+0xa0>)
 800cdd4:	f00a fe70 	bl	8017ab8 <iprintf>
 800cdd8:	e034      	b.n	800ce44 <tcp_recved+0x90>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	7d1b      	ldrb	r3, [r3, #20]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d106      	bne.n	800cdf0 <tcp_recved+0x3c>
 800cde2:	4b1a      	ldr	r3, [pc, #104]	@ (800ce4c <tcp_recved+0x98>)
 800cde4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800cde8:	491b      	ldr	r1, [pc, #108]	@ (800ce58 <tcp_recved+0xa4>)
 800cdea:	481a      	ldr	r0, [pc, #104]	@ (800ce54 <tcp_recved+0xa0>)
 800cdec:	f00a fe64 	bl	8017ab8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cdf4:	887b      	ldrh	r3, [r7, #2]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cdfa:	89fb      	ldrh	r3, [r7, #14]
 800cdfc:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d804      	bhi.n	800ce0e <tcp_recved+0x5a>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce08:	89fa      	ldrh	r2, [r7, #14]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d204      	bcs.n	800ce18 <tcp_recved+0x64>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800ce14:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ce16:	e002      	b.n	800ce1e <tcp_recved+0x6a>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	89fa      	ldrh	r2, [r7, #14]
 800ce1c:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f7ff ff6e 	bl	800cd00 <tcp_update_rcv_ann_wnd>
 800ce24:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d909      	bls.n	800ce44 <tcp_recved+0x90>
    tcp_ack_now(pcb);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	8b5b      	ldrh	r3, [r3, #26]
 800ce34:	f043 0302 	orr.w	r3, r3, #2
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f004 fcd6 	bl	80117f0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	0801974c 	.word	0x0801974c
 800ce50:	080199e8 	.word	0x080199e8
 800ce54:	08019790 	.word	0x08019790
 800ce58:	08019a00 	.word	0x08019a00

0800ce5c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ce66:	4b1e      	ldr	r3, [pc, #120]	@ (800cee0 <tcp_new_port+0x84>)
 800ce68:	881b      	ldrh	r3, [r3, #0]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	b29a      	uxth	r2, r3
 800ce6e:	4b1c      	ldr	r3, [pc, #112]	@ (800cee0 <tcp_new_port+0x84>)
 800ce70:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ce72:	4b1b      	ldr	r3, [pc, #108]	@ (800cee0 <tcp_new_port+0x84>)
 800ce74:	881b      	ldrh	r3, [r3, #0]
 800ce76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d103      	bne.n	800ce86 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ce7e:	4b18      	ldr	r3, [pc, #96]	@ (800cee0 <tcp_new_port+0x84>)
 800ce80:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800ce84:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ce86:	2300      	movs	r3, #0
 800ce88:	71fb      	strb	r3, [r7, #7]
 800ce8a:	e01e      	b.n	800ceca <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	4a15      	ldr	r2, [pc, #84]	@ (800cee4 <tcp_new_port+0x88>)
 800ce90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	603b      	str	r3, [r7, #0]
 800ce98:	e011      	b.n	800cebe <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	8ada      	ldrh	r2, [r3, #22]
 800ce9e:	4b10      	ldr	r3, [pc, #64]	@ (800cee0 <tcp_new_port+0x84>)
 800cea0:	881b      	ldrh	r3, [r3, #0]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d108      	bne.n	800ceb8 <tcp_new_port+0x5c>
        n++;
 800cea6:	88bb      	ldrh	r3, [r7, #4]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ceac:	88bb      	ldrh	r3, [r7, #4]
 800ceae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ceb2:	d3d8      	bcc.n	800ce66 <tcp_new_port+0xa>
          return 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	e00d      	b.n	800ced4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	603b      	str	r3, [r7, #0]
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1ea      	bne.n	800ce9a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cec4:	79fb      	ldrb	r3, [r7, #7]
 800cec6:	3301      	adds	r3, #1
 800cec8:	71fb      	strb	r3, [r7, #7]
 800ceca:	79fb      	ldrb	r3, [r7, #7]
 800cecc:	2b03      	cmp	r3, #3
 800cece:	d9dd      	bls.n	800ce8c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ced0:	4b03      	ldr	r3, [pc, #12]	@ (800cee0 <tcp_new_port+0x84>)
 800ced2:	881b      	ldrh	r3, [r3, #0]
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	24000034 	.word	0x24000034
 800cee4:	0801c170 	.word	0x0801c170

0800cee8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b08a      	sub	sp, #40	@ 0x28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	603b      	str	r3, [r7, #0]
 800cef4:	4613      	mov	r3, r2
 800cef6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800cef8:	2300      	movs	r3, #0
 800cefa:	627b      	str	r3, [r7, #36]	@ 0x24
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 800cefc:	f7f9 f9fa 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d109      	bne.n	800cf1a <tcp_connect+0x32>
 800cf06:	4b7d      	ldr	r3, [pc, #500]	@ (800d0fc <tcp_connect+0x214>)
 800cf08:	f240 4235 	movw	r2, #1077	@ 0x435
 800cf0c:	497c      	ldr	r1, [pc, #496]	@ (800d100 <tcp_connect+0x218>)
 800cf0e:	487d      	ldr	r0, [pc, #500]	@ (800d104 <tcp_connect+0x21c>)
 800cf10:	f00a fdd2 	bl	8017ab8 <iprintf>
 800cf14:	f06f 030f 	mvn.w	r3, #15
 800cf18:	e0ec      	b.n	800d0f4 <tcp_connect+0x20c>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d109      	bne.n	800cf34 <tcp_connect+0x4c>
 800cf20:	4b76      	ldr	r3, [pc, #472]	@ (800d0fc <tcp_connect+0x214>)
 800cf22:	f240 4236 	movw	r2, #1078	@ 0x436
 800cf26:	4978      	ldr	r1, [pc, #480]	@ (800d108 <tcp_connect+0x220>)
 800cf28:	4876      	ldr	r0, [pc, #472]	@ (800d104 <tcp_connect+0x21c>)
 800cf2a:	f00a fdc5 	bl	8017ab8 <iprintf>
 800cf2e:	f06f 030f 	mvn.w	r3, #15
 800cf32:	e0df      	b.n	800d0f4 <tcp_connect+0x20c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	7d1b      	ldrb	r3, [r3, #20]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d009      	beq.n	800cf50 <tcp_connect+0x68>
 800cf3c:	4b6f      	ldr	r3, [pc, #444]	@ (800d0fc <tcp_connect+0x214>)
 800cf3e:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800cf42:	4972      	ldr	r1, [pc, #456]	@ (800d10c <tcp_connect+0x224>)
 800cf44:	486f      	ldr	r0, [pc, #444]	@ (800d104 <tcp_connect+0x21c>)
 800cf46:	f00a fdb7 	bl	8017ab8 <iprintf>
 800cf4a:	f06f 0309 	mvn.w	r3, #9
 800cf4e:	e0d1      	b.n	800d0f4 <tcp_connect+0x20c>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d002      	beq.n	800cf5c <tcp_connect+0x74>
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	e000      	b.n	800cf5e <tcp_connect+0x76>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	68fa      	ldr	r2, [r7, #12]
 800cf60:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	88fa      	ldrh	r2, [r7, #6]
 800cf66:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	7a1b      	ldrb	r3, [r3, #8]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d006      	beq.n	800cf7e <tcp_connect+0x96>
    netif = netif_get_by_index(pcb->netif_idx);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	7a1b      	ldrb	r3, [r3, #8]
 800cf74:	4618      	mov	r0, r3
 800cf76:	f7fe fb4f 	bl	800b618 <netif_get_by_index>
 800cf7a:	6278      	str	r0, [r7, #36]	@ 0x24
 800cf7c:	e005      	b.n	800cf8a <tcp_connect+0xa2>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	3304      	adds	r3, #4
 800cf82:	4618      	mov	r0, r3
 800cf84:	f009 f994 	bl	80162b0 <ip4_route>
 800cf88:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d102      	bne.n	800cf96 <tcp_connect+0xae>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800cf90:	f06f 0303 	mvn.w	r3, #3
 800cf94:	e0ae      	b.n	800d0f4 <tcp_connect+0x20c>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <tcp_connect+0xbc>
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d111      	bne.n	800cfc8 <tcp_connect+0xe0>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d002      	beq.n	800cfb0 <tcp_connect+0xc8>
 800cfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfac:	3304      	adds	r3, #4
 800cfae:	e000      	b.n	800cfb2 <tcp_connect+0xca>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d102      	bne.n	800cfc0 <tcp_connect+0xd8>
      return ERR_RTE;
 800cfba:	f06f 0303 	mvn.w	r3, #3
 800cfbe:	e099      	b.n	800d0f4 <tcp_connect+0x20c>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	8adb      	ldrh	r3, [r3, #22]
 800cfcc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	8adb      	ldrh	r3, [r3, #22]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d10c      	bne.n	800cff0 <tcp_connect+0x108>
    pcb->local_port = tcp_new_port();
 800cfd6:	f7ff ff41 	bl	800ce5c <tcp_new_port>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	461a      	mov	r2, r3
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	8adb      	ldrh	r3, [r3, #22]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d102      	bne.n	800cff0 <tcp_connect+0x108>
      return ERR_BUF;
 800cfea:	f06f 0301 	mvn.w	r3, #1
 800cfee:	e081      	b.n	800d0f4 <tcp_connect+0x20c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f001 f875 	bl	800e0e0 <tcp_next_iss>
 800cff6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	697a      	ldr	r2, [r7, #20]
 800d002:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	1e5a      	subs	r2, r3, #1
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	1e5a      	subs	r2, r3, #1
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	1e5a      	subs	r2, r3, #1
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800d022:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800d03a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d044:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	3304      	adds	r3, #4
 800d04e:	461a      	mov	r2, r3
 800d050:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d052:	f001 f86b 	bl	800e12c <tcp_eff_send_mss_netif>
 800d056:	4603      	mov	r3, r0
 800d058:	461a      	mov	r2, r3
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2201      	movs	r2, #1
 800d062:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	683a      	ldr	r2, [r7, #0]
 800d06a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d06e:	2102      	movs	r1, #2
 800d070:	68f8      	ldr	r0, [r7, #12]
 800d072:	f004 facf 	bl	8011614 <tcp_enqueue_flags>
 800d076:	4603      	mov	r3, r0
 800d078:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d07a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d136      	bne.n	800d0f0 <tcp_connect+0x208>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2202      	movs	r2, #2
 800d086:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d088:	8b7b      	ldrh	r3, [r7, #26]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d021      	beq.n	800d0d2 <tcp_connect+0x1ea>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d08e:	4b20      	ldr	r3, [pc, #128]	@ (800d110 <tcp_connect+0x228>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	429a      	cmp	r2, r3
 800d096:	d105      	bne.n	800d0a4 <tcp_connect+0x1bc>
 800d098:	4b1d      	ldr	r3, [pc, #116]	@ (800d110 <tcp_connect+0x228>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	4a1c      	ldr	r2, [pc, #112]	@ (800d110 <tcp_connect+0x228>)
 800d0a0:	6013      	str	r3, [r2, #0]
 800d0a2:	e013      	b.n	800d0cc <tcp_connect+0x1e4>
 800d0a4:	4b1a      	ldr	r3, [pc, #104]	@ (800d110 <tcp_connect+0x228>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	623b      	str	r3, [r7, #32]
 800d0aa:	e00c      	b.n	800d0c6 <tcp_connect+0x1de>
 800d0ac:	6a3b      	ldr	r3, [r7, #32]
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d104      	bne.n	800d0c0 <tcp_connect+0x1d8>
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	68da      	ldr	r2, [r3, #12]
 800d0ba:	6a3b      	ldr	r3, [r7, #32]
 800d0bc:	60da      	str	r2, [r3, #12]
 800d0be:	e005      	b.n	800d0cc <tcp_connect+0x1e4>
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	623b      	str	r3, [r7, #32]
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1ef      	bne.n	800d0ac <tcp_connect+0x1c4>
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d0d2:	4b10      	ldr	r3, [pc, #64]	@ (800d114 <tcp_connect+0x22c>)
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	60da      	str	r2, [r3, #12]
 800d0da:	4a0e      	ldr	r2, [pc, #56]	@ (800d114 <tcp_connect+0x22c>)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	6013      	str	r3, [r2, #0]
 800d0e0:	f005 fafe 	bl	80126e0 <tcp_timer_needed>
 800d0e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d118 <tcp_connect+0x230>)
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	f004 fb80 	bl	80117f0 <tcp_output>
  }
  return ret;
 800d0f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3728      	adds	r7, #40	@ 0x28
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	0801974c 	.word	0x0801974c
 800d100:	08019a28 	.word	0x08019a28
 800d104:	08019790 	.word	0x08019790
 800d108:	08019a44 	.word	0x08019a44
 800d10c:	08019a60 	.word	0x08019a60
 800d110:	2401057c 	.word	0x2401057c
 800d114:	24010584 	.word	0x24010584
 800d118:	2401058c 	.word	0x2401058c

0800d11c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d11c:	b5b0      	push	{r4, r5, r7, lr}
 800d11e:	b090      	sub	sp, #64	@ 0x40
 800d120:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d122:	2300      	movs	r3, #0
 800d124:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800d128:	4b95      	ldr	r3, [pc, #596]	@ (800d380 <tcp_slowtmr+0x264>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	3301      	adds	r3, #1
 800d12e:	4a94      	ldr	r2, [pc, #592]	@ (800d380 <tcp_slowtmr+0x264>)
 800d130:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d132:	4b94      	ldr	r3, [pc, #592]	@ (800d384 <tcp_slowtmr+0x268>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	3301      	adds	r3, #1
 800d138:	b2da      	uxtb	r2, r3
 800d13a:	4b92      	ldr	r3, [pc, #584]	@ (800d384 <tcp_slowtmr+0x268>)
 800d13c:	701a      	strb	r2, [r3, #0]
 800d13e:	e000      	b.n	800d142 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800d140:	bf00      	nop
  prev = NULL;
 800d142:	2300      	movs	r3, #0
 800d144:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800d146:	4b90      	ldr	r3, [pc, #576]	@ (800d388 <tcp_slowtmr+0x26c>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d14c:	e29d      	b.n	800d68a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d150:	7d1b      	ldrb	r3, [r3, #20]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d106      	bne.n	800d164 <tcp_slowtmr+0x48>
 800d156:	4b8d      	ldr	r3, [pc, #564]	@ (800d38c <tcp_slowtmr+0x270>)
 800d158:	f240 42be 	movw	r2, #1214	@ 0x4be
 800d15c:	498c      	ldr	r1, [pc, #560]	@ (800d390 <tcp_slowtmr+0x274>)
 800d15e:	488d      	ldr	r0, [pc, #564]	@ (800d394 <tcp_slowtmr+0x278>)
 800d160:	f00a fcaa 	bl	8017ab8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d166:	7d1b      	ldrb	r3, [r3, #20]
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d106      	bne.n	800d17a <tcp_slowtmr+0x5e>
 800d16c:	4b87      	ldr	r3, [pc, #540]	@ (800d38c <tcp_slowtmr+0x270>)
 800d16e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800d172:	4989      	ldr	r1, [pc, #548]	@ (800d398 <tcp_slowtmr+0x27c>)
 800d174:	4887      	ldr	r0, [pc, #540]	@ (800d394 <tcp_slowtmr+0x278>)
 800d176:	f00a fc9f 	bl	8017ab8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d17a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17c:	7d1b      	ldrb	r3, [r3, #20]
 800d17e:	2b0a      	cmp	r3, #10
 800d180:	d106      	bne.n	800d190 <tcp_slowtmr+0x74>
 800d182:	4b82      	ldr	r3, [pc, #520]	@ (800d38c <tcp_slowtmr+0x270>)
 800d184:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800d188:	4984      	ldr	r1, [pc, #528]	@ (800d39c <tcp_slowtmr+0x280>)
 800d18a:	4882      	ldr	r0, [pc, #520]	@ (800d394 <tcp_slowtmr+0x278>)
 800d18c:	f00a fc94 	bl	8017ab8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d192:	7f9a      	ldrb	r2, [r3, #30]
 800d194:	4b7b      	ldr	r3, [pc, #492]	@ (800d384 <tcp_slowtmr+0x268>)
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	429a      	cmp	r2, r3
 800d19a:	d105      	bne.n	800d1a8 <tcp_slowtmr+0x8c>
      prev = pcb;
 800d19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a2:	68db      	ldr	r3, [r3, #12]
 800d1a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800d1a6:	e270      	b.n	800d68a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800d1a8:	4b76      	ldr	r3, [pc, #472]	@ (800d384 <tcp_slowtmr+0x268>)
 800d1aa:	781a      	ldrb	r2, [r3, #0]
 800d1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ae:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1be:	7d1b      	ldrb	r3, [r3, #20]
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	d10a      	bne.n	800d1da <tcp_slowtmr+0xbe>
 800d1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d1ca:	2b05      	cmp	r3, #5
 800d1cc:	d905      	bls.n	800d1da <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d1ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d1d8:	e11e      	b.n	800d418 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d1e0:	2b0b      	cmp	r3, #11
 800d1e2:	d905      	bls.n	800d1f0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800d1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d1ee:	e113      	b.n	800d418 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800d1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d075      	beq.n	800d2e6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d006      	beq.n	800d210 <tcp_slowtmr+0xf4>
 800d202:	4b62      	ldr	r3, [pc, #392]	@ (800d38c <tcp_slowtmr+0x270>)
 800d204:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800d208:	4965      	ldr	r1, [pc, #404]	@ (800d3a0 <tcp_slowtmr+0x284>)
 800d20a:	4862      	ldr	r0, [pc, #392]	@ (800d394 <tcp_slowtmr+0x278>)
 800d20c:	f00a fc54 	bl	8017ab8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d212:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d214:	2b00      	cmp	r3, #0
 800d216:	d106      	bne.n	800d226 <tcp_slowtmr+0x10a>
 800d218:	4b5c      	ldr	r3, [pc, #368]	@ (800d38c <tcp_slowtmr+0x270>)
 800d21a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800d21e:	4961      	ldr	r1, [pc, #388]	@ (800d3a4 <tcp_slowtmr+0x288>)
 800d220:	485c      	ldr	r0, [pc, #368]	@ (800d394 <tcp_slowtmr+0x278>)
 800d222:	f00a fc49 	bl	8017ab8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d228:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d22c:	2b0b      	cmp	r3, #11
 800d22e:	d905      	bls.n	800d23c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800d230:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d234:	3301      	adds	r3, #1
 800d236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d23a:	e0ed      	b.n	800d418 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d242:	3b01      	subs	r3, #1
 800d244:	4a58      	ldr	r2, [pc, #352]	@ (800d3a8 <tcp_slowtmr+0x28c>)
 800d246:	5cd3      	ldrb	r3, [r2, r3]
 800d248:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d250:	7c7a      	ldrb	r2, [r7, #17]
 800d252:	429a      	cmp	r2, r3
 800d254:	d907      	bls.n	800d266 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800d256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d258:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d25c:	3301      	adds	r3, #1
 800d25e:	b2da      	uxtb	r2, r3
 800d260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d262:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800d266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d268:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d26c:	7c7a      	ldrb	r2, [r7, #17]
 800d26e:	429a      	cmp	r2, r3
 800d270:	f200 80d2 	bhi.w	800d418 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800d274:	2301      	movs	r3, #1
 800d276:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800d278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d27a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d108      	bne.n	800d294 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d282:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d284:	f005 f95e 	bl	8012544 <tcp_zero_window_probe>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d014      	beq.n	800d2b8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800d28e:	2300      	movs	r3, #0
 800d290:	623b      	str	r3, [r7, #32]
 800d292:	e011      	b.n	800d2b8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d296:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d29a:	4619      	mov	r1, r3
 800d29c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d29e:	f004 f821 	bl	80112e4 <tcp_split_unsent_seg>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d107      	bne.n	800d2b8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800d2a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2aa:	f004 faa1 	bl	80117f0 <tcp_output>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d101      	bne.n	800d2b8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800d2b8:	6a3b      	ldr	r3, [r7, #32]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f000 80ac 	beq.w	800d418 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800d2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d2ce:	2b06      	cmp	r3, #6
 800d2d0:	f200 80a2 	bhi.w	800d418 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800d2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d2da:	3301      	adds	r3, #1
 800d2dc:	b2da      	uxtb	r2, r3
 800d2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800d2e4:	e098      	b.n	800d418 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	db0f      	blt.n	800d310 <tcp_slowtmr+0x1f4>
 800d2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d2f6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d008      	beq.n	800d310 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800d2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d300:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d304:	b29b      	uxth	r3, r3
 800d306:	3301      	adds	r3, #1
 800d308:	b29b      	uxth	r3, r3
 800d30a:	b21a      	sxth	r2, r3
 800d30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d30e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d312:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800d316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d318:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d31c:	429a      	cmp	r2, r3
 800d31e:	db7b      	blt.n	800d418 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d320:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d322:	f004 fd5b 	bl	8011ddc <tcp_rexmit_rto_prepare>
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d007      	beq.n	800d33c <tcp_slowtmr+0x220>
 800d32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d32e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d330:	2b00      	cmp	r3, #0
 800d332:	d171      	bne.n	800d418 <tcp_slowtmr+0x2fc>
 800d334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d06d      	beq.n	800d418 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800d33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d33e:	7d1b      	ldrb	r3, [r3, #20]
 800d340:	2b02      	cmp	r3, #2
 800d342:	d03a      	beq.n	800d3ba <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d346:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d34a:	2b0c      	cmp	r3, #12
 800d34c:	bf28      	it	cs
 800d34e:	230c      	movcs	r3, #12
 800d350:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d354:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d358:	10db      	asrs	r3, r3, #3
 800d35a:	b21b      	sxth	r3, r3
 800d35c:	461a      	mov	r2, r3
 800d35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d360:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d364:	4413      	add	r3, r2
 800d366:	7efa      	ldrb	r2, [r7, #27]
 800d368:	4910      	ldr	r1, [pc, #64]	@ (800d3ac <tcp_slowtmr+0x290>)
 800d36a:	5c8a      	ldrb	r2, [r1, r2]
 800d36c:	4093      	lsls	r3, r2
 800d36e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800d376:	4293      	cmp	r3, r2
 800d378:	dc1a      	bgt.n	800d3b0 <tcp_slowtmr+0x294>
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	b21a      	sxth	r2, r3
 800d37e:	e019      	b.n	800d3b4 <tcp_slowtmr+0x298>
 800d380:	24010578 	.word	0x24010578
 800d384:	2401058e 	.word	0x2401058e
 800d388:	24010584 	.word	0x24010584
 800d38c:	0801974c 	.word	0x0801974c
 800d390:	08019a90 	.word	0x08019a90
 800d394:	08019790 	.word	0x08019790
 800d398:	08019abc 	.word	0x08019abc
 800d39c:	08019ae8 	.word	0x08019ae8
 800d3a0:	08019b18 	.word	0x08019b18
 800d3a4:	08019b4c 	.word	0x08019b4c
 800d3a8:	0801c168 	.word	0x0801c168
 800d3ac:	0801c158 	.word	0x0801c158
 800d3b0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800d3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3bc:	2200      	movs	r2, #0
 800d3be:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	bf28      	it	cs
 800d3d0:	4613      	movcs	r3, r2
 800d3d2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d3d4:	8a7b      	ldrh	r3, [r7, #18]
 800d3d6:	085b      	lsrs	r3, r3, #1
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3dc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d3ea:	005b      	lsls	r3, r3, #1
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d206      	bcs.n	800d400 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d3f6:	005b      	lsls	r3, r3, #1
 800d3f8:	b29a      	uxth	r2, r3
 800d3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3fc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800d400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d402:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d406:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800d40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d40c:	2200      	movs	r2, #0
 800d40e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d412:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d414:	f004 fd52 	bl	8011ebc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800d418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d41a:	7d1b      	ldrb	r3, [r3, #20]
 800d41c:	2b06      	cmp	r3, #6
 800d41e:	d111      	bne.n	800d444 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800d420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d422:	8b5b      	ldrh	r3, [r3, #26]
 800d424:	f003 0310 	and.w	r3, r3, #16
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d00b      	beq.n	800d444 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d42c:	4b9c      	ldr	r3, [pc, #624]	@ (800d6a0 <tcp_slowtmr+0x584>)
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d432:	6a1b      	ldr	r3, [r3, #32]
 800d434:	1ad3      	subs	r3, r2, r3
 800d436:	2b28      	cmp	r3, #40	@ 0x28
 800d438:	d904      	bls.n	800d444 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800d43a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d43e:	3301      	adds	r3, #1
 800d440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d446:	7a5b      	ldrb	r3, [r3, #9]
 800d448:	f003 0308 	and.w	r3, r3, #8
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d04a      	beq.n	800d4e6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d452:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d454:	2b04      	cmp	r3, #4
 800d456:	d003      	beq.n	800d460 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800d458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d45a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d45c:	2b07      	cmp	r3, #7
 800d45e:	d142      	bne.n	800d4e6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d460:	4b8f      	ldr	r3, [pc, #572]	@ (800d6a0 <tcp_slowtmr+0x584>)
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d466:	6a1b      	ldr	r3, [r3, #32]
 800d468:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d46c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d470:	4b8c      	ldr	r3, [pc, #560]	@ (800d6a4 <tcp_slowtmr+0x588>)
 800d472:	440b      	add	r3, r1
 800d474:	498c      	ldr	r1, [pc, #560]	@ (800d6a8 <tcp_slowtmr+0x58c>)
 800d476:	fba1 1303 	umull	r1, r3, r1, r3
 800d47a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d90a      	bls.n	800d496 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800d480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d484:	3301      	adds	r3, #1
 800d486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800d48a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d48e:	3301      	adds	r3, #1
 800d490:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d494:	e027      	b.n	800d4e6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d496:	4b82      	ldr	r3, [pc, #520]	@ (800d6a0 <tcp_slowtmr+0x584>)
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d49c:	6a1b      	ldr	r3, [r3, #32]
 800d49e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	4b7f      	ldr	r3, [pc, #508]	@ (800d6ac <tcp_slowtmr+0x590>)
 800d4b0:	fb00 f303 	mul.w	r3, r0, r3
 800d4b4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d4b6:	497c      	ldr	r1, [pc, #496]	@ (800d6a8 <tcp_slowtmr+0x58c>)
 800d4b8:	fba1 1303 	umull	r1, r3, r1, r3
 800d4bc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d911      	bls.n	800d4e6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d4c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4c4:	f004 fffe 	bl	80124c4 <tcp_keepalive>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800d4ce:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d107      	bne.n	800d4e6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4d8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d4dc:	3301      	adds	r3, #1
 800d4de:	b2da      	uxtb	r2, r3
 800d4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800d4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d011      	beq.n	800d512 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d4ee:	4b6c      	ldr	r3, [pc, #432]	@ (800d6a0 <tcp_slowtmr+0x584>)
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f4:	6a1b      	ldr	r3, [r3, #32]
 800d4f6:	1ad2      	subs	r2, r2, r3
 800d4f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d4fe:	4619      	mov	r1, r3
 800d500:	460b      	mov	r3, r1
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	440b      	add	r3, r1
 800d506:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d508:	429a      	cmp	r2, r3
 800d50a:	d302      	bcc.n	800d512 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800d50c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d50e:	f000 feb7 	bl	800e280 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800d512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d514:	7d1b      	ldrb	r3, [r3, #20]
 800d516:	2b03      	cmp	r3, #3
 800d518:	d10b      	bne.n	800d532 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d51a:	4b61      	ldr	r3, [pc, #388]	@ (800d6a0 <tcp_slowtmr+0x584>)
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d520:	6a1b      	ldr	r3, [r3, #32]
 800d522:	1ad3      	subs	r3, r2, r3
 800d524:	2b28      	cmp	r3, #40	@ 0x28
 800d526:	d904      	bls.n	800d532 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800d528:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d52c:	3301      	adds	r3, #1
 800d52e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800d532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d534:	7d1b      	ldrb	r3, [r3, #20]
 800d536:	2b09      	cmp	r3, #9
 800d538:	d10b      	bne.n	800d552 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d53a:	4b59      	ldr	r3, [pc, #356]	@ (800d6a0 <tcp_slowtmr+0x584>)
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d540:	6a1b      	ldr	r3, [r3, #32]
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	2bf0      	cmp	r3, #240	@ 0xf0
 800d546:	d904      	bls.n	800d552 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d54c:	3301      	adds	r3, #1
 800d54e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800d552:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d556:	2b00      	cmp	r3, #0
 800d558:	d060      	beq.n	800d61c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800d55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d560:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800d562:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d564:	f000 fcd8 	bl	800df18 <tcp_pcb_purge>
      if (prev != NULL) {
 800d568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d010      	beq.n	800d590 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d56e:	4b50      	ldr	r3, [pc, #320]	@ (800d6b0 <tcp_slowtmr+0x594>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d574:	429a      	cmp	r2, r3
 800d576:	d106      	bne.n	800d586 <tcp_slowtmr+0x46a>
 800d578:	4b4e      	ldr	r3, [pc, #312]	@ (800d6b4 <tcp_slowtmr+0x598>)
 800d57a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800d57e:	494e      	ldr	r1, [pc, #312]	@ (800d6b8 <tcp_slowtmr+0x59c>)
 800d580:	484e      	ldr	r0, [pc, #312]	@ (800d6bc <tcp_slowtmr+0x5a0>)
 800d582:	f00a fa99 	bl	8017ab8 <iprintf>
        prev->next = pcb->next;
 800d586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d588:	68da      	ldr	r2, [r3, #12]
 800d58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d58c:	60da      	str	r2, [r3, #12]
 800d58e:	e00f      	b.n	800d5b0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d590:	4b47      	ldr	r3, [pc, #284]	@ (800d6b0 <tcp_slowtmr+0x594>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d596:	429a      	cmp	r2, r3
 800d598:	d006      	beq.n	800d5a8 <tcp_slowtmr+0x48c>
 800d59a:	4b46      	ldr	r3, [pc, #280]	@ (800d6b4 <tcp_slowtmr+0x598>)
 800d59c:	f240 5271 	movw	r2, #1393	@ 0x571
 800d5a0:	4947      	ldr	r1, [pc, #284]	@ (800d6c0 <tcp_slowtmr+0x5a4>)
 800d5a2:	4846      	ldr	r0, [pc, #280]	@ (800d6bc <tcp_slowtmr+0x5a0>)
 800d5a4:	f00a fa88 	bl	8017ab8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	4a40      	ldr	r2, [pc, #256]	@ (800d6b0 <tcp_slowtmr+0x594>)
 800d5ae:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800d5b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d013      	beq.n	800d5e0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ba:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5be:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d5c0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800d5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d5c8:	8ad2      	ldrh	r2, [r2, #22]
 800d5ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5cc:	8b09      	ldrh	r1, [r1, #24]
 800d5ce:	9102      	str	r1, [sp, #8]
 800d5d0:	9201      	str	r2, [sp, #4]
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	462b      	mov	r3, r5
 800d5d6:	4622      	mov	r2, r4
 800d5d8:	4601      	mov	r1, r0
 800d5da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d5dc:	f004 febe 	bl	801235c <tcp_rst>
      err_arg = pcb->callback_arg;
 800d5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e2:	691b      	ldr	r3, [r3, #16]
 800d5e4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d5e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e8:	7d1b      	ldrb	r3, [r3, #20]
 800d5ea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d5f6:	6838      	ldr	r0, [r7, #0]
 800d5f8:	f7fe ff10 	bl	800c41c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d5fc:	4b31      	ldr	r3, [pc, #196]	@ (800d6c4 <tcp_slowtmr+0x5a8>)
 800d5fe:	2200      	movs	r2, #0
 800d600:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d004      	beq.n	800d612 <tcp_slowtmr+0x4f6>
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f06f 010c 	mvn.w	r1, #12
 800d60e:	68b8      	ldr	r0, [r7, #8]
 800d610:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d612:	4b2c      	ldr	r3, [pc, #176]	@ (800d6c4 <tcp_slowtmr+0x5a8>)
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d037      	beq.n	800d68a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d61a:	e592      	b.n	800d142 <tcp_slowtmr+0x26>
      prev = pcb;
 800d61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d61e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800d626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d628:	7f1b      	ldrb	r3, [r3, #28]
 800d62a:	3301      	adds	r3, #1
 800d62c:	b2da      	uxtb	r2, r3
 800d62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d630:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d634:	7f1a      	ldrb	r2, [r3, #28]
 800d636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d638:	7f5b      	ldrb	r3, [r3, #29]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d325      	bcc.n	800d68a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d640:	2200      	movs	r2, #0
 800d642:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800d644:	4b1f      	ldr	r3, [pc, #124]	@ (800d6c4 <tcp_slowtmr+0x5a8>)
 800d646:	2200      	movs	r2, #0
 800d648:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d650:	2b00      	cmp	r3, #0
 800d652:	d00b      	beq.n	800d66c <tcp_slowtmr+0x550>
 800d654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d65a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d65c:	6912      	ldr	r2, [r2, #16]
 800d65e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d660:	4610      	mov	r0, r2
 800d662:	4798      	blx	r3
 800d664:	4603      	mov	r3, r0
 800d666:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d66a:	e002      	b.n	800d672 <tcp_slowtmr+0x556>
 800d66c:	2300      	movs	r3, #0
 800d66e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800d672:	4b14      	ldr	r3, [pc, #80]	@ (800d6c4 <tcp_slowtmr+0x5a8>)
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	f47f ad62 	bne.w	800d140 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d67c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d680:	2b00      	cmp	r3, #0
 800d682:	d102      	bne.n	800d68a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d686:	f004 f8b3 	bl	80117f0 <tcp_output>
  while (pcb != NULL) {
 800d68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f47f ad5e 	bne.w	800d14e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d692:	2300      	movs	r3, #0
 800d694:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800d696:	4b0c      	ldr	r3, [pc, #48]	@ (800d6c8 <tcp_slowtmr+0x5ac>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d69c:	e069      	b.n	800d772 <tcp_slowtmr+0x656>
 800d69e:	bf00      	nop
 800d6a0:	24010578 	.word	0x24010578
 800d6a4:	000a4cb8 	.word	0x000a4cb8
 800d6a8:	10624dd3 	.word	0x10624dd3
 800d6ac:	000124f8 	.word	0x000124f8
 800d6b0:	24010584 	.word	0x24010584
 800d6b4:	0801974c 	.word	0x0801974c
 800d6b8:	08019b84 	.word	0x08019b84
 800d6bc:	08019790 	.word	0x08019790
 800d6c0:	08019bb0 	.word	0x08019bb0
 800d6c4:	2401058c 	.word	0x2401058c
 800d6c8:	24010588 	.word	0x24010588
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ce:	7d1b      	ldrb	r3, [r3, #20]
 800d6d0:	2b0a      	cmp	r3, #10
 800d6d2:	d006      	beq.n	800d6e2 <tcp_slowtmr+0x5c6>
 800d6d4:	4b2b      	ldr	r3, [pc, #172]	@ (800d784 <tcp_slowtmr+0x668>)
 800d6d6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800d6da:	492b      	ldr	r1, [pc, #172]	@ (800d788 <tcp_slowtmr+0x66c>)
 800d6dc:	482b      	ldr	r0, [pc, #172]	@ (800d78c <tcp_slowtmr+0x670>)
 800d6de:	f00a f9eb 	bl	8017ab8 <iprintf>
    pcb_remove = 0;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d6e8:	4b29      	ldr	r3, [pc, #164]	@ (800d790 <tcp_slowtmr+0x674>)
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ee:	6a1b      	ldr	r3, [r3, #32]
 800d6f0:	1ad3      	subs	r3, r2, r3
 800d6f2:	2bf0      	cmp	r3, #240	@ 0xf0
 800d6f4:	d904      	bls.n	800d700 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800d6f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d704:	2b00      	cmp	r3, #0
 800d706:	d02f      	beq.n	800d768 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d708:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d70a:	f000 fc05 	bl	800df18 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d710:	2b00      	cmp	r3, #0
 800d712:	d010      	beq.n	800d736 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d714:	4b1f      	ldr	r3, [pc, #124]	@ (800d794 <tcp_slowtmr+0x678>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d106      	bne.n	800d72c <tcp_slowtmr+0x610>
 800d71e:	4b19      	ldr	r3, [pc, #100]	@ (800d784 <tcp_slowtmr+0x668>)
 800d720:	f240 52af 	movw	r2, #1455	@ 0x5af
 800d724:	491c      	ldr	r1, [pc, #112]	@ (800d798 <tcp_slowtmr+0x67c>)
 800d726:	4819      	ldr	r0, [pc, #100]	@ (800d78c <tcp_slowtmr+0x670>)
 800d728:	f00a f9c6 	bl	8017ab8 <iprintf>
        prev->next = pcb->next;
 800d72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72e:	68da      	ldr	r2, [r3, #12]
 800d730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d732:	60da      	str	r2, [r3, #12]
 800d734:	e00f      	b.n	800d756 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d736:	4b17      	ldr	r3, [pc, #92]	@ (800d794 <tcp_slowtmr+0x678>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d006      	beq.n	800d74e <tcp_slowtmr+0x632>
 800d740:	4b10      	ldr	r3, [pc, #64]	@ (800d784 <tcp_slowtmr+0x668>)
 800d742:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d746:	4915      	ldr	r1, [pc, #84]	@ (800d79c <tcp_slowtmr+0x680>)
 800d748:	4810      	ldr	r0, [pc, #64]	@ (800d78c <tcp_slowtmr+0x670>)
 800d74a:	f00a f9b5 	bl	8017ab8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	4a10      	ldr	r2, [pc, #64]	@ (800d794 <tcp_slowtmr+0x678>)
 800d754:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d758:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d760:	69f8      	ldr	r0, [r7, #28]
 800d762:	f7fe fe5b 	bl	800c41c <tcp_free>
 800d766:	e004      	b.n	800d772 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800d768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d76a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d774:	2b00      	cmp	r3, #0
 800d776:	d1a9      	bne.n	800d6cc <tcp_slowtmr+0x5b0>
    }
  }
}
 800d778:	bf00      	nop
 800d77a:	bf00      	nop
 800d77c:	3730      	adds	r7, #48	@ 0x30
 800d77e:	46bd      	mov	sp, r7
 800d780:	bdb0      	pop	{r4, r5, r7, pc}
 800d782:	bf00      	nop
 800d784:	0801974c 	.word	0x0801974c
 800d788:	08019bdc 	.word	0x08019bdc
 800d78c:	08019790 	.word	0x08019790
 800d790:	24010578 	.word	0x24010578
 800d794:	24010588 	.word	0x24010588
 800d798:	08019c0c 	.word	0x08019c0c
 800d79c:	08019c34 	.word	0x08019c34

0800d7a0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d7a6:	4b2d      	ldr	r3, [pc, #180]	@ (800d85c <tcp_fasttmr+0xbc>)
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	4b2b      	ldr	r3, [pc, #172]	@ (800d85c <tcp_fasttmr+0xbc>)
 800d7b0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d7b2:	4b2b      	ldr	r3, [pc, #172]	@ (800d860 <tcp_fasttmr+0xc0>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d7b8:	e048      	b.n	800d84c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	7f9a      	ldrb	r2, [r3, #30]
 800d7be:	4b27      	ldr	r3, [pc, #156]	@ (800d85c <tcp_fasttmr+0xbc>)
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d03f      	beq.n	800d846 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d7c6:	4b25      	ldr	r3, [pc, #148]	@ (800d85c <tcp_fasttmr+0xbc>)
 800d7c8:	781a      	ldrb	r2, [r3, #0]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	8b5b      	ldrh	r3, [r3, #26]
 800d7d2:	f003 0301 	and.w	r3, r3, #1
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d010      	beq.n	800d7fc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	8b5b      	ldrh	r3, [r3, #26]
 800d7de:	f043 0302 	orr.w	r3, r3, #2
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f004 f801 	bl	80117f0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	8b5b      	ldrh	r3, [r3, #26]
 800d7f2:	f023 0303 	bic.w	r3, r3, #3
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	8b5b      	ldrh	r3, [r3, #26]
 800d800:	f003 0308 	and.w	r3, r3, #8
 800d804:	2b00      	cmp	r3, #0
 800d806:	d009      	beq.n	800d81c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	8b5b      	ldrh	r3, [r3, #26]
 800d80c:	f023 0308 	bic.w	r3, r3, #8
 800d810:	b29a      	uxth	r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f7fe ff94 	bl	800c744 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d826:	2b00      	cmp	r3, #0
 800d828:	d00a      	beq.n	800d840 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d82a:	4b0e      	ldr	r3, [pc, #56]	@ (800d864 <tcp_fasttmr+0xc4>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 f819 	bl	800d868 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d836:	4b0b      	ldr	r3, [pc, #44]	@ (800d864 <tcp_fasttmr+0xc4>)
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d000      	beq.n	800d840 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d83e:	e7b8      	b.n	800d7b2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	607b      	str	r3, [r7, #4]
 800d844:	e002      	b.n	800d84c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d1b3      	bne.n	800d7ba <tcp_fasttmr+0x1a>
    }
  }
}
 800d852:	bf00      	nop
 800d854:	bf00      	nop
 800d856:	3708      	adds	r7, #8
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	2401058e 	.word	0x2401058e
 800d860:	24010584 	.word	0x24010584
 800d864:	2401058c 	.word	0x2401058c

0800d868 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d868:	b590      	push	{r4, r7, lr}
 800d86a:	b085      	sub	sp, #20
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d109      	bne.n	800d88a <tcp_process_refused_data+0x22>
 800d876:	4b38      	ldr	r3, [pc, #224]	@ (800d958 <tcp_process_refused_data+0xf0>)
 800d878:	f240 6209 	movw	r2, #1545	@ 0x609
 800d87c:	4937      	ldr	r1, [pc, #220]	@ (800d95c <tcp_process_refused_data+0xf4>)
 800d87e:	4838      	ldr	r0, [pc, #224]	@ (800d960 <tcp_process_refused_data+0xf8>)
 800d880:	f00a f91a 	bl	8017ab8 <iprintf>
 800d884:	f06f 030f 	mvn.w	r3, #15
 800d888:	e061      	b.n	800d94e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d88e:	7b5b      	ldrb	r3, [r3, #13]
 800d890:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d896:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00b      	beq.n	800d8c0 <tcp_process_refused_data+0x58>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6918      	ldr	r0, [r3, #16]
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	6879      	ldr	r1, [r7, #4]
 800d8b8:	47a0      	blx	r4
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	73fb      	strb	r3, [r7, #15]
 800d8be:	e007      	b.n	800d8d0 <tcp_process_refused_data+0x68>
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	68ba      	ldr	r2, [r7, #8]
 800d8c4:	6879      	ldr	r1, [r7, #4]
 800d8c6:	2000      	movs	r0, #0
 800d8c8:	f000 f8a6 	bl	800da18 <tcp_recv_null>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d8d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d12b      	bne.n	800d930 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d8d8:	7bbb      	ldrb	r3, [r7, #14]
 800d8da:	f003 0320 	and.w	r3, r3, #32
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d034      	beq.n	800d94c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8e6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d005      	beq.n	800d8fa <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	b29a      	uxth	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d900:	2b00      	cmp	r3, #0
 800d902:	d00b      	beq.n	800d91c <tcp_process_refused_data+0xb4>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6918      	ldr	r0, [r3, #16]
 800d90e:	2300      	movs	r3, #0
 800d910:	2200      	movs	r2, #0
 800d912:	6879      	ldr	r1, [r7, #4]
 800d914:	47a0      	blx	r4
 800d916:	4603      	mov	r3, r0
 800d918:	73fb      	strb	r3, [r7, #15]
 800d91a:	e001      	b.n	800d920 <tcp_process_refused_data+0xb8>
 800d91c:	2300      	movs	r3, #0
 800d91e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d924:	f113 0f0d 	cmn.w	r3, #13
 800d928:	d110      	bne.n	800d94c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800d92a:	f06f 030c 	mvn.w	r3, #12
 800d92e:	e00e      	b.n	800d94e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800d930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d934:	f113 0f0d 	cmn.w	r3, #13
 800d938:	d102      	bne.n	800d940 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d93a:	f06f 030c 	mvn.w	r3, #12
 800d93e:	e006      	b.n	800d94e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	68ba      	ldr	r2, [r7, #8]
 800d944:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800d946:	f06f 0304 	mvn.w	r3, #4
 800d94a:	e000      	b.n	800d94e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800d94c:	2300      	movs	r3, #0
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3714      	adds	r7, #20
 800d952:	46bd      	mov	sp, r7
 800d954:	bd90      	pop	{r4, r7, pc}
 800d956:	bf00      	nop
 800d958:	0801974c 	.word	0x0801974c
 800d95c:	08019c5c 	.word	0x08019c5c
 800d960:	08019790 	.word	0x08019790

0800d964 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d96c:	e007      	b.n	800d97e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 f80a 	bl	800d98e <tcp_seg_free>
    seg = next;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1f4      	bne.n	800d96e <tcp_segs_free+0xa>
  }
}
 800d984:	bf00      	nop
 800d986:	bf00      	nop
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d98e:	b580      	push	{r7, lr}
 800d990:	b082      	sub	sp, #8
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d00c      	beq.n	800d9b6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d004      	beq.n	800d9ae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7fe f9c3 	bl	800bd34 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d9ae:	6879      	ldr	r1, [r7, #4]
 800d9b0:	2003      	movs	r0, #3
 800d9b2:	f7fd fb03 	bl	800afbc <memp_free>
  }
}
 800d9b6:	bf00      	nop
 800d9b8:	3708      	adds	r7, #8
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
	...

0800d9c0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b084      	sub	sp, #16
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d106      	bne.n	800d9dc <tcp_seg_copy+0x1c>
 800d9ce:	4b0f      	ldr	r3, [pc, #60]	@ (800da0c <tcp_seg_copy+0x4c>)
 800d9d0:	f240 6282 	movw	r2, #1666	@ 0x682
 800d9d4:	490e      	ldr	r1, [pc, #56]	@ (800da10 <tcp_seg_copy+0x50>)
 800d9d6:	480f      	ldr	r0, [pc, #60]	@ (800da14 <tcp_seg_copy+0x54>)
 800d9d8:	f00a f86e 	bl	8017ab8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d9dc:	2003      	movs	r0, #3
 800d9de:	f7fd fa77 	bl	800aed0 <memp_malloc>
 800d9e2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d101      	bne.n	800d9ee <tcp_seg_copy+0x2e>
    return NULL;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	e00a      	b.n	800da04 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d9ee:	2210      	movs	r2, #16
 800d9f0:	6879      	ldr	r1, [r7, #4]
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f00a f991 	bl	8017d1a <memcpy>
  pbuf_ref(cseg->p);
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7fe fa3f 	bl	800be80 <pbuf_ref>
  return cseg;
 800da02:	68fb      	ldr	r3, [r7, #12]
}
 800da04:	4618      	mov	r0, r3
 800da06:	3710      	adds	r7, #16
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	0801974c 	.word	0x0801974c
 800da10:	08019ca0 	.word	0x08019ca0
 800da14:	08019790 	.word	0x08019790

0800da18 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	60f8      	str	r0, [r7, #12]
 800da20:	60b9      	str	r1, [r7, #8]
 800da22:	607a      	str	r2, [r7, #4]
 800da24:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d109      	bne.n	800da40 <tcp_recv_null+0x28>
 800da2c:	4b12      	ldr	r3, [pc, #72]	@ (800da78 <tcp_recv_null+0x60>)
 800da2e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800da32:	4912      	ldr	r1, [pc, #72]	@ (800da7c <tcp_recv_null+0x64>)
 800da34:	4812      	ldr	r0, [pc, #72]	@ (800da80 <tcp_recv_null+0x68>)
 800da36:	f00a f83f 	bl	8017ab8 <iprintf>
 800da3a:	f06f 030f 	mvn.w	r3, #15
 800da3e:	e016      	b.n	800da6e <tcp_recv_null+0x56>

  if (p != NULL) {
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d009      	beq.n	800da5a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	891b      	ldrh	r3, [r3, #8]
 800da4a:	4619      	mov	r1, r3
 800da4c:	68b8      	ldr	r0, [r7, #8]
 800da4e:	f7ff f9b1 	bl	800cdb4 <tcp_recved>
    pbuf_free(p);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7fe f96e 	bl	800bd34 <pbuf_free>
 800da58:	e008      	b.n	800da6c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800da5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d104      	bne.n	800da6c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800da62:	68b8      	ldr	r0, [r7, #8]
 800da64:	f7fe fed8 	bl	800c818 <tcp_close>
 800da68:	4603      	mov	r3, r0
 800da6a:	e000      	b.n	800da6e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	0801974c 	.word	0x0801974c
 800da7c:	08019cbc 	.word	0x08019cbc
 800da80:	08019790 	.word	0x08019790

0800da84 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	4603      	mov	r3, r0
 800da8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800da8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da92:	2b00      	cmp	r3, #0
 800da94:	db01      	blt.n	800da9a <tcp_kill_prio+0x16>
 800da96:	79fb      	ldrb	r3, [r7, #7]
 800da98:	e000      	b.n	800da9c <tcp_kill_prio+0x18>
 800da9a:	237f      	movs	r3, #127	@ 0x7f
 800da9c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800da9e:	7afb      	ldrb	r3, [r7, #11]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d034      	beq.n	800db0e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800daa4:	7afb      	ldrb	r3, [r7, #11]
 800daa6:	3b01      	subs	r3, #1
 800daa8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800daaa:	2300      	movs	r3, #0
 800daac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800daae:	2300      	movs	r3, #0
 800dab0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dab2:	4b19      	ldr	r3, [pc, #100]	@ (800db18 <tcp_kill_prio+0x94>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	617b      	str	r3, [r7, #20]
 800dab8:	e01f      	b.n	800dafa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	7d5b      	ldrb	r3, [r3, #21]
 800dabe:	7afa      	ldrb	r2, [r7, #11]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d80c      	bhi.n	800dade <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dac8:	7afa      	ldrb	r2, [r7, #11]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d112      	bne.n	800daf4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dace:	4b13      	ldr	r3, [pc, #76]	@ (800db1c <tcp_kill_prio+0x98>)
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	6a1b      	ldr	r3, [r3, #32]
 800dad6:	1ad3      	subs	r3, r2, r3
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d80a      	bhi.n	800daf4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dade:	4b0f      	ldr	r3, [pc, #60]	@ (800db1c <tcp_kill_prio+0x98>)
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	6a1b      	ldr	r3, [r3, #32]
 800dae6:	1ad3      	subs	r3, r2, r3
 800dae8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	7d5b      	ldrb	r3, [r3, #21]
 800daf2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	617b      	str	r3, [r7, #20]
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1dc      	bne.n	800daba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d004      	beq.n	800db10 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800db06:	6938      	ldr	r0, [r7, #16]
 800db08:	f7fe ff74 	bl	800c9f4 <tcp_abort>
 800db0c:	e000      	b.n	800db10 <tcp_kill_prio+0x8c>
    return;
 800db0e:	bf00      	nop
  }
}
 800db10:	3718      	adds	r7, #24
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	24010584 	.word	0x24010584
 800db1c:	24010578 	.word	0x24010578

0800db20 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b086      	sub	sp, #24
 800db24:	af00      	add	r7, sp, #0
 800db26:	4603      	mov	r3, r0
 800db28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800db2a:	79fb      	ldrb	r3, [r7, #7]
 800db2c:	2b08      	cmp	r3, #8
 800db2e:	d009      	beq.n	800db44 <tcp_kill_state+0x24>
 800db30:	79fb      	ldrb	r3, [r7, #7]
 800db32:	2b09      	cmp	r3, #9
 800db34:	d006      	beq.n	800db44 <tcp_kill_state+0x24>
 800db36:	4b1a      	ldr	r3, [pc, #104]	@ (800dba0 <tcp_kill_state+0x80>)
 800db38:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800db3c:	4919      	ldr	r1, [pc, #100]	@ (800dba4 <tcp_kill_state+0x84>)
 800db3e:	481a      	ldr	r0, [pc, #104]	@ (800dba8 <tcp_kill_state+0x88>)
 800db40:	f009 ffba 	bl	8017ab8 <iprintf>

  inactivity = 0;
 800db44:	2300      	movs	r3, #0
 800db46:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800db48:	2300      	movs	r3, #0
 800db4a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db4c:	4b17      	ldr	r3, [pc, #92]	@ (800dbac <tcp_kill_state+0x8c>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	617b      	str	r3, [r7, #20]
 800db52:	e017      	b.n	800db84 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	7d1b      	ldrb	r3, [r3, #20]
 800db58:	79fa      	ldrb	r2, [r7, #7]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d10f      	bne.n	800db7e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800db5e:	4b14      	ldr	r3, [pc, #80]	@ (800dbb0 <tcp_kill_state+0x90>)
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	6a1b      	ldr	r3, [r3, #32]
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d807      	bhi.n	800db7e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800db6e:	4b10      	ldr	r3, [pc, #64]	@ (800dbb0 <tcp_kill_state+0x90>)
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	6a1b      	ldr	r3, [r3, #32]
 800db76:	1ad3      	subs	r3, r2, r3
 800db78:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	68db      	ldr	r3, [r3, #12]
 800db82:	617b      	str	r3, [r7, #20]
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d1e4      	bne.n	800db54 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d003      	beq.n	800db98 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800db90:	2100      	movs	r1, #0
 800db92:	6938      	ldr	r0, [r7, #16]
 800db94:	f7fe fe6e 	bl	800c874 <tcp_abandon>
  }
}
 800db98:	bf00      	nop
 800db9a:	3718      	adds	r7, #24
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	0801974c 	.word	0x0801974c
 800dba4:	08019cd8 	.word	0x08019cd8
 800dba8:	08019790 	.word	0x08019790
 800dbac:	24010584 	.word	0x24010584
 800dbb0:	24010578 	.word	0x24010578

0800dbb4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbc2:	4b12      	ldr	r3, [pc, #72]	@ (800dc0c <tcp_kill_timewait+0x58>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	60fb      	str	r3, [r7, #12]
 800dbc8:	e012      	b.n	800dbf0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dbca:	4b11      	ldr	r3, [pc, #68]	@ (800dc10 <tcp_kill_timewait+0x5c>)
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6a1b      	ldr	r3, [r3, #32]
 800dbd2:	1ad3      	subs	r3, r2, r3
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d807      	bhi.n	800dbea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dbda:	4b0d      	ldr	r3, [pc, #52]	@ (800dc10 <tcp_kill_timewait+0x5c>)
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	6a1b      	ldr	r3, [r3, #32]
 800dbe2:	1ad3      	subs	r3, r2, r3
 800dbe4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	60fb      	str	r3, [r7, #12]
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d1e9      	bne.n	800dbca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d002      	beq.n	800dc02 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dbfc:	68b8      	ldr	r0, [r7, #8]
 800dbfe:	f7fe fef9 	bl	800c9f4 <tcp_abort>
  }
}
 800dc02:	bf00      	nop
 800dc04:	3710      	adds	r7, #16
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	24010588 	.word	0x24010588
 800dc10:	24010578 	.word	0x24010578

0800dc14 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dc1a:	4b10      	ldr	r3, [pc, #64]	@ (800dc5c <tcp_handle_closepend+0x48>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dc20:	e014      	b.n	800dc4c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	8b5b      	ldrh	r3, [r3, #26]
 800dc2c:	f003 0308 	and.w	r3, r3, #8
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d009      	beq.n	800dc48 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	8b5b      	ldrh	r3, [r3, #26]
 800dc38:	f023 0308 	bic.w	r3, r3, #8
 800dc3c:	b29a      	uxth	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f7fe fd7e 	bl	800c744 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d1e7      	bne.n	800dc22 <tcp_handle_closepend+0xe>
  }
}
 800dc52:	bf00      	nop
 800dc54:	bf00      	nop
 800dc56:	3708      	adds	r7, #8
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	24010584 	.word	0x24010584

0800dc60 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	4603      	mov	r3, r0
 800dc68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 800dc6a:	f7f8 fb43 	bl	80062f4 <sys_check_core_locking>

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc6e:	2001      	movs	r0, #1
 800dc70:	f7fd f92e 	bl	800aed0 <memp_malloc>
 800dc74:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d126      	bne.n	800dcca <tcp_alloc+0x6a>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800dc7c:	f7ff ffca 	bl	800dc14 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dc80:	f7ff ff98 	bl	800dbb4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc84:	2001      	movs	r0, #1
 800dc86:	f7fd f923 	bl	800aed0 <memp_malloc>
 800dc8a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d11b      	bne.n	800dcca <tcp_alloc+0x6a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800dc92:	2009      	movs	r0, #9
 800dc94:	f7ff ff44 	bl	800db20 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc98:	2001      	movs	r0, #1
 800dc9a:	f7fd f919 	bl	800aed0 <memp_malloc>
 800dc9e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d111      	bne.n	800dcca <tcp_alloc+0x6a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800dca6:	2008      	movs	r0, #8
 800dca8:	f7ff ff3a 	bl	800db20 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dcac:	2001      	movs	r0, #1
 800dcae:	f7fd f90f 	bl	800aed0 <memp_malloc>
 800dcb2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d107      	bne.n	800dcca <tcp_alloc+0x6a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dcba:	79fb      	ldrb	r3, [r7, #7]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7ff fee1 	bl	800da84 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dcc2:	2001      	movs	r0, #1
 800dcc4:	f7fd f904 	bl	800aed0 <memp_malloc>
 800dcc8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d03f      	beq.n	800dd50 <tcp_alloc+0xf0>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dcd0:	229c      	movs	r2, #156	@ 0x9c
 800dcd2:	2100      	movs	r1, #0
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f009 ff54 	bl	8017b82 <memset>
    pcb->prio = prio;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	79fa      	ldrb	r2, [r7, #7]
 800dcde:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800dce6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800dcf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	22ff      	movs	r2, #255	@ 0xff
 800dcfe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800dd06:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2206      	movs	r2, #6
 800dd0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2206      	movs	r2, #6
 800dd14:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dd1c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2201      	movs	r2, #1
 800dd22:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800dd26:	4b0d      	ldr	r3, [pc, #52]	@ (800dd5c <tcp_alloc+0xfc>)
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dd2e:	4b0c      	ldr	r3, [pc, #48]	@ (800dd60 <tcp_alloc+0x100>)
 800dd30:	781a      	ldrb	r2, [r3, #0]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800dd3c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	4a08      	ldr	r2, [pc, #32]	@ (800dd64 <tcp_alloc+0x104>)
 800dd44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	4a07      	ldr	r2, [pc, #28]	@ (800dd68 <tcp_alloc+0x108>)
 800dd4c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dd50:	68fb      	ldr	r3, [r7, #12]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	24010578 	.word	0x24010578
 800dd60:	2401058e 	.word	0x2401058e
 800dd64:	0800da19 	.word	0x0800da19
 800dd68:	006ddd00 	.word	0x006ddd00

0800dd6c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	4603      	mov	r3, r0
 800dd74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800dd76:	2040      	movs	r0, #64	@ 0x40
 800dd78:	f7ff ff72 	bl	800dc60 <tcp_alloc>
 800dd7c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800dd92:	f7f8 faaf 	bl	80062f4 <sys_check_core_locking>
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d002      	beq.n	800dda2 <tcp_arg+0x1a>
    pcb->callback_arg = arg;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	683a      	ldr	r2, [r7, #0]
 800dda0:	611a      	str	r2, [r3, #16]
  }
}
 800dda2:	bf00      	nop
 800dda4:	3708      	adds	r7, #8
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
	...

0800ddac <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800ddb6:	f7f8 fa9d 	bl	80062f4 <sys_check_core_locking>
  if (pcb != NULL) {
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d00e      	beq.n	800ddde <tcp_recv+0x32>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	7d1b      	ldrb	r3, [r3, #20]
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d106      	bne.n	800ddd6 <tcp_recv+0x2a>
 800ddc8:	4b07      	ldr	r3, [pc, #28]	@ (800dde8 <tcp_recv+0x3c>)
 800ddca:	f240 72df 	movw	r2, #2015	@ 0x7df
 800ddce:	4907      	ldr	r1, [pc, #28]	@ (800ddec <tcp_recv+0x40>)
 800ddd0:	4807      	ldr	r0, [pc, #28]	@ (800ddf0 <tcp_recv+0x44>)
 800ddd2:	f009 fe71 	bl	8017ab8 <iprintf>
    pcb->recv = recv;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	683a      	ldr	r2, [r7, #0]
 800ddda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800ddde:	bf00      	nop
 800dde0:	3708      	adds	r7, #8
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
 800dde6:	bf00      	nop
 800dde8:	0801974c 	.word	0x0801974c
 800ddec:	08019ce8 	.word	0x08019ce8
 800ddf0:	08019790 	.word	0x08019790

0800ddf4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800ddfe:	f7f8 fa79 	bl	80062f4 <sys_check_core_locking>
  if (pcb != NULL) {
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d00e      	beq.n	800de26 <tcp_sent+0x32>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	7d1b      	ldrb	r3, [r3, #20]
 800de0c:	2b01      	cmp	r3, #1
 800de0e:	d106      	bne.n	800de1e <tcp_sent+0x2a>
 800de10:	4b07      	ldr	r3, [pc, #28]	@ (800de30 <tcp_sent+0x3c>)
 800de12:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800de16:	4907      	ldr	r1, [pc, #28]	@ (800de34 <tcp_sent+0x40>)
 800de18:	4807      	ldr	r0, [pc, #28]	@ (800de38 <tcp_sent+0x44>)
 800de1a:	f009 fe4d 	bl	8017ab8 <iprintf>
    pcb->sent = sent;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	683a      	ldr	r2, [r7, #0]
 800de22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800de26:	bf00      	nop
 800de28:	3708      	adds	r7, #8
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	0801974c 	.word	0x0801974c
 800de34:	08019d10 	.word	0x08019d10
 800de38:	08019790 	.word	0x08019790

0800de3c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800de46:	f7f8 fa55 	bl	80062f4 <sys_check_core_locking>
  if (pcb != NULL) {
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d00e      	beq.n	800de6e <tcp_err+0x32>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	7d1b      	ldrb	r3, [r3, #20]
 800de54:	2b01      	cmp	r3, #1
 800de56:	d106      	bne.n	800de66 <tcp_err+0x2a>
 800de58:	4b07      	ldr	r3, [pc, #28]	@ (800de78 <tcp_err+0x3c>)
 800de5a:	f640 020d 	movw	r2, #2061	@ 0x80d
 800de5e:	4907      	ldr	r1, [pc, #28]	@ (800de7c <tcp_err+0x40>)
 800de60:	4807      	ldr	r0, [pc, #28]	@ (800de80 <tcp_err+0x44>)
 800de62:	f009 fe29 	bl	8017ab8 <iprintf>
    pcb->errf = err;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	683a      	ldr	r2, [r7, #0]
 800de6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800de6e:	bf00      	nop
 800de70:	3708      	adds	r7, #8
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	0801974c 	.word	0x0801974c
 800de7c:	08019d38 	.word	0x08019d38
 800de80:	08019790 	.word	0x08019790

0800de84 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800de8e:	f7f8 fa31 	bl	80062f4 <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d008      	beq.n	800deaa <tcp_accept+0x26>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	7d1b      	ldrb	r3, [r3, #20]
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d104      	bne.n	800deaa <tcp_accept+0x26>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	683a      	ldr	r2, [r7, #0]
 800dea8:	619a      	str	r2, [r3, #24]
  }
}
 800deaa:	bf00      	nop
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
	...

0800deb4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	4613      	mov	r3, r2
 800dec0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
 800dec2:	f7f8 fa17 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d107      	bne.n	800dedc <tcp_poll+0x28>
 800decc:	4b0e      	ldr	r3, [pc, #56]	@ (800df08 <tcp_poll+0x54>)
 800dece:	f640 023d 	movw	r2, #2109	@ 0x83d
 800ded2:	490e      	ldr	r1, [pc, #56]	@ (800df0c <tcp_poll+0x58>)
 800ded4:	480e      	ldr	r0, [pc, #56]	@ (800df10 <tcp_poll+0x5c>)
 800ded6:	f009 fdef 	bl	8017ab8 <iprintf>
 800deda:	e011      	b.n	800df00 <tcp_poll+0x4c>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	7d1b      	ldrb	r3, [r3, #20]
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d106      	bne.n	800def2 <tcp_poll+0x3e>
 800dee4:	4b08      	ldr	r3, [pc, #32]	@ (800df08 <tcp_poll+0x54>)
 800dee6:	f640 023e 	movw	r2, #2110	@ 0x83e
 800deea:	490a      	ldr	r1, [pc, #40]	@ (800df14 <tcp_poll+0x60>)
 800deec:	4808      	ldr	r0, [pc, #32]	@ (800df10 <tcp_poll+0x5c>)
 800deee:	f009 fde3 	bl	8017ab8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	68ba      	ldr	r2, [r7, #8]
 800def6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	79fa      	ldrb	r2, [r7, #7]
 800defe:	775a      	strb	r2, [r3, #29]
}
 800df00:	3710      	adds	r7, #16
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	0801974c 	.word	0x0801974c
 800df0c:	08019d60 	.word	0x08019d60
 800df10:	08019790 	.word	0x08019790
 800df14:	08019d78 	.word	0x08019d78

0800df18 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d107      	bne.n	800df36 <tcp_pcb_purge+0x1e>
 800df26:	4b21      	ldr	r3, [pc, #132]	@ (800dfac <tcp_pcb_purge+0x94>)
 800df28:	f640 0251 	movw	r2, #2129	@ 0x851
 800df2c:	4920      	ldr	r1, [pc, #128]	@ (800dfb0 <tcp_pcb_purge+0x98>)
 800df2e:	4821      	ldr	r0, [pc, #132]	@ (800dfb4 <tcp_pcb_purge+0x9c>)
 800df30:	f009 fdc2 	bl	8017ab8 <iprintf>
 800df34:	e037      	b.n	800dfa6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	7d1b      	ldrb	r3, [r3, #20]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d033      	beq.n	800dfa6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800df42:	2b0a      	cmp	r3, #10
 800df44:	d02f      	beq.n	800dfa6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d02b      	beq.n	800dfa6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df52:	2b00      	cmp	r3, #0
 800df54:	d007      	beq.n	800df66 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7fd feea 	bl	800bd34 <pbuf_free>
      pcb->refused_data = NULL;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d002      	beq.n	800df74 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 f986 	bl	800e280 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df7a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df80:	4618      	mov	r0, r3
 800df82:	f7ff fcef 	bl	800d964 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7ff fcea 	bl	800d964 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	66da      	str	r2, [r3, #108]	@ 0x6c
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	0801974c 	.word	0x0801974c
 800dfb0:	08019d98 	.word	0x08019d98
 800dfb4:	08019790 	.word	0x08019790

0800dfb8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b084      	sub	sp, #16
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d106      	bne.n	800dfd6 <tcp_pcb_remove+0x1e>
 800dfc8:	4b3e      	ldr	r3, [pc, #248]	@ (800e0c4 <tcp_pcb_remove+0x10c>)
 800dfca:	f640 0283 	movw	r2, #2179	@ 0x883
 800dfce:	493e      	ldr	r1, [pc, #248]	@ (800e0c8 <tcp_pcb_remove+0x110>)
 800dfd0:	483e      	ldr	r0, [pc, #248]	@ (800e0cc <tcp_pcb_remove+0x114>)
 800dfd2:	f009 fd71 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d106      	bne.n	800dfea <tcp_pcb_remove+0x32>
 800dfdc:	4b39      	ldr	r3, [pc, #228]	@ (800e0c4 <tcp_pcb_remove+0x10c>)
 800dfde:	f640 0284 	movw	r2, #2180	@ 0x884
 800dfe2:	493b      	ldr	r1, [pc, #236]	@ (800e0d0 <tcp_pcb_remove+0x118>)
 800dfe4:	4839      	ldr	r0, [pc, #228]	@ (800e0cc <tcp_pcb_remove+0x114>)
 800dfe6:	f009 fd67 	bl	8017ab8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	683a      	ldr	r2, [r7, #0]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d105      	bne.n	800e000 <tcp_pcb_remove+0x48>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	68da      	ldr	r2, [r3, #12]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	601a      	str	r2, [r3, #0]
 800dffe:	e013      	b.n	800e028 <tcp_pcb_remove+0x70>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	60fb      	str	r3, [r7, #12]
 800e006:	e00c      	b.n	800e022 <tcp_pcb_remove+0x6a>
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	683a      	ldr	r2, [r7, #0]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d104      	bne.n	800e01c <tcp_pcb_remove+0x64>
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	68da      	ldr	r2, [r3, #12]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	60da      	str	r2, [r3, #12]
 800e01a:	e005      	b.n	800e028 <tcp_pcb_remove+0x70>
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	60fb      	str	r3, [r7, #12]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d1ef      	bne.n	800e008 <tcp_pcb_remove+0x50>
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	2200      	movs	r2, #0
 800e02c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e02e:	6838      	ldr	r0, [r7, #0]
 800e030:	f7ff ff72 	bl	800df18 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	7d1b      	ldrb	r3, [r3, #20]
 800e038:	2b0a      	cmp	r3, #10
 800e03a:	d013      	beq.n	800e064 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e040:	2b01      	cmp	r3, #1
 800e042:	d00f      	beq.n	800e064 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	8b5b      	ldrh	r3, [r3, #26]
 800e048:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d009      	beq.n	800e064 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	8b5b      	ldrh	r3, [r3, #26]
 800e054:	f043 0302 	orr.w	r3, r3, #2
 800e058:	b29a      	uxth	r2, r3
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e05e:	6838      	ldr	r0, [r7, #0]
 800e060:	f003 fbc6 	bl	80117f0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	7d1b      	ldrb	r3, [r3, #20]
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d020      	beq.n	800e0ae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e070:	2b00      	cmp	r3, #0
 800e072:	d006      	beq.n	800e082 <tcp_pcb_remove+0xca>
 800e074:	4b13      	ldr	r3, [pc, #76]	@ (800e0c4 <tcp_pcb_remove+0x10c>)
 800e076:	f640 0293 	movw	r2, #2195	@ 0x893
 800e07a:	4916      	ldr	r1, [pc, #88]	@ (800e0d4 <tcp_pcb_remove+0x11c>)
 800e07c:	4813      	ldr	r0, [pc, #76]	@ (800e0cc <tcp_pcb_remove+0x114>)
 800e07e:	f009 fd1b 	bl	8017ab8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e086:	2b00      	cmp	r3, #0
 800e088:	d006      	beq.n	800e098 <tcp_pcb_remove+0xe0>
 800e08a:	4b0e      	ldr	r3, [pc, #56]	@ (800e0c4 <tcp_pcb_remove+0x10c>)
 800e08c:	f640 0294 	movw	r2, #2196	@ 0x894
 800e090:	4911      	ldr	r1, [pc, #68]	@ (800e0d8 <tcp_pcb_remove+0x120>)
 800e092:	480e      	ldr	r0, [pc, #56]	@ (800e0cc <tcp_pcb_remove+0x114>)
 800e094:	f009 fd10 	bl	8017ab8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d006      	beq.n	800e0ae <tcp_pcb_remove+0xf6>
 800e0a0:	4b08      	ldr	r3, [pc, #32]	@ (800e0c4 <tcp_pcb_remove+0x10c>)
 800e0a2:	f640 0296 	movw	r2, #2198	@ 0x896
 800e0a6:	490d      	ldr	r1, [pc, #52]	@ (800e0dc <tcp_pcb_remove+0x124>)
 800e0a8:	4808      	ldr	r0, [pc, #32]	@ (800e0cc <tcp_pcb_remove+0x114>)
 800e0aa:	f009 fd05 	bl	8017ab8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e0ba:	bf00      	nop
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	0801974c 	.word	0x0801974c
 800e0c8:	08019db4 	.word	0x08019db4
 800e0cc:	08019790 	.word	0x08019790
 800e0d0:	08019dd0 	.word	0x08019dd0
 800e0d4:	08019df0 	.word	0x08019df0
 800e0d8:	08019e08 	.word	0x08019e08
 800e0dc:	08019e24 	.word	0x08019e24

0800e0e0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d106      	bne.n	800e0fc <tcp_next_iss+0x1c>
 800e0ee:	4b0a      	ldr	r3, [pc, #40]	@ (800e118 <tcp_next_iss+0x38>)
 800e0f0:	f640 02af 	movw	r2, #2223	@ 0x8af
 800e0f4:	4909      	ldr	r1, [pc, #36]	@ (800e11c <tcp_next_iss+0x3c>)
 800e0f6:	480a      	ldr	r0, [pc, #40]	@ (800e120 <tcp_next_iss+0x40>)
 800e0f8:	f009 fcde 	bl	8017ab8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e0fc:	4b09      	ldr	r3, [pc, #36]	@ (800e124 <tcp_next_iss+0x44>)
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	4b09      	ldr	r3, [pc, #36]	@ (800e128 <tcp_next_iss+0x48>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4413      	add	r3, r2
 800e106:	4a07      	ldr	r2, [pc, #28]	@ (800e124 <tcp_next_iss+0x44>)
 800e108:	6013      	str	r3, [r2, #0]
  return iss;
 800e10a:	4b06      	ldr	r3, [pc, #24]	@ (800e124 <tcp_next_iss+0x44>)
 800e10c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3708      	adds	r7, #8
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
 800e116:	bf00      	nop
 800e118:	0801974c 	.word	0x0801974c
 800e11c:	08019e3c 	.word	0x08019e3c
 800e120:	08019790 	.word	0x08019790
 800e124:	24000038 	.word	0x24000038
 800e128:	24010578 	.word	0x24010578

0800e12c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b086      	sub	sp, #24
 800e130:	af00      	add	r7, sp, #0
 800e132:	4603      	mov	r3, r0
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	607a      	str	r2, [r7, #4]
 800e138:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d106      	bne.n	800e14e <tcp_eff_send_mss_netif+0x22>
 800e140:	4b14      	ldr	r3, [pc, #80]	@ (800e194 <tcp_eff_send_mss_netif+0x68>)
 800e142:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800e146:	4914      	ldr	r1, [pc, #80]	@ (800e198 <tcp_eff_send_mss_netif+0x6c>)
 800e148:	4814      	ldr	r0, [pc, #80]	@ (800e19c <tcp_eff_send_mss_netif+0x70>)
 800e14a:	f009 fcb5 	bl	8017ab8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d101      	bne.n	800e158 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e154:	89fb      	ldrh	r3, [r7, #14]
 800e156:	e019      	b.n	800e18c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e15c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e15e:	8afb      	ldrh	r3, [r7, #22]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d012      	beq.n	800e18a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e164:	2328      	movs	r3, #40	@ 0x28
 800e166:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e168:	8afa      	ldrh	r2, [r7, #22]
 800e16a:	8abb      	ldrh	r3, [r7, #20]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d904      	bls.n	800e17a <tcp_eff_send_mss_netif+0x4e>
 800e170:	8afa      	ldrh	r2, [r7, #22]
 800e172:	8abb      	ldrh	r3, [r7, #20]
 800e174:	1ad3      	subs	r3, r2, r3
 800e176:	b29b      	uxth	r3, r3
 800e178:	e000      	b.n	800e17c <tcp_eff_send_mss_netif+0x50>
 800e17a:	2300      	movs	r3, #0
 800e17c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e17e:	8a7a      	ldrh	r2, [r7, #18]
 800e180:	89fb      	ldrh	r3, [r7, #14]
 800e182:	4293      	cmp	r3, r2
 800e184:	bf28      	it	cs
 800e186:	4613      	movcs	r3, r2
 800e188:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e18a:	89fb      	ldrh	r3, [r7, #14]
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3718      	adds	r7, #24
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	0801974c 	.word	0x0801974c
 800e198:	08019e58 	.word	0x08019e58
 800e19c:	08019790 	.word	0x08019790

0800e1a0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d119      	bne.n	800e1e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e1b4:	4b10      	ldr	r3, [pc, #64]	@ (800e1f8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e1b6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800e1ba:	4910      	ldr	r1, [pc, #64]	@ (800e1fc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e1bc:	4810      	ldr	r0, [pc, #64]	@ (800e200 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e1be:	f009 fc7b 	bl	8017ab8 <iprintf>

  while (pcb != NULL) {
 800e1c2:	e011      	b.n	800e1e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d108      	bne.n	800e1e2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e1d6:	68f8      	ldr	r0, [r7, #12]
 800e1d8:	f7fe fc0c 	bl	800c9f4 <tcp_abort>
      pcb = next;
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	60fb      	str	r3, [r7, #12]
 800e1e0:	e002      	b.n	800e1e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d1ea      	bne.n	800e1c4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e1ee:	bf00      	nop
 800e1f0:	bf00      	nop
 800e1f2:	3710      	adds	r7, #16
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	0801974c 	.word	0x0801974c
 800e1fc:	08019e80 	.word	0x08019e80
 800e200:	08019790 	.word	0x08019790

0800e204 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d02a      	beq.n	800e26a <tcp_netif_ip_addr_changed+0x66>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d026      	beq.n	800e26a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e21c:	4b15      	ldr	r3, [pc, #84]	@ (800e274 <tcp_netif_ip_addr_changed+0x70>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4619      	mov	r1, r3
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f7ff ffbc 	bl	800e1a0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e228:	4b13      	ldr	r3, [pc, #76]	@ (800e278 <tcp_netif_ip_addr_changed+0x74>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4619      	mov	r1, r3
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f7ff ffb6 	bl	800e1a0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d017      	beq.n	800e26a <tcp_netif_ip_addr_changed+0x66>
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d013      	beq.n	800e26a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e242:	4b0e      	ldr	r3, [pc, #56]	@ (800e27c <tcp_netif_ip_addr_changed+0x78>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	60fb      	str	r3, [r7, #12]
 800e248:	e00c      	b.n	800e264 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	429a      	cmp	r2, r3
 800e254:	d103      	bne.n	800e25e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	68db      	ldr	r3, [r3, #12]
 800e262:	60fb      	str	r3, [r7, #12]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1ef      	bne.n	800e24a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e26a:	bf00      	nop
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	24010584 	.word	0x24010584
 800e278:	2401057c 	.word	0x2401057c
 800e27c:	24010580 	.word	0x24010580

0800e280 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d007      	beq.n	800e2a0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e294:	4618      	mov	r0, r3
 800e296:	f7ff fb65 	bl	800d964 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2200      	movs	r2, #0
 800e29e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e2a0:	bf00      	nop
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e2a8:	b590      	push	{r4, r7, lr}
 800e2aa:	b08d      	sub	sp, #52	@ 0x34
 800e2ac:	af04      	add	r7, sp, #16
 800e2ae:	6078      	str	r0, [r7, #4]
 800e2b0:	6039      	str	r1, [r7, #0]
#endif /* SO_REUSE */
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
 800e2b2:	f7f8 f81f 	bl	80062f4 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d105      	bne.n	800e2c8 <tcp_input+0x20>
 800e2bc:	4b9b      	ldr	r3, [pc, #620]	@ (800e52c <tcp_input+0x284>)
 800e2be:	2283      	movs	r2, #131	@ 0x83
 800e2c0:	499b      	ldr	r1, [pc, #620]	@ (800e530 <tcp_input+0x288>)
 800e2c2:	489c      	ldr	r0, [pc, #624]	@ (800e534 <tcp_input+0x28c>)
 800e2c4:	f009 fbf8 	bl	8017ab8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	4a9a      	ldr	r2, [pc, #616]	@ (800e538 <tcp_input+0x290>)
 800e2ce:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	895b      	ldrh	r3, [r3, #10]
 800e2d4:	2b13      	cmp	r3, #19
 800e2d6:	f240 83d1 	bls.w	800ea7c <tcp_input+0x7d4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e2da:	4b98      	ldr	r3, [pc, #608]	@ (800e53c <tcp_input+0x294>)
 800e2dc:	695b      	ldr	r3, [r3, #20]
 800e2de:	4a97      	ldr	r2, [pc, #604]	@ (800e53c <tcp_input+0x294>)
 800e2e0:	6812      	ldr	r2, [r2, #0]
 800e2e2:	4611      	mov	r1, r2
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f008 fa9b 	bl	8016820 <ip4_addr_isbroadcast_u32>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	f040 83c7 	bne.w	800ea80 <tcp_input+0x7d8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e2f2:	4b92      	ldr	r3, [pc, #584]	@ (800e53c <tcp_input+0x294>)
 800e2f4:	695b      	ldr	r3, [r3, #20]
 800e2f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e2fa:	2be0      	cmp	r3, #224	@ 0xe0
 800e2fc:	f000 83c0 	beq.w	800ea80 <tcp_input+0x7d8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e300:	4b8d      	ldr	r3, [pc, #564]	@ (800e538 <tcp_input+0x290>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	899b      	ldrh	r3, [r3, #12]
 800e306:	b29b      	uxth	r3, r3
 800e308:	4618      	mov	r0, r3
 800e30a:	f7fc f863 	bl	800a3d4 <lwip_htons>
 800e30e:	4603      	mov	r3, r0
 800e310:	0b1b      	lsrs	r3, r3, #12
 800e312:	b29b      	uxth	r3, r3
 800e314:	b2db      	uxtb	r3, r3
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e31a:	7cbb      	ldrb	r3, [r7, #18]
 800e31c:	2b13      	cmp	r3, #19
 800e31e:	f240 83b1 	bls.w	800ea84 <tcp_input+0x7dc>
 800e322:	7cbb      	ldrb	r3, [r7, #18]
 800e324:	b29a      	uxth	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	891b      	ldrh	r3, [r3, #8]
 800e32a:	429a      	cmp	r2, r3
 800e32c:	f200 83aa 	bhi.w	800ea84 <tcp_input+0x7dc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e330:	7cbb      	ldrb	r3, [r7, #18]
 800e332:	b29b      	uxth	r3, r3
 800e334:	3b14      	subs	r3, #20
 800e336:	b29a      	uxth	r2, r3
 800e338:	4b81      	ldr	r3, [pc, #516]	@ (800e540 <tcp_input+0x298>)
 800e33a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e33c:	4b81      	ldr	r3, [pc, #516]	@ (800e544 <tcp_input+0x29c>)
 800e33e:	2200      	movs	r2, #0
 800e340:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	895a      	ldrh	r2, [r3, #10]
 800e346:	7cbb      	ldrb	r3, [r7, #18]
 800e348:	b29b      	uxth	r3, r3
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d309      	bcc.n	800e362 <tcp_input+0xba>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e34e:	4b7c      	ldr	r3, [pc, #496]	@ (800e540 <tcp_input+0x298>)
 800e350:	881a      	ldrh	r2, [r3, #0]
 800e352:	4b7d      	ldr	r3, [pc, #500]	@ (800e548 <tcp_input+0x2a0>)
 800e354:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e356:	7cbb      	ldrb	r3, [r7, #18]
 800e358:	4619      	mov	r1, r3
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f7fd fc64 	bl	800bc28 <pbuf_remove_header>
 800e360:	e04e      	b.n	800e400 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d105      	bne.n	800e376 <tcp_input+0xce>
 800e36a:	4b70      	ldr	r3, [pc, #448]	@ (800e52c <tcp_input+0x284>)
 800e36c:	22c2      	movs	r2, #194	@ 0xc2
 800e36e:	4977      	ldr	r1, [pc, #476]	@ (800e54c <tcp_input+0x2a4>)
 800e370:	4870      	ldr	r0, [pc, #448]	@ (800e534 <tcp_input+0x28c>)
 800e372:	f009 fba1 	bl	8017ab8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e376:	2114      	movs	r1, #20
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7fd fc55 	bl	800bc28 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	895a      	ldrh	r2, [r3, #10]
 800e382:	4b71      	ldr	r3, [pc, #452]	@ (800e548 <tcp_input+0x2a0>)
 800e384:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e386:	4b6e      	ldr	r3, [pc, #440]	@ (800e540 <tcp_input+0x298>)
 800e388:	881a      	ldrh	r2, [r3, #0]
 800e38a:	4b6f      	ldr	r3, [pc, #444]	@ (800e548 <tcp_input+0x2a0>)
 800e38c:	881b      	ldrh	r3, [r3, #0]
 800e38e:	1ad3      	subs	r3, r2, r3
 800e390:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e392:	4b6d      	ldr	r3, [pc, #436]	@ (800e548 <tcp_input+0x2a0>)
 800e394:	881b      	ldrh	r3, [r3, #0]
 800e396:	4619      	mov	r1, r3
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f7fd fc45 	bl	800bc28 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	895b      	ldrh	r3, [r3, #10]
 800e3a4:	8a3a      	ldrh	r2, [r7, #16]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	f200 836e 	bhi.w	800ea88 <tcp_input+0x7e0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	4a64      	ldr	r2, [pc, #400]	@ (800e544 <tcp_input+0x29c>)
 800e3b4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	8a3a      	ldrh	r2, [r7, #16]
 800e3bc:	4611      	mov	r1, r2
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7fd fc32 	bl	800bc28 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	891a      	ldrh	r2, [r3, #8]
 800e3c8:	8a3b      	ldrh	r3, [r7, #16]
 800e3ca:	1ad3      	subs	r3, r2, r3
 800e3cc:	b29a      	uxth	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	895b      	ldrh	r3, [r3, #10]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d005      	beq.n	800e3e6 <tcp_input+0x13e>
 800e3da:	4b54      	ldr	r3, [pc, #336]	@ (800e52c <tcp_input+0x284>)
 800e3dc:	22df      	movs	r2, #223	@ 0xdf
 800e3de:	495c      	ldr	r1, [pc, #368]	@ (800e550 <tcp_input+0x2a8>)
 800e3e0:	4854      	ldr	r0, [pc, #336]	@ (800e534 <tcp_input+0x28c>)
 800e3e2:	f009 fb69 	bl	8017ab8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	891a      	ldrh	r2, [r3, #8]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	891b      	ldrh	r3, [r3, #8]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d005      	beq.n	800e400 <tcp_input+0x158>
 800e3f4:	4b4d      	ldr	r3, [pc, #308]	@ (800e52c <tcp_input+0x284>)
 800e3f6:	22e0      	movs	r2, #224	@ 0xe0
 800e3f8:	4956      	ldr	r1, [pc, #344]	@ (800e554 <tcp_input+0x2ac>)
 800e3fa:	484e      	ldr	r0, [pc, #312]	@ (800e534 <tcp_input+0x28c>)
 800e3fc:	f009 fb5c 	bl	8017ab8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e400:	4b4d      	ldr	r3, [pc, #308]	@ (800e538 <tcp_input+0x290>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	881b      	ldrh	r3, [r3, #0]
 800e406:	b29b      	uxth	r3, r3
 800e408:	4a4b      	ldr	r2, [pc, #300]	@ (800e538 <tcp_input+0x290>)
 800e40a:	6814      	ldr	r4, [r2, #0]
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fb ffe1 	bl	800a3d4 <lwip_htons>
 800e412:	4603      	mov	r3, r0
 800e414:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e416:	4b48      	ldr	r3, [pc, #288]	@ (800e538 <tcp_input+0x290>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	885b      	ldrh	r3, [r3, #2]
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	4a46      	ldr	r2, [pc, #280]	@ (800e538 <tcp_input+0x290>)
 800e420:	6814      	ldr	r4, [r2, #0]
 800e422:	4618      	mov	r0, r3
 800e424:	f7fb ffd6 	bl	800a3d4 <lwip_htons>
 800e428:	4603      	mov	r3, r0
 800e42a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e42c:	4b42      	ldr	r3, [pc, #264]	@ (800e538 <tcp_input+0x290>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	4a41      	ldr	r2, [pc, #260]	@ (800e538 <tcp_input+0x290>)
 800e434:	6814      	ldr	r4, [r2, #0]
 800e436:	4618      	mov	r0, r3
 800e438:	f7fb ffe1 	bl	800a3fe <lwip_htonl>
 800e43c:	4603      	mov	r3, r0
 800e43e:	6063      	str	r3, [r4, #4]
 800e440:	6863      	ldr	r3, [r4, #4]
 800e442:	4a45      	ldr	r2, [pc, #276]	@ (800e558 <tcp_input+0x2b0>)
 800e444:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e446:	4b3c      	ldr	r3, [pc, #240]	@ (800e538 <tcp_input+0x290>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	689b      	ldr	r3, [r3, #8]
 800e44c:	4a3a      	ldr	r2, [pc, #232]	@ (800e538 <tcp_input+0x290>)
 800e44e:	6814      	ldr	r4, [r2, #0]
 800e450:	4618      	mov	r0, r3
 800e452:	f7fb ffd4 	bl	800a3fe <lwip_htonl>
 800e456:	4603      	mov	r3, r0
 800e458:	60a3      	str	r3, [r4, #8]
 800e45a:	68a3      	ldr	r3, [r4, #8]
 800e45c:	4a3f      	ldr	r2, [pc, #252]	@ (800e55c <tcp_input+0x2b4>)
 800e45e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e460:	4b35      	ldr	r3, [pc, #212]	@ (800e538 <tcp_input+0x290>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	89db      	ldrh	r3, [r3, #14]
 800e466:	b29b      	uxth	r3, r3
 800e468:	4a33      	ldr	r2, [pc, #204]	@ (800e538 <tcp_input+0x290>)
 800e46a:	6814      	ldr	r4, [r2, #0]
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fb ffb1 	bl	800a3d4 <lwip_htons>
 800e472:	4603      	mov	r3, r0
 800e474:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e476:	4b30      	ldr	r3, [pc, #192]	@ (800e538 <tcp_input+0x290>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	899b      	ldrh	r3, [r3, #12]
 800e47c:	b29b      	uxth	r3, r3
 800e47e:	4618      	mov	r0, r3
 800e480:	f7fb ffa8 	bl	800a3d4 <lwip_htons>
 800e484:	4603      	mov	r3, r0
 800e486:	b2db      	uxtb	r3, r3
 800e488:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e48c:	b2da      	uxtb	r2, r3
 800e48e:	4b34      	ldr	r3, [pc, #208]	@ (800e560 <tcp_input+0x2b8>)
 800e490:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	891a      	ldrh	r2, [r3, #8]
 800e496:	4b33      	ldr	r3, [pc, #204]	@ (800e564 <tcp_input+0x2bc>)
 800e498:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e49a:	4b31      	ldr	r3, [pc, #196]	@ (800e560 <tcp_input+0x2b8>)
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	f003 0303 	and.w	r3, r3, #3
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00c      	beq.n	800e4c0 <tcp_input+0x218>
    tcplen++;
 800e4a6:	4b2f      	ldr	r3, [pc, #188]	@ (800e564 <tcp_input+0x2bc>)
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	b29a      	uxth	r2, r3
 800e4ae:	4b2d      	ldr	r3, [pc, #180]	@ (800e564 <tcp_input+0x2bc>)
 800e4b0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	891a      	ldrh	r2, [r3, #8]
 800e4b6:	4b2b      	ldr	r3, [pc, #172]	@ (800e564 <tcp_input+0x2bc>)
 800e4b8:	881b      	ldrh	r3, [r3, #0]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	f200 82e6 	bhi.w	800ea8c <tcp_input+0x7e4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4c4:	4b28      	ldr	r3, [pc, #160]	@ (800e568 <tcp_input+0x2c0>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	61fb      	str	r3, [r7, #28]
 800e4ca:	e09d      	b.n	800e608 <tcp_input+0x360>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	7d1b      	ldrb	r3, [r3, #20]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d105      	bne.n	800e4e0 <tcp_input+0x238>
 800e4d4:	4b15      	ldr	r3, [pc, #84]	@ (800e52c <tcp_input+0x284>)
 800e4d6:	22fb      	movs	r2, #251	@ 0xfb
 800e4d8:	4924      	ldr	r1, [pc, #144]	@ (800e56c <tcp_input+0x2c4>)
 800e4da:	4816      	ldr	r0, [pc, #88]	@ (800e534 <tcp_input+0x28c>)
 800e4dc:	f009 faec 	bl	8017ab8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	7d1b      	ldrb	r3, [r3, #20]
 800e4e4:	2b0a      	cmp	r3, #10
 800e4e6:	d105      	bne.n	800e4f4 <tcp_input+0x24c>
 800e4e8:	4b10      	ldr	r3, [pc, #64]	@ (800e52c <tcp_input+0x284>)
 800e4ea:	22fc      	movs	r2, #252	@ 0xfc
 800e4ec:	4920      	ldr	r1, [pc, #128]	@ (800e570 <tcp_input+0x2c8>)
 800e4ee:	4811      	ldr	r0, [pc, #68]	@ (800e534 <tcp_input+0x28c>)
 800e4f0:	f009 fae2 	bl	8017ab8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	7d1b      	ldrb	r3, [r3, #20]
 800e4f8:	2b01      	cmp	r3, #1
 800e4fa:	d105      	bne.n	800e508 <tcp_input+0x260>
 800e4fc:	4b0b      	ldr	r3, [pc, #44]	@ (800e52c <tcp_input+0x284>)
 800e4fe:	22fd      	movs	r2, #253	@ 0xfd
 800e500:	491c      	ldr	r1, [pc, #112]	@ (800e574 <tcp_input+0x2cc>)
 800e502:	480c      	ldr	r0, [pc, #48]	@ (800e534 <tcp_input+0x28c>)
 800e504:	f009 fad8 	bl	8017ab8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	7a1b      	ldrb	r3, [r3, #8]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d033      	beq.n	800e578 <tcp_input+0x2d0>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e510:	69fb      	ldr	r3, [r7, #28]
 800e512:	7a1a      	ldrb	r2, [r3, #8]
 800e514:	4b09      	ldr	r3, [pc, #36]	@ (800e53c <tcp_input+0x294>)
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e51c:	3301      	adds	r3, #1
 800e51e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e520:	429a      	cmp	r2, r3
 800e522:	d029      	beq.n	800e578 <tcp_input+0x2d0>
      prev = pcb;
 800e524:	69fb      	ldr	r3, [r7, #28]
 800e526:	61bb      	str	r3, [r7, #24]
      continue;
 800e528:	e06b      	b.n	800e602 <tcp_input+0x35a>
 800e52a:	bf00      	nop
 800e52c:	08019eb4 	.word	0x08019eb4
 800e530:	08019ee8 	.word	0x08019ee8
 800e534:	08019f00 	.word	0x08019f00
 800e538:	240105a0 	.word	0x240105a0
 800e53c:	24009a98 	.word	0x24009a98
 800e540:	240105a4 	.word	0x240105a4
 800e544:	240105a8 	.word	0x240105a8
 800e548:	240105a6 	.word	0x240105a6
 800e54c:	08019f28 	.word	0x08019f28
 800e550:	08019f38 	.word	0x08019f38
 800e554:	08019f44 	.word	0x08019f44
 800e558:	240105b0 	.word	0x240105b0
 800e55c:	240105b4 	.word	0x240105b4
 800e560:	240105bc 	.word	0x240105bc
 800e564:	240105ba 	.word	0x240105ba
 800e568:	24010584 	.word	0x24010584
 800e56c:	08019f64 	.word	0x08019f64
 800e570:	08019f8c 	.word	0x08019f8c
 800e574:	08019fb8 	.word	0x08019fb8
    }

    if (pcb->remote_port == tcphdr->src &&
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	8b1a      	ldrh	r2, [r3, #24]
 800e57c:	4b72      	ldr	r3, [pc, #456]	@ (800e748 <tcp_input+0x4a0>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	881b      	ldrh	r3, [r3, #0]
 800e582:	b29b      	uxth	r3, r3
 800e584:	429a      	cmp	r2, r3
 800e586:	d13a      	bne.n	800e5fe <tcp_input+0x356>
        pcb->local_port == tcphdr->dest &&
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	8ada      	ldrh	r2, [r3, #22]
 800e58c:	4b6e      	ldr	r3, [pc, #440]	@ (800e748 <tcp_input+0x4a0>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	885b      	ldrh	r3, [r3, #2]
 800e592:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e594:	429a      	cmp	r2, r3
 800e596:	d132      	bne.n	800e5fe <tcp_input+0x356>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	685a      	ldr	r2, [r3, #4]
 800e59c:	4b6b      	ldr	r3, [pc, #428]	@ (800e74c <tcp_input+0x4a4>)
 800e59e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d12c      	bne.n	800e5fe <tcp_input+0x356>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	681a      	ldr	r2, [r3, #0]
 800e5a8:	4b68      	ldr	r3, [pc, #416]	@ (800e74c <tcp_input+0x4a4>)
 800e5aa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d126      	bne.n	800e5fe <tcp_input+0x356>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	69fa      	ldr	r2, [r7, #28]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d106      	bne.n	800e5c8 <tcp_input+0x320>
 800e5ba:	4b65      	ldr	r3, [pc, #404]	@ (800e750 <tcp_input+0x4a8>)
 800e5bc:	f240 120d 	movw	r2, #269	@ 0x10d
 800e5c0:	4964      	ldr	r1, [pc, #400]	@ (800e754 <tcp_input+0x4ac>)
 800e5c2:	4865      	ldr	r0, [pc, #404]	@ (800e758 <tcp_input+0x4b0>)
 800e5c4:	f009 fa78 	bl	8017ab8 <iprintf>
      if (prev != NULL) {
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00a      	beq.n	800e5e4 <tcp_input+0x33c>
        prev->next = pcb->next;
 800e5ce:	69fb      	ldr	r3, [r7, #28]
 800e5d0:	68da      	ldr	r2, [r3, #12]
 800e5d2:	69bb      	ldr	r3, [r7, #24]
 800e5d4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e5d6:	4b61      	ldr	r3, [pc, #388]	@ (800e75c <tcp_input+0x4b4>)
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e5de:	4a5f      	ldr	r2, [pc, #380]	@ (800e75c <tcp_input+0x4b4>)
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e5e4:	69fb      	ldr	r3, [r7, #28]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	69fa      	ldr	r2, [r7, #28]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d111      	bne.n	800e612 <tcp_input+0x36a>
 800e5ee:	4b58      	ldr	r3, [pc, #352]	@ (800e750 <tcp_input+0x4a8>)
 800e5f0:	f240 1215 	movw	r2, #277	@ 0x115
 800e5f4:	495a      	ldr	r1, [pc, #360]	@ (800e760 <tcp_input+0x4b8>)
 800e5f6:	4858      	ldr	r0, [pc, #352]	@ (800e758 <tcp_input+0x4b0>)
 800e5f8:	f009 fa5e 	bl	8017ab8 <iprintf>
      break;
 800e5fc:	e009      	b.n	800e612 <tcp_input+0x36a>
    }
    prev = pcb;
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e602:	69fb      	ldr	r3, [r7, #28]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	61fb      	str	r3, [r7, #28]
 800e608:	69fb      	ldr	r3, [r7, #28]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	f47f af5e 	bne.w	800e4cc <tcp_input+0x224>
 800e610:	e000      	b.n	800e614 <tcp_input+0x36c>
      break;
 800e612:	bf00      	nop
  }

  if (pcb == NULL) {
 800e614:	69fb      	ldr	r3, [r7, #28]
 800e616:	2b00      	cmp	r3, #0
 800e618:	f040 80aa 	bne.w	800e770 <tcp_input+0x4c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e61c:	4b51      	ldr	r3, [pc, #324]	@ (800e764 <tcp_input+0x4bc>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	61fb      	str	r3, [r7, #28]
 800e622:	e03f      	b.n	800e6a4 <tcp_input+0x3fc>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e624:	69fb      	ldr	r3, [r7, #28]
 800e626:	7d1b      	ldrb	r3, [r3, #20]
 800e628:	2b0a      	cmp	r3, #10
 800e62a:	d006      	beq.n	800e63a <tcp_input+0x392>
 800e62c:	4b48      	ldr	r3, [pc, #288]	@ (800e750 <tcp_input+0x4a8>)
 800e62e:	f240 121f 	movw	r2, #287	@ 0x11f
 800e632:	494d      	ldr	r1, [pc, #308]	@ (800e768 <tcp_input+0x4c0>)
 800e634:	4848      	ldr	r0, [pc, #288]	@ (800e758 <tcp_input+0x4b0>)
 800e636:	f009 fa3f 	bl	8017ab8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	7a1b      	ldrb	r3, [r3, #8]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d009      	beq.n	800e656 <tcp_input+0x3ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e642:	69fb      	ldr	r3, [r7, #28]
 800e644:	7a1a      	ldrb	r2, [r3, #8]
 800e646:	4b41      	ldr	r3, [pc, #260]	@ (800e74c <tcp_input+0x4a4>)
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e64e:	3301      	adds	r3, #1
 800e650:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e652:	429a      	cmp	r2, r3
 800e654:	d122      	bne.n	800e69c <tcp_input+0x3f4>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	8b1a      	ldrh	r2, [r3, #24]
 800e65a:	4b3b      	ldr	r3, [pc, #236]	@ (800e748 <tcp_input+0x4a0>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	881b      	ldrh	r3, [r3, #0]
 800e660:	b29b      	uxth	r3, r3
 800e662:	429a      	cmp	r2, r3
 800e664:	d11b      	bne.n	800e69e <tcp_input+0x3f6>
          pcb->local_port == tcphdr->dest &&
 800e666:	69fb      	ldr	r3, [r7, #28]
 800e668:	8ada      	ldrh	r2, [r3, #22]
 800e66a:	4b37      	ldr	r3, [pc, #220]	@ (800e748 <tcp_input+0x4a0>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	885b      	ldrh	r3, [r3, #2]
 800e670:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e672:	429a      	cmp	r2, r3
 800e674:	d113      	bne.n	800e69e <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	685a      	ldr	r2, [r3, #4]
 800e67a:	4b34      	ldr	r3, [pc, #208]	@ (800e74c <tcp_input+0x4a4>)
 800e67c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e67e:	429a      	cmp	r2, r3
 800e680:	d10d      	bne.n	800e69e <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e682:	69fb      	ldr	r3, [r7, #28]
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	4b31      	ldr	r3, [pc, #196]	@ (800e74c <tcp_input+0x4a4>)
 800e688:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d107      	bne.n	800e69e <tcp_input+0x3f6>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e68e:	69f8      	ldr	r0, [r7, #28]
 800e690:	f000 fb56 	bl	800ed40 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f7fd fb4d 	bl	800bd34 <pbuf_free>
        return;
 800e69a:	e1fd      	b.n	800ea98 <tcp_input+0x7f0>
        continue;
 800e69c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	68db      	ldr	r3, [r3, #12]
 800e6a2:	61fb      	str	r3, [r7, #28]
 800e6a4:	69fb      	ldr	r3, [r7, #28]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d1bc      	bne.n	800e624 <tcp_input+0x37c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e6ae:	4b2f      	ldr	r3, [pc, #188]	@ (800e76c <tcp_input+0x4c4>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	617b      	str	r3, [r7, #20]
 800e6b4:	e02a      	b.n	800e70c <tcp_input+0x464>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	7a1b      	ldrb	r3, [r3, #8]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00c      	beq.n	800e6d8 <tcp_input+0x430>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	7a1a      	ldrb	r2, [r3, #8]
 800e6c2:	4b22      	ldr	r3, [pc, #136]	@ (800e74c <tcp_input+0x4a4>)
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	d002      	beq.n	800e6d8 <tcp_input+0x430>
        prev = (struct tcp_pcb *)lpcb;
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	61bb      	str	r3, [r7, #24]
        continue;
 800e6d6:	e016      	b.n	800e706 <tcp_input+0x45e>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	8ada      	ldrh	r2, [r3, #22]
 800e6dc:	4b1a      	ldr	r3, [pc, #104]	@ (800e748 <tcp_input+0x4a0>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	885b      	ldrh	r3, [r3, #2]
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d10c      	bne.n	800e702 <tcp_input+0x45a>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	4b17      	ldr	r3, [pc, #92]	@ (800e74c <tcp_input+0x4a4>)
 800e6ee:	695b      	ldr	r3, [r3, #20]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d00f      	beq.n	800e714 <tcp_input+0x46c>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d00d      	beq.n	800e716 <tcp_input+0x46e>
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d009      	beq.n	800e716 <tcp_input+0x46e>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	617b      	str	r3, [r7, #20]
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1d1      	bne.n	800e6b6 <tcp_input+0x40e>
 800e712:	e000      	b.n	800e716 <tcp_input+0x46e>
            break;
 800e714:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d029      	beq.n	800e770 <tcp_input+0x4c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00a      	beq.n	800e738 <tcp_input+0x490>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	68da      	ldr	r2, [r3, #12]
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e72a:	4b10      	ldr	r3, [pc, #64]	@ (800e76c <tcp_input+0x4c4>)
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e732:	4a0e      	ldr	r2, [pc, #56]	@ (800e76c <tcp_input+0x4c4>)
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e738:	6978      	ldr	r0, [r7, #20]
 800e73a:	f000 fa03 	bl	800eb44 <tcp_listen_input>
      }
      pbuf_free(p);
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f7fd faf8 	bl	800bd34 <pbuf_free>
      return;
 800e744:	e1a8      	b.n	800ea98 <tcp_input+0x7f0>
 800e746:	bf00      	nop
 800e748:	240105a0 	.word	0x240105a0
 800e74c:	24009a98 	.word	0x24009a98
 800e750:	08019eb4 	.word	0x08019eb4
 800e754:	08019fe0 	.word	0x08019fe0
 800e758:	08019f00 	.word	0x08019f00
 800e75c:	24010584 	.word	0x24010584
 800e760:	0801a00c 	.word	0x0801a00c
 800e764:	24010588 	.word	0x24010588
 800e768:	0801a038 	.word	0x0801a038
 800e76c:	24010580 	.word	0x24010580
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	2b00      	cmp	r3, #0
 800e774:	f000 8158 	beq.w	800ea28 <tcp_input+0x780>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e778:	4b95      	ldr	r3, [pc, #596]	@ (800e9d0 <tcp_input+0x728>)
 800e77a:	2200      	movs	r2, #0
 800e77c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	891a      	ldrh	r2, [r3, #8]
 800e782:	4b93      	ldr	r3, [pc, #588]	@ (800e9d0 <tcp_input+0x728>)
 800e784:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e786:	4a92      	ldr	r2, [pc, #584]	@ (800e9d0 <tcp_input+0x728>)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e78c:	4b91      	ldr	r3, [pc, #580]	@ (800e9d4 <tcp_input+0x72c>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a8f      	ldr	r2, [pc, #572]	@ (800e9d0 <tcp_input+0x728>)
 800e792:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e794:	4b90      	ldr	r3, [pc, #576]	@ (800e9d8 <tcp_input+0x730>)
 800e796:	2200      	movs	r2, #0
 800e798:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e79a:	4b90      	ldr	r3, [pc, #576]	@ (800e9dc <tcp_input+0x734>)
 800e79c:	2200      	movs	r2, #0
 800e79e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e7a0:	4b8f      	ldr	r3, [pc, #572]	@ (800e9e0 <tcp_input+0x738>)
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e7a6:	4b8f      	ldr	r3, [pc, #572]	@ (800e9e4 <tcp_input+0x73c>)
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	f003 0308 	and.w	r3, r3, #8
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d006      	beq.n	800e7c0 <tcp_input+0x518>
      p->flags |= PBUF_FLAG_PUSH;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	7b5b      	ldrb	r3, [r3, #13]
 800e7b6:	f043 0301 	orr.w	r3, r3, #1
 800e7ba:	b2da      	uxtb	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d017      	beq.n	800e7f8 <tcp_input+0x550>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e7c8:	69f8      	ldr	r0, [r7, #28]
 800e7ca:	f7ff f84d 	bl	800d868 <tcp_process_refused_data>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	f113 0f0d 	cmn.w	r3, #13
 800e7d4:	d007      	beq.n	800e7e6 <tcp_input+0x53e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d00c      	beq.n	800e7f8 <tcp_input+0x550>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e7de:	4b82      	ldr	r3, [pc, #520]	@ (800e9e8 <tcp_input+0x740>)
 800e7e0:	881b      	ldrh	r3, [r3, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d008      	beq.n	800e7f8 <tcp_input+0x550>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e7e6:	69fb      	ldr	r3, [r7, #28]
 800e7e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	f040 80e4 	bne.w	800e9b8 <tcp_input+0x710>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e7f0:	69f8      	ldr	r0, [r7, #28]
 800e7f2:	f003 fe05 	bl	8012400 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e7f6:	e0df      	b.n	800e9b8 <tcp_input+0x710>
      }
    }
    tcp_input_pcb = pcb;
 800e7f8:	4a7c      	ldr	r2, [pc, #496]	@ (800e9ec <tcp_input+0x744>)
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e7fe:	69f8      	ldr	r0, [r7, #28]
 800e800:	f000 fb18 	bl	800ee34 <tcp_process>
 800e804:	4603      	mov	r3, r0
 800e806:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e808:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e80c:	f113 0f0d 	cmn.w	r3, #13
 800e810:	f000 80d4 	beq.w	800e9bc <tcp_input+0x714>
      if (recv_flags & TF_RESET) {
 800e814:	4b71      	ldr	r3, [pc, #452]	@ (800e9dc <tcp_input+0x734>)
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	f003 0308 	and.w	r3, r3, #8
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d015      	beq.n	800e84c <tcp_input+0x5a4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e826:	2b00      	cmp	r3, #0
 800e828:	d008      	beq.n	800e83c <tcp_input+0x594>
 800e82a:	69fb      	ldr	r3, [r7, #28]
 800e82c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e830:	69fa      	ldr	r2, [r7, #28]
 800e832:	6912      	ldr	r2, [r2, #16]
 800e834:	f06f 010d 	mvn.w	r1, #13
 800e838:	4610      	mov	r0, r2
 800e83a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e83c:	69f9      	ldr	r1, [r7, #28]
 800e83e:	486c      	ldr	r0, [pc, #432]	@ (800e9f0 <tcp_input+0x748>)
 800e840:	f7ff fbba 	bl	800dfb8 <tcp_pcb_remove>
        tcp_free(pcb);
 800e844:	69f8      	ldr	r0, [r7, #28]
 800e846:	f7fd fde9 	bl	800c41c <tcp_free>
 800e84a:	e0da      	b.n	800ea02 <tcp_input+0x75a>
      } else {
        err = ERR_OK;
 800e84c:	2300      	movs	r3, #0
 800e84e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e850:	4b63      	ldr	r3, [pc, #396]	@ (800e9e0 <tcp_input+0x738>)
 800e852:	881b      	ldrh	r3, [r3, #0]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d01d      	beq.n	800e894 <tcp_input+0x5ec>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e858:	4b61      	ldr	r3, [pc, #388]	@ (800e9e0 <tcp_input+0x738>)
 800e85a:	881b      	ldrh	r3, [r3, #0]
 800e85c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e85e:	69fb      	ldr	r3, [r7, #28]
 800e860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e864:	2b00      	cmp	r3, #0
 800e866:	d00a      	beq.n	800e87e <tcp_input+0x5d6>
 800e868:	69fb      	ldr	r3, [r7, #28]
 800e86a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e86e:	69fa      	ldr	r2, [r7, #28]
 800e870:	6910      	ldr	r0, [r2, #16]
 800e872:	89fa      	ldrh	r2, [r7, #14]
 800e874:	69f9      	ldr	r1, [r7, #28]
 800e876:	4798      	blx	r3
 800e878:	4603      	mov	r3, r0
 800e87a:	74fb      	strb	r3, [r7, #19]
 800e87c:	e001      	b.n	800e882 <tcp_input+0x5da>
 800e87e:	2300      	movs	r3, #0
 800e880:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e882:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e886:	f113 0f0d 	cmn.w	r3, #13
 800e88a:	f000 8099 	beq.w	800e9c0 <tcp_input+0x718>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e88e:	4b54      	ldr	r3, [pc, #336]	@ (800e9e0 <tcp_input+0x738>)
 800e890:	2200      	movs	r2, #0
 800e892:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e894:	69f8      	ldr	r0, [r7, #28]
 800e896:	f000 f915 	bl	800eac4 <tcp_input_delayed_close>
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f040 8091 	bne.w	800e9c4 <tcp_input+0x71c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e8a2:	4b4d      	ldr	r3, [pc, #308]	@ (800e9d8 <tcp_input+0x730>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d041      	beq.n	800e92e <tcp_input+0x686>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d006      	beq.n	800e8c0 <tcp_input+0x618>
 800e8b2:	4b50      	ldr	r3, [pc, #320]	@ (800e9f4 <tcp_input+0x74c>)
 800e8b4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e8b8:	494f      	ldr	r1, [pc, #316]	@ (800e9f8 <tcp_input+0x750>)
 800e8ba:	4850      	ldr	r0, [pc, #320]	@ (800e9fc <tcp_input+0x754>)
 800e8bc:	f009 f8fc 	bl	8017ab8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	8b5b      	ldrh	r3, [r3, #26]
 800e8c4:	f003 0310 	and.w	r3, r3, #16
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d008      	beq.n	800e8de <tcp_input+0x636>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e8cc:	4b42      	ldr	r3, [pc, #264]	@ (800e9d8 <tcp_input+0x730>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fd fa2f 	bl	800bd34 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e8d6:	69f8      	ldr	r0, [r7, #28]
 800e8d8:	f7fe f88c 	bl	800c9f4 <tcp_abort>
            goto aborted;
 800e8dc:	e091      	b.n	800ea02 <tcp_input+0x75a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d00c      	beq.n	800e902 <tcp_input+0x65a>
 800e8e8:	69fb      	ldr	r3, [r7, #28]
 800e8ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e8ee:	69fb      	ldr	r3, [r7, #28]
 800e8f0:	6918      	ldr	r0, [r3, #16]
 800e8f2:	4b39      	ldr	r3, [pc, #228]	@ (800e9d8 <tcp_input+0x730>)
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	69f9      	ldr	r1, [r7, #28]
 800e8fa:	47a0      	blx	r4
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	74fb      	strb	r3, [r7, #19]
 800e900:	e008      	b.n	800e914 <tcp_input+0x66c>
 800e902:	4b35      	ldr	r3, [pc, #212]	@ (800e9d8 <tcp_input+0x730>)
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	2300      	movs	r3, #0
 800e908:	69f9      	ldr	r1, [r7, #28]
 800e90a:	2000      	movs	r0, #0
 800e90c:	f7ff f884 	bl	800da18 <tcp_recv_null>
 800e910:	4603      	mov	r3, r0
 800e912:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e914:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e918:	f113 0f0d 	cmn.w	r3, #13
 800e91c:	d054      	beq.n	800e9c8 <tcp_input+0x720>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e91e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d003      	beq.n	800e92e <tcp_input+0x686>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e926:	4b2c      	ldr	r3, [pc, #176]	@ (800e9d8 <tcp_input+0x730>)
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e92e:	4b2b      	ldr	r3, [pc, #172]	@ (800e9dc <tcp_input+0x734>)
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	f003 0320 	and.w	r3, r3, #32
 800e936:	2b00      	cmp	r3, #0
 800e938:	d031      	beq.n	800e99e <tcp_input+0x6f6>
          if (pcb->refused_data != NULL) {
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d009      	beq.n	800e956 <tcp_input+0x6ae>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e942:	69fb      	ldr	r3, [r7, #28]
 800e944:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e946:	7b5a      	ldrb	r2, [r3, #13]
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e94c:	f042 0220 	orr.w	r2, r2, #32
 800e950:	b2d2      	uxtb	r2, r2
 800e952:	735a      	strb	r2, [r3, #13]
 800e954:	e023      	b.n	800e99e <tcp_input+0x6f6>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e956:	69fb      	ldr	r3, [r7, #28]
 800e958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e95a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800e95e:	4293      	cmp	r3, r2
 800e960:	d005      	beq.n	800e96e <tcp_input+0x6c6>
              pcb->rcv_wnd++;
 800e962:	69fb      	ldr	r3, [r7, #28]
 800e964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e966:	3301      	adds	r3, #1
 800e968:	b29a      	uxth	r2, r3
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e974:	2b00      	cmp	r3, #0
 800e976:	d00b      	beq.n	800e990 <tcp_input+0x6e8>
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	6918      	ldr	r0, [r3, #16]
 800e982:	2300      	movs	r3, #0
 800e984:	2200      	movs	r2, #0
 800e986:	69f9      	ldr	r1, [r7, #28]
 800e988:	47a0      	blx	r4
 800e98a:	4603      	mov	r3, r0
 800e98c:	74fb      	strb	r3, [r7, #19]
 800e98e:	e001      	b.n	800e994 <tcp_input+0x6ec>
 800e990:	2300      	movs	r3, #0
 800e992:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e994:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e998:	f113 0f0d 	cmn.w	r3, #13
 800e99c:	d016      	beq.n	800e9cc <tcp_input+0x724>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e99e:	4b13      	ldr	r3, [pc, #76]	@ (800e9ec <tcp_input+0x744>)
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e9a4:	69f8      	ldr	r0, [r7, #28]
 800e9a6:	f000 f88d 	bl	800eac4 <tcp_input_delayed_close>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d127      	bne.n	800ea00 <tcp_input+0x758>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e9b0:	69f8      	ldr	r0, [r7, #28]
 800e9b2:	f002 ff1d 	bl	80117f0 <tcp_output>
 800e9b6:	e024      	b.n	800ea02 <tcp_input+0x75a>
        goto aborted;
 800e9b8:	bf00      	nop
 800e9ba:	e022      	b.n	800ea02 <tcp_input+0x75a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e9bc:	bf00      	nop
 800e9be:	e020      	b.n	800ea02 <tcp_input+0x75a>
              goto aborted;
 800e9c0:	bf00      	nop
 800e9c2:	e01e      	b.n	800ea02 <tcp_input+0x75a>
          goto aborted;
 800e9c4:	bf00      	nop
 800e9c6:	e01c      	b.n	800ea02 <tcp_input+0x75a>
            goto aborted;
 800e9c8:	bf00      	nop
 800e9ca:	e01a      	b.n	800ea02 <tcp_input+0x75a>
              goto aborted;
 800e9cc:	bf00      	nop
 800e9ce:	e018      	b.n	800ea02 <tcp_input+0x75a>
 800e9d0:	24010590 	.word	0x24010590
 800e9d4:	240105a0 	.word	0x240105a0
 800e9d8:	240105c0 	.word	0x240105c0
 800e9dc:	240105bd 	.word	0x240105bd
 800e9e0:	240105b8 	.word	0x240105b8
 800e9e4:	240105bc 	.word	0x240105bc
 800e9e8:	240105ba 	.word	0x240105ba
 800e9ec:	240105c4 	.word	0x240105c4
 800e9f0:	24010584 	.word	0x24010584
 800e9f4:	08019eb4 	.word	0x08019eb4
 800e9f8:	0801a068 	.word	0x0801a068
 800e9fc:	08019f00 	.word	0x08019f00
          goto aborted;
 800ea00:	bf00      	nop
    tcp_input_pcb = NULL;
 800ea02:	4b27      	ldr	r3, [pc, #156]	@ (800eaa0 <tcp_input+0x7f8>)
 800ea04:	2200      	movs	r2, #0
 800ea06:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ea08:	4b26      	ldr	r3, [pc, #152]	@ (800eaa4 <tcp_input+0x7fc>)
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ea0e:	4b26      	ldr	r3, [pc, #152]	@ (800eaa8 <tcp_input+0x800>)
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d03f      	beq.n	800ea96 <tcp_input+0x7ee>
      pbuf_free(inseg.p);
 800ea16:	4b24      	ldr	r3, [pc, #144]	@ (800eaa8 <tcp_input+0x800>)
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fd f98a 	bl	800bd34 <pbuf_free>
      inseg.p = NULL;
 800ea20:	4b21      	ldr	r3, [pc, #132]	@ (800eaa8 <tcp_input+0x800>)
 800ea22:	2200      	movs	r2, #0
 800ea24:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ea26:	e036      	b.n	800ea96 <tcp_input+0x7ee>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ea28:	4b20      	ldr	r3, [pc, #128]	@ (800eaac <tcp_input+0x804>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	899b      	ldrh	r3, [r3, #12]
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7fb fccf 	bl	800a3d4 <lwip_htons>
 800ea36:	4603      	mov	r3, r0
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	f003 0304 	and.w	r3, r3, #4
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d118      	bne.n	800ea74 <tcp_input+0x7cc>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea42:	4b1b      	ldr	r3, [pc, #108]	@ (800eab0 <tcp_input+0x808>)
 800ea44:	6819      	ldr	r1, [r3, #0]
 800ea46:	4b1b      	ldr	r3, [pc, #108]	@ (800eab4 <tcp_input+0x80c>)
 800ea48:	881b      	ldrh	r3, [r3, #0]
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	4b1a      	ldr	r3, [pc, #104]	@ (800eab8 <tcp_input+0x810>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea52:	4b16      	ldr	r3, [pc, #88]	@ (800eaac <tcp_input+0x804>)
 800ea54:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea56:	885b      	ldrh	r3, [r3, #2]
 800ea58:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea5a:	4a14      	ldr	r2, [pc, #80]	@ (800eaac <tcp_input+0x804>)
 800ea5c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea5e:	8812      	ldrh	r2, [r2, #0]
 800ea60:	b292      	uxth	r2, r2
 800ea62:	9202      	str	r2, [sp, #8]
 800ea64:	9301      	str	r3, [sp, #4]
 800ea66:	4b15      	ldr	r3, [pc, #84]	@ (800eabc <tcp_input+0x814>)
 800ea68:	9300      	str	r3, [sp, #0]
 800ea6a:	4b15      	ldr	r3, [pc, #84]	@ (800eac0 <tcp_input+0x818>)
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	2000      	movs	r0, #0
 800ea70:	f003 fc74 	bl	801235c <tcp_rst>
    pbuf_free(p);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7fd f95d 	bl	800bd34 <pbuf_free>
  return;
 800ea7a:	e00c      	b.n	800ea96 <tcp_input+0x7ee>
    goto dropped;
 800ea7c:	bf00      	nop
 800ea7e:	e006      	b.n	800ea8e <tcp_input+0x7e6>
    goto dropped;
 800ea80:	bf00      	nop
 800ea82:	e004      	b.n	800ea8e <tcp_input+0x7e6>
    goto dropped;
 800ea84:	bf00      	nop
 800ea86:	e002      	b.n	800ea8e <tcp_input+0x7e6>
      goto dropped;
 800ea88:	bf00      	nop
 800ea8a:	e000      	b.n	800ea8e <tcp_input+0x7e6>
      goto dropped;
 800ea8c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f7fd f950 	bl	800bd34 <pbuf_free>
 800ea94:	e000      	b.n	800ea98 <tcp_input+0x7f0>
  return;
 800ea96:	bf00      	nop
}
 800ea98:	3724      	adds	r7, #36	@ 0x24
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd90      	pop	{r4, r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	240105c4 	.word	0x240105c4
 800eaa4:	240105c0 	.word	0x240105c0
 800eaa8:	24010590 	.word	0x24010590
 800eaac:	240105a0 	.word	0x240105a0
 800eab0:	240105b4 	.word	0x240105b4
 800eab4:	240105ba 	.word	0x240105ba
 800eab8:	240105b0 	.word	0x240105b0
 800eabc:	24009aa8 	.word	0x24009aa8
 800eac0:	24009aac 	.word	0x24009aac

0800eac4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d106      	bne.n	800eae0 <tcp_input_delayed_close+0x1c>
 800ead2:	4b17      	ldr	r3, [pc, #92]	@ (800eb30 <tcp_input_delayed_close+0x6c>)
 800ead4:	f240 225a 	movw	r2, #602	@ 0x25a
 800ead8:	4916      	ldr	r1, [pc, #88]	@ (800eb34 <tcp_input_delayed_close+0x70>)
 800eada:	4817      	ldr	r0, [pc, #92]	@ (800eb38 <tcp_input_delayed_close+0x74>)
 800eadc:	f008 ffec 	bl	8017ab8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800eae0:	4b16      	ldr	r3, [pc, #88]	@ (800eb3c <tcp_input_delayed_close+0x78>)
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	f003 0310 	and.w	r3, r3, #16
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d01c      	beq.n	800eb26 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	8b5b      	ldrh	r3, [r3, #26]
 800eaf0:	f003 0310 	and.w	r3, r3, #16
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d10d      	bne.n	800eb14 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d008      	beq.n	800eb14 <tcp_input_delayed_close+0x50>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	6912      	ldr	r2, [r2, #16]
 800eb0c:	f06f 010e 	mvn.w	r1, #14
 800eb10:	4610      	mov	r0, r2
 800eb12:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eb14:	6879      	ldr	r1, [r7, #4]
 800eb16:	480a      	ldr	r0, [pc, #40]	@ (800eb40 <tcp_input_delayed_close+0x7c>)
 800eb18:	f7ff fa4e 	bl	800dfb8 <tcp_pcb_remove>
    tcp_free(pcb);
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f7fd fc7d 	bl	800c41c <tcp_free>
    return 1;
 800eb22:	2301      	movs	r3, #1
 800eb24:	e000      	b.n	800eb28 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800eb26:	2300      	movs	r3, #0
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3708      	adds	r7, #8
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	08019eb4 	.word	0x08019eb4
 800eb34:	0801a084 	.word	0x0801a084
 800eb38:	08019f00 	.word	0x08019f00
 800eb3c:	240105bd 	.word	0x240105bd
 800eb40:	24010584 	.word	0x24010584

0800eb44 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800eb44:	b590      	push	{r4, r7, lr}
 800eb46:	b08b      	sub	sp, #44	@ 0x2c
 800eb48:	af04      	add	r7, sp, #16
 800eb4a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800eb4c:	4b6f      	ldr	r3, [pc, #444]	@ (800ed0c <tcp_listen_input+0x1c8>)
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	f003 0304 	and.w	r3, r3, #4
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	f040 80d2 	bne.w	800ecfe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d106      	bne.n	800eb6e <tcp_listen_input+0x2a>
 800eb60:	4b6b      	ldr	r3, [pc, #428]	@ (800ed10 <tcp_listen_input+0x1cc>)
 800eb62:	f240 2281 	movw	r2, #641	@ 0x281
 800eb66:	496b      	ldr	r1, [pc, #428]	@ (800ed14 <tcp_listen_input+0x1d0>)
 800eb68:	486b      	ldr	r0, [pc, #428]	@ (800ed18 <tcp_listen_input+0x1d4>)
 800eb6a:	f008 ffa5 	bl	8017ab8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800eb6e:	4b67      	ldr	r3, [pc, #412]	@ (800ed0c <tcp_listen_input+0x1c8>)
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	f003 0310 	and.w	r3, r3, #16
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d019      	beq.n	800ebae <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb7a:	4b68      	ldr	r3, [pc, #416]	@ (800ed1c <tcp_listen_input+0x1d8>)
 800eb7c:	6819      	ldr	r1, [r3, #0]
 800eb7e:	4b68      	ldr	r3, [pc, #416]	@ (800ed20 <tcp_listen_input+0x1dc>)
 800eb80:	881b      	ldrh	r3, [r3, #0]
 800eb82:	461a      	mov	r2, r3
 800eb84:	4b67      	ldr	r3, [pc, #412]	@ (800ed24 <tcp_listen_input+0x1e0>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb8a:	4b67      	ldr	r3, [pc, #412]	@ (800ed28 <tcp_listen_input+0x1e4>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb8e:	885b      	ldrh	r3, [r3, #2]
 800eb90:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb92:	4a65      	ldr	r2, [pc, #404]	@ (800ed28 <tcp_listen_input+0x1e4>)
 800eb94:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb96:	8812      	ldrh	r2, [r2, #0]
 800eb98:	b292      	uxth	r2, r2
 800eb9a:	9202      	str	r2, [sp, #8]
 800eb9c:	9301      	str	r3, [sp, #4]
 800eb9e:	4b63      	ldr	r3, [pc, #396]	@ (800ed2c <tcp_listen_input+0x1e8>)
 800eba0:	9300      	str	r3, [sp, #0]
 800eba2:	4b63      	ldr	r3, [pc, #396]	@ (800ed30 <tcp_listen_input+0x1ec>)
 800eba4:	4602      	mov	r2, r0
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f003 fbd8 	bl	801235c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ebac:	e0a9      	b.n	800ed02 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ebae:	4b57      	ldr	r3, [pc, #348]	@ (800ed0c <tcp_listen_input+0x1c8>)
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	f003 0302 	and.w	r3, r3, #2
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	f000 80a3 	beq.w	800ed02 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	7d5b      	ldrb	r3, [r3, #21]
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7ff f84d 	bl	800dc60 <tcp_alloc>
 800ebc6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d111      	bne.n	800ebf2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	699b      	ldr	r3, [r3, #24]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d00a      	beq.n	800ebec <tcp_listen_input+0xa8>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	699b      	ldr	r3, [r3, #24]
 800ebda:	687a      	ldr	r2, [r7, #4]
 800ebdc:	6910      	ldr	r0, [r2, #16]
 800ebde:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	4798      	blx	r3
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	73bb      	strb	r3, [r7, #14]
      return;
 800ebea:	e08b      	b.n	800ed04 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ebec:	23f0      	movs	r3, #240	@ 0xf0
 800ebee:	73bb      	strb	r3, [r7, #14]
      return;
 800ebf0:	e088      	b.n	800ed04 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ebf2:	4b50      	ldr	r3, [pc, #320]	@ (800ed34 <tcp_listen_input+0x1f0>)
 800ebf4:	695a      	ldr	r2, [r3, #20]
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ebfa:	4b4e      	ldr	r3, [pc, #312]	@ (800ed34 <tcp_listen_input+0x1f0>)
 800ebfc:	691a      	ldr	r2, [r3, #16]
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	8ada      	ldrh	r2, [r3, #22]
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ec0a:	4b47      	ldr	r3, [pc, #284]	@ (800ed28 <tcp_listen_input+0x1e4>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	881b      	ldrh	r3, [r3, #0]
 800ec10:	b29a      	uxth	r2, r3
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	2203      	movs	r2, #3
 800ec1a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ec1c:	4b41      	ldr	r3, [pc, #260]	@ (800ed24 <tcp_listen_input+0x1e0>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	1c5a      	adds	r2, r3, #1
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ec2e:	6978      	ldr	r0, [r7, #20]
 800ec30:	f7ff fa56 	bl	800e0e0 <tcp_next_iss>
 800ec34:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	693a      	ldr	r2, [r7, #16]
 800ec3a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	693a      	ldr	r2, [r7, #16]
 800ec40:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	693a      	ldr	r2, [r7, #16]
 800ec46:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	693a      	ldr	r2, [r7, #16]
 800ec4c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ec4e:	4b35      	ldr	r3, [pc, #212]	@ (800ed24 <tcp_listen_input+0x1e0>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	1e5a      	subs	r2, r3, #1
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	691a      	ldr	r2, [r3, #16]
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	7a5b      	ldrb	r3, [r3, #9]
 800ec6a:	f003 030c 	and.w	r3, r3, #12
 800ec6e:	b2da      	uxtb	r2, r3
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	7a1a      	ldrb	r2, [r3, #8]
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ec7c:	4b2e      	ldr	r3, [pc, #184]	@ (800ed38 <tcp_listen_input+0x1f4>)
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	60da      	str	r2, [r3, #12]
 800ec84:	4a2c      	ldr	r2, [pc, #176]	@ (800ed38 <tcp_listen_input+0x1f4>)
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	6013      	str	r3, [r2, #0]
 800ec8a:	f003 fd29 	bl	80126e0 <tcp_timer_needed>
 800ec8e:	4b2b      	ldr	r3, [pc, #172]	@ (800ed3c <tcp_listen_input+0x1f8>)
 800ec90:	2201      	movs	r2, #1
 800ec92:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ec94:	6978      	ldr	r0, [r7, #20]
 800ec96:	f001 fd8b 	bl	80107b0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ec9a:	4b23      	ldr	r3, [pc, #140]	@ (800ed28 <tcp_listen_input+0x1e4>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	89db      	ldrh	r3, [r3, #14]
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	3304      	adds	r3, #4
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f007 faf7 	bl	80162b0 <ip4_route>
 800ecc2:	4601      	mov	r1, r0
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	3304      	adds	r3, #4
 800ecc8:	461a      	mov	r2, r3
 800ecca:	4620      	mov	r0, r4
 800eccc:	f7ff fa2e 	bl	800e12c <tcp_eff_send_mss_netif>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	697b      	ldr	r3, [r7, #20]
 800ecd6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ecd8:	2112      	movs	r1, #18
 800ecda:	6978      	ldr	r0, [r7, #20]
 800ecdc:	f002 fc9a 	bl	8011614 <tcp_enqueue_flags>
 800ece0:	4603      	mov	r3, r0
 800ece2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ece4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d004      	beq.n	800ecf6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ecec:	2100      	movs	r1, #0
 800ecee:	6978      	ldr	r0, [r7, #20]
 800ecf0:	f7fd fdc0 	bl	800c874 <tcp_abandon>
      return;
 800ecf4:	e006      	b.n	800ed04 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ecf6:	6978      	ldr	r0, [r7, #20]
 800ecf8:	f002 fd7a 	bl	80117f0 <tcp_output>
  return;
 800ecfc:	e001      	b.n	800ed02 <tcp_listen_input+0x1be>
    return;
 800ecfe:	bf00      	nop
 800ed00:	e000      	b.n	800ed04 <tcp_listen_input+0x1c0>
  return;
 800ed02:	bf00      	nop
}
 800ed04:	371c      	adds	r7, #28
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd90      	pop	{r4, r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	240105bc 	.word	0x240105bc
 800ed10:	08019eb4 	.word	0x08019eb4
 800ed14:	0801a0ac 	.word	0x0801a0ac
 800ed18:	08019f00 	.word	0x08019f00
 800ed1c:	240105b4 	.word	0x240105b4
 800ed20:	240105ba 	.word	0x240105ba
 800ed24:	240105b0 	.word	0x240105b0
 800ed28:	240105a0 	.word	0x240105a0
 800ed2c:	24009aa8 	.word	0x24009aa8
 800ed30:	24009aac 	.word	0x24009aac
 800ed34:	24009a98 	.word	0x24009a98
 800ed38:	24010584 	.word	0x24010584
 800ed3c:	2401058c 	.word	0x2401058c

0800ed40 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af04      	add	r7, sp, #16
 800ed46:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ed48:	4b2f      	ldr	r3, [pc, #188]	@ (800ee08 <tcp_timewait_input+0xc8>)
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	f003 0304 	and.w	r3, r3, #4
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d153      	bne.n	800edfc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d106      	bne.n	800ed68 <tcp_timewait_input+0x28>
 800ed5a:	4b2c      	ldr	r3, [pc, #176]	@ (800ee0c <tcp_timewait_input+0xcc>)
 800ed5c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ed60:	492b      	ldr	r1, [pc, #172]	@ (800ee10 <tcp_timewait_input+0xd0>)
 800ed62:	482c      	ldr	r0, [pc, #176]	@ (800ee14 <tcp_timewait_input+0xd4>)
 800ed64:	f008 fea8 	bl	8017ab8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ed68:	4b27      	ldr	r3, [pc, #156]	@ (800ee08 <tcp_timewait_input+0xc8>)
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	f003 0302 	and.w	r3, r3, #2
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d02a      	beq.n	800edca <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ed74:	4b28      	ldr	r3, [pc, #160]	@ (800ee18 <tcp_timewait_input+0xd8>)
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed7c:	1ad3      	subs	r3, r2, r3
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	db2d      	blt.n	800edde <tcp_timewait_input+0x9e>
 800ed82:	4b25      	ldr	r3, [pc, #148]	@ (800ee18 <tcp_timewait_input+0xd8>)
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed8a:	6879      	ldr	r1, [r7, #4]
 800ed8c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ed8e:	440b      	add	r3, r1
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	dc23      	bgt.n	800edde <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed96:	4b21      	ldr	r3, [pc, #132]	@ (800ee1c <tcp_timewait_input+0xdc>)
 800ed98:	6819      	ldr	r1, [r3, #0]
 800ed9a:	4b21      	ldr	r3, [pc, #132]	@ (800ee20 <tcp_timewait_input+0xe0>)
 800ed9c:	881b      	ldrh	r3, [r3, #0]
 800ed9e:	461a      	mov	r2, r3
 800eda0:	4b1d      	ldr	r3, [pc, #116]	@ (800ee18 <tcp_timewait_input+0xd8>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eda6:	4b1f      	ldr	r3, [pc, #124]	@ (800ee24 <tcp_timewait_input+0xe4>)
 800eda8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edaa:	885b      	ldrh	r3, [r3, #2]
 800edac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edae:	4a1d      	ldr	r2, [pc, #116]	@ (800ee24 <tcp_timewait_input+0xe4>)
 800edb0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edb2:	8812      	ldrh	r2, [r2, #0]
 800edb4:	b292      	uxth	r2, r2
 800edb6:	9202      	str	r2, [sp, #8]
 800edb8:	9301      	str	r3, [sp, #4]
 800edba:	4b1b      	ldr	r3, [pc, #108]	@ (800ee28 <tcp_timewait_input+0xe8>)
 800edbc:	9300      	str	r3, [sp, #0]
 800edbe:	4b1b      	ldr	r3, [pc, #108]	@ (800ee2c <tcp_timewait_input+0xec>)
 800edc0:	4602      	mov	r2, r0
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f003 faca 	bl	801235c <tcp_rst>
      return;
 800edc8:	e01b      	b.n	800ee02 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800edca:	4b0f      	ldr	r3, [pc, #60]	@ (800ee08 <tcp_timewait_input+0xc8>)
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	f003 0301 	and.w	r3, r3, #1
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d003      	beq.n	800edde <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800edd6:	4b16      	ldr	r3, [pc, #88]	@ (800ee30 <tcp_timewait_input+0xf0>)
 800edd8:	681a      	ldr	r2, [r3, #0]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800edde:	4b10      	ldr	r3, [pc, #64]	@ (800ee20 <tcp_timewait_input+0xe0>)
 800ede0:	881b      	ldrh	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d00c      	beq.n	800ee00 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	8b5b      	ldrh	r3, [r3, #26]
 800edea:	f043 0302 	orr.w	r3, r3, #2
 800edee:	b29a      	uxth	r2, r3
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f002 fcfb 	bl	80117f0 <tcp_output>
  }
  return;
 800edfa:	e001      	b.n	800ee00 <tcp_timewait_input+0xc0>
    return;
 800edfc:	bf00      	nop
 800edfe:	e000      	b.n	800ee02 <tcp_timewait_input+0xc2>
  return;
 800ee00:	bf00      	nop
}
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	240105bc 	.word	0x240105bc
 800ee0c:	08019eb4 	.word	0x08019eb4
 800ee10:	0801a0cc 	.word	0x0801a0cc
 800ee14:	08019f00 	.word	0x08019f00
 800ee18:	240105b0 	.word	0x240105b0
 800ee1c:	240105b4 	.word	0x240105b4
 800ee20:	240105ba 	.word	0x240105ba
 800ee24:	240105a0 	.word	0x240105a0
 800ee28:	24009aa8 	.word	0x24009aa8
 800ee2c:	24009aac 	.word	0x24009aac
 800ee30:	24010578 	.word	0x24010578

0800ee34 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ee34:	b590      	push	{r4, r7, lr}
 800ee36:	b08d      	sub	sp, #52	@ 0x34
 800ee38:	af04      	add	r7, sp, #16
 800ee3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ee40:	2300      	movs	r3, #0
 800ee42:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d106      	bne.n	800ee58 <tcp_process+0x24>
 800ee4a:	4b9d      	ldr	r3, [pc, #628]	@ (800f0c0 <tcp_process+0x28c>)
 800ee4c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ee50:	499c      	ldr	r1, [pc, #624]	@ (800f0c4 <tcp_process+0x290>)
 800ee52:	489d      	ldr	r0, [pc, #628]	@ (800f0c8 <tcp_process+0x294>)
 800ee54:	f008 fe30 	bl	8017ab8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ee58:	4b9c      	ldr	r3, [pc, #624]	@ (800f0cc <tcp_process+0x298>)
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	f003 0304 	and.w	r3, r3, #4
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d04e      	beq.n	800ef02 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	7d1b      	ldrb	r3, [r3, #20]
 800ee68:	2b02      	cmp	r3, #2
 800ee6a:	d108      	bne.n	800ee7e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee70:	4b97      	ldr	r3, [pc, #604]	@ (800f0d0 <tcp_process+0x29c>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d123      	bne.n	800eec0 <tcp_process+0x8c>
        acceptable = 1;
 800ee78:	2301      	movs	r3, #1
 800ee7a:	76fb      	strb	r3, [r7, #27]
 800ee7c:	e020      	b.n	800eec0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee82:	4b94      	ldr	r3, [pc, #592]	@ (800f0d4 <tcp_process+0x2a0>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d102      	bne.n	800ee90 <tcp_process+0x5c>
        acceptable = 1;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	76fb      	strb	r3, [r7, #27]
 800ee8e:	e017      	b.n	800eec0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ee90:	4b90      	ldr	r3, [pc, #576]	@ (800f0d4 <tcp_process+0x2a0>)
 800ee92:	681a      	ldr	r2, [r3, #0]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee98:	1ad3      	subs	r3, r2, r3
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	db10      	blt.n	800eec0 <tcp_process+0x8c>
 800ee9e:	4b8d      	ldr	r3, [pc, #564]	@ (800f0d4 <tcp_process+0x2a0>)
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eea6:	6879      	ldr	r1, [r7, #4]
 800eea8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800eeaa:	440b      	add	r3, r1
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	dc06      	bgt.n	800eec0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	8b5b      	ldrh	r3, [r3, #26]
 800eeb6:	f043 0302 	orr.w	r3, r3, #2
 800eeba:	b29a      	uxth	r2, r3
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800eec0:	7efb      	ldrb	r3, [r7, #27]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d01b      	beq.n	800eefe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	7d1b      	ldrb	r3, [r3, #20]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d106      	bne.n	800eedc <tcp_process+0xa8>
 800eece:	4b7c      	ldr	r3, [pc, #496]	@ (800f0c0 <tcp_process+0x28c>)
 800eed0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800eed4:	4980      	ldr	r1, [pc, #512]	@ (800f0d8 <tcp_process+0x2a4>)
 800eed6:	487c      	ldr	r0, [pc, #496]	@ (800f0c8 <tcp_process+0x294>)
 800eed8:	f008 fdee 	bl	8017ab8 <iprintf>
      recv_flags |= TF_RESET;
 800eedc:	4b7f      	ldr	r3, [pc, #508]	@ (800f0dc <tcp_process+0x2a8>)
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	f043 0308 	orr.w	r3, r3, #8
 800eee4:	b2da      	uxtb	r2, r3
 800eee6:	4b7d      	ldr	r3, [pc, #500]	@ (800f0dc <tcp_process+0x2a8>)
 800eee8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	8b5b      	ldrh	r3, [r3, #26]
 800eeee:	f023 0301 	bic.w	r3, r3, #1
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800eef8:	f06f 030d 	mvn.w	r3, #13
 800eefc:	e37a      	b.n	800f5f4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800eefe:	2300      	movs	r3, #0
 800ef00:	e378      	b.n	800f5f4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ef02:	4b72      	ldr	r3, [pc, #456]	@ (800f0cc <tcp_process+0x298>)
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	f003 0302 	and.w	r3, r3, #2
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d010      	beq.n	800ef30 <tcp_process+0xfc>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	7d1b      	ldrb	r3, [r3, #20]
 800ef12:	2b02      	cmp	r3, #2
 800ef14:	d00c      	beq.n	800ef30 <tcp_process+0xfc>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	7d1b      	ldrb	r3, [r3, #20]
 800ef1a:	2b03      	cmp	r3, #3
 800ef1c:	d008      	beq.n	800ef30 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	8b5b      	ldrh	r3, [r3, #26]
 800ef22:	f043 0302 	orr.w	r3, r3, #2
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	e361      	b.n	800f5f4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	8b5b      	ldrh	r3, [r3, #26]
 800ef34:	f003 0310 	and.w	r3, r3, #16
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d103      	bne.n	800ef44 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ef3c:	4b68      	ldr	r3, [pc, #416]	@ (800f0e0 <tcp_process+0x2ac>)
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2200      	movs	r2, #0
 800ef48:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f001 fc2b 	bl	80107b0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	7d1b      	ldrb	r3, [r3, #20]
 800ef5e:	3b02      	subs	r3, #2
 800ef60:	2b07      	cmp	r3, #7
 800ef62:	f200 8337 	bhi.w	800f5d4 <tcp_process+0x7a0>
 800ef66:	a201      	add	r2, pc, #4	@ (adr r2, 800ef6c <tcp_process+0x138>)
 800ef68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef6c:	0800ef8d 	.word	0x0800ef8d
 800ef70:	0800f1bd 	.word	0x0800f1bd
 800ef74:	0800f335 	.word	0x0800f335
 800ef78:	0800f35f 	.word	0x0800f35f
 800ef7c:	0800f483 	.word	0x0800f483
 800ef80:	0800f335 	.word	0x0800f335
 800ef84:	0800f50f 	.word	0x0800f50f
 800ef88:	0800f59f 	.word	0x0800f59f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ef8c:	4b4f      	ldr	r3, [pc, #316]	@ (800f0cc <tcp_process+0x298>)
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	f003 0310 	and.w	r3, r3, #16
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	f000 80e4 	beq.w	800f162 <tcp_process+0x32e>
 800ef9a:	4b4c      	ldr	r3, [pc, #304]	@ (800f0cc <tcp_process+0x298>)
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	f003 0302 	and.w	r3, r3, #2
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f000 80dd 	beq.w	800f162 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800efac:	1c5a      	adds	r2, r3, #1
 800efae:	4b48      	ldr	r3, [pc, #288]	@ (800f0d0 <tcp_process+0x29c>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	f040 80d5 	bne.w	800f162 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800efb8:	4b46      	ldr	r3, [pc, #280]	@ (800f0d4 <tcp_process+0x2a0>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	1c5a      	adds	r2, r3, #1
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800efca:	4b41      	ldr	r3, [pc, #260]	@ (800f0d0 <tcp_process+0x29c>)
 800efcc:	681a      	ldr	r2, [r3, #0]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800efd2:	4b44      	ldr	r3, [pc, #272]	@ (800f0e4 <tcp_process+0x2b0>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	89db      	ldrh	r3, [r3, #14]
 800efd8:	b29a      	uxth	r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800efec:	4b39      	ldr	r3, [pc, #228]	@ (800f0d4 <tcp_process+0x2a0>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	1e5a      	subs	r2, r3, #1
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2204      	movs	r2, #4
 800effa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	3304      	adds	r3, #4
 800f004:	4618      	mov	r0, r3
 800f006:	f007 f953 	bl	80162b0 <ip4_route>
 800f00a:	4601      	mov	r1, r0
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	3304      	adds	r3, #4
 800f010:	461a      	mov	r2, r3
 800f012:	4620      	mov	r0, r4
 800f014:	f7ff f88a 	bl	800e12c <tcp_eff_send_mss_netif>
 800f018:	4603      	mov	r3, r0
 800f01a:	461a      	mov	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f024:	009a      	lsls	r2, r3, #2
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f02a:	005b      	lsls	r3, r3, #1
 800f02c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f030:	428b      	cmp	r3, r1
 800f032:	bf38      	it	cc
 800f034:	460b      	movcc	r3, r1
 800f036:	429a      	cmp	r2, r3
 800f038:	d204      	bcs.n	800f044 <tcp_process+0x210>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	b29b      	uxth	r3, r3
 800f042:	e00d      	b.n	800f060 <tcp_process+0x22c>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f048:	005b      	lsls	r3, r3, #1
 800f04a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f04e:	4293      	cmp	r3, r2
 800f050:	d904      	bls.n	800f05c <tcp_process+0x228>
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f056:	005b      	lsls	r3, r3, #1
 800f058:	b29b      	uxth	r3, r3
 800f05a:	e001      	b.n	800f060 <tcp_process+0x22c>
 800f05c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f060:	687a      	ldr	r2, [r7, #4]
 800f062:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d106      	bne.n	800f07e <tcp_process+0x24a>
 800f070:	4b13      	ldr	r3, [pc, #76]	@ (800f0c0 <tcp_process+0x28c>)
 800f072:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800f076:	491c      	ldr	r1, [pc, #112]	@ (800f0e8 <tcp_process+0x2b4>)
 800f078:	4813      	ldr	r0, [pc, #76]	@ (800f0c8 <tcp_process+0x294>)
 800f07a:	f008 fd1d 	bl	8017ab8 <iprintf>
        --pcb->snd_queuelen;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f084:	3b01      	subs	r3, #1
 800f086:	b29a      	uxth	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f092:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d12a      	bne.n	800f0f0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f09e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d106      	bne.n	800f0b4 <tcp_process+0x280>
 800f0a6:	4b06      	ldr	r3, [pc, #24]	@ (800f0c0 <tcp_process+0x28c>)
 800f0a8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800f0ac:	490f      	ldr	r1, [pc, #60]	@ (800f0ec <tcp_process+0x2b8>)
 800f0ae:	4806      	ldr	r0, [pc, #24]	@ (800f0c8 <tcp_process+0x294>)
 800f0b0:	f008 fd02 	bl	8017ab8 <iprintf>
          pcb->unsent = rseg->next;
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f0bc:	e01c      	b.n	800f0f8 <tcp_process+0x2c4>
 800f0be:	bf00      	nop
 800f0c0:	08019eb4 	.word	0x08019eb4
 800f0c4:	0801a0ec 	.word	0x0801a0ec
 800f0c8:	08019f00 	.word	0x08019f00
 800f0cc:	240105bc 	.word	0x240105bc
 800f0d0:	240105b4 	.word	0x240105b4
 800f0d4:	240105b0 	.word	0x240105b0
 800f0d8:	0801a108 	.word	0x0801a108
 800f0dc:	240105bd 	.word	0x240105bd
 800f0e0:	24010578 	.word	0x24010578
 800f0e4:	240105a0 	.word	0x240105a0
 800f0e8:	0801a128 	.word	0x0801a128
 800f0ec:	0801a140 	.word	0x0801a140
        } else {
          pcb->unacked = rseg->next;
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800f0f8:	69f8      	ldr	r0, [r7, #28]
 800f0fa:	f7fe fc48 	bl	800d98e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f102:	2b00      	cmp	r3, #0
 800f104:	d104      	bne.n	800f110 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f10c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f10e:	e006      	b.n	800f11e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2200      	movs	r2, #0
 800f114:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2200      	movs	r2, #0
 800f11a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f124:	2b00      	cmp	r3, #0
 800f126:	d00a      	beq.n	800f13e <tcp_process+0x30a>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	6910      	ldr	r0, [r2, #16]
 800f132:	2200      	movs	r2, #0
 800f134:	6879      	ldr	r1, [r7, #4]
 800f136:	4798      	blx	r3
 800f138:	4603      	mov	r3, r0
 800f13a:	76bb      	strb	r3, [r7, #26]
 800f13c:	e001      	b.n	800f142 <tcp_process+0x30e>
 800f13e:	2300      	movs	r3, #0
 800f140:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f142:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f146:	f113 0f0d 	cmn.w	r3, #13
 800f14a:	d102      	bne.n	800f152 <tcp_process+0x31e>
          return ERR_ABRT;
 800f14c:	f06f 030c 	mvn.w	r3, #12
 800f150:	e250      	b.n	800f5f4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	8b5b      	ldrh	r3, [r3, #26]
 800f156:	f043 0302 	orr.w	r3, r3, #2
 800f15a:	b29a      	uxth	r2, r3
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f160:	e23a      	b.n	800f5d8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f162:	4b98      	ldr	r3, [pc, #608]	@ (800f3c4 <tcp_process+0x590>)
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	f003 0310 	and.w	r3, r3, #16
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	f000 8234 	beq.w	800f5d8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f170:	4b95      	ldr	r3, [pc, #596]	@ (800f3c8 <tcp_process+0x594>)
 800f172:	6819      	ldr	r1, [r3, #0]
 800f174:	4b95      	ldr	r3, [pc, #596]	@ (800f3cc <tcp_process+0x598>)
 800f176:	881b      	ldrh	r3, [r3, #0]
 800f178:	461a      	mov	r2, r3
 800f17a:	4b95      	ldr	r3, [pc, #596]	@ (800f3d0 <tcp_process+0x59c>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f180:	4b94      	ldr	r3, [pc, #592]	@ (800f3d4 <tcp_process+0x5a0>)
 800f182:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f184:	885b      	ldrh	r3, [r3, #2]
 800f186:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f188:	4a92      	ldr	r2, [pc, #584]	@ (800f3d4 <tcp_process+0x5a0>)
 800f18a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f18c:	8812      	ldrh	r2, [r2, #0]
 800f18e:	b292      	uxth	r2, r2
 800f190:	9202      	str	r2, [sp, #8]
 800f192:	9301      	str	r3, [sp, #4]
 800f194:	4b90      	ldr	r3, [pc, #576]	@ (800f3d8 <tcp_process+0x5a4>)
 800f196:	9300      	str	r3, [sp, #0]
 800f198:	4b90      	ldr	r3, [pc, #576]	@ (800f3dc <tcp_process+0x5a8>)
 800f19a:	4602      	mov	r2, r0
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f003 f8dd 	bl	801235c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f1a8:	2b05      	cmp	r3, #5
 800f1aa:	f200 8215 	bhi.w	800f5d8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f002 fea9 	bl	8011f0c <tcp_rexmit_rto>
      break;
 800f1ba:	e20d      	b.n	800f5d8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f1bc:	4b81      	ldr	r3, [pc, #516]	@ (800f3c4 <tcp_process+0x590>)
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	f003 0310 	and.w	r3, r3, #16
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	f000 80a1 	beq.w	800f30c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f1ca:	4b7f      	ldr	r3, [pc, #508]	@ (800f3c8 <tcp_process+0x594>)
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1d2:	1ad3      	subs	r3, r2, r3
 800f1d4:	3b01      	subs	r3, #1
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	db7e      	blt.n	800f2d8 <tcp_process+0x4a4>
 800f1da:	4b7b      	ldr	r3, [pc, #492]	@ (800f3c8 <tcp_process+0x594>)
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1e2:	1ad3      	subs	r3, r2, r3
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	dc77      	bgt.n	800f2d8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2204      	movs	r2, #4
 800f1ec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d102      	bne.n	800f1fc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f1f6:	23fa      	movs	r3, #250	@ 0xfa
 800f1f8:	76bb      	strb	r3, [r7, #26]
 800f1fa:	e01d      	b.n	800f238 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f200:	699b      	ldr	r3, [r3, #24]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d106      	bne.n	800f214 <tcp_process+0x3e0>
 800f206:	4b76      	ldr	r3, [pc, #472]	@ (800f3e0 <tcp_process+0x5ac>)
 800f208:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800f20c:	4975      	ldr	r1, [pc, #468]	@ (800f3e4 <tcp_process+0x5b0>)
 800f20e:	4876      	ldr	r0, [pc, #472]	@ (800f3e8 <tcp_process+0x5b4>)
 800f210:	f008 fc52 	bl	8017ab8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f218:	699b      	ldr	r3, [r3, #24]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d00a      	beq.n	800f234 <tcp_process+0x400>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f222:	699b      	ldr	r3, [r3, #24]
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	6910      	ldr	r0, [r2, #16]
 800f228:	2200      	movs	r2, #0
 800f22a:	6879      	ldr	r1, [r7, #4]
 800f22c:	4798      	blx	r3
 800f22e:	4603      	mov	r3, r0
 800f230:	76bb      	strb	r3, [r7, #26]
 800f232:	e001      	b.n	800f238 <tcp_process+0x404>
 800f234:	23f0      	movs	r3, #240	@ 0xf0
 800f236:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f238:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d00a      	beq.n	800f256 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f240:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f244:	f113 0f0d 	cmn.w	r3, #13
 800f248:	d002      	beq.n	800f250 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7fd fbd2 	bl	800c9f4 <tcp_abort>
            }
            return ERR_ABRT;
 800f250:	f06f 030c 	mvn.w	r3, #12
 800f254:	e1ce      	b.n	800f5f4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f000 fae0 	bl	800f81c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f25c:	4b63      	ldr	r3, [pc, #396]	@ (800f3ec <tcp_process+0x5b8>)
 800f25e:	881b      	ldrh	r3, [r3, #0]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d005      	beq.n	800f270 <tcp_process+0x43c>
            recv_acked--;
 800f264:	4b61      	ldr	r3, [pc, #388]	@ (800f3ec <tcp_process+0x5b8>)
 800f266:	881b      	ldrh	r3, [r3, #0]
 800f268:	3b01      	subs	r3, #1
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	4b5f      	ldr	r3, [pc, #380]	@ (800f3ec <tcp_process+0x5b8>)
 800f26e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f274:	009a      	lsls	r2, r3, #2
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f27a:	005b      	lsls	r3, r3, #1
 800f27c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f280:	428b      	cmp	r3, r1
 800f282:	bf38      	it	cc
 800f284:	460b      	movcc	r3, r1
 800f286:	429a      	cmp	r2, r3
 800f288:	d204      	bcs.n	800f294 <tcp_process+0x460>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f28e:	009b      	lsls	r3, r3, #2
 800f290:	b29b      	uxth	r3, r3
 800f292:	e00d      	b.n	800f2b0 <tcp_process+0x47c>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f298:	005b      	lsls	r3, r3, #1
 800f29a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d904      	bls.n	800f2ac <tcp_process+0x478>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f2a6:	005b      	lsls	r3, r3, #1
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	e001      	b.n	800f2b0 <tcp_process+0x47c>
 800f2ac:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f2b6:	4b4e      	ldr	r3, [pc, #312]	@ (800f3f0 <tcp_process+0x5bc>)
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	f003 0320 	and.w	r3, r3, #32
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d037      	beq.n	800f332 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	8b5b      	ldrh	r3, [r3, #26]
 800f2c6:	f043 0302 	orr.w	r3, r3, #2
 800f2ca:	b29a      	uxth	r2, r3
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2207      	movs	r2, #7
 800f2d4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f2d6:	e02c      	b.n	800f332 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2d8:	4b3b      	ldr	r3, [pc, #236]	@ (800f3c8 <tcp_process+0x594>)
 800f2da:	6819      	ldr	r1, [r3, #0]
 800f2dc:	4b3b      	ldr	r3, [pc, #236]	@ (800f3cc <tcp_process+0x598>)
 800f2de:	881b      	ldrh	r3, [r3, #0]
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	4b3b      	ldr	r3, [pc, #236]	@ (800f3d0 <tcp_process+0x59c>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2e8:	4b3a      	ldr	r3, [pc, #232]	@ (800f3d4 <tcp_process+0x5a0>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2ec:	885b      	ldrh	r3, [r3, #2]
 800f2ee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2f0:	4a38      	ldr	r2, [pc, #224]	@ (800f3d4 <tcp_process+0x5a0>)
 800f2f2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2f4:	8812      	ldrh	r2, [r2, #0]
 800f2f6:	b292      	uxth	r2, r2
 800f2f8:	9202      	str	r2, [sp, #8]
 800f2fa:	9301      	str	r3, [sp, #4]
 800f2fc:	4b36      	ldr	r3, [pc, #216]	@ (800f3d8 <tcp_process+0x5a4>)
 800f2fe:	9300      	str	r3, [sp, #0]
 800f300:	4b36      	ldr	r3, [pc, #216]	@ (800f3dc <tcp_process+0x5a8>)
 800f302:	4602      	mov	r2, r0
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f003 f829 	bl	801235c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f30a:	e167      	b.n	800f5dc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f30c:	4b2d      	ldr	r3, [pc, #180]	@ (800f3c4 <tcp_process+0x590>)
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	f003 0302 	and.w	r3, r3, #2
 800f314:	2b00      	cmp	r3, #0
 800f316:	f000 8161 	beq.w	800f5dc <tcp_process+0x7a8>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f31e:	1e5a      	subs	r2, r3, #1
 800f320:	4b2b      	ldr	r3, [pc, #172]	@ (800f3d0 <tcp_process+0x59c>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	429a      	cmp	r2, r3
 800f326:	f040 8159 	bne.w	800f5dc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f002 fe10 	bl	8011f50 <tcp_rexmit>
      break;
 800f330:	e154      	b.n	800f5dc <tcp_process+0x7a8>
 800f332:	e153      	b.n	800f5dc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 fa71 	bl	800f81c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f33a:	4b2d      	ldr	r3, [pc, #180]	@ (800f3f0 <tcp_process+0x5bc>)
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	f003 0320 	and.w	r3, r3, #32
 800f342:	2b00      	cmp	r3, #0
 800f344:	f000 814c 	beq.w	800f5e0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	8b5b      	ldrh	r3, [r3, #26]
 800f34c:	f043 0302 	orr.w	r3, r3, #2
 800f350:	b29a      	uxth	r2, r3
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2207      	movs	r2, #7
 800f35a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f35c:	e140      	b.n	800f5e0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 fa5c 	bl	800f81c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f364:	4b22      	ldr	r3, [pc, #136]	@ (800f3f0 <tcp_process+0x5bc>)
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	f003 0320 	and.w	r3, r3, #32
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d071      	beq.n	800f454 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f370:	4b14      	ldr	r3, [pc, #80]	@ (800f3c4 <tcp_process+0x590>)
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	f003 0310 	and.w	r3, r3, #16
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d060      	beq.n	800f43e <tcp_process+0x60a>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f380:	4b11      	ldr	r3, [pc, #68]	@ (800f3c8 <tcp_process+0x594>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	429a      	cmp	r2, r3
 800f386:	d15a      	bne.n	800f43e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d156      	bne.n	800f43e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	8b5b      	ldrh	r3, [r3, #26]
 800f394:	f043 0302 	orr.w	r3, r3, #2
 800f398:	b29a      	uxth	r2, r3
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7fe fdba 	bl	800df18 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f3a4:	4b13      	ldr	r3, [pc, #76]	@ (800f3f4 <tcp_process+0x5c0>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	687a      	ldr	r2, [r7, #4]
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d105      	bne.n	800f3ba <tcp_process+0x586>
 800f3ae:	4b11      	ldr	r3, [pc, #68]	@ (800f3f4 <tcp_process+0x5c0>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	68db      	ldr	r3, [r3, #12]
 800f3b4:	4a0f      	ldr	r2, [pc, #60]	@ (800f3f4 <tcp_process+0x5c0>)
 800f3b6:	6013      	str	r3, [r2, #0]
 800f3b8:	e02e      	b.n	800f418 <tcp_process+0x5e4>
 800f3ba:	4b0e      	ldr	r3, [pc, #56]	@ (800f3f4 <tcp_process+0x5c0>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	617b      	str	r3, [r7, #20]
 800f3c0:	e027      	b.n	800f412 <tcp_process+0x5de>
 800f3c2:	bf00      	nop
 800f3c4:	240105bc 	.word	0x240105bc
 800f3c8:	240105b4 	.word	0x240105b4
 800f3cc:	240105ba 	.word	0x240105ba
 800f3d0:	240105b0 	.word	0x240105b0
 800f3d4:	240105a0 	.word	0x240105a0
 800f3d8:	24009aa8 	.word	0x24009aa8
 800f3dc:	24009aac 	.word	0x24009aac
 800f3e0:	08019eb4 	.word	0x08019eb4
 800f3e4:	0801a154 	.word	0x0801a154
 800f3e8:	08019f00 	.word	0x08019f00
 800f3ec:	240105b8 	.word	0x240105b8
 800f3f0:	240105bd 	.word	0x240105bd
 800f3f4:	24010584 	.word	0x24010584
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	68db      	ldr	r3, [r3, #12]
 800f3fc:	687a      	ldr	r2, [r7, #4]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d104      	bne.n	800f40c <tcp_process+0x5d8>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	68da      	ldr	r2, [r3, #12]
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	60da      	str	r2, [r3, #12]
 800f40a:	e005      	b.n	800f418 <tcp_process+0x5e4>
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	68db      	ldr	r3, [r3, #12]
 800f410:	617b      	str	r3, [r7, #20]
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d1ef      	bne.n	800f3f8 <tcp_process+0x5c4>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2200      	movs	r2, #0
 800f41c:	60da      	str	r2, [r3, #12]
 800f41e:	4b77      	ldr	r3, [pc, #476]	@ (800f5fc <tcp_process+0x7c8>)
 800f420:	2201      	movs	r2, #1
 800f422:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	220a      	movs	r2, #10
 800f428:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f42a:	4b75      	ldr	r3, [pc, #468]	@ (800f600 <tcp_process+0x7cc>)
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	60da      	str	r2, [r3, #12]
 800f432:	4a73      	ldr	r2, [pc, #460]	@ (800f600 <tcp_process+0x7cc>)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6013      	str	r3, [r2, #0]
 800f438:	f003 f952 	bl	80126e0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f43c:	e0d2      	b.n	800f5e4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	8b5b      	ldrh	r3, [r3, #26]
 800f442:	f043 0302 	orr.w	r3, r3, #2
 800f446:	b29a      	uxth	r2, r3
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2208      	movs	r2, #8
 800f450:	751a      	strb	r2, [r3, #20]
      break;
 800f452:	e0c7      	b.n	800f5e4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f454:	4b6b      	ldr	r3, [pc, #428]	@ (800f604 <tcp_process+0x7d0>)
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	f003 0310 	and.w	r3, r3, #16
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f000 80c1 	beq.w	800f5e4 <tcp_process+0x7b0>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f466:	4b68      	ldr	r3, [pc, #416]	@ (800f608 <tcp_process+0x7d4>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	f040 80ba 	bne.w	800f5e4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f474:	2b00      	cmp	r3, #0
 800f476:	f040 80b5 	bne.w	800f5e4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2206      	movs	r2, #6
 800f47e:	751a      	strb	r2, [r3, #20]
      break;
 800f480:	e0b0      	b.n	800f5e4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 f9ca 	bl	800f81c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f488:	4b60      	ldr	r3, [pc, #384]	@ (800f60c <tcp_process+0x7d8>)
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	f003 0320 	and.w	r3, r3, #32
 800f490:	2b00      	cmp	r3, #0
 800f492:	f000 80a9 	beq.w	800f5e8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	8b5b      	ldrh	r3, [r3, #26]
 800f49a:	f043 0302 	orr.w	r3, r3, #2
 800f49e:	b29a      	uxth	r2, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f7fe fd37 	bl	800df18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f4aa:	4b59      	ldr	r3, [pc, #356]	@ (800f610 <tcp_process+0x7dc>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	687a      	ldr	r2, [r7, #4]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d105      	bne.n	800f4c0 <tcp_process+0x68c>
 800f4b4:	4b56      	ldr	r3, [pc, #344]	@ (800f610 <tcp_process+0x7dc>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	68db      	ldr	r3, [r3, #12]
 800f4ba:	4a55      	ldr	r2, [pc, #340]	@ (800f610 <tcp_process+0x7dc>)
 800f4bc:	6013      	str	r3, [r2, #0]
 800f4be:	e013      	b.n	800f4e8 <tcp_process+0x6b4>
 800f4c0:	4b53      	ldr	r3, [pc, #332]	@ (800f610 <tcp_process+0x7dc>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	613b      	str	r3, [r7, #16]
 800f4c6:	e00c      	b.n	800f4e2 <tcp_process+0x6ae>
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	68db      	ldr	r3, [r3, #12]
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d104      	bne.n	800f4dc <tcp_process+0x6a8>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	68da      	ldr	r2, [r3, #12]
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	60da      	str	r2, [r3, #12]
 800f4da:	e005      	b.n	800f4e8 <tcp_process+0x6b4>
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	613b      	str	r3, [r7, #16]
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d1ef      	bne.n	800f4c8 <tcp_process+0x694>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	60da      	str	r2, [r3, #12]
 800f4ee:	4b43      	ldr	r3, [pc, #268]	@ (800f5fc <tcp_process+0x7c8>)
 800f4f0:	2201      	movs	r2, #1
 800f4f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	220a      	movs	r2, #10
 800f4f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f4fa:	4b41      	ldr	r3, [pc, #260]	@ (800f600 <tcp_process+0x7cc>)
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	60da      	str	r2, [r3, #12]
 800f502:	4a3f      	ldr	r2, [pc, #252]	@ (800f600 <tcp_process+0x7cc>)
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6013      	str	r3, [r2, #0]
 800f508:	f003 f8ea 	bl	80126e0 <tcp_timer_needed>
      }
      break;
 800f50c:	e06c      	b.n	800f5e8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f000 f984 	bl	800f81c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f514:	4b3b      	ldr	r3, [pc, #236]	@ (800f604 <tcp_process+0x7d0>)
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	f003 0310 	and.w	r3, r3, #16
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d065      	beq.n	800f5ec <tcp_process+0x7b8>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f524:	4b38      	ldr	r3, [pc, #224]	@ (800f608 <tcp_process+0x7d4>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	429a      	cmp	r2, r3
 800f52a:	d15f      	bne.n	800f5ec <tcp_process+0x7b8>
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f530:	2b00      	cmp	r3, #0
 800f532:	d15b      	bne.n	800f5ec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f7fe fcef 	bl	800df18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f53a:	4b35      	ldr	r3, [pc, #212]	@ (800f610 <tcp_process+0x7dc>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	429a      	cmp	r2, r3
 800f542:	d105      	bne.n	800f550 <tcp_process+0x71c>
 800f544:	4b32      	ldr	r3, [pc, #200]	@ (800f610 <tcp_process+0x7dc>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	4a31      	ldr	r2, [pc, #196]	@ (800f610 <tcp_process+0x7dc>)
 800f54c:	6013      	str	r3, [r2, #0]
 800f54e:	e013      	b.n	800f578 <tcp_process+0x744>
 800f550:	4b2f      	ldr	r3, [pc, #188]	@ (800f610 <tcp_process+0x7dc>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	60fb      	str	r3, [r7, #12]
 800f556:	e00c      	b.n	800f572 <tcp_process+0x73e>
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	687a      	ldr	r2, [r7, #4]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d104      	bne.n	800f56c <tcp_process+0x738>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	68da      	ldr	r2, [r3, #12]
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	60da      	str	r2, [r3, #12]
 800f56a:	e005      	b.n	800f578 <tcp_process+0x744>
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	60fb      	str	r3, [r7, #12]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d1ef      	bne.n	800f558 <tcp_process+0x724>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	60da      	str	r2, [r3, #12]
 800f57e:	4b1f      	ldr	r3, [pc, #124]	@ (800f5fc <tcp_process+0x7c8>)
 800f580:	2201      	movs	r2, #1
 800f582:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	220a      	movs	r2, #10
 800f588:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f58a:	4b1d      	ldr	r3, [pc, #116]	@ (800f600 <tcp_process+0x7cc>)
 800f58c:	681a      	ldr	r2, [r3, #0]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	60da      	str	r2, [r3, #12]
 800f592:	4a1b      	ldr	r2, [pc, #108]	@ (800f600 <tcp_process+0x7cc>)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6013      	str	r3, [r2, #0]
 800f598:	f003 f8a2 	bl	80126e0 <tcp_timer_needed>
      }
      break;
 800f59c:	e026      	b.n	800f5ec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f000 f93c 	bl	800f81c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f5a4:	4b17      	ldr	r3, [pc, #92]	@ (800f604 <tcp_process+0x7d0>)
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	f003 0310 	and.w	r3, r3, #16
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d01f      	beq.n	800f5f0 <tcp_process+0x7bc>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f5b4:	4b14      	ldr	r3, [pc, #80]	@ (800f608 <tcp_process+0x7d4>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d119      	bne.n	800f5f0 <tcp_process+0x7bc>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d115      	bne.n	800f5f0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f5c4:	4b11      	ldr	r3, [pc, #68]	@ (800f60c <tcp_process+0x7d8>)
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	f043 0310 	orr.w	r3, r3, #16
 800f5cc:	b2da      	uxtb	r2, r3
 800f5ce:	4b0f      	ldr	r3, [pc, #60]	@ (800f60c <tcp_process+0x7d8>)
 800f5d0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f5d2:	e00d      	b.n	800f5f0 <tcp_process+0x7bc>
    default:
      break;
 800f5d4:	bf00      	nop
 800f5d6:	e00c      	b.n	800f5f2 <tcp_process+0x7be>
      break;
 800f5d8:	bf00      	nop
 800f5da:	e00a      	b.n	800f5f2 <tcp_process+0x7be>
      break;
 800f5dc:	bf00      	nop
 800f5de:	e008      	b.n	800f5f2 <tcp_process+0x7be>
      break;
 800f5e0:	bf00      	nop
 800f5e2:	e006      	b.n	800f5f2 <tcp_process+0x7be>
      break;
 800f5e4:	bf00      	nop
 800f5e6:	e004      	b.n	800f5f2 <tcp_process+0x7be>
      break;
 800f5e8:	bf00      	nop
 800f5ea:	e002      	b.n	800f5f2 <tcp_process+0x7be>
      break;
 800f5ec:	bf00      	nop
 800f5ee:	e000      	b.n	800f5f2 <tcp_process+0x7be>
      break;
 800f5f0:	bf00      	nop
  }
  return ERR_OK;
 800f5f2:	2300      	movs	r3, #0
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3724      	adds	r7, #36	@ 0x24
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd90      	pop	{r4, r7, pc}
 800f5fc:	2401058c 	.word	0x2401058c
 800f600:	24010588 	.word	0x24010588
 800f604:	240105bc 	.word	0x240105bc
 800f608:	240105b4 	.word	0x240105b4
 800f60c:	240105bd 	.word	0x240105bd
 800f610:	24010584 	.word	0x24010584

0800f614 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f614:	b590      	push	{r4, r7, lr}
 800f616:	b085      	sub	sp, #20
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d106      	bne.n	800f632 <tcp_oos_insert_segment+0x1e>
 800f624:	4b3b      	ldr	r3, [pc, #236]	@ (800f714 <tcp_oos_insert_segment+0x100>)
 800f626:	f240 421f 	movw	r2, #1055	@ 0x41f
 800f62a:	493b      	ldr	r1, [pc, #236]	@ (800f718 <tcp_oos_insert_segment+0x104>)
 800f62c:	483b      	ldr	r0, [pc, #236]	@ (800f71c <tcp_oos_insert_segment+0x108>)
 800f62e:	f008 fa43 	bl	8017ab8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	68db      	ldr	r3, [r3, #12]
 800f636:	899b      	ldrh	r3, [r3, #12]
 800f638:	b29b      	uxth	r3, r3
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fa feca 	bl	800a3d4 <lwip_htons>
 800f640:	4603      	mov	r3, r0
 800f642:	b2db      	uxtb	r3, r3
 800f644:	f003 0301 	and.w	r3, r3, #1
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d028      	beq.n	800f69e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f64c:	6838      	ldr	r0, [r7, #0]
 800f64e:	f7fe f989 	bl	800d964 <tcp_segs_free>
    next = NULL;
 800f652:	2300      	movs	r3, #0
 800f654:	603b      	str	r3, [r7, #0]
 800f656:	e056      	b.n	800f706 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	899b      	ldrh	r3, [r3, #12]
 800f65e:	b29b      	uxth	r3, r3
 800f660:	4618      	mov	r0, r3
 800f662:	f7fa feb7 	bl	800a3d4 <lwip_htons>
 800f666:	4603      	mov	r3, r0
 800f668:	b2db      	uxtb	r3, r3
 800f66a:	f003 0301 	and.w	r3, r3, #1
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00d      	beq.n	800f68e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	68db      	ldr	r3, [r3, #12]
 800f676:	899b      	ldrh	r3, [r3, #12]
 800f678:	b29c      	uxth	r4, r3
 800f67a:	2001      	movs	r0, #1
 800f67c:	f7fa feaa 	bl	800a3d4 <lwip_htons>
 800f680:	4603      	mov	r3, r0
 800f682:	461a      	mov	r2, r3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	4322      	orrs	r2, r4
 800f68a:	b292      	uxth	r2, r2
 800f68c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f698:	68f8      	ldr	r0, [r7, #12]
 800f69a:	f7fe f978 	bl	800d98e <tcp_seg_free>
    while (next &&
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d00e      	beq.n	800f6c2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	891b      	ldrh	r3, [r3, #8]
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	4b1d      	ldr	r3, [pc, #116]	@ (800f720 <tcp_oos_insert_segment+0x10c>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	441a      	add	r2, r3
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	68db      	ldr	r3, [r3, #12]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	6839      	ldr	r1, [r7, #0]
 800f6b8:	8909      	ldrh	r1, [r1, #8]
 800f6ba:	440b      	add	r3, r1
 800f6bc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	daca      	bge.n	800f658 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d01e      	beq.n	800f706 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	891b      	ldrh	r3, [r3, #8]
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	4b14      	ldr	r3, [pc, #80]	@ (800f720 <tcp_oos_insert_segment+0x10c>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	441a      	add	r2, r3
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	dd12      	ble.n	800f706 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	68db      	ldr	r3, [r3, #12]
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	b29a      	uxth	r2, r3
 800f6e8:	4b0d      	ldr	r3, [pc, #52]	@ (800f720 <tcp_oos_insert_segment+0x10c>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	1ad3      	subs	r3, r2, r3
 800f6f0:	b29a      	uxth	r2, r3
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	685a      	ldr	r2, [r3, #4]
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	891b      	ldrh	r3, [r3, #8]
 800f6fe:	4619      	mov	r1, r3
 800f700:	4610      	mov	r0, r2
 800f702:	f7fc f993 	bl	800ba2c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	683a      	ldr	r2, [r7, #0]
 800f70a:	601a      	str	r2, [r3, #0]
}
 800f70c:	bf00      	nop
 800f70e:	3714      	adds	r7, #20
 800f710:	46bd      	mov	sp, r7
 800f712:	bd90      	pop	{r4, r7, pc}
 800f714:	08019eb4 	.word	0x08019eb4
 800f718:	0801a174 	.word	0x0801a174
 800f71c:	08019f00 	.word	0x08019f00
 800f720:	240105b0 	.word	0x240105b0

0800f724 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f724:	b5b0      	push	{r4, r5, r7, lr}
 800f726:	b086      	sub	sp, #24
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
 800f730:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f732:	e03e      	b.n	800f7b2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	4618      	mov	r0, r3
 800f744:	f7fc fb84 	bl	800be50 <pbuf_clen>
 800f748:	4603      	mov	r3, r0
 800f74a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f752:	8a7a      	ldrh	r2, [r7, #18]
 800f754:	429a      	cmp	r2, r3
 800f756:	d906      	bls.n	800f766 <tcp_free_acked_segments+0x42>
 800f758:	4b2a      	ldr	r3, [pc, #168]	@ (800f804 <tcp_free_acked_segments+0xe0>)
 800f75a:	f240 4257 	movw	r2, #1111	@ 0x457
 800f75e:	492a      	ldr	r1, [pc, #168]	@ (800f808 <tcp_free_acked_segments+0xe4>)
 800f760:	482a      	ldr	r0, [pc, #168]	@ (800f80c <tcp_free_acked_segments+0xe8>)
 800f762:	f008 f9a9 	bl	8017ab8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800f76c:	8a7b      	ldrh	r3, [r7, #18]
 800f76e:	1ad3      	subs	r3, r2, r3
 800f770:	b29a      	uxth	r2, r3
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	891a      	ldrh	r2, [r3, #8]
 800f77c:	4b24      	ldr	r3, [pc, #144]	@ (800f810 <tcp_free_acked_segments+0xec>)
 800f77e:	881b      	ldrh	r3, [r3, #0]
 800f780:	4413      	add	r3, r2
 800f782:	b29a      	uxth	r2, r3
 800f784:	4b22      	ldr	r3, [pc, #136]	@ (800f810 <tcp_free_acked_segments+0xec>)
 800f786:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f788:	6978      	ldr	r0, [r7, #20]
 800f78a:	f7fe f900 	bl	800d98e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f794:	2b00      	cmp	r3, #0
 800f796:	d00c      	beq.n	800f7b2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d109      	bne.n	800f7b2 <tcp_free_acked_segments+0x8e>
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d106      	bne.n	800f7b2 <tcp_free_acked_segments+0x8e>
 800f7a4:	4b17      	ldr	r3, [pc, #92]	@ (800f804 <tcp_free_acked_segments+0xe0>)
 800f7a6:	f240 4261 	movw	r2, #1121	@ 0x461
 800f7aa:	491a      	ldr	r1, [pc, #104]	@ (800f814 <tcp_free_acked_segments+0xf0>)
 800f7ac:	4817      	ldr	r0, [pc, #92]	@ (800f80c <tcp_free_acked_segments+0xe8>)
 800f7ae:	f008 f983 	bl	8017ab8 <iprintf>
  while (seg_list != NULL &&
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d020      	beq.n	800f7fa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7fa fe1d 	bl	800a3fe <lwip_htonl>
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	891b      	ldrh	r3, [r3, #8]
 800f7ca:	461d      	mov	r5, r3
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	899b      	ldrh	r3, [r3, #12]
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7fa fdfd 	bl	800a3d4 <lwip_htons>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	b2db      	uxtb	r3, r3
 800f7de:	f003 0303 	and.w	r3, r3, #3
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d001      	beq.n	800f7ea <tcp_free_acked_segments+0xc6>
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	e000      	b.n	800f7ec <tcp_free_acked_segments+0xc8>
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	442b      	add	r3, r5
 800f7ee:	18e2      	adds	r2, r4, r3
 800f7f0:	4b09      	ldr	r3, [pc, #36]	@ (800f818 <tcp_free_acked_segments+0xf4>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	dd9c      	ble.n	800f734 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f7fa:	68bb      	ldr	r3, [r7, #8]
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3718      	adds	r7, #24
 800f800:	46bd      	mov	sp, r7
 800f802:	bdb0      	pop	{r4, r5, r7, pc}
 800f804:	08019eb4 	.word	0x08019eb4
 800f808:	0801a19c 	.word	0x0801a19c
 800f80c:	08019f00 	.word	0x08019f00
 800f810:	240105b8 	.word	0x240105b8
 800f814:	0801a1c4 	.word	0x0801a1c4
 800f818:	240105b4 	.word	0x240105b4

0800f81c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f81c:	b5b0      	push	{r4, r5, r7, lr}
 800f81e:	b094      	sub	sp, #80	@ 0x50
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f824:	2300      	movs	r3, #0
 800f826:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d106      	bne.n	800f83c <tcp_receive+0x20>
 800f82e:	4b91      	ldr	r3, [pc, #580]	@ (800fa74 <tcp_receive+0x258>)
 800f830:	f240 427b 	movw	r2, #1147	@ 0x47b
 800f834:	4990      	ldr	r1, [pc, #576]	@ (800fa78 <tcp_receive+0x25c>)
 800f836:	4891      	ldr	r0, [pc, #580]	@ (800fa7c <tcp_receive+0x260>)
 800f838:	f008 f93e 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	7d1b      	ldrb	r3, [r3, #20]
 800f840:	2b03      	cmp	r3, #3
 800f842:	d806      	bhi.n	800f852 <tcp_receive+0x36>
 800f844:	4b8b      	ldr	r3, [pc, #556]	@ (800fa74 <tcp_receive+0x258>)
 800f846:	f240 427c 	movw	r2, #1148	@ 0x47c
 800f84a:	498d      	ldr	r1, [pc, #564]	@ (800fa80 <tcp_receive+0x264>)
 800f84c:	488b      	ldr	r0, [pc, #556]	@ (800fa7c <tcp_receive+0x260>)
 800f84e:	f008 f933 	bl	8017ab8 <iprintf>

  if (flags & TCP_ACK) {
 800f852:	4b8c      	ldr	r3, [pc, #560]	@ (800fa84 <tcp_receive+0x268>)
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	f003 0310 	and.w	r3, r3, #16
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	f000 8264 	beq.w	800fd28 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f866:	461a      	mov	r2, r3
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f86c:	4413      	add	r3, r2
 800f86e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f874:	4b84      	ldr	r3, [pc, #528]	@ (800fa88 <tcp_receive+0x26c>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	1ad3      	subs	r3, r2, r3
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	db1b      	blt.n	800f8b6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f882:	4b81      	ldr	r3, [pc, #516]	@ (800fa88 <tcp_receive+0x26c>)
 800f884:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f886:	429a      	cmp	r2, r3
 800f888:	d106      	bne.n	800f898 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f88e:	4b7f      	ldr	r3, [pc, #508]	@ (800fa8c <tcp_receive+0x270>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	1ad3      	subs	r3, r2, r3
 800f894:	2b00      	cmp	r3, #0
 800f896:	db0e      	blt.n	800f8b6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f89c:	4b7b      	ldr	r3, [pc, #492]	@ (800fa8c <tcp_receive+0x270>)
 800f89e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d125      	bne.n	800f8f0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f8a4:	4b7a      	ldr	r3, [pc, #488]	@ (800fa90 <tcp_receive+0x274>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	89db      	ldrh	r3, [r3, #14]
 800f8aa:	b29a      	uxth	r2, r3
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d91c      	bls.n	800f8f0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f8b6:	4b76      	ldr	r3, [pc, #472]	@ (800fa90 <tcp_receive+0x274>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	89db      	ldrh	r3, [r3, #14]
 800f8bc:	b29a      	uxth	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d205      	bcs.n	800f8e0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800f8e0:	4b69      	ldr	r3, [pc, #420]	@ (800fa88 <tcp_receive+0x26c>)
 800f8e2:	681a      	ldr	r2, [r3, #0]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800f8e8:	4b68      	ldr	r3, [pc, #416]	@ (800fa8c <tcp_receive+0x270>)
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f8f0:	4b66      	ldr	r3, [pc, #408]	@ (800fa8c <tcp_receive+0x270>)
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8f8:	1ad3      	subs	r3, r2, r3
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	dc58      	bgt.n	800f9b0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f8fe:	4b65      	ldr	r3, [pc, #404]	@ (800fa94 <tcp_receive+0x278>)
 800f900:	881b      	ldrh	r3, [r3, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d14b      	bne.n	800f99e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f90a:	687a      	ldr	r2, [r7, #4]
 800f90c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800f910:	4413      	add	r3, r2
 800f912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f914:	429a      	cmp	r2, r3
 800f916:	d142      	bne.n	800f99e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f91e:	2b00      	cmp	r3, #0
 800f920:	db3d      	blt.n	800f99e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f926:	4b59      	ldr	r3, [pc, #356]	@ (800fa8c <tcp_receive+0x270>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d137      	bne.n	800f99e <tcp_receive+0x182>
              found_dupack = 1;
 800f92e:	2301      	movs	r3, #1
 800f930:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f938:	2bff      	cmp	r3, #255	@ 0xff
 800f93a:	d007      	beq.n	800f94c <tcp_receive+0x130>
                ++pcb->dupacks;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f942:	3301      	adds	r3, #1
 800f944:	b2da      	uxtb	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f952:	2b03      	cmp	r3, #3
 800f954:	d91b      	bls.n	800f98e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f960:	4413      	add	r3, r2
 800f962:	b29a      	uxth	r2, r3
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d30a      	bcc.n	800f984 <tcp_receive+0x168>
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f978:	4413      	add	r3, r2
 800f97a:	b29a      	uxth	r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f982:	e004      	b.n	800f98e <tcp_receive+0x172>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f98a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f994:	2b02      	cmp	r3, #2
 800f996:	d902      	bls.n	800f99e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f002 fb45 	bl	8012028 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f99e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f040 8161 	bne.w	800fc68 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f9ae:	e15b      	b.n	800fc68 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f9b0:	4b36      	ldr	r3, [pc, #216]	@ (800fa8c <tcp_receive+0x270>)
 800f9b2:	681a      	ldr	r2, [r3, #0]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9b8:	1ad3      	subs	r3, r2, r3
 800f9ba:	3b01      	subs	r3, #1
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	f2c0 814e 	blt.w	800fc5e <tcp_receive+0x442>
 800f9c2:	4b32      	ldr	r3, [pc, #200]	@ (800fa8c <tcp_receive+0x270>)
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9ca:	1ad3      	subs	r3, r2, r3
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f300 8146 	bgt.w	800fc5e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	8b5b      	ldrh	r3, [r3, #26]
 800f9d6:	f003 0304 	and.w	r3, r3, #4
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d010      	beq.n	800fa00 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	8b5b      	ldrh	r3, [r3, #26]
 800f9e2:	f023 0304 	bic.w	r3, r3, #4
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2200      	movs	r2, #0
 800fa04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fa0e:	10db      	asrs	r3, r3, #3
 800fa10:	b21b      	sxth	r3, r3
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	4413      	add	r3, r2
 800fa1e:	b29b      	uxth	r3, r3
 800fa20:	b21a      	sxth	r2, r3
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fa28:	4b18      	ldr	r3, [pc, #96]	@ (800fa8c <tcp_receive+0x270>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	b29a      	uxth	r2, r3
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	1ad3      	subs	r3, r2, r3
 800fa36:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800fa40:	4b12      	ldr	r3, [pc, #72]	@ (800fa8c <tcp_receive+0x270>)
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	7d1b      	ldrb	r3, [r3, #20]
 800fa4c:	2b03      	cmp	r3, #3
 800fa4e:	f240 8097 	bls.w	800fb80 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d245      	bcs.n	800faee <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	8b5b      	ldrh	r3, [r3, #26]
 800fa66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d014      	beq.n	800fa98 <tcp_receive+0x27c>
 800fa6e:	2301      	movs	r3, #1
 800fa70:	e013      	b.n	800fa9a <tcp_receive+0x27e>
 800fa72:	bf00      	nop
 800fa74:	08019eb4 	.word	0x08019eb4
 800fa78:	0801a1e4 	.word	0x0801a1e4
 800fa7c:	08019f00 	.word	0x08019f00
 800fa80:	0801a200 	.word	0x0801a200
 800fa84:	240105bc 	.word	0x240105bc
 800fa88:	240105b0 	.word	0x240105b0
 800fa8c:	240105b4 	.word	0x240105b4
 800fa90:	240105a0 	.word	0x240105a0
 800fa94:	240105ba 	.word	0x240105ba
 800fa98:	2302      	movs	r3, #2
 800fa9a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fa9e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800faa2:	b29a      	uxth	r2, r3
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800faa8:	fb12 f303 	smulbb	r3, r2, r3
 800faac:	b29b      	uxth	r3, r3
 800faae:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fab0:	4293      	cmp	r3, r2
 800fab2:	bf28      	it	cs
 800fab4:	4613      	movcs	r3, r2
 800fab6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fabe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fac0:	4413      	add	r3, r2
 800fac2:	b29a      	uxth	r2, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800faca:	429a      	cmp	r2, r3
 800facc:	d309      	bcc.n	800fae2 <tcp_receive+0x2c6>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fad4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fad6:	4413      	add	r3, r2
 800fad8:	b29a      	uxth	r2, r3
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fae0:	e04e      	b.n	800fb80 <tcp_receive+0x364>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fae8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800faec:	e048      	b.n	800fb80 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800faf4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800faf6:	4413      	add	r3, r2
 800faf8:	b29a      	uxth	r2, r3
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d309      	bcc.n	800fb18 <tcp_receive+0x2fc>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fb0a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fb0c:	4413      	add	r3, r2
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800fb16:	e004      	b.n	800fb22 <tcp_receive+0x306>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fb1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d326      	bcc.n	800fb80 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fb3e:	1ad3      	subs	r3, r2, r3
 800fb40:	b29a      	uxth	r2, r3
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fb52:	4413      	add	r3, r2
 800fb54:	b29a      	uxth	r2, r3
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d30a      	bcc.n	800fb76 <tcp_receive+0x35a>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fb6a:	4413      	add	r3, r2
 800fb6c:	b29a      	uxth	r2, r3
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800fb74:	e004      	b.n	800fb80 <tcp_receive+0x364>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fb7c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb88:	4a98      	ldr	r2, [pc, #608]	@ (800fdec <tcp_receive+0x5d0>)
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f7ff fdca 	bl	800f724 <tcp_free_acked_segments>
 800fb90:	4602      	mov	r2, r0
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb9e:	4a94      	ldr	r2, [pc, #592]	@ (800fdf0 <tcp_receive+0x5d4>)
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f7ff fdbf 	bl	800f724 <tcp_free_acked_segments>
 800fba6:	4602      	mov	r2, r0
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d104      	bne.n	800fbbe <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fbba:	861a      	strh	r2, [r3, #48]	@ 0x30
 800fbbc:	e002      	b.n	800fbc4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d103      	bne.n	800fbda <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800fbe0:	4b84      	ldr	r3, [pc, #528]	@ (800fdf4 <tcp_receive+0x5d8>)
 800fbe2:	881b      	ldrh	r3, [r3, #0]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	8b5b      	ldrh	r3, [r3, #26]
 800fbf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d035      	beq.n	800fc66 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d118      	bne.n	800fc34 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d00c      	beq.n	800fc24 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7fa fbf1 	bl	800a3fe <lwip_htonl>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	dc20      	bgt.n	800fc66 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	8b5b      	ldrh	r3, [r3, #26]
 800fc28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fc2c:	b29a      	uxth	r2, r3
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc32:	e018      	b.n	800fc66 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc3c:	68db      	ldr	r3, [r3, #12]
 800fc3e:	685b      	ldr	r3, [r3, #4]
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7fa fbdc 	bl	800a3fe <lwip_htonl>
 800fc46:	4603      	mov	r3, r0
 800fc48:	1ae3      	subs	r3, r4, r3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	dc0b      	bgt.n	800fc66 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	8b5b      	ldrh	r3, [r3, #26]
 800fc52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fc56:	b29a      	uxth	r2, r3
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc5c:	e003      	b.n	800fc66 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f002 fbce 	bl	8012400 <tcp_send_empty_ack>
 800fc64:	e000      	b.n	800fc68 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc66:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d05b      	beq.n	800fd28 <tcp_receive+0x50c>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc74:	4b60      	ldr	r3, [pc, #384]	@ (800fdf8 <tcp_receive+0x5dc>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	1ad3      	subs	r3, r2, r3
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	da54      	bge.n	800fd28 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fc7e:	4b5f      	ldr	r3, [pc, #380]	@ (800fdfc <tcp_receive+0x5e0>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	b29a      	uxth	r2, r3
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc88:	b29b      	uxth	r3, r3
 800fc8a:	1ad3      	subs	r3, r2, r3
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fc92:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fc9c:	10db      	asrs	r3, r3, #3
 800fc9e:	b21b      	sxth	r3, r3
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	1ad3      	subs	r3, r2, r3
 800fca4:	b29b      	uxth	r3, r3
 800fca6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fcb0:	b29a      	uxth	r2, r3
 800fcb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fcb6:	4413      	add	r3, r2
 800fcb8:	b29b      	uxth	r3, r3
 800fcba:	b21a      	sxth	r2, r3
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800fcc0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	da05      	bge.n	800fcd4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800fcc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fccc:	425b      	negs	r3, r3
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fcd4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fcde:	109b      	asrs	r3, r3, #2
 800fce0:	b21b      	sxth	r3, r3
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fcf2:	b29a      	uxth	r2, r3
 800fcf4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fcf8:	4413      	add	r3, r2
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	b21a      	sxth	r2, r3
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800fd08:	10db      	asrs	r3, r3, #3
 800fd0a:	b21b      	sxth	r3, r3
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	4413      	add	r3, r2
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	b21a      	sxth	r2, r3
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2200      	movs	r2, #0
 800fd26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fd28:	4b35      	ldr	r3, [pc, #212]	@ (800fe00 <tcp_receive+0x5e4>)
 800fd2a:	881b      	ldrh	r3, [r3, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f000 84df 	beq.w	80106f0 <tcp_receive+0xed4>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	7d1b      	ldrb	r3, [r3, #20]
 800fd36:	2b06      	cmp	r3, #6
 800fd38:	f200 84da 	bhi.w	80106f0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd40:	4b30      	ldr	r3, [pc, #192]	@ (800fe04 <tcp_receive+0x5e8>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	1ad3      	subs	r3, r2, r3
 800fd46:	3b01      	subs	r3, #1
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	f2c0 808f 	blt.w	800fe6c <tcp_receive+0x650>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd52:	4b2b      	ldr	r3, [pc, #172]	@ (800fe00 <tcp_receive+0x5e4>)
 800fd54:	881b      	ldrh	r3, [r3, #0]
 800fd56:	4619      	mov	r1, r3
 800fd58:	4b2a      	ldr	r3, [pc, #168]	@ (800fe04 <tcp_receive+0x5e8>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	440b      	add	r3, r1
 800fd5e:	1ad3      	subs	r3, r2, r3
 800fd60:	3301      	adds	r3, #1
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	f300 8082 	bgt.w	800fe6c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fd68:	4b27      	ldr	r3, [pc, #156]	@ (800fe08 <tcp_receive+0x5ec>)
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd72:	4b24      	ldr	r3, [pc, #144]	@ (800fe04 <tcp_receive+0x5e8>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	1ad3      	subs	r3, r2, r3
 800fd78:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fd7a:	4b23      	ldr	r3, [pc, #140]	@ (800fe08 <tcp_receive+0x5ec>)
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d106      	bne.n	800fd90 <tcp_receive+0x574>
 800fd82:	4b22      	ldr	r3, [pc, #136]	@ (800fe0c <tcp_receive+0x5f0>)
 800fd84:	f240 5294 	movw	r2, #1428	@ 0x594
 800fd88:	4921      	ldr	r1, [pc, #132]	@ (800fe10 <tcp_receive+0x5f4>)
 800fd8a:	4822      	ldr	r0, [pc, #136]	@ (800fe14 <tcp_receive+0x5f8>)
 800fd8c:	f007 fe94 	bl	8017ab8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd92:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d906      	bls.n	800fda8 <tcp_receive+0x58c>
 800fd9a:	4b1c      	ldr	r3, [pc, #112]	@ (800fe0c <tcp_receive+0x5f0>)
 800fd9c:	f240 5295 	movw	r2, #1429	@ 0x595
 800fda0:	491d      	ldr	r1, [pc, #116]	@ (800fe18 <tcp_receive+0x5fc>)
 800fda2:	481c      	ldr	r0, [pc, #112]	@ (800fe14 <tcp_receive+0x5f8>)
 800fda4:	f007 fe88 	bl	8017ab8 <iprintf>
      off = (u16_t)off32;
 800fda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdaa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fdae:	4b16      	ldr	r3, [pc, #88]	@ (800fe08 <tcp_receive+0x5ec>)
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	891b      	ldrh	r3, [r3, #8]
 800fdb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d906      	bls.n	800fdca <tcp_receive+0x5ae>
 800fdbc:	4b13      	ldr	r3, [pc, #76]	@ (800fe0c <tcp_receive+0x5f0>)
 800fdbe:	f240 5297 	movw	r2, #1431	@ 0x597
 800fdc2:	4916      	ldr	r1, [pc, #88]	@ (800fe1c <tcp_receive+0x600>)
 800fdc4:	4813      	ldr	r0, [pc, #76]	@ (800fe14 <tcp_receive+0x5f8>)
 800fdc6:	f007 fe77 	bl	8017ab8 <iprintf>
      inseg.len -= off;
 800fdca:	4b0f      	ldr	r3, [pc, #60]	@ (800fe08 <tcp_receive+0x5ec>)
 800fdcc:	891a      	ldrh	r2, [r3, #8]
 800fdce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fdd2:	1ad3      	subs	r3, r2, r3
 800fdd4:	b29a      	uxth	r2, r3
 800fdd6:	4b0c      	ldr	r3, [pc, #48]	@ (800fe08 <tcp_receive+0x5ec>)
 800fdd8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fdda:	4b0b      	ldr	r3, [pc, #44]	@ (800fe08 <tcp_receive+0x5ec>)
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	891a      	ldrh	r2, [r3, #8]
 800fde0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fde4:	1ad3      	subs	r3, r2, r3
 800fde6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800fde8:	e02a      	b.n	800fe40 <tcp_receive+0x624>
 800fdea:	bf00      	nop
 800fdec:	0801a21c 	.word	0x0801a21c
 800fdf0:	0801a224 	.word	0x0801a224
 800fdf4:	240105b8 	.word	0x240105b8
 800fdf8:	240105b4 	.word	0x240105b4
 800fdfc:	24010578 	.word	0x24010578
 800fe00:	240105ba 	.word	0x240105ba
 800fe04:	240105b0 	.word	0x240105b0
 800fe08:	24010590 	.word	0x24010590
 800fe0c:	08019eb4 	.word	0x08019eb4
 800fe10:	0801a22c 	.word	0x0801a22c
 800fe14:	08019f00 	.word	0x08019f00
 800fe18:	0801a23c 	.word	0x0801a23c
 800fe1c:	0801a24c 	.word	0x0801a24c
        off -= p->len;
 800fe20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe22:	895b      	ldrh	r3, [r3, #10]
 800fe24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fe28:	1ad3      	subs	r3, r2, r3
 800fe2a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fe2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe30:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fe32:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fe34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe36:	2200      	movs	r2, #0
 800fe38:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fe3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800fe40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe42:	895b      	ldrh	r3, [r3, #10]
 800fe44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d8e9      	bhi.n	800fe20 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fe4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fe50:	4619      	mov	r1, r3
 800fe52:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fe54:	f7fb fee8 	bl	800bc28 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe5c:	4a90      	ldr	r2, [pc, #576]	@ (80100a0 <tcp_receive+0x884>)
 800fe5e:	6013      	str	r3, [r2, #0]
 800fe60:	4b90      	ldr	r3, [pc, #576]	@ (80100a4 <tcp_receive+0x888>)
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	4a8e      	ldr	r2, [pc, #568]	@ (80100a0 <tcp_receive+0x884>)
 800fe66:	6812      	ldr	r2, [r2, #0]
 800fe68:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fe6a:	e00d      	b.n	800fe88 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fe6c:	4b8c      	ldr	r3, [pc, #560]	@ (80100a0 <tcp_receive+0x884>)
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe74:	1ad3      	subs	r3, r2, r3
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	da06      	bge.n	800fe88 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	8b5b      	ldrh	r3, [r3, #26]
 800fe7e:	f043 0302 	orr.w	r3, r3, #2
 800fe82:	b29a      	uxth	r2, r3
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe88:	4b85      	ldr	r3, [pc, #532]	@ (80100a0 <tcp_receive+0x884>)
 800fe8a:	681a      	ldr	r2, [r3, #0]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	f2c0 8427 	blt.w	80106e6 <tcp_receive+0xeca>
 800fe98:	4b81      	ldr	r3, [pc, #516]	@ (80100a0 <tcp_receive+0x884>)
 800fe9a:	681a      	ldr	r2, [r3, #0]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fea0:	6879      	ldr	r1, [r7, #4]
 800fea2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fea4:	440b      	add	r3, r1
 800fea6:	1ad3      	subs	r3, r2, r3
 800fea8:	3301      	adds	r3, #1
 800feaa:	2b00      	cmp	r3, #0
 800feac:	f300 841b 	bgt.w	80106e6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800feb4:	4b7a      	ldr	r3, [pc, #488]	@ (80100a0 <tcp_receive+0x884>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	429a      	cmp	r2, r3
 800feba:	f040 8298 	bne.w	80103ee <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800febe:	4b79      	ldr	r3, [pc, #484]	@ (80100a4 <tcp_receive+0x888>)
 800fec0:	891c      	ldrh	r4, [r3, #8]
 800fec2:	4b78      	ldr	r3, [pc, #480]	@ (80100a4 <tcp_receive+0x888>)
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	899b      	ldrh	r3, [r3, #12]
 800fec8:	b29b      	uxth	r3, r3
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fa fa82 	bl	800a3d4 <lwip_htons>
 800fed0:	4603      	mov	r3, r0
 800fed2:	b2db      	uxtb	r3, r3
 800fed4:	f003 0303 	and.w	r3, r3, #3
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d001      	beq.n	800fee0 <tcp_receive+0x6c4>
 800fedc:	2301      	movs	r3, #1
 800fede:	e000      	b.n	800fee2 <tcp_receive+0x6c6>
 800fee0:	2300      	movs	r3, #0
 800fee2:	4423      	add	r3, r4
 800fee4:	b29a      	uxth	r2, r3
 800fee6:	4b70      	ldr	r3, [pc, #448]	@ (80100a8 <tcp_receive+0x88c>)
 800fee8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800feee:	4b6e      	ldr	r3, [pc, #440]	@ (80100a8 <tcp_receive+0x88c>)
 800fef0:	881b      	ldrh	r3, [r3, #0]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d274      	bcs.n	800ffe0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fef6:	4b6b      	ldr	r3, [pc, #428]	@ (80100a4 <tcp_receive+0x888>)
 800fef8:	68db      	ldr	r3, [r3, #12]
 800fefa:	899b      	ldrh	r3, [r3, #12]
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fa fa68 	bl	800a3d4 <lwip_htons>
 800ff04:	4603      	mov	r3, r0
 800ff06:	b2db      	uxtb	r3, r3
 800ff08:	f003 0301 	and.w	r3, r3, #1
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d01e      	beq.n	800ff4e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ff10:	4b64      	ldr	r3, [pc, #400]	@ (80100a4 <tcp_receive+0x888>)
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	899b      	ldrh	r3, [r3, #12]
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	b21b      	sxth	r3, r3
 800ff1a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ff1e:	b21c      	sxth	r4, r3
 800ff20:	4b60      	ldr	r3, [pc, #384]	@ (80100a4 <tcp_receive+0x888>)
 800ff22:	68db      	ldr	r3, [r3, #12]
 800ff24:	899b      	ldrh	r3, [r3, #12]
 800ff26:	b29b      	uxth	r3, r3
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7fa fa53 	bl	800a3d4 <lwip_htons>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	b2db      	uxtb	r3, r3
 800ff32:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7fa fa4b 	bl	800a3d4 <lwip_htons>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	b21b      	sxth	r3, r3
 800ff42:	4323      	orrs	r3, r4
 800ff44:	b21a      	sxth	r2, r3
 800ff46:	4b57      	ldr	r3, [pc, #348]	@ (80100a4 <tcp_receive+0x888>)
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	b292      	uxth	r2, r2
 800ff4c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ff52:	4b54      	ldr	r3, [pc, #336]	@ (80100a4 <tcp_receive+0x888>)
 800ff54:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ff56:	4b53      	ldr	r3, [pc, #332]	@ (80100a4 <tcp_receive+0x888>)
 800ff58:	68db      	ldr	r3, [r3, #12]
 800ff5a:	899b      	ldrh	r3, [r3, #12]
 800ff5c:	b29b      	uxth	r3, r3
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fa fa38 	bl	800a3d4 <lwip_htons>
 800ff64:	4603      	mov	r3, r0
 800ff66:	b2db      	uxtb	r3, r3
 800ff68:	f003 0302 	and.w	r3, r3, #2
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d005      	beq.n	800ff7c <tcp_receive+0x760>
            inseg.len -= 1;
 800ff70:	4b4c      	ldr	r3, [pc, #304]	@ (80100a4 <tcp_receive+0x888>)
 800ff72:	891b      	ldrh	r3, [r3, #8]
 800ff74:	3b01      	subs	r3, #1
 800ff76:	b29a      	uxth	r2, r3
 800ff78:	4b4a      	ldr	r3, [pc, #296]	@ (80100a4 <tcp_receive+0x888>)
 800ff7a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ff7c:	4b49      	ldr	r3, [pc, #292]	@ (80100a4 <tcp_receive+0x888>)
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	4a48      	ldr	r2, [pc, #288]	@ (80100a4 <tcp_receive+0x888>)
 800ff82:	8912      	ldrh	r2, [r2, #8]
 800ff84:	4611      	mov	r1, r2
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7fb fd50 	bl	800ba2c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ff8c:	4b45      	ldr	r3, [pc, #276]	@ (80100a4 <tcp_receive+0x888>)
 800ff8e:	891c      	ldrh	r4, [r3, #8]
 800ff90:	4b44      	ldr	r3, [pc, #272]	@ (80100a4 <tcp_receive+0x888>)
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	899b      	ldrh	r3, [r3, #12]
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7fa fa1b 	bl	800a3d4 <lwip_htons>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	b2db      	uxtb	r3, r3
 800ffa2:	f003 0303 	and.w	r3, r3, #3
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d001      	beq.n	800ffae <tcp_receive+0x792>
 800ffaa:	2301      	movs	r3, #1
 800ffac:	e000      	b.n	800ffb0 <tcp_receive+0x794>
 800ffae:	2300      	movs	r3, #0
 800ffb0:	4423      	add	r3, r4
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	4b3c      	ldr	r3, [pc, #240]	@ (80100a8 <tcp_receive+0x88c>)
 800ffb6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ffb8:	4b3b      	ldr	r3, [pc, #236]	@ (80100a8 <tcp_receive+0x88c>)
 800ffba:	881b      	ldrh	r3, [r3, #0]
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	4b38      	ldr	r3, [pc, #224]	@ (80100a0 <tcp_receive+0x884>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	441a      	add	r2, r3
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffc8:	6879      	ldr	r1, [r7, #4]
 800ffca:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ffcc:	440b      	add	r3, r1
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d006      	beq.n	800ffe0 <tcp_receive+0x7c4>
 800ffd2:	4b36      	ldr	r3, [pc, #216]	@ (80100ac <tcp_receive+0x890>)
 800ffd4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800ffd8:	4935      	ldr	r1, [pc, #212]	@ (80100b0 <tcp_receive+0x894>)
 800ffda:	4836      	ldr	r0, [pc, #216]	@ (80100b4 <tcp_receive+0x898>)
 800ffdc:	f007 fd6c 	bl	8017ab8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	f000 80e6 	beq.w	80101b6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ffea:	4b2e      	ldr	r3, [pc, #184]	@ (80100a4 <tcp_receive+0x888>)
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	899b      	ldrh	r3, [r3, #12]
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fa f9ee 	bl	800a3d4 <lwip_htons>
 800fff8:	4603      	mov	r3, r0
 800fffa:	b2db      	uxtb	r3, r3
 800fffc:	f003 0301 	and.w	r3, r3, #1
 8010000:	2b00      	cmp	r3, #0
 8010002:	d010      	beq.n	8010026 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010004:	e00a      	b.n	801001c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801000a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010016:	68f8      	ldr	r0, [r7, #12]
 8010018:	f7fd fcb9 	bl	800d98e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010020:	2b00      	cmp	r3, #0
 8010022:	d1f0      	bne.n	8010006 <tcp_receive+0x7ea>
 8010024:	e0c7      	b.n	80101b6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801002a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801002c:	e051      	b.n	80100d2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801002e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010030:	68db      	ldr	r3, [r3, #12]
 8010032:	899b      	ldrh	r3, [r3, #12]
 8010034:	b29b      	uxth	r3, r3
 8010036:	4618      	mov	r0, r3
 8010038:	f7fa f9cc 	bl	800a3d4 <lwip_htons>
 801003c:	4603      	mov	r3, r0
 801003e:	b2db      	uxtb	r3, r3
 8010040:	f003 0301 	and.w	r3, r3, #1
 8010044:	2b00      	cmp	r3, #0
 8010046:	d03c      	beq.n	80100c2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010048:	4b16      	ldr	r3, [pc, #88]	@ (80100a4 <tcp_receive+0x888>)
 801004a:	68db      	ldr	r3, [r3, #12]
 801004c:	899b      	ldrh	r3, [r3, #12]
 801004e:	b29b      	uxth	r3, r3
 8010050:	4618      	mov	r0, r3
 8010052:	f7fa f9bf 	bl	800a3d4 <lwip_htons>
 8010056:	4603      	mov	r3, r0
 8010058:	b2db      	uxtb	r3, r3
 801005a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801005e:	2b00      	cmp	r3, #0
 8010060:	d12f      	bne.n	80100c2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010062:	4b10      	ldr	r3, [pc, #64]	@ (80100a4 <tcp_receive+0x888>)
 8010064:	68db      	ldr	r3, [r3, #12]
 8010066:	899b      	ldrh	r3, [r3, #12]
 8010068:	b29c      	uxth	r4, r3
 801006a:	2001      	movs	r0, #1
 801006c:	f7fa f9b2 	bl	800a3d4 <lwip_htons>
 8010070:	4603      	mov	r3, r0
 8010072:	461a      	mov	r2, r3
 8010074:	4b0b      	ldr	r3, [pc, #44]	@ (80100a4 <tcp_receive+0x888>)
 8010076:	68db      	ldr	r3, [r3, #12]
 8010078:	4322      	orrs	r2, r4
 801007a:	b292      	uxth	r2, r2
 801007c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801007e:	4b09      	ldr	r3, [pc, #36]	@ (80100a4 <tcp_receive+0x888>)
 8010080:	891c      	ldrh	r4, [r3, #8]
 8010082:	4b08      	ldr	r3, [pc, #32]	@ (80100a4 <tcp_receive+0x888>)
 8010084:	68db      	ldr	r3, [r3, #12]
 8010086:	899b      	ldrh	r3, [r3, #12]
 8010088:	b29b      	uxth	r3, r3
 801008a:	4618      	mov	r0, r3
 801008c:	f7fa f9a2 	bl	800a3d4 <lwip_htons>
 8010090:	4603      	mov	r3, r0
 8010092:	b2db      	uxtb	r3, r3
 8010094:	f003 0303 	and.w	r3, r3, #3
 8010098:	2b00      	cmp	r3, #0
 801009a:	d00d      	beq.n	80100b8 <tcp_receive+0x89c>
 801009c:	2301      	movs	r3, #1
 801009e:	e00c      	b.n	80100ba <tcp_receive+0x89e>
 80100a0:	240105b0 	.word	0x240105b0
 80100a4:	24010590 	.word	0x24010590
 80100a8:	240105ba 	.word	0x240105ba
 80100ac:	08019eb4 	.word	0x08019eb4
 80100b0:	0801a25c 	.word	0x0801a25c
 80100b4:	08019f00 	.word	0x08019f00
 80100b8:	2300      	movs	r3, #0
 80100ba:	4423      	add	r3, r4
 80100bc:	b29a      	uxth	r2, r3
 80100be:	4b98      	ldr	r3, [pc, #608]	@ (8010320 <tcp_receive+0xb04>)
 80100c0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80100c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100c4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80100c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80100cc:	6938      	ldr	r0, [r7, #16]
 80100ce:	f7fd fc5e 	bl	800d98e <tcp_seg_free>
            while (next &&
 80100d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d00e      	beq.n	80100f6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80100d8:	4b91      	ldr	r3, [pc, #580]	@ (8010320 <tcp_receive+0xb04>)
 80100da:	881b      	ldrh	r3, [r3, #0]
 80100dc:	461a      	mov	r2, r3
 80100de:	4b91      	ldr	r3, [pc, #580]	@ (8010324 <tcp_receive+0xb08>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	441a      	add	r2, r3
 80100e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100e6:	68db      	ldr	r3, [r3, #12]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80100ec:	8909      	ldrh	r1, [r1, #8]
 80100ee:	440b      	add	r3, r1
 80100f0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	da9b      	bge.n	801002e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80100f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d059      	beq.n	80101b0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80100fc:	4b88      	ldr	r3, [pc, #544]	@ (8010320 <tcp_receive+0xb04>)
 80100fe:	881b      	ldrh	r3, [r3, #0]
 8010100:	461a      	mov	r2, r3
 8010102:	4b88      	ldr	r3, [pc, #544]	@ (8010324 <tcp_receive+0xb08>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	441a      	add	r2, r3
 8010108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801010a:	68db      	ldr	r3, [r3, #12]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010110:	2b00      	cmp	r3, #0
 8010112:	dd4d      	ble.n	80101b0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010116:	68db      	ldr	r3, [r3, #12]
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	b29a      	uxth	r2, r3
 801011c:	4b81      	ldr	r3, [pc, #516]	@ (8010324 <tcp_receive+0xb08>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	b29b      	uxth	r3, r3
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	b29a      	uxth	r2, r3
 8010126:	4b80      	ldr	r3, [pc, #512]	@ (8010328 <tcp_receive+0xb0c>)
 8010128:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801012a:	4b7f      	ldr	r3, [pc, #508]	@ (8010328 <tcp_receive+0xb0c>)
 801012c:	68db      	ldr	r3, [r3, #12]
 801012e:	899b      	ldrh	r3, [r3, #12]
 8010130:	b29b      	uxth	r3, r3
 8010132:	4618      	mov	r0, r3
 8010134:	f7fa f94e 	bl	800a3d4 <lwip_htons>
 8010138:	4603      	mov	r3, r0
 801013a:	b2db      	uxtb	r3, r3
 801013c:	f003 0302 	and.w	r3, r3, #2
 8010140:	2b00      	cmp	r3, #0
 8010142:	d005      	beq.n	8010150 <tcp_receive+0x934>
                inseg.len -= 1;
 8010144:	4b78      	ldr	r3, [pc, #480]	@ (8010328 <tcp_receive+0xb0c>)
 8010146:	891b      	ldrh	r3, [r3, #8]
 8010148:	3b01      	subs	r3, #1
 801014a:	b29a      	uxth	r2, r3
 801014c:	4b76      	ldr	r3, [pc, #472]	@ (8010328 <tcp_receive+0xb0c>)
 801014e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010150:	4b75      	ldr	r3, [pc, #468]	@ (8010328 <tcp_receive+0xb0c>)
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	4a74      	ldr	r2, [pc, #464]	@ (8010328 <tcp_receive+0xb0c>)
 8010156:	8912      	ldrh	r2, [r2, #8]
 8010158:	4611      	mov	r1, r2
 801015a:	4618      	mov	r0, r3
 801015c:	f7fb fc66 	bl	800ba2c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010160:	4b71      	ldr	r3, [pc, #452]	@ (8010328 <tcp_receive+0xb0c>)
 8010162:	891c      	ldrh	r4, [r3, #8]
 8010164:	4b70      	ldr	r3, [pc, #448]	@ (8010328 <tcp_receive+0xb0c>)
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	899b      	ldrh	r3, [r3, #12]
 801016a:	b29b      	uxth	r3, r3
 801016c:	4618      	mov	r0, r3
 801016e:	f7fa f931 	bl	800a3d4 <lwip_htons>
 8010172:	4603      	mov	r3, r0
 8010174:	b2db      	uxtb	r3, r3
 8010176:	f003 0303 	and.w	r3, r3, #3
 801017a:	2b00      	cmp	r3, #0
 801017c:	d001      	beq.n	8010182 <tcp_receive+0x966>
 801017e:	2301      	movs	r3, #1
 8010180:	e000      	b.n	8010184 <tcp_receive+0x968>
 8010182:	2300      	movs	r3, #0
 8010184:	4423      	add	r3, r4
 8010186:	b29a      	uxth	r2, r3
 8010188:	4b65      	ldr	r3, [pc, #404]	@ (8010320 <tcp_receive+0xb04>)
 801018a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801018c:	4b64      	ldr	r3, [pc, #400]	@ (8010320 <tcp_receive+0xb04>)
 801018e:	881b      	ldrh	r3, [r3, #0]
 8010190:	461a      	mov	r2, r3
 8010192:	4b64      	ldr	r3, [pc, #400]	@ (8010324 <tcp_receive+0xb08>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	441a      	add	r2, r3
 8010198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	429a      	cmp	r2, r3
 80101a0:	d006      	beq.n	80101b0 <tcp_receive+0x994>
 80101a2:	4b62      	ldr	r3, [pc, #392]	@ (801032c <tcp_receive+0xb10>)
 80101a4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80101a8:	4961      	ldr	r1, [pc, #388]	@ (8010330 <tcp_receive+0xb14>)
 80101aa:	4862      	ldr	r0, [pc, #392]	@ (8010334 <tcp_receive+0xb18>)
 80101ac:	f007 fc84 	bl	8017ab8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80101b4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80101b6:	4b5a      	ldr	r3, [pc, #360]	@ (8010320 <tcp_receive+0xb04>)
 80101b8:	881b      	ldrh	r3, [r3, #0]
 80101ba:	461a      	mov	r2, r3
 80101bc:	4b59      	ldr	r3, [pc, #356]	@ (8010324 <tcp_receive+0xb08>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	441a      	add	r2, r3
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80101ca:	4b55      	ldr	r3, [pc, #340]	@ (8010320 <tcp_receive+0xb04>)
 80101cc:	881b      	ldrh	r3, [r3, #0]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d206      	bcs.n	80101e0 <tcp_receive+0x9c4>
 80101d2:	4b56      	ldr	r3, [pc, #344]	@ (801032c <tcp_receive+0xb10>)
 80101d4:	f240 6207 	movw	r2, #1543	@ 0x607
 80101d8:	4957      	ldr	r1, [pc, #348]	@ (8010338 <tcp_receive+0xb1c>)
 80101da:	4856      	ldr	r0, [pc, #344]	@ (8010334 <tcp_receive+0xb18>)
 80101dc:	f007 fc6c 	bl	8017ab8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80101e4:	4b4e      	ldr	r3, [pc, #312]	@ (8010320 <tcp_receive+0xb04>)
 80101e6:	881b      	ldrh	r3, [r3, #0]
 80101e8:	1ad3      	subs	r3, r2, r3
 80101ea:	b29a      	uxth	r2, r3
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f7fc fd85 	bl	800cd00 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80101f6:	4b4c      	ldr	r3, [pc, #304]	@ (8010328 <tcp_receive+0xb0c>)
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	891b      	ldrh	r3, [r3, #8]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d006      	beq.n	801020e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010200:	4b49      	ldr	r3, [pc, #292]	@ (8010328 <tcp_receive+0xb0c>)
 8010202:	685b      	ldr	r3, [r3, #4]
 8010204:	4a4d      	ldr	r2, [pc, #308]	@ (801033c <tcp_receive+0xb20>)
 8010206:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010208:	4b47      	ldr	r3, [pc, #284]	@ (8010328 <tcp_receive+0xb0c>)
 801020a:	2200      	movs	r2, #0
 801020c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801020e:	4b46      	ldr	r3, [pc, #280]	@ (8010328 <tcp_receive+0xb0c>)
 8010210:	68db      	ldr	r3, [r3, #12]
 8010212:	899b      	ldrh	r3, [r3, #12]
 8010214:	b29b      	uxth	r3, r3
 8010216:	4618      	mov	r0, r3
 8010218:	f7fa f8dc 	bl	800a3d4 <lwip_htons>
 801021c:	4603      	mov	r3, r0
 801021e:	b2db      	uxtb	r3, r3
 8010220:	f003 0301 	and.w	r3, r3, #1
 8010224:	2b00      	cmp	r3, #0
 8010226:	f000 80b8 	beq.w	801039a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801022a:	4b45      	ldr	r3, [pc, #276]	@ (8010340 <tcp_receive+0xb24>)
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	f043 0320 	orr.w	r3, r3, #32
 8010232:	b2da      	uxtb	r2, r3
 8010234:	4b42      	ldr	r3, [pc, #264]	@ (8010340 <tcp_receive+0xb24>)
 8010236:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010238:	e0af      	b.n	801039a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801023e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010244:	68db      	ldr	r3, [r3, #12]
 8010246:	685b      	ldr	r3, [r3, #4]
 8010248:	4a36      	ldr	r2, [pc, #216]	@ (8010324 <tcp_receive+0xb08>)
 801024a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	891b      	ldrh	r3, [r3, #8]
 8010250:	461c      	mov	r4, r3
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	899b      	ldrh	r3, [r3, #12]
 8010258:	b29b      	uxth	r3, r3
 801025a:	4618      	mov	r0, r3
 801025c:	f7fa f8ba 	bl	800a3d4 <lwip_htons>
 8010260:	4603      	mov	r3, r0
 8010262:	b2db      	uxtb	r3, r3
 8010264:	f003 0303 	and.w	r3, r3, #3
 8010268:	2b00      	cmp	r3, #0
 801026a:	d001      	beq.n	8010270 <tcp_receive+0xa54>
 801026c:	2301      	movs	r3, #1
 801026e:	e000      	b.n	8010272 <tcp_receive+0xa56>
 8010270:	2300      	movs	r3, #0
 8010272:	191a      	adds	r2, r3, r4
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010278:	441a      	add	r2, r3
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010282:	461c      	mov	r4, r3
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	891b      	ldrh	r3, [r3, #8]
 8010288:	461d      	mov	r5, r3
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	68db      	ldr	r3, [r3, #12]
 801028e:	899b      	ldrh	r3, [r3, #12]
 8010290:	b29b      	uxth	r3, r3
 8010292:	4618      	mov	r0, r3
 8010294:	f7fa f89e 	bl	800a3d4 <lwip_htons>
 8010298:	4603      	mov	r3, r0
 801029a:	b2db      	uxtb	r3, r3
 801029c:	f003 0303 	and.w	r3, r3, #3
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d001      	beq.n	80102a8 <tcp_receive+0xa8c>
 80102a4:	2301      	movs	r3, #1
 80102a6:	e000      	b.n	80102aa <tcp_receive+0xa8e>
 80102a8:	2300      	movs	r3, #0
 80102aa:	442b      	add	r3, r5
 80102ac:	429c      	cmp	r4, r3
 80102ae:	d206      	bcs.n	80102be <tcp_receive+0xaa2>
 80102b0:	4b1e      	ldr	r3, [pc, #120]	@ (801032c <tcp_receive+0xb10>)
 80102b2:	f240 622b 	movw	r2, #1579	@ 0x62b
 80102b6:	4923      	ldr	r1, [pc, #140]	@ (8010344 <tcp_receive+0xb28>)
 80102b8:	481e      	ldr	r0, [pc, #120]	@ (8010334 <tcp_receive+0xb18>)
 80102ba:	f007 fbfd 	bl	8017ab8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	891b      	ldrh	r3, [r3, #8]
 80102c2:	461c      	mov	r4, r3
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	68db      	ldr	r3, [r3, #12]
 80102c8:	899b      	ldrh	r3, [r3, #12]
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	4618      	mov	r0, r3
 80102ce:	f7fa f881 	bl	800a3d4 <lwip_htons>
 80102d2:	4603      	mov	r3, r0
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	f003 0303 	and.w	r3, r3, #3
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d001      	beq.n	80102e2 <tcp_receive+0xac6>
 80102de:	2301      	movs	r3, #1
 80102e0:	e000      	b.n	80102e4 <tcp_receive+0xac8>
 80102e2:	2300      	movs	r3, #0
 80102e4:	1919      	adds	r1, r3, r4
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80102ea:	b28b      	uxth	r3, r1
 80102ec:	1ad3      	subs	r3, r2, r3
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f7fc fd03 	bl	800cd00 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	891b      	ldrh	r3, [r3, #8]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d028      	beq.n	8010356 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010304:	4b0d      	ldr	r3, [pc, #52]	@ (801033c <tcp_receive+0xb20>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d01d      	beq.n	8010348 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801030c:	4b0b      	ldr	r3, [pc, #44]	@ (801033c <tcp_receive+0xb20>)
 801030e:	681a      	ldr	r2, [r3, #0]
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	4619      	mov	r1, r3
 8010316:	4610      	mov	r0, r2
 8010318:	f7fb fdda 	bl	800bed0 <pbuf_cat>
 801031c:	e018      	b.n	8010350 <tcp_receive+0xb34>
 801031e:	bf00      	nop
 8010320:	240105ba 	.word	0x240105ba
 8010324:	240105b0 	.word	0x240105b0
 8010328:	24010590 	.word	0x24010590
 801032c:	08019eb4 	.word	0x08019eb4
 8010330:	0801a294 	.word	0x0801a294
 8010334:	08019f00 	.word	0x08019f00
 8010338:	0801a2d0 	.word	0x0801a2d0
 801033c:	240105c0 	.word	0x240105c0
 8010340:	240105bd 	.word	0x240105bd
 8010344:	0801a2f0 	.word	0x0801a2f0
            } else {
              recv_data = cseg->p;
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	685b      	ldr	r3, [r3, #4]
 801034c:	4a70      	ldr	r2, [pc, #448]	@ (8010510 <tcp_receive+0xcf4>)
 801034e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	2200      	movs	r2, #0
 8010354:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	899b      	ldrh	r3, [r3, #12]
 801035c:	b29b      	uxth	r3, r3
 801035e:	4618      	mov	r0, r3
 8010360:	f7fa f838 	bl	800a3d4 <lwip_htons>
 8010364:	4603      	mov	r3, r0
 8010366:	b2db      	uxtb	r3, r3
 8010368:	f003 0301 	and.w	r3, r3, #1
 801036c:	2b00      	cmp	r3, #0
 801036e:	d00d      	beq.n	801038c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010370:	4b68      	ldr	r3, [pc, #416]	@ (8010514 <tcp_receive+0xcf8>)
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	f043 0320 	orr.w	r3, r3, #32
 8010378:	b2da      	uxtb	r2, r3
 801037a:	4b66      	ldr	r3, [pc, #408]	@ (8010514 <tcp_receive+0xcf8>)
 801037c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	7d1b      	ldrb	r3, [r3, #20]
 8010382:	2b04      	cmp	r3, #4
 8010384:	d102      	bne.n	801038c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2207      	movs	r2, #7
 801038a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8010394:	68b8      	ldr	r0, [r7, #8]
 8010396:	f7fd fafa 	bl	800d98e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d008      	beq.n	80103b4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103a6:	68db      	ldr	r3, [r3, #12]
 80103a8:	685a      	ldr	r2, [r3, #4]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80103ae:	429a      	cmp	r2, r3
 80103b0:	f43f af43 	beq.w	801023a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	8b5b      	ldrh	r3, [r3, #26]
 80103b8:	f003 0301 	and.w	r3, r3, #1
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d00e      	beq.n	80103de <tcp_receive+0xbc2>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	8b5b      	ldrh	r3, [r3, #26]
 80103c4:	f023 0301 	bic.w	r3, r3, #1
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	835a      	strh	r2, [r3, #26]
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	8b5b      	ldrh	r3, [r3, #26]
 80103d2:	f043 0302 	orr.w	r3, r3, #2
 80103d6:	b29a      	uxth	r2, r3
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80103dc:	e187      	b.n	80106ee <tcp_receive+0xed2>
        tcp_ack(pcb);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	8b5b      	ldrh	r3, [r3, #26]
 80103e2:	f043 0301 	orr.w	r3, r3, #1
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80103ec:	e17f      	b.n	80106ee <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d106      	bne.n	8010404 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80103f6:	4848      	ldr	r0, [pc, #288]	@ (8010518 <tcp_receive+0xcfc>)
 80103f8:	f7fd fae2 	bl	800d9c0 <tcp_seg_copy>
 80103fc:	4602      	mov	r2, r0
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	675a      	str	r2, [r3, #116]	@ 0x74
 8010402:	e16c      	b.n	80106de <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010404:	2300      	movs	r3, #0
 8010406:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801040c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801040e:	e156      	b.n	80106be <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8010410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010412:	68db      	ldr	r3, [r3, #12]
 8010414:	685a      	ldr	r2, [r3, #4]
 8010416:	4b41      	ldr	r3, [pc, #260]	@ (801051c <tcp_receive+0xd00>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	429a      	cmp	r2, r3
 801041c:	d11d      	bne.n	801045a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801041e:	4b3e      	ldr	r3, [pc, #248]	@ (8010518 <tcp_receive+0xcfc>)
 8010420:	891a      	ldrh	r2, [r3, #8]
 8010422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010424:	891b      	ldrh	r3, [r3, #8]
 8010426:	429a      	cmp	r2, r3
 8010428:	f240 814e 	bls.w	80106c8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801042c:	483a      	ldr	r0, [pc, #232]	@ (8010518 <tcp_receive+0xcfc>)
 801042e:	f7fd fac7 	bl	800d9c0 <tcp_seg_copy>
 8010432:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	2b00      	cmp	r3, #0
 8010438:	f000 8148 	beq.w	80106cc <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801043c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801043e:	2b00      	cmp	r3, #0
 8010440:	d003      	beq.n	801044a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010444:	697a      	ldr	r2, [r7, #20]
 8010446:	601a      	str	r2, [r3, #0]
 8010448:	e002      	b.n	8010450 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	697a      	ldr	r2, [r7, #20]
 801044e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010450:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010452:	6978      	ldr	r0, [r7, #20]
 8010454:	f7ff f8de 	bl	800f614 <tcp_oos_insert_segment>
                }
                break;
 8010458:	e138      	b.n	80106cc <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801045a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801045c:	2b00      	cmp	r3, #0
 801045e:	d117      	bne.n	8010490 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010460:	4b2e      	ldr	r3, [pc, #184]	@ (801051c <tcp_receive+0xd00>)
 8010462:	681a      	ldr	r2, [r3, #0]
 8010464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010466:	68db      	ldr	r3, [r3, #12]
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	1ad3      	subs	r3, r2, r3
 801046c:	2b00      	cmp	r3, #0
 801046e:	da57      	bge.n	8010520 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010470:	4829      	ldr	r0, [pc, #164]	@ (8010518 <tcp_receive+0xcfc>)
 8010472:	f7fd faa5 	bl	800d9c0 <tcp_seg_copy>
 8010476:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010478:	69bb      	ldr	r3, [r7, #24]
 801047a:	2b00      	cmp	r3, #0
 801047c:	f000 8128 	beq.w	80106d0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	69ba      	ldr	r2, [r7, #24]
 8010484:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010486:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010488:	69b8      	ldr	r0, [r7, #24]
 801048a:	f7ff f8c3 	bl	800f614 <tcp_oos_insert_segment>
                  }
                  break;
 801048e:	e11f      	b.n	80106d0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010490:	4b22      	ldr	r3, [pc, #136]	@ (801051c <tcp_receive+0xd00>)
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010496:	68db      	ldr	r3, [r3, #12]
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	1ad3      	subs	r3, r2, r3
 801049c:	3b01      	subs	r3, #1
 801049e:	2b00      	cmp	r3, #0
 80104a0:	db3e      	blt.n	8010520 <tcp_receive+0xd04>
 80104a2:	4b1e      	ldr	r3, [pc, #120]	@ (801051c <tcp_receive+0xd00>)
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104a8:	68db      	ldr	r3, [r3, #12]
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	1ad3      	subs	r3, r2, r3
 80104ae:	3301      	adds	r3, #1
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	dc35      	bgt.n	8010520 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80104b4:	4818      	ldr	r0, [pc, #96]	@ (8010518 <tcp_receive+0xcfc>)
 80104b6:	f7fd fa83 	bl	800d9c0 <tcp_seg_copy>
 80104ba:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80104bc:	69fb      	ldr	r3, [r7, #28]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	f000 8108 	beq.w	80106d4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80104c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104c6:	68db      	ldr	r3, [r3, #12]
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80104cc:	8912      	ldrh	r2, [r2, #8]
 80104ce:	441a      	add	r2, r3
 80104d0:	4b12      	ldr	r3, [pc, #72]	@ (801051c <tcp_receive+0xd00>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	1ad3      	subs	r3, r2, r3
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	dd12      	ble.n	8010500 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80104da:	4b10      	ldr	r3, [pc, #64]	@ (801051c <tcp_receive+0xd00>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	b29a      	uxth	r2, r3
 80104e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104e2:	68db      	ldr	r3, [r3, #12]
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	1ad3      	subs	r3, r2, r3
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104ee:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80104f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104f2:	685a      	ldr	r2, [r3, #4]
 80104f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104f6:	891b      	ldrh	r3, [r3, #8]
 80104f8:	4619      	mov	r1, r3
 80104fa:	4610      	mov	r0, r2
 80104fc:	f7fb fa96 	bl	800ba2c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010502:	69fa      	ldr	r2, [r7, #28]
 8010504:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010506:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010508:	69f8      	ldr	r0, [r7, #28]
 801050a:	f7ff f883 	bl	800f614 <tcp_oos_insert_segment>
                  }
                  break;
 801050e:	e0e1      	b.n	80106d4 <tcp_receive+0xeb8>
 8010510:	240105c0 	.word	0x240105c0
 8010514:	240105bd 	.word	0x240105bd
 8010518:	24010590 	.word	0x24010590
 801051c:	240105b0 	.word	0x240105b0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010522:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	2b00      	cmp	r3, #0
 801052a:	f040 80c5 	bne.w	80106b8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801052e:	4b7f      	ldr	r3, [pc, #508]	@ (801072c <tcp_receive+0xf10>)
 8010530:	681a      	ldr	r2, [r3, #0]
 8010532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010534:	68db      	ldr	r3, [r3, #12]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801053a:	2b00      	cmp	r3, #0
 801053c:	f340 80bc 	ble.w	80106b8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	899b      	ldrh	r3, [r3, #12]
 8010546:	b29b      	uxth	r3, r3
 8010548:	4618      	mov	r0, r3
 801054a:	f7f9 ff43 	bl	800a3d4 <lwip_htons>
 801054e:	4603      	mov	r3, r0
 8010550:	b2db      	uxtb	r3, r3
 8010552:	f003 0301 	and.w	r3, r3, #1
 8010556:	2b00      	cmp	r3, #0
 8010558:	f040 80be 	bne.w	80106d8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801055c:	4874      	ldr	r0, [pc, #464]	@ (8010730 <tcp_receive+0xf14>)
 801055e:	f7fd fa2f 	bl	800d9c0 <tcp_seg_copy>
 8010562:	4602      	mov	r2, r0
 8010564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010566:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	f000 80b5 	beq.w	80106dc <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010574:	68db      	ldr	r3, [r3, #12]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801057a:	8912      	ldrh	r2, [r2, #8]
 801057c:	441a      	add	r2, r3
 801057e:	4b6b      	ldr	r3, [pc, #428]	@ (801072c <tcp_receive+0xf10>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	1ad3      	subs	r3, r2, r3
 8010584:	2b00      	cmp	r3, #0
 8010586:	dd12      	ble.n	80105ae <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010588:	4b68      	ldr	r3, [pc, #416]	@ (801072c <tcp_receive+0xf10>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	b29a      	uxth	r2, r3
 801058e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	685b      	ldr	r3, [r3, #4]
 8010594:	b29b      	uxth	r3, r3
 8010596:	1ad3      	subs	r3, r2, r3
 8010598:	b29a      	uxth	r2, r3
 801059a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801059c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801059e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105a0:	685a      	ldr	r2, [r3, #4]
 80105a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105a4:	891b      	ldrh	r3, [r3, #8]
 80105a6:	4619      	mov	r1, r3
 80105a8:	4610      	mov	r0, r2
 80105aa:	f7fb fa3f 	bl	800ba2c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80105ae:	4b61      	ldr	r3, [pc, #388]	@ (8010734 <tcp_receive+0xf18>)
 80105b0:	881b      	ldrh	r3, [r3, #0]
 80105b2:	461a      	mov	r2, r3
 80105b4:	4b5d      	ldr	r3, [pc, #372]	@ (801072c <tcp_receive+0xf10>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	441a      	add	r2, r3
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105be:	6879      	ldr	r1, [r7, #4]
 80105c0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80105c2:	440b      	add	r3, r1
 80105c4:	1ad3      	subs	r3, r2, r3
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	f340 8088 	ble.w	80106dc <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80105cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	68db      	ldr	r3, [r3, #12]
 80105d2:	899b      	ldrh	r3, [r3, #12]
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7f9 fefc 	bl	800a3d4 <lwip_htons>
 80105dc:	4603      	mov	r3, r0
 80105de:	b2db      	uxtb	r3, r3
 80105e0:	f003 0301 	and.w	r3, r3, #1
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d021      	beq.n	801062c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80105e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	68db      	ldr	r3, [r3, #12]
 80105ee:	899b      	ldrh	r3, [r3, #12]
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	b21b      	sxth	r3, r3
 80105f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80105f8:	b21c      	sxth	r4, r3
 80105fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	68db      	ldr	r3, [r3, #12]
 8010600:	899b      	ldrh	r3, [r3, #12]
 8010602:	b29b      	uxth	r3, r3
 8010604:	4618      	mov	r0, r3
 8010606:	f7f9 fee5 	bl	800a3d4 <lwip_htons>
 801060a:	4603      	mov	r3, r0
 801060c:	b2db      	uxtb	r3, r3
 801060e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010612:	b29b      	uxth	r3, r3
 8010614:	4618      	mov	r0, r3
 8010616:	f7f9 fedd 	bl	800a3d4 <lwip_htons>
 801061a:	4603      	mov	r3, r0
 801061c:	b21b      	sxth	r3, r3
 801061e:	4323      	orrs	r3, r4
 8010620:	b21a      	sxth	r2, r3
 8010622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	b292      	uxth	r2, r2
 801062a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010630:	b29a      	uxth	r2, r3
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010636:	4413      	add	r3, r2
 8010638:	b299      	uxth	r1, r3
 801063a:	4b3c      	ldr	r3, [pc, #240]	@ (801072c <tcp_receive+0xf10>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	b29a      	uxth	r2, r3
 8010640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	1a8a      	subs	r2, r1, r2
 8010646:	b292      	uxth	r2, r2
 8010648:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801064a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	685a      	ldr	r2, [r3, #4]
 8010650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	891b      	ldrh	r3, [r3, #8]
 8010656:	4619      	mov	r1, r3
 8010658:	4610      	mov	r0, r2
 801065a:	f7fb f9e7 	bl	800ba2c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801065e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	891c      	ldrh	r4, [r3, #8]
 8010664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	68db      	ldr	r3, [r3, #12]
 801066a:	899b      	ldrh	r3, [r3, #12]
 801066c:	b29b      	uxth	r3, r3
 801066e:	4618      	mov	r0, r3
 8010670:	f7f9 feb0 	bl	800a3d4 <lwip_htons>
 8010674:	4603      	mov	r3, r0
 8010676:	b2db      	uxtb	r3, r3
 8010678:	f003 0303 	and.w	r3, r3, #3
 801067c:	2b00      	cmp	r3, #0
 801067e:	d001      	beq.n	8010684 <tcp_receive+0xe68>
 8010680:	2301      	movs	r3, #1
 8010682:	e000      	b.n	8010686 <tcp_receive+0xe6a>
 8010684:	2300      	movs	r3, #0
 8010686:	4423      	add	r3, r4
 8010688:	b29a      	uxth	r2, r3
 801068a:	4b2a      	ldr	r3, [pc, #168]	@ (8010734 <tcp_receive+0xf18>)
 801068c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801068e:	4b29      	ldr	r3, [pc, #164]	@ (8010734 <tcp_receive+0xf18>)
 8010690:	881b      	ldrh	r3, [r3, #0]
 8010692:	461a      	mov	r2, r3
 8010694:	4b25      	ldr	r3, [pc, #148]	@ (801072c <tcp_receive+0xf10>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	441a      	add	r2, r3
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801069e:	6879      	ldr	r1, [r7, #4]
 80106a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80106a2:	440b      	add	r3, r1
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d019      	beq.n	80106dc <tcp_receive+0xec0>
 80106a8:	4b23      	ldr	r3, [pc, #140]	@ (8010738 <tcp_receive+0xf1c>)
 80106aa:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80106ae:	4923      	ldr	r1, [pc, #140]	@ (801073c <tcp_receive+0xf20>)
 80106b0:	4823      	ldr	r0, [pc, #140]	@ (8010740 <tcp_receive+0xf24>)
 80106b2:	f007 fa01 	bl	8017ab8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80106b6:	e011      	b.n	80106dc <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80106b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80106be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	f47f aea5 	bne.w	8010410 <tcp_receive+0xbf4>
 80106c6:	e00a      	b.n	80106de <tcp_receive+0xec2>
                break;
 80106c8:	bf00      	nop
 80106ca:	e008      	b.n	80106de <tcp_receive+0xec2>
                break;
 80106cc:	bf00      	nop
 80106ce:	e006      	b.n	80106de <tcp_receive+0xec2>
                  break;
 80106d0:	bf00      	nop
 80106d2:	e004      	b.n	80106de <tcp_receive+0xec2>
                  break;
 80106d4:	bf00      	nop
 80106d6:	e002      	b.n	80106de <tcp_receive+0xec2>
                  break;
 80106d8:	bf00      	nop
 80106da:	e000      	b.n	80106de <tcp_receive+0xec2>
                break;
 80106dc:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f001 fe8e 	bl	8012400 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80106e4:	e003      	b.n	80106ee <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f001 fe8a 	bl	8012400 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80106ec:	e01a      	b.n	8010724 <tcp_receive+0xf08>
 80106ee:	e019      	b.n	8010724 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80106f0:	4b0e      	ldr	r3, [pc, #56]	@ (801072c <tcp_receive+0xf10>)
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106f8:	1ad3      	subs	r3, r2, r3
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	db0a      	blt.n	8010714 <tcp_receive+0xef8>
 80106fe:	4b0b      	ldr	r3, [pc, #44]	@ (801072c <tcp_receive+0xf10>)
 8010700:	681a      	ldr	r2, [r3, #0]
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010706:	6879      	ldr	r1, [r7, #4]
 8010708:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801070a:	440b      	add	r3, r1
 801070c:	1ad3      	subs	r3, r2, r3
 801070e:	3301      	adds	r3, #1
 8010710:	2b00      	cmp	r3, #0
 8010712:	dd07      	ble.n	8010724 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	8b5b      	ldrh	r3, [r3, #26]
 8010718:	f043 0302 	orr.w	r3, r3, #2
 801071c:	b29a      	uxth	r2, r3
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010722:	e7ff      	b.n	8010724 <tcp_receive+0xf08>
 8010724:	bf00      	nop
 8010726:	3750      	adds	r7, #80	@ 0x50
 8010728:	46bd      	mov	sp, r7
 801072a:	bdb0      	pop	{r4, r5, r7, pc}
 801072c:	240105b0 	.word	0x240105b0
 8010730:	24010590 	.word	0x24010590
 8010734:	240105ba 	.word	0x240105ba
 8010738:	08019eb4 	.word	0x08019eb4
 801073c:	0801a25c 	.word	0x0801a25c
 8010740:	08019f00 	.word	0x08019f00

08010744 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010744:	b480      	push	{r7}
 8010746:	b083      	sub	sp, #12
 8010748:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801074a:	4b15      	ldr	r3, [pc, #84]	@ (80107a0 <tcp_get_next_optbyte+0x5c>)
 801074c:	881b      	ldrh	r3, [r3, #0]
 801074e:	1c5a      	adds	r2, r3, #1
 8010750:	b291      	uxth	r1, r2
 8010752:	4a13      	ldr	r2, [pc, #76]	@ (80107a0 <tcp_get_next_optbyte+0x5c>)
 8010754:	8011      	strh	r1, [r2, #0]
 8010756:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010758:	4b12      	ldr	r3, [pc, #72]	@ (80107a4 <tcp_get_next_optbyte+0x60>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d004      	beq.n	801076a <tcp_get_next_optbyte+0x26>
 8010760:	4b11      	ldr	r3, [pc, #68]	@ (80107a8 <tcp_get_next_optbyte+0x64>)
 8010762:	881b      	ldrh	r3, [r3, #0]
 8010764:	88fa      	ldrh	r2, [r7, #6]
 8010766:	429a      	cmp	r2, r3
 8010768:	d208      	bcs.n	801077c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801076a:	4b10      	ldr	r3, [pc, #64]	@ (80107ac <tcp_get_next_optbyte+0x68>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	3314      	adds	r3, #20
 8010770:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010772:	88fb      	ldrh	r3, [r7, #6]
 8010774:	683a      	ldr	r2, [r7, #0]
 8010776:	4413      	add	r3, r2
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	e00b      	b.n	8010794 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801077c:	88fb      	ldrh	r3, [r7, #6]
 801077e:	b2da      	uxtb	r2, r3
 8010780:	4b09      	ldr	r3, [pc, #36]	@ (80107a8 <tcp_get_next_optbyte+0x64>)
 8010782:	881b      	ldrh	r3, [r3, #0]
 8010784:	b2db      	uxtb	r3, r3
 8010786:	1ad3      	subs	r3, r2, r3
 8010788:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801078a:	4b06      	ldr	r3, [pc, #24]	@ (80107a4 <tcp_get_next_optbyte+0x60>)
 801078c:	681a      	ldr	r2, [r3, #0]
 801078e:	797b      	ldrb	r3, [r7, #5]
 8010790:	4413      	add	r3, r2
 8010792:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010794:	4618      	mov	r0, r3
 8010796:	370c      	adds	r7, #12
 8010798:	46bd      	mov	sp, r7
 801079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079e:	4770      	bx	lr
 80107a0:	240105ac 	.word	0x240105ac
 80107a4:	240105a8 	.word	0x240105a8
 80107a8:	240105a6 	.word	0x240105a6
 80107ac:	240105a0 	.word	0x240105a0

080107b0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d106      	bne.n	80107cc <tcp_parseopt+0x1c>
 80107be:	4b33      	ldr	r3, [pc, #204]	@ (801088c <tcp_parseopt+0xdc>)
 80107c0:	f240 727d 	movw	r2, #1917	@ 0x77d
 80107c4:	4932      	ldr	r1, [pc, #200]	@ (8010890 <tcp_parseopt+0xe0>)
 80107c6:	4833      	ldr	r0, [pc, #204]	@ (8010894 <tcp_parseopt+0xe4>)
 80107c8:	f007 f976 	bl	8017ab8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80107cc:	4b32      	ldr	r3, [pc, #200]	@ (8010898 <tcp_parseopt+0xe8>)
 80107ce:	881b      	ldrh	r3, [r3, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d057      	beq.n	8010884 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80107d4:	4b31      	ldr	r3, [pc, #196]	@ (801089c <tcp_parseopt+0xec>)
 80107d6:	2200      	movs	r2, #0
 80107d8:	801a      	strh	r2, [r3, #0]
 80107da:	e047      	b.n	801086c <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 80107dc:	f7ff ffb2 	bl	8010744 <tcp_get_next_optbyte>
 80107e0:	4603      	mov	r3, r0
 80107e2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80107e4:	7bfb      	ldrb	r3, [r7, #15]
 80107e6:	2b02      	cmp	r3, #2
 80107e8:	d006      	beq.n	80107f8 <tcp_parseopt+0x48>
 80107ea:	2b02      	cmp	r3, #2
 80107ec:	dc2b      	bgt.n	8010846 <tcp_parseopt+0x96>
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d043      	beq.n	801087a <tcp_parseopt+0xca>
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d039      	beq.n	801086a <tcp_parseopt+0xba>
 80107f6:	e026      	b.n	8010846 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80107f8:	f7ff ffa4 	bl	8010744 <tcp_get_next_optbyte>
 80107fc:	4603      	mov	r3, r0
 80107fe:	2b04      	cmp	r3, #4
 8010800:	d13d      	bne.n	801087e <tcp_parseopt+0xce>
 8010802:	4b26      	ldr	r3, [pc, #152]	@ (801089c <tcp_parseopt+0xec>)
 8010804:	881b      	ldrh	r3, [r3, #0]
 8010806:	3301      	adds	r3, #1
 8010808:	4a23      	ldr	r2, [pc, #140]	@ (8010898 <tcp_parseopt+0xe8>)
 801080a:	8812      	ldrh	r2, [r2, #0]
 801080c:	4293      	cmp	r3, r2
 801080e:	da36      	bge.n	801087e <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010810:	f7ff ff98 	bl	8010744 <tcp_get_next_optbyte>
 8010814:	4603      	mov	r3, r0
 8010816:	021b      	lsls	r3, r3, #8
 8010818:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801081a:	f7ff ff93 	bl	8010744 <tcp_get_next_optbyte>
 801081e:	4603      	mov	r3, r0
 8010820:	461a      	mov	r2, r3
 8010822:	89bb      	ldrh	r3, [r7, #12]
 8010824:	4313      	orrs	r3, r2
 8010826:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010828:	89bb      	ldrh	r3, [r7, #12]
 801082a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801082e:	4293      	cmp	r3, r2
 8010830:	d804      	bhi.n	801083c <tcp_parseopt+0x8c>
 8010832:	89bb      	ldrh	r3, [r7, #12]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d001      	beq.n	801083c <tcp_parseopt+0x8c>
 8010838:	89ba      	ldrh	r2, [r7, #12]
 801083a:	e001      	b.n	8010840 <tcp_parseopt+0x90>
 801083c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8010844:	e012      	b.n	801086c <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010846:	f7ff ff7d 	bl	8010744 <tcp_get_next_optbyte>
 801084a:	4603      	mov	r3, r0
 801084c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801084e:	7afb      	ldrb	r3, [r7, #11]
 8010850:	2b01      	cmp	r3, #1
 8010852:	d916      	bls.n	8010882 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010854:	7afb      	ldrb	r3, [r7, #11]
 8010856:	b29a      	uxth	r2, r3
 8010858:	4b10      	ldr	r3, [pc, #64]	@ (801089c <tcp_parseopt+0xec>)
 801085a:	881b      	ldrh	r3, [r3, #0]
 801085c:	4413      	add	r3, r2
 801085e:	b29b      	uxth	r3, r3
 8010860:	3b02      	subs	r3, #2
 8010862:	b29a      	uxth	r2, r3
 8010864:	4b0d      	ldr	r3, [pc, #52]	@ (801089c <tcp_parseopt+0xec>)
 8010866:	801a      	strh	r2, [r3, #0]
 8010868:	e000      	b.n	801086c <tcp_parseopt+0xbc>
          break;
 801086a:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801086c:	4b0b      	ldr	r3, [pc, #44]	@ (801089c <tcp_parseopt+0xec>)
 801086e:	881a      	ldrh	r2, [r3, #0]
 8010870:	4b09      	ldr	r3, [pc, #36]	@ (8010898 <tcp_parseopt+0xe8>)
 8010872:	881b      	ldrh	r3, [r3, #0]
 8010874:	429a      	cmp	r2, r3
 8010876:	d3b1      	bcc.n	80107dc <tcp_parseopt+0x2c>
 8010878:	e004      	b.n	8010884 <tcp_parseopt+0xd4>
          return;
 801087a:	bf00      	nop
 801087c:	e002      	b.n	8010884 <tcp_parseopt+0xd4>
            return;
 801087e:	bf00      	nop
 8010880:	e000      	b.n	8010884 <tcp_parseopt+0xd4>
            return;
 8010882:	bf00      	nop
      }
    }
  }
}
 8010884:	3710      	adds	r7, #16
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	08019eb4 	.word	0x08019eb4
 8010890:	0801a318 	.word	0x0801a318
 8010894:	08019f00 	.word	0x08019f00
 8010898:	240105a4 	.word	0x240105a4
 801089c:	240105ac 	.word	0x240105ac

080108a0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80108a0:	b480      	push	{r7}
 80108a2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80108a4:	4b05      	ldr	r3, [pc, #20]	@ (80108bc <tcp_trigger_input_pcb_close+0x1c>)
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	f043 0310 	orr.w	r3, r3, #16
 80108ac:	b2da      	uxtb	r2, r3
 80108ae:	4b03      	ldr	r3, [pc, #12]	@ (80108bc <tcp_trigger_input_pcb_close+0x1c>)
 80108b0:	701a      	strb	r2, [r3, #0]
}
 80108b2:	bf00      	nop
 80108b4:	46bd      	mov	sp, r7
 80108b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ba:	4770      	bx	lr
 80108bc:	240105bd 	.word	0x240105bd

080108c0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d00a      	beq.n	80108e8 <tcp_route+0x28>
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	7a1b      	ldrb	r3, [r3, #8]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d006      	beq.n	80108e8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	7a1b      	ldrb	r3, [r3, #8]
 80108de:	4618      	mov	r0, r3
 80108e0:	f7fa fe9a 	bl	800b618 <netif_get_by_index>
 80108e4:	4603      	mov	r3, r0
 80108e6:	e003      	b.n	80108f0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f005 fce1 	bl	80162b0 <ip4_route>
 80108ee:	4603      	mov	r3, r0
  }
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3710      	adds	r7, #16
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80108f8:	b590      	push	{r4, r7, lr}
 80108fa:	b087      	sub	sp, #28
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	60f8      	str	r0, [r7, #12]
 8010900:	60b9      	str	r1, [r7, #8]
 8010902:	603b      	str	r3, [r7, #0]
 8010904:	4613      	mov	r3, r2
 8010906:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d105      	bne.n	801091a <tcp_create_segment+0x22>
 801090e:	4b43      	ldr	r3, [pc, #268]	@ (8010a1c <tcp_create_segment+0x124>)
 8010910:	22a3      	movs	r2, #163	@ 0xa3
 8010912:	4943      	ldr	r1, [pc, #268]	@ (8010a20 <tcp_create_segment+0x128>)
 8010914:	4843      	ldr	r0, [pc, #268]	@ (8010a24 <tcp_create_segment+0x12c>)
 8010916:	f007 f8cf 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d105      	bne.n	801092c <tcp_create_segment+0x34>
 8010920:	4b3e      	ldr	r3, [pc, #248]	@ (8010a1c <tcp_create_segment+0x124>)
 8010922:	22a4      	movs	r2, #164	@ 0xa4
 8010924:	4940      	ldr	r1, [pc, #256]	@ (8010a28 <tcp_create_segment+0x130>)
 8010926:	483f      	ldr	r0, [pc, #252]	@ (8010a24 <tcp_create_segment+0x12c>)
 8010928:	f007 f8c6 	bl	8017ab8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801092c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010930:	009b      	lsls	r3, r3, #2
 8010932:	b2db      	uxtb	r3, r3
 8010934:	f003 0304 	and.w	r3, r3, #4
 8010938:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801093a:	2003      	movs	r0, #3
 801093c:	f7fa fac8 	bl	800aed0 <memp_malloc>
 8010940:	6138      	str	r0, [r7, #16]
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d104      	bne.n	8010952 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010948:	68b8      	ldr	r0, [r7, #8]
 801094a:	f7fb f9f3 	bl	800bd34 <pbuf_free>
    return NULL;
 801094e:	2300      	movs	r3, #0
 8010950:	e060      	b.n	8010a14 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010958:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	2200      	movs	r2, #0
 801095e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	68ba      	ldr	r2, [r7, #8]
 8010964:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	891a      	ldrh	r2, [r3, #8]
 801096a:	7dfb      	ldrb	r3, [r7, #23]
 801096c:	b29b      	uxth	r3, r3
 801096e:	429a      	cmp	r2, r3
 8010970:	d205      	bcs.n	801097e <tcp_create_segment+0x86>
 8010972:	4b2a      	ldr	r3, [pc, #168]	@ (8010a1c <tcp_create_segment+0x124>)
 8010974:	22b0      	movs	r2, #176	@ 0xb0
 8010976:	492d      	ldr	r1, [pc, #180]	@ (8010a2c <tcp_create_segment+0x134>)
 8010978:	482a      	ldr	r0, [pc, #168]	@ (8010a24 <tcp_create_segment+0x12c>)
 801097a:	f007 f89d 	bl	8017ab8 <iprintf>
  seg->len = p->tot_len - optlen;
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	891a      	ldrh	r2, [r3, #8]
 8010982:	7dfb      	ldrb	r3, [r7, #23]
 8010984:	b29b      	uxth	r3, r3
 8010986:	1ad3      	subs	r3, r2, r3
 8010988:	b29a      	uxth	r2, r3
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801098e:	2114      	movs	r1, #20
 8010990:	68b8      	ldr	r0, [r7, #8]
 8010992:	f7fb f939 	bl	800bc08 <pbuf_add_header>
 8010996:	4603      	mov	r3, r0
 8010998:	2b00      	cmp	r3, #0
 801099a:	d004      	beq.n	80109a6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801099c:	6938      	ldr	r0, [r7, #16]
 801099e:	f7fc fff6 	bl	800d98e <tcp_seg_free>
    return NULL;
 80109a2:	2300      	movs	r3, #0
 80109a4:	e036      	b.n	8010a14 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	685a      	ldr	r2, [r3, #4]
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	8ada      	ldrh	r2, [r3, #22]
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	68dc      	ldr	r4, [r3, #12]
 80109b8:	4610      	mov	r0, r2
 80109ba:	f7f9 fd0b 	bl	800a3d4 <lwip_htons>
 80109be:	4603      	mov	r3, r0
 80109c0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	8b1a      	ldrh	r2, [r3, #24]
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	68dc      	ldr	r4, [r3, #12]
 80109ca:	4610      	mov	r0, r2
 80109cc:	f7f9 fd02 	bl	800a3d4 <lwip_htons>
 80109d0:	4603      	mov	r3, r0
 80109d2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	68dc      	ldr	r4, [r3, #12]
 80109d8:	6838      	ldr	r0, [r7, #0]
 80109da:	f7f9 fd10 	bl	800a3fe <lwip_htonl>
 80109de:	4603      	mov	r3, r0
 80109e0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80109e2:	7dfb      	ldrb	r3, [r7, #23]
 80109e4:	089b      	lsrs	r3, r3, #2
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	3305      	adds	r3, #5
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	031b      	lsls	r3, r3, #12
 80109ee:	b29a      	uxth	r2, r3
 80109f0:	79fb      	ldrb	r3, [r7, #7]
 80109f2:	b29b      	uxth	r3, r3
 80109f4:	4313      	orrs	r3, r2
 80109f6:	b29a      	uxth	r2, r3
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	68dc      	ldr	r4, [r3, #12]
 80109fc:	4610      	mov	r0, r2
 80109fe:	f7f9 fce9 	bl	800a3d4 <lwip_htons>
 8010a02:	4603      	mov	r3, r0
 8010a04:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010a06:	693b      	ldr	r3, [r7, #16]
 8010a08:	68db      	ldr	r3, [r3, #12]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	749a      	strb	r2, [r3, #18]
 8010a0e:	2200      	movs	r2, #0
 8010a10:	74da      	strb	r2, [r3, #19]
  return seg;
 8010a12:	693b      	ldr	r3, [r7, #16]
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	371c      	adds	r7, #28
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd90      	pop	{r4, r7, pc}
 8010a1c:	0801a334 	.word	0x0801a334
 8010a20:	0801a368 	.word	0x0801a368
 8010a24:	0801a388 	.word	0x0801a388
 8010a28:	0801a3b0 	.word	0x0801a3b0
 8010a2c:	0801a3d4 	.word	0x0801a3d4

08010a30 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b086      	sub	sp, #24
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	607b      	str	r3, [r7, #4]
 8010a38:	4603      	mov	r3, r0
 8010a3a:	73fb      	strb	r3, [r7, #15]
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	81bb      	strh	r3, [r7, #12]
 8010a40:	4613      	mov	r3, r2
 8010a42:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010a44:	89bb      	ldrh	r3, [r7, #12]
 8010a46:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d105      	bne.n	8010a5a <tcp_pbuf_prealloc+0x2a>
 8010a4e:	4b30      	ldr	r3, [pc, #192]	@ (8010b10 <tcp_pbuf_prealloc+0xe0>)
 8010a50:	22e8      	movs	r2, #232	@ 0xe8
 8010a52:	4930      	ldr	r1, [pc, #192]	@ (8010b14 <tcp_pbuf_prealloc+0xe4>)
 8010a54:	4830      	ldr	r0, [pc, #192]	@ (8010b18 <tcp_pbuf_prealloc+0xe8>)
 8010a56:	f007 f82f 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010a5a:	6a3b      	ldr	r3, [r7, #32]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d105      	bne.n	8010a6c <tcp_pbuf_prealloc+0x3c>
 8010a60:	4b2b      	ldr	r3, [pc, #172]	@ (8010b10 <tcp_pbuf_prealloc+0xe0>)
 8010a62:	22e9      	movs	r2, #233	@ 0xe9
 8010a64:	492d      	ldr	r1, [pc, #180]	@ (8010b1c <tcp_pbuf_prealloc+0xec>)
 8010a66:	482c      	ldr	r0, [pc, #176]	@ (8010b18 <tcp_pbuf_prealloc+0xe8>)
 8010a68:	f007 f826 	bl	8017ab8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010a6c:	89ba      	ldrh	r2, [r7, #12]
 8010a6e:	897b      	ldrh	r3, [r7, #10]
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d221      	bcs.n	8010ab8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010a74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010a78:	f003 0302 	and.w	r3, r3, #2
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d111      	bne.n	8010aa4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010a80:	6a3b      	ldr	r3, [r7, #32]
 8010a82:	8b5b      	ldrh	r3, [r3, #26]
 8010a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d115      	bne.n	8010ab8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010a8c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d007      	beq.n	8010aa4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010a94:	6a3b      	ldr	r3, [r7, #32]
 8010a96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d103      	bne.n	8010aa4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010a9c:	6a3b      	ldr	r3, [r7, #32]
 8010a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d009      	beq.n	8010ab8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010aa4:	89bb      	ldrh	r3, [r7, #12]
 8010aa6:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 8010aaa:	f023 0203 	bic.w	r2, r3, #3
 8010aae:	897b      	ldrh	r3, [r7, #10]
 8010ab0:	4293      	cmp	r3, r2
 8010ab2:	bf28      	it	cs
 8010ab4:	4613      	movcs	r3, r2
 8010ab6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010ab8:	8af9      	ldrh	r1, [r7, #22]
 8010aba:	7bfb      	ldrb	r3, [r7, #15]
 8010abc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7fa fe53 	bl	800b76c <pbuf_alloc>
 8010ac6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d101      	bne.n	8010ad2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	e019      	b.n	8010b06 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d006      	beq.n	8010ae8 <tcp_pbuf_prealloc+0xb8>
 8010ada:	4b0d      	ldr	r3, [pc, #52]	@ (8010b10 <tcp_pbuf_prealloc+0xe0>)
 8010adc:	f240 120b 	movw	r2, #267	@ 0x10b
 8010ae0:	490f      	ldr	r1, [pc, #60]	@ (8010b20 <tcp_pbuf_prealloc+0xf0>)
 8010ae2:	480d      	ldr	r0, [pc, #52]	@ (8010b18 <tcp_pbuf_prealloc+0xe8>)
 8010ae4:	f006 ffe8 	bl	8017ab8 <iprintf>
  *oversize = p->len - length;
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	895a      	ldrh	r2, [r3, #10]
 8010aec:	89bb      	ldrh	r3, [r7, #12]
 8010aee:	1ad3      	subs	r3, r2, r3
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	89ba      	ldrh	r2, [r7, #12]
 8010afa:	811a      	strh	r2, [r3, #8]
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	891a      	ldrh	r2, [r3, #8]
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	815a      	strh	r2, [r3, #10]
  return p;
 8010b04:	693b      	ldr	r3, [r7, #16]
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3718      	adds	r7, #24
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	0801a334 	.word	0x0801a334
 8010b14:	0801a3ec 	.word	0x0801a3ec
 8010b18:	0801a388 	.word	0x0801a388
 8010b1c:	0801a410 	.word	0x0801a410
 8010b20:	0801a430 	.word	0x0801a430

08010b24 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d106      	bne.n	8010b44 <tcp_write_checks+0x20>
 8010b36:	4b33      	ldr	r3, [pc, #204]	@ (8010c04 <tcp_write_checks+0xe0>)
 8010b38:	f240 1233 	movw	r2, #307	@ 0x133
 8010b3c:	4932      	ldr	r1, [pc, #200]	@ (8010c08 <tcp_write_checks+0xe4>)
 8010b3e:	4833      	ldr	r0, [pc, #204]	@ (8010c0c <tcp_write_checks+0xe8>)
 8010b40:	f006 ffba 	bl	8017ab8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	7d1b      	ldrb	r3, [r3, #20]
 8010b48:	2b04      	cmp	r3, #4
 8010b4a:	d00e      	beq.n	8010b6a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010b50:	2b07      	cmp	r3, #7
 8010b52:	d00a      	beq.n	8010b6a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010b58:	2b02      	cmp	r3, #2
 8010b5a:	d006      	beq.n	8010b6a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010b60:	2b03      	cmp	r3, #3
 8010b62:	d002      	beq.n	8010b6a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010b64:	f06f 030a 	mvn.w	r3, #10
 8010b68:	e048      	b.n	8010bfc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010b6a:	887b      	ldrh	r3, [r7, #2]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d101      	bne.n	8010b74 <tcp_write_checks+0x50>
    return ERR_OK;
 8010b70:	2300      	movs	r3, #0
 8010b72:	e043      	b.n	8010bfc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010b7a:	887a      	ldrh	r2, [r7, #2]
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d909      	bls.n	8010b94 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	8b5b      	ldrh	r3, [r3, #26]
 8010b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b88:	b29a      	uxth	r2, r3
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b92:	e033      	b.n	8010bfc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b9a:	2b0f      	cmp	r3, #15
 8010b9c:	d909      	bls.n	8010bb2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	8b5b      	ldrh	r3, [r3, #26]
 8010ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ba6:	b29a      	uxth	r2, r3
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010bac:	f04f 33ff 	mov.w	r3, #4294967295
 8010bb0:	e024      	b.n	8010bfc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d00f      	beq.n	8010bdc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d11a      	bne.n	8010bfa <tcp_write_checks+0xd6>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d116      	bne.n	8010bfa <tcp_write_checks+0xd6>
 8010bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8010c04 <tcp_write_checks+0xe0>)
 8010bce:	f240 1255 	movw	r2, #341	@ 0x155
 8010bd2:	490f      	ldr	r1, [pc, #60]	@ (8010c10 <tcp_write_checks+0xec>)
 8010bd4:	480d      	ldr	r0, [pc, #52]	@ (8010c0c <tcp_write_checks+0xe8>)
 8010bd6:	f006 ff6f 	bl	8017ab8 <iprintf>
 8010bda:	e00e      	b.n	8010bfa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d103      	bne.n	8010bec <tcp_write_checks+0xc8>
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d006      	beq.n	8010bfa <tcp_write_checks+0xd6>
 8010bec:	4b05      	ldr	r3, [pc, #20]	@ (8010c04 <tcp_write_checks+0xe0>)
 8010bee:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8010bf2:	4908      	ldr	r1, [pc, #32]	@ (8010c14 <tcp_write_checks+0xf0>)
 8010bf4:	4805      	ldr	r0, [pc, #20]	@ (8010c0c <tcp_write_checks+0xe8>)
 8010bf6:	f006 ff5f 	bl	8017ab8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010bfa:	2300      	movs	r3, #0
}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3708      	adds	r7, #8
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	0801a334 	.word	0x0801a334
 8010c08:	0801a444 	.word	0x0801a444
 8010c0c:	0801a388 	.word	0x0801a388
 8010c10:	0801a464 	.word	0x0801a464
 8010c14:	0801a4a0 	.word	0x0801a4a0

08010c18 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010c18:	b590      	push	{r4, r7, lr}
 8010c1a:	b09b      	sub	sp, #108	@ 0x6c
 8010c1c:	af04      	add	r7, sp, #16
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	4611      	mov	r1, r2
 8010c24:	461a      	mov	r2, r3
 8010c26:	460b      	mov	r3, r1
 8010c28:	80fb      	strh	r3, [r7, #6]
 8010c2a:	4613      	mov	r3, r2
 8010c2c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010c32:	2300      	movs	r3, #0
 8010c34:	653b      	str	r3, [r7, #80]	@ 0x50
 8010c36:	2300      	movs	r3, #0
 8010c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c3e:	2300      	movs	r3, #0
 8010c40:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010c42:	2300      	movs	r3, #0
 8010c44:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010c52:	2300      	movs	r3, #0
 8010c54:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010c56:	2300      	movs	r3, #0
 8010c58:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d109      	bne.n	8010c74 <tcp_write+0x5c>
 8010c60:	4ba5      	ldr	r3, [pc, #660]	@ (8010ef8 <tcp_write+0x2e0>)
 8010c62:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8010c66:	49a5      	ldr	r1, [pc, #660]	@ (8010efc <tcp_write+0x2e4>)
 8010c68:	48a5      	ldr	r0, [pc, #660]	@ (8010f00 <tcp_write+0x2e8>)
 8010c6a:	f006 ff25 	bl	8017ab8 <iprintf>
 8010c6e:	f06f 030f 	mvn.w	r3, #15
 8010c72:	e32c      	b.n	80112ce <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c7a:	085b      	lsrs	r3, r3, #1
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c82:	4293      	cmp	r3, r2
 8010c84:	bf28      	it	cs
 8010c86:	4613      	movcs	r3, r2
 8010c88:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010c8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d102      	bne.n	8010c96 <tcp_write+0x7e>
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c94:	e000      	b.n	8010c98 <tcp_write+0x80>
 8010c96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010c98:	84bb      	strh	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT_CORE_LOCKED();
 8010c9a:	f7f5 fb2b 	bl	80062f4 <sys_check_core_locking>
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d109      	bne.n	8010cb8 <tcp_write+0xa0>
 8010ca4:	4b94      	ldr	r3, [pc, #592]	@ (8010ef8 <tcp_write+0x2e0>)
 8010ca6:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8010caa:	4996      	ldr	r1, [pc, #600]	@ (8010f04 <tcp_write+0x2ec>)
 8010cac:	4894      	ldr	r0, [pc, #592]	@ (8010f00 <tcp_write+0x2e8>)
 8010cae:	f006 ff03 	bl	8017ab8 <iprintf>
 8010cb2:	f06f 030f 	mvn.w	r3, #15
 8010cb6:	e30a      	b.n	80112ce <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010cb8:	88fb      	ldrh	r3, [r7, #6]
 8010cba:	4619      	mov	r1, r3
 8010cbc:	68f8      	ldr	r0, [r7, #12]
 8010cbe:	f7ff ff31 	bl	8010b24 <tcp_write_checks>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8010cc8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d002      	beq.n	8010cd6 <tcp_write+0xbe>
    return err;
 8010cd0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8010cd4:	e2fb      	b.n	80112ce <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010cdc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	f000 80f6 	beq.w	8010edc <tcp_write+0x2c4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cf4:	653b      	str	r3, [r7, #80]	@ 0x50
 8010cf6:	e002      	b.n	8010cfe <tcp_write+0xe6>
         last_unsent = last_unsent->next);
 8010cf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d1f8      	bne.n	8010cf8 <tcp_write+0xe0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010d06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d08:	7a9b      	ldrb	r3, [r3, #10]
 8010d0a:	009b      	lsls	r3, r3, #2
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	f003 0304 	and.w	r3, r3, #4
 8010d12:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010d14:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d18:	891b      	ldrh	r3, [r3, #8]
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	8c3b      	ldrh	r3, [r7, #32]
 8010d1e:	440b      	add	r3, r1
 8010d20:	429a      	cmp	r2, r3
 8010d22:	da06      	bge.n	8010d32 <tcp_write+0x11a>
 8010d24:	4b74      	ldr	r3, [pc, #464]	@ (8010ef8 <tcp_write+0x2e0>)
 8010d26:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010d2a:	4977      	ldr	r1, [pc, #476]	@ (8010f08 <tcp_write+0x2f0>)
 8010d2c:	4874      	ldr	r0, [pc, #464]	@ (8010f00 <tcp_write+0x2e8>)
 8010d2e:	f006 fec3 	bl	8017ab8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d34:	891a      	ldrh	r2, [r3, #8]
 8010d36:	8c3b      	ldrh	r3, [r7, #32]
 8010d38:	4413      	add	r3, r2
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010d3e:	1ad3      	subs	r3, r2, r3
 8010d40:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010d48:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010d4a:	8a7b      	ldrh	r3, [r7, #18]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d026      	beq.n	8010d9e <tcp_write+0x186>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010d50:	8a7b      	ldrh	r3, [r7, #18]
 8010d52:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d206      	bcs.n	8010d66 <tcp_write+0x14e>
 8010d58:	4b67      	ldr	r3, [pc, #412]	@ (8010ef8 <tcp_write+0x2e0>)
 8010d5a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8010d5e:	496b      	ldr	r1, [pc, #428]	@ (8010f0c <tcp_write+0x2f4>)
 8010d60:	4867      	ldr	r0, [pc, #412]	@ (8010f00 <tcp_write+0x2e8>)
 8010d62:	f006 fea9 	bl	8017ab8 <iprintf>
      seg = last_unsent;
 8010d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010d6a:	8a7b      	ldrh	r3, [r7, #18]
 8010d6c:	88fa      	ldrh	r2, [r7, #6]
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	bf28      	it	cs
 8010d72:	4613      	movcs	r3, r2
 8010d74:	b29b      	uxth	r3, r3
 8010d76:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010d78:	4293      	cmp	r3, r2
 8010d7a:	bf28      	it	cs
 8010d7c:	4613      	movcs	r3, r2
 8010d7e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8010d80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010d84:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010d86:	4413      	add	r3, r2
 8010d88:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8010d8c:	8a7a      	ldrh	r2, [r7, #18]
 8010d8e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010d90:	1ad3      	subs	r3, r2, r3
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010d96:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010d98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010d9a:	1ad3      	subs	r3, r2, r3
 8010d9c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010d9e:	8a7b      	ldrh	r3, [r7, #18]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d00b      	beq.n	8010dbc <tcp_write+0x1a4>
 8010da4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010da8:	88fb      	ldrh	r3, [r7, #6]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d006      	beq.n	8010dbc <tcp_write+0x1a4>
 8010dae:	4b52      	ldr	r3, [pc, #328]	@ (8010ef8 <tcp_write+0x2e0>)
 8010db0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010db4:	4956      	ldr	r1, [pc, #344]	@ (8010f10 <tcp_write+0x2f8>)
 8010db6:	4852      	ldr	r0, [pc, #328]	@ (8010f00 <tcp_write+0x2e8>)
 8010db8:	f006 fe7e 	bl	8017ab8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010dbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010dc0:	88fb      	ldrh	r3, [r7, #6]
 8010dc2:	429a      	cmp	r2, r3
 8010dc4:	f080 8167 	bcs.w	8011096 <tcp_write+0x47e>
 8010dc8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	f000 8163 	beq.w	8011096 <tcp_write+0x47e>
 8010dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010dd2:	891b      	ldrh	r3, [r3, #8]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	f000 815e 	beq.w	8011096 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010dda:	88fa      	ldrh	r2, [r7, #6]
 8010ddc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010de0:	1ad2      	subs	r2, r2, r3
 8010de2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010de4:	4293      	cmp	r3, r2
 8010de6:	bfa8      	it	ge
 8010de8:	4613      	movge	r3, r2
 8010dea:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010dee:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010df0:	797b      	ldrb	r3, [r7, #5]
 8010df2:	f003 0301 	and.w	r3, r3, #1
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d027      	beq.n	8010e4a <tcp_write+0x232>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010dfa:	f107 0012 	add.w	r0, r7, #18
 8010dfe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010e00:	8bf9      	ldrh	r1, [r7, #30]
 8010e02:	2301      	movs	r3, #1
 8010e04:	9302      	str	r3, [sp, #8]
 8010e06:	797b      	ldrb	r3, [r7, #5]
 8010e08:	9301      	str	r3, [sp, #4]
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	9300      	str	r3, [sp, #0]
 8010e0e:	4603      	mov	r3, r0
 8010e10:	2000      	movs	r0, #0
 8010e12:	f7ff fe0d 	bl	8010a30 <tcp_pbuf_prealloc>
 8010e16:	6578      	str	r0, [r7, #84]	@ 0x54
 8010e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	f000 8225 	beq.w	801126a <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e22:	6858      	ldr	r0, [r3, #4]
 8010e24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010e28:	68ba      	ldr	r2, [r7, #8]
 8010e2a:	4413      	add	r3, r2
 8010e2c:	8bfa      	ldrh	r2, [r7, #30]
 8010e2e:	4619      	mov	r1, r3
 8010e30:	f006 ff73 	bl	8017d1a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010e34:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010e36:	f7fb f80b 	bl	800be50 <pbuf_clen>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	461a      	mov	r2, r3
 8010e3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010e42:	4413      	add	r3, r2
 8010e44:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8010e48:	e041      	b.n	8010ece <tcp_write+0x2b6>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e50:	e002      	b.n	8010e58 <tcp_write+0x240>
 8010e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d1f8      	bne.n	8010e52 <tcp_write+0x23a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e62:	7b1b      	ldrb	r3, [r3, #12]
 8010e64:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d115      	bne.n	8010e98 <tcp_write+0x280>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e72:	8952      	ldrh	r2, [r2, #10]
 8010e74:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010e76:	68ba      	ldr	r2, [r7, #8]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d10d      	bne.n	8010e98 <tcp_write+0x280>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010e7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d006      	beq.n	8010e92 <tcp_write+0x27a>
 8010e84:	4b1c      	ldr	r3, [pc, #112]	@ (8010ef8 <tcp_write+0x2e0>)
 8010e86:	f240 2231 	movw	r2, #561	@ 0x231
 8010e8a:	4922      	ldr	r1, [pc, #136]	@ (8010f14 <tcp_write+0x2fc>)
 8010e8c:	481c      	ldr	r0, [pc, #112]	@ (8010f00 <tcp_write+0x2e8>)
 8010e8e:	f006 fe13 	bl	8017ab8 <iprintf>
          extendlen = seglen;
 8010e92:	8bfb      	ldrh	r3, [r7, #30]
 8010e94:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8010e96:	e01a      	b.n	8010ece <tcp_write+0x2b6>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010e98:	8bfb      	ldrh	r3, [r7, #30]
 8010e9a:	2201      	movs	r2, #1
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	2000      	movs	r0, #0
 8010ea0:	f7fa fc64 	bl	800b76c <pbuf_alloc>
 8010ea4:	6578      	str	r0, [r7, #84]	@ 0x54
 8010ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	f000 81e0 	beq.w	801126e <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010eae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010eb2:	68ba      	ldr	r2, [r7, #8]
 8010eb4:	441a      	add	r2, r3
 8010eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010eb8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010eba:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010ebc:	f7fa ffc8 	bl	800be50 <pbuf_clen>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010ec8:	4413      	add	r3, r2
 8010eca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010ece:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010ed2:	8bfb      	ldrh	r3, [r7, #30]
 8010ed4:	4413      	add	r3, r2
 8010ed6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8010eda:	e0dc      	b.n	8011096 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	f000 80d7 	beq.w	8011096 <tcp_write+0x47e>
 8010ee8:	4b03      	ldr	r3, [pc, #12]	@ (8010ef8 <tcp_write+0x2e0>)
 8010eea:	f240 224a 	movw	r2, #586	@ 0x24a
 8010eee:	490a      	ldr	r1, [pc, #40]	@ (8010f18 <tcp_write+0x300>)
 8010ef0:	4803      	ldr	r0, [pc, #12]	@ (8010f00 <tcp_write+0x2e8>)
 8010ef2:	f006 fde1 	bl	8017ab8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010ef6:	e0ce      	b.n	8011096 <tcp_write+0x47e>
 8010ef8:	0801a334 	.word	0x0801a334
 8010efc:	0801a4d4 	.word	0x0801a4d4
 8010f00:	0801a388 	.word	0x0801a388
 8010f04:	0801a4ec 	.word	0x0801a4ec
 8010f08:	0801a520 	.word	0x0801a520
 8010f0c:	0801a538 	.word	0x0801a538
 8010f10:	0801a558 	.word	0x0801a558
 8010f14:	0801a578 	.word	0x0801a578
 8010f18:	0801a5a4 	.word	0x0801a5a4
    struct pbuf *p;
    u16_t left = len - pos;
 8010f1c:	88fa      	ldrh	r2, [r7, #6]
 8010f1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010f22:	1ad3      	subs	r3, r2, r3
 8010f24:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010f26:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010f2a:	b29b      	uxth	r3, r3
 8010f2c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010f2e:	1ad3      	subs	r3, r2, r3
 8010f30:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010f32:	8b7a      	ldrh	r2, [r7, #26]
 8010f34:	8bbb      	ldrh	r3, [r7, #28]
 8010f36:	4293      	cmp	r3, r2
 8010f38:	bf28      	it	cs
 8010f3a:	4613      	movcs	r3, r2
 8010f3c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010f3e:	797b      	ldrb	r3, [r7, #5]
 8010f40:	f003 0301 	and.w	r3, r3, #1
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d036      	beq.n	8010fb6 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010f48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010f4c:	b29a      	uxth	r2, r3
 8010f4e:	8b3b      	ldrh	r3, [r7, #24]
 8010f50:	4413      	add	r3, r2
 8010f52:	b299      	uxth	r1, r3
 8010f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	bf0c      	ite	eq
 8010f5a:	2301      	moveq	r3, #1
 8010f5c:	2300      	movne	r3, #0
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	f107 0012 	add.w	r0, r7, #18
 8010f64:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010f66:	9302      	str	r3, [sp, #8]
 8010f68:	797b      	ldrb	r3, [r7, #5]
 8010f6a:	9301      	str	r3, [sp, #4]
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	4603      	mov	r3, r0
 8010f72:	2036      	movs	r0, #54	@ 0x36
 8010f74:	f7ff fd5c 	bl	8010a30 <tcp_pbuf_prealloc>
 8010f78:	6338      	str	r0, [r7, #48]	@ 0x30
 8010f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	f000 8178 	beq.w	8011272 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f84:	895b      	ldrh	r3, [r3, #10]
 8010f86:	8b3a      	ldrh	r2, [r7, #24]
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d906      	bls.n	8010f9a <tcp_write+0x382>
 8010f8c:	4b8c      	ldr	r3, [pc, #560]	@ (80111c0 <tcp_write+0x5a8>)
 8010f8e:	f240 2266 	movw	r2, #614	@ 0x266
 8010f92:	498c      	ldr	r1, [pc, #560]	@ (80111c4 <tcp_write+0x5ac>)
 8010f94:	488c      	ldr	r0, [pc, #560]	@ (80111c8 <tcp_write+0x5b0>)
 8010f96:	f006 fd8f 	bl	8017ab8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f9c:	685a      	ldr	r2, [r3, #4]
 8010f9e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010fa2:	18d0      	adds	r0, r2, r3
 8010fa4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010fa8:	68ba      	ldr	r2, [r7, #8]
 8010faa:	4413      	add	r3, r2
 8010fac:	8b3a      	ldrh	r2, [r7, #24]
 8010fae:	4619      	mov	r1, r3
 8010fb0:	f006 feb3 	bl	8017d1a <memcpy>
 8010fb4:	e02f      	b.n	8011016 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010fb6:	8a7b      	ldrh	r3, [r7, #18]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d006      	beq.n	8010fca <tcp_write+0x3b2>
 8010fbc:	4b80      	ldr	r3, [pc, #512]	@ (80111c0 <tcp_write+0x5a8>)
 8010fbe:	f240 2271 	movw	r2, #625	@ 0x271
 8010fc2:	4982      	ldr	r1, [pc, #520]	@ (80111cc <tcp_write+0x5b4>)
 8010fc4:	4880      	ldr	r0, [pc, #512]	@ (80111c8 <tcp_write+0x5b0>)
 8010fc6:	f006 fd77 	bl	8017ab8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010fca:	8b3b      	ldrh	r3, [r7, #24]
 8010fcc:	2201      	movs	r2, #1
 8010fce:	4619      	mov	r1, r3
 8010fd0:	2036      	movs	r0, #54	@ 0x36
 8010fd2:	f7fa fbcb 	bl	800b76c <pbuf_alloc>
 8010fd6:	6178      	str	r0, [r7, #20]
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f000 814b 	beq.w	8011276 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010fe0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010fe4:	68ba      	ldr	r2, [r7, #8]
 8010fe6:	441a      	add	r2, r3
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010fec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	2036      	movs	r0, #54	@ 0x36
 8010ffa:	f7fa fbb7 	bl	800b76c <pbuf_alloc>
 8010ffe:	6338      	str	r0, [r7, #48]	@ 0x30
 8011000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011002:	2b00      	cmp	r3, #0
 8011004:	d103      	bne.n	801100e <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011006:	6978      	ldr	r0, [r7, #20]
 8011008:	f7fa fe94 	bl	800bd34 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801100c:	e136      	b.n	801127c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801100e:	6979      	ldr	r1, [r7, #20]
 8011010:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011012:	f7fa ff5d 	bl	800bed0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011016:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011018:	f7fa ff1a 	bl	800be50 <pbuf_clen>
 801101c:	4603      	mov	r3, r0
 801101e:	461a      	mov	r2, r3
 8011020:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011024:	4413      	add	r3, r2
 8011026:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801102a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801102e:	2b10      	cmp	r3, #16
 8011030:	d903      	bls.n	801103a <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011032:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011034:	f7fa fe7e 	bl	800bd34 <pbuf_free>
      goto memerr;
 8011038:	e120      	b.n	801127c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801103e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011042:	441a      	add	r2, r3
 8011044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011048:	9300      	str	r3, [sp, #0]
 801104a:	4613      	mov	r3, r2
 801104c:	2200      	movs	r2, #0
 801104e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011050:	68f8      	ldr	r0, [r7, #12]
 8011052:	f7ff fc51 	bl	80108f8 <tcp_create_segment>
 8011056:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801105a:	2b00      	cmp	r3, #0
 801105c:	f000 810d 	beq.w	801127a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011062:	2b00      	cmp	r3, #0
 8011064:	d102      	bne.n	801106c <tcp_write+0x454>
      queue = seg;
 8011066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011068:	647b      	str	r3, [r7, #68]	@ 0x44
 801106a:	e00c      	b.n	8011086 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801106c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801106e:	2b00      	cmp	r3, #0
 8011070:	d106      	bne.n	8011080 <tcp_write+0x468>
 8011072:	4b53      	ldr	r3, [pc, #332]	@ (80111c0 <tcp_write+0x5a8>)
 8011074:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011078:	4955      	ldr	r1, [pc, #340]	@ (80111d0 <tcp_write+0x5b8>)
 801107a:	4853      	ldr	r0, [pc, #332]	@ (80111c8 <tcp_write+0x5b0>)
 801107c:	f006 fd1c 	bl	8017ab8 <iprintf>
      prev_seg->next = seg;
 8011080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011082:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011084:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011088:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801108a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801108e:	8b3b      	ldrh	r3, [r7, #24]
 8011090:	4413      	add	r3, r2
 8011092:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8011096:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801109a:	88fb      	ldrh	r3, [r7, #6]
 801109c:	429a      	cmp	r2, r3
 801109e:	f4ff af3d 	bcc.w	8010f1c <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80110a2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d02c      	beq.n	8011102 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80110a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80110aa:	685b      	ldr	r3, [r3, #4]
 80110ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80110ae:	e01e      	b.n	80110ee <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 80110b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110b2:	891a      	ldrh	r2, [r3, #8]
 80110b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80110b6:	4413      	add	r3, r2
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110bc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80110be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d110      	bne.n	80110e8 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80110c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110c8:	685b      	ldr	r3, [r3, #4]
 80110ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80110cc:	8952      	ldrh	r2, [r2, #10]
 80110ce:	4413      	add	r3, r2
 80110d0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80110d2:	68b9      	ldr	r1, [r7, #8]
 80110d4:	4618      	mov	r0, r3
 80110d6:	f006 fe20 	bl	8017d1a <memcpy>
        p->len += oversize_used;
 80110da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110dc:	895a      	ldrh	r2, [r3, #10]
 80110de:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80110e0:	4413      	add	r3, r2
 80110e2:	b29a      	uxth	r2, r3
 80110e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110e6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80110e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80110ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d1dd      	bne.n	80110b0 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 80110f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80110f6:	891a      	ldrh	r2, [r3, #8]
 80110f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80110fa:	4413      	add	r3, r2
 80110fc:	b29a      	uxth	r2, r3
 80110fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011100:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011102:	8a7a      	ldrh	r2, [r7, #18]
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801110a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801110c:	2b00      	cmp	r3, #0
 801110e:	d018      	beq.n	8011142 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011112:	2b00      	cmp	r3, #0
 8011114:	d106      	bne.n	8011124 <tcp_write+0x50c>
 8011116:	4b2a      	ldr	r3, [pc, #168]	@ (80111c0 <tcp_write+0x5a8>)
 8011118:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801111c:	492d      	ldr	r1, [pc, #180]	@ (80111d4 <tcp_write+0x5bc>)
 801111e:	482a      	ldr	r0, [pc, #168]	@ (80111c8 <tcp_write+0x5b0>)
 8011120:	f006 fcca 	bl	8017ab8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011126:	685b      	ldr	r3, [r3, #4]
 8011128:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801112a:	4618      	mov	r0, r3
 801112c:	f7fa fed0 	bl	800bed0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011132:	891a      	ldrh	r2, [r3, #8]
 8011134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011136:	891b      	ldrh	r3, [r3, #8]
 8011138:	4413      	add	r3, r2
 801113a:	b29a      	uxth	r2, r3
 801113c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801113e:	811a      	strh	r2, [r3, #8]
 8011140:	e037      	b.n	80111b2 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8011142:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011144:	2b00      	cmp	r3, #0
 8011146:	d034      	beq.n	80111b2 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801114a:	2b00      	cmp	r3, #0
 801114c:	d003      	beq.n	8011156 <tcp_write+0x53e>
 801114e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d106      	bne.n	8011164 <tcp_write+0x54c>
 8011156:	4b1a      	ldr	r3, [pc, #104]	@ (80111c0 <tcp_write+0x5a8>)
 8011158:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801115c:	491e      	ldr	r1, [pc, #120]	@ (80111d8 <tcp_write+0x5c0>)
 801115e:	481a      	ldr	r0, [pc, #104]	@ (80111c8 <tcp_write+0x5b0>)
 8011160:	f006 fcaa 	bl	8017ab8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011166:	685b      	ldr	r3, [r3, #4]
 8011168:	62bb      	str	r3, [r7, #40]	@ 0x28
 801116a:	e009      	b.n	8011180 <tcp_write+0x568>
      p->tot_len += extendlen;
 801116c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801116e:	891a      	ldrh	r2, [r3, #8]
 8011170:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011172:	4413      	add	r3, r2
 8011174:	b29a      	uxth	r2, r3
 8011176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011178:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801117a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d1f1      	bne.n	801116c <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8011188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801118a:	891a      	ldrh	r2, [r3, #8]
 801118c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801118e:	4413      	add	r3, r2
 8011190:	b29a      	uxth	r2, r3
 8011192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011194:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011198:	895a      	ldrh	r2, [r3, #10]
 801119a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801119c:	4413      	add	r3, r2
 801119e:	b29a      	uxth	r2, r3
 80111a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111a2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80111a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111a6:	891a      	ldrh	r2, [r3, #8]
 80111a8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80111aa:	4413      	add	r3, r2
 80111ac:	b29a      	uxth	r2, r3
 80111ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111b0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80111b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d111      	bne.n	80111dc <tcp_write+0x5c4>
    pcb->unsent = queue;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80111bc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80111be:	e010      	b.n	80111e2 <tcp_write+0x5ca>
 80111c0:	0801a334 	.word	0x0801a334
 80111c4:	0801a5d4 	.word	0x0801a5d4
 80111c8:	0801a388 	.word	0x0801a388
 80111cc:	0801a614 	.word	0x0801a614
 80111d0:	0801a624 	.word	0x0801a624
 80111d4:	0801a638 	.word	0x0801a638
 80111d8:	0801a670 	.word	0x0801a670
  } else {
    last_unsent->next = queue;
 80111dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80111e0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80111e6:	88fb      	ldrh	r3, [r7, #6]
 80111e8:	441a      	add	r2, r3
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80111f4:	88fb      	ldrh	r3, [r7, #6]
 80111f6:	1ad3      	subs	r3, r2, r3
 80111f8:	b29a      	uxth	r2, r3
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8011206:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00e      	beq.n	8011232 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011218:	2b00      	cmp	r3, #0
 801121a:	d10a      	bne.n	8011232 <tcp_write+0x61a>
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011220:	2b00      	cmp	r3, #0
 8011222:	d106      	bne.n	8011232 <tcp_write+0x61a>
 8011224:	4b2c      	ldr	r3, [pc, #176]	@ (80112d8 <tcp_write+0x6c0>)
 8011226:	f240 3212 	movw	r2, #786	@ 0x312
 801122a:	492c      	ldr	r1, [pc, #176]	@ (80112dc <tcp_write+0x6c4>)
 801122c:	482c      	ldr	r0, [pc, #176]	@ (80112e0 <tcp_write+0x6c8>)
 801122e:	f006 fc43 	bl	8017ab8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011234:	2b00      	cmp	r3, #0
 8011236:	d016      	beq.n	8011266 <tcp_write+0x64e>
 8011238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d012      	beq.n	8011266 <tcp_write+0x64e>
 8011240:	797b      	ldrb	r3, [r7, #5]
 8011242:	f003 0302 	and.w	r3, r3, #2
 8011246:	2b00      	cmp	r3, #0
 8011248:	d10d      	bne.n	8011266 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801124a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801124c:	68db      	ldr	r3, [r3, #12]
 801124e:	899b      	ldrh	r3, [r3, #12]
 8011250:	b29c      	uxth	r4, r3
 8011252:	2008      	movs	r0, #8
 8011254:	f7f9 f8be 	bl	800a3d4 <lwip_htons>
 8011258:	4603      	mov	r3, r0
 801125a:	461a      	mov	r2, r3
 801125c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801125e:	68db      	ldr	r3, [r3, #12]
 8011260:	4322      	orrs	r2, r4
 8011262:	b292      	uxth	r2, r2
 8011264:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011266:	2300      	movs	r3, #0
 8011268:	e031      	b.n	80112ce <tcp_write+0x6b6>
          goto memerr;
 801126a:	bf00      	nop
 801126c:	e006      	b.n	801127c <tcp_write+0x664>
            goto memerr;
 801126e:	bf00      	nop
 8011270:	e004      	b.n	801127c <tcp_write+0x664>
        goto memerr;
 8011272:	bf00      	nop
 8011274:	e002      	b.n	801127c <tcp_write+0x664>
        goto memerr;
 8011276:	bf00      	nop
 8011278:	e000      	b.n	801127c <tcp_write+0x664>
      goto memerr;
 801127a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	8b5b      	ldrh	r3, [r3, #26]
 8011280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011284:	b29a      	uxth	r2, r3
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801128a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801128c:	2b00      	cmp	r3, #0
 801128e:	d002      	beq.n	8011296 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8011290:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011292:	f7fa fd4f 	bl	800bd34 <pbuf_free>
  }
  if (queue != NULL) {
 8011296:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011298:	2b00      	cmp	r3, #0
 801129a:	d002      	beq.n	80112a2 <tcp_write+0x68a>
    tcp_segs_free(queue);
 801129c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801129e:	f7fc fb61 	bl	800d964 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d00e      	beq.n	80112ca <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d10a      	bne.n	80112ca <tcp_write+0x6b2>
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d106      	bne.n	80112ca <tcp_write+0x6b2>
 80112bc:	4b06      	ldr	r3, [pc, #24]	@ (80112d8 <tcp_write+0x6c0>)
 80112be:	f240 3227 	movw	r2, #807	@ 0x327
 80112c2:	4906      	ldr	r1, [pc, #24]	@ (80112dc <tcp_write+0x6c4>)
 80112c4:	4806      	ldr	r0, [pc, #24]	@ (80112e0 <tcp_write+0x6c8>)
 80112c6:	f006 fbf7 	bl	8017ab8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80112ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	375c      	adds	r7, #92	@ 0x5c
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd90      	pop	{r4, r7, pc}
 80112d6:	bf00      	nop
 80112d8:	0801a334 	.word	0x0801a334
 80112dc:	0801a6a8 	.word	0x0801a6a8
 80112e0:	0801a388 	.word	0x0801a388

080112e4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80112e4:	b590      	push	{r4, r7, lr}
 80112e6:	b08b      	sub	sp, #44	@ 0x2c
 80112e8:	af02      	add	r7, sp, #8
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	460b      	mov	r3, r1
 80112ee:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80112f0:	2300      	movs	r3, #0
 80112f2:	61fb      	str	r3, [r7, #28]
 80112f4:	2300      	movs	r3, #0
 80112f6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80112f8:	2300      	movs	r3, #0
 80112fa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d106      	bne.n	8011310 <tcp_split_unsent_seg+0x2c>
 8011302:	4b95      	ldr	r3, [pc, #596]	@ (8011558 <tcp_split_unsent_seg+0x274>)
 8011304:	f240 324b 	movw	r2, #843	@ 0x34b
 8011308:	4994      	ldr	r1, [pc, #592]	@ (801155c <tcp_split_unsent_seg+0x278>)
 801130a:	4895      	ldr	r0, [pc, #596]	@ (8011560 <tcp_split_unsent_seg+0x27c>)
 801130c:	f006 fbd4 	bl	8017ab8 <iprintf>

  useg = pcb->unsent;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011314:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d102      	bne.n	8011322 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801131c:	f04f 33ff 	mov.w	r3, #4294967295
 8011320:	e116      	b.n	8011550 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011322:	887b      	ldrh	r3, [r7, #2]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d109      	bne.n	801133c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011328:	4b8b      	ldr	r3, [pc, #556]	@ (8011558 <tcp_split_unsent_seg+0x274>)
 801132a:	f240 3253 	movw	r2, #851	@ 0x353
 801132e:	498d      	ldr	r1, [pc, #564]	@ (8011564 <tcp_split_unsent_seg+0x280>)
 8011330:	488b      	ldr	r0, [pc, #556]	@ (8011560 <tcp_split_unsent_seg+0x27c>)
 8011332:	f006 fbc1 	bl	8017ab8 <iprintf>
    return ERR_VAL;
 8011336:	f06f 0305 	mvn.w	r3, #5
 801133a:	e109      	b.n	8011550 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	891b      	ldrh	r3, [r3, #8]
 8011340:	887a      	ldrh	r2, [r7, #2]
 8011342:	429a      	cmp	r2, r3
 8011344:	d301      	bcc.n	801134a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011346:	2300      	movs	r3, #0
 8011348:	e102      	b.n	8011550 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801134e:	887a      	ldrh	r2, [r7, #2]
 8011350:	429a      	cmp	r2, r3
 8011352:	d906      	bls.n	8011362 <tcp_split_unsent_seg+0x7e>
 8011354:	4b80      	ldr	r3, [pc, #512]	@ (8011558 <tcp_split_unsent_seg+0x274>)
 8011356:	f240 325b 	movw	r2, #859	@ 0x35b
 801135a:	4983      	ldr	r1, [pc, #524]	@ (8011568 <tcp_split_unsent_seg+0x284>)
 801135c:	4880      	ldr	r0, [pc, #512]	@ (8011560 <tcp_split_unsent_seg+0x27c>)
 801135e:	f006 fbab 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	891b      	ldrh	r3, [r3, #8]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d106      	bne.n	8011378 <tcp_split_unsent_seg+0x94>
 801136a:	4b7b      	ldr	r3, [pc, #492]	@ (8011558 <tcp_split_unsent_seg+0x274>)
 801136c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8011370:	497e      	ldr	r1, [pc, #504]	@ (801156c <tcp_split_unsent_seg+0x288>)
 8011372:	487b      	ldr	r0, [pc, #492]	@ (8011560 <tcp_split_unsent_seg+0x27c>)
 8011374:	f006 fba0 	bl	8017ab8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	7a9b      	ldrb	r3, [r3, #10]
 801137c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801137e:	7bfb      	ldrb	r3, [r7, #15]
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	b2db      	uxtb	r3, r3
 8011384:	f003 0304 	and.w	r3, r3, #4
 8011388:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	891a      	ldrh	r2, [r3, #8]
 801138e:	887b      	ldrh	r3, [r7, #2]
 8011390:	1ad3      	subs	r3, r2, r3
 8011392:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011394:	7bbb      	ldrb	r3, [r7, #14]
 8011396:	b29a      	uxth	r2, r3
 8011398:	89bb      	ldrh	r3, [r7, #12]
 801139a:	4413      	add	r3, r2
 801139c:	b29b      	uxth	r3, r3
 801139e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80113a2:	4619      	mov	r1, r3
 80113a4:	2036      	movs	r0, #54	@ 0x36
 80113a6:	f7fa f9e1 	bl	800b76c <pbuf_alloc>
 80113aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	f000 80b7 	beq.w	8011522 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80113b4:	697b      	ldr	r3, [r7, #20]
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	891a      	ldrh	r2, [r3, #8]
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	891b      	ldrh	r3, [r3, #8]
 80113be:	1ad3      	subs	r3, r2, r3
 80113c0:	b29a      	uxth	r2, r3
 80113c2:	887b      	ldrh	r3, [r7, #2]
 80113c4:	4413      	add	r3, r2
 80113c6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	6858      	ldr	r0, [r3, #4]
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	685a      	ldr	r2, [r3, #4]
 80113d0:	7bbb      	ldrb	r3, [r7, #14]
 80113d2:	18d1      	adds	r1, r2, r3
 80113d4:	897b      	ldrh	r3, [r7, #10]
 80113d6:	89ba      	ldrh	r2, [r7, #12]
 80113d8:	f7fa feb2 	bl	800c140 <pbuf_copy_partial>
 80113dc:	4603      	mov	r3, r0
 80113de:	461a      	mov	r2, r3
 80113e0:	89bb      	ldrh	r3, [r7, #12]
 80113e2:	4293      	cmp	r3, r2
 80113e4:	f040 809f 	bne.w	8011526 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	899b      	ldrh	r3, [r3, #12]
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7f8 ffef 	bl	800a3d4 <lwip_htons>
 80113f6:	4603      	mov	r3, r0
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80113fe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011400:	2300      	movs	r3, #0
 8011402:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011404:	7efb      	ldrb	r3, [r7, #27]
 8011406:	f003 0308 	and.w	r3, r3, #8
 801140a:	2b00      	cmp	r3, #0
 801140c:	d007      	beq.n	801141e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801140e:	7efb      	ldrb	r3, [r7, #27]
 8011410:	f023 0308 	bic.w	r3, r3, #8
 8011414:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011416:	7ebb      	ldrb	r3, [r7, #26]
 8011418:	f043 0308 	orr.w	r3, r3, #8
 801141c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801141e:	7efb      	ldrb	r3, [r7, #27]
 8011420:	f003 0301 	and.w	r3, r3, #1
 8011424:	2b00      	cmp	r3, #0
 8011426:	d007      	beq.n	8011438 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011428:	7efb      	ldrb	r3, [r7, #27]
 801142a:	f023 0301 	bic.w	r3, r3, #1
 801142e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011430:	7ebb      	ldrb	r3, [r7, #26]
 8011432:	f043 0301 	orr.w	r3, r3, #1
 8011436:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	4618      	mov	r0, r3
 8011440:	f7f8 ffdd 	bl	800a3fe <lwip_htonl>
 8011444:	4602      	mov	r2, r0
 8011446:	887b      	ldrh	r3, [r7, #2]
 8011448:	18d1      	adds	r1, r2, r3
 801144a:	7eba      	ldrb	r2, [r7, #26]
 801144c:	7bfb      	ldrb	r3, [r7, #15]
 801144e:	9300      	str	r3, [sp, #0]
 8011450:	460b      	mov	r3, r1
 8011452:	6939      	ldr	r1, [r7, #16]
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f7ff fa4f 	bl	80108f8 <tcp_create_segment>
 801145a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801145c:	69fb      	ldr	r3, [r7, #28]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d063      	beq.n	801152a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	4618      	mov	r0, r3
 8011468:	f7fa fcf2 	bl	800be50 <pbuf_clen>
 801146c:	4603      	mov	r3, r0
 801146e:	461a      	mov	r2, r3
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011476:	1a9b      	subs	r3, r3, r2
 8011478:	b29a      	uxth	r2, r3
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	6858      	ldr	r0, [r3, #4]
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	891a      	ldrh	r2, [r3, #8]
 801148a:	89bb      	ldrh	r3, [r7, #12]
 801148c:	1ad3      	subs	r3, r2, r3
 801148e:	b29b      	uxth	r3, r3
 8011490:	4619      	mov	r1, r3
 8011492:	f7fa facb 	bl	800ba2c <pbuf_realloc>
  useg->len -= remainder;
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	891a      	ldrh	r2, [r3, #8]
 801149a:	89bb      	ldrh	r3, [r7, #12]
 801149c:	1ad3      	subs	r3, r2, r3
 801149e:	b29a      	uxth	r2, r3
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	899b      	ldrh	r3, [r3, #12]
 80114aa:	b29c      	uxth	r4, r3
 80114ac:	7efb      	ldrb	r3, [r7, #27]
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7f8 ff8f 	bl	800a3d4 <lwip_htons>
 80114b6:	4603      	mov	r3, r0
 80114b8:	461a      	mov	r2, r3
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	4322      	orrs	r2, r4
 80114c0:	b292      	uxth	r2, r2
 80114c2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7fa fcc1 	bl	800be50 <pbuf_clen>
 80114ce:	4603      	mov	r3, r0
 80114d0:	461a      	mov	r2, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80114d8:	4413      	add	r3, r2
 80114da:	b29a      	uxth	r2, r3
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80114e2:	69fb      	ldr	r3, [r7, #28]
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7fa fcb2 	bl	800be50 <pbuf_clen>
 80114ec:	4603      	mov	r3, r0
 80114ee:	461a      	mov	r2, r3
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80114f6:	4413      	add	r3, r2
 80114f8:	b29a      	uxth	r2, r3
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	681a      	ldr	r2, [r3, #0]
 8011504:	69fb      	ldr	r3, [r7, #28]
 8011506:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	69fa      	ldr	r2, [r7, #28]
 801150c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801150e:	69fb      	ldr	r3, [r7, #28]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d103      	bne.n	801151e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2200      	movs	r2, #0
 801151a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801151e:	2300      	movs	r3, #0
 8011520:	e016      	b.n	8011550 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011522:	bf00      	nop
 8011524:	e002      	b.n	801152c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011526:	bf00      	nop
 8011528:	e000      	b.n	801152c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801152a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801152c:	69fb      	ldr	r3, [r7, #28]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d006      	beq.n	8011540 <tcp_split_unsent_seg+0x25c>
 8011532:	4b09      	ldr	r3, [pc, #36]	@ (8011558 <tcp_split_unsent_seg+0x274>)
 8011534:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8011538:	490d      	ldr	r1, [pc, #52]	@ (8011570 <tcp_split_unsent_seg+0x28c>)
 801153a:	4809      	ldr	r0, [pc, #36]	@ (8011560 <tcp_split_unsent_seg+0x27c>)
 801153c:	f006 fabc 	bl	8017ab8 <iprintf>
  if (p != NULL) {
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d002      	beq.n	801154c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011546:	6938      	ldr	r0, [r7, #16]
 8011548:	f7fa fbf4 	bl	800bd34 <pbuf_free>
  }

  return ERR_MEM;
 801154c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011550:	4618      	mov	r0, r3
 8011552:	3724      	adds	r7, #36	@ 0x24
 8011554:	46bd      	mov	sp, r7
 8011556:	bd90      	pop	{r4, r7, pc}
 8011558:	0801a334 	.word	0x0801a334
 801155c:	0801a6c8 	.word	0x0801a6c8
 8011560:	0801a388 	.word	0x0801a388
 8011564:	0801a6ec 	.word	0x0801a6ec
 8011568:	0801a710 	.word	0x0801a710
 801156c:	0801a720 	.word	0x0801a720
 8011570:	0801a730 	.word	0x0801a730

08011574 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011574:	b590      	push	{r4, r7, lr}
 8011576:	b085      	sub	sp, #20
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d106      	bne.n	8011590 <tcp_send_fin+0x1c>
 8011582:	4b21      	ldr	r3, [pc, #132]	@ (8011608 <tcp_send_fin+0x94>)
 8011584:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8011588:	4920      	ldr	r1, [pc, #128]	@ (801160c <tcp_send_fin+0x98>)
 801158a:	4821      	ldr	r0, [pc, #132]	@ (8011610 <tcp_send_fin+0x9c>)
 801158c:	f006 fa94 	bl	8017ab8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011594:	2b00      	cmp	r3, #0
 8011596:	d02e      	beq.n	80115f6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801159c:	60fb      	str	r3, [r7, #12]
 801159e:	e002      	b.n	80115a6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d1f8      	bne.n	80115a0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	899b      	ldrh	r3, [r3, #12]
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7f8 ff0c 	bl	800a3d4 <lwip_htons>
 80115bc:	4603      	mov	r3, r0
 80115be:	b2db      	uxtb	r3, r3
 80115c0:	f003 0307 	and.w	r3, r3, #7
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d116      	bne.n	80115f6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	68db      	ldr	r3, [r3, #12]
 80115cc:	899b      	ldrh	r3, [r3, #12]
 80115ce:	b29c      	uxth	r4, r3
 80115d0:	2001      	movs	r0, #1
 80115d2:	f7f8 feff 	bl	800a3d4 <lwip_htons>
 80115d6:	4603      	mov	r3, r0
 80115d8:	461a      	mov	r2, r3
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	68db      	ldr	r3, [r3, #12]
 80115de:	4322      	orrs	r2, r4
 80115e0:	b292      	uxth	r2, r2
 80115e2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	8b5b      	ldrh	r3, [r3, #26]
 80115e8:	f043 0320 	orr.w	r3, r3, #32
 80115ec:	b29a      	uxth	r2, r3
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80115f2:	2300      	movs	r3, #0
 80115f4:	e004      	b.n	8011600 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80115f6:	2101      	movs	r1, #1
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f000 f80b 	bl	8011614 <tcp_enqueue_flags>
 80115fe:	4603      	mov	r3, r0
}
 8011600:	4618      	mov	r0, r3
 8011602:	3714      	adds	r7, #20
 8011604:	46bd      	mov	sp, r7
 8011606:	bd90      	pop	{r4, r7, pc}
 8011608:	0801a334 	.word	0x0801a334
 801160c:	0801a73c 	.word	0x0801a73c
 8011610:	0801a388 	.word	0x0801a388

08011614 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b08a      	sub	sp, #40	@ 0x28
 8011618:	af02      	add	r7, sp, #8
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	460b      	mov	r3, r1
 801161e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011620:	2300      	movs	r3, #0
 8011622:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011624:	2300      	movs	r3, #0
 8011626:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011628:	78fb      	ldrb	r3, [r7, #3]
 801162a:	f003 0303 	and.w	r3, r3, #3
 801162e:	2b00      	cmp	r3, #0
 8011630:	d106      	bne.n	8011640 <tcp_enqueue_flags+0x2c>
 8011632:	4b67      	ldr	r3, [pc, #412]	@ (80117d0 <tcp_enqueue_flags+0x1bc>)
 8011634:	f240 4211 	movw	r2, #1041	@ 0x411
 8011638:	4966      	ldr	r1, [pc, #408]	@ (80117d4 <tcp_enqueue_flags+0x1c0>)
 801163a:	4867      	ldr	r0, [pc, #412]	@ (80117d8 <tcp_enqueue_flags+0x1c4>)
 801163c:	f006 fa3c 	bl	8017ab8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d106      	bne.n	8011654 <tcp_enqueue_flags+0x40>
 8011646:	4b62      	ldr	r3, [pc, #392]	@ (80117d0 <tcp_enqueue_flags+0x1bc>)
 8011648:	f240 4213 	movw	r2, #1043	@ 0x413
 801164c:	4963      	ldr	r1, [pc, #396]	@ (80117dc <tcp_enqueue_flags+0x1c8>)
 801164e:	4862      	ldr	r0, [pc, #392]	@ (80117d8 <tcp_enqueue_flags+0x1c4>)
 8011650:	f006 fa32 	bl	8017ab8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011654:	78fb      	ldrb	r3, [r7, #3]
 8011656:	f003 0302 	and.w	r3, r3, #2
 801165a:	2b00      	cmp	r3, #0
 801165c:	d001      	beq.n	8011662 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801165e:	2301      	movs	r3, #1
 8011660:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011662:	7ffb      	ldrb	r3, [r7, #31]
 8011664:	009b      	lsls	r3, r3, #2
 8011666:	b2db      	uxtb	r3, r3
 8011668:	f003 0304 	and.w	r3, r3, #4
 801166c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801166e:	7dfb      	ldrb	r3, [r7, #23]
 8011670:	b29b      	uxth	r3, r3
 8011672:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011676:	4619      	mov	r1, r3
 8011678:	2036      	movs	r0, #54	@ 0x36
 801167a:	f7fa f877 	bl	800b76c <pbuf_alloc>
 801167e:	6138      	str	r0, [r7, #16]
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d109      	bne.n	801169a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	8b5b      	ldrh	r3, [r3, #26]
 801168a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801168e:	b29a      	uxth	r2, r3
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011694:	f04f 33ff 	mov.w	r3, #4294967295
 8011698:	e095      	b.n	80117c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801169a:	693b      	ldr	r3, [r7, #16]
 801169c:	895a      	ldrh	r2, [r3, #10]
 801169e:	7dfb      	ldrb	r3, [r7, #23]
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d206      	bcs.n	80116b4 <tcp_enqueue_flags+0xa0>
 80116a6:	4b4a      	ldr	r3, [pc, #296]	@ (80117d0 <tcp_enqueue_flags+0x1bc>)
 80116a8:	f240 4239 	movw	r2, #1081	@ 0x439
 80116ac:	494c      	ldr	r1, [pc, #304]	@ (80117e0 <tcp_enqueue_flags+0x1cc>)
 80116ae:	484a      	ldr	r0, [pc, #296]	@ (80117d8 <tcp_enqueue_flags+0x1c4>)
 80116b0:	f006 fa02 	bl	8017ab8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80116b8:	78fa      	ldrb	r2, [r7, #3]
 80116ba:	7ffb      	ldrb	r3, [r7, #31]
 80116bc:	9300      	str	r3, [sp, #0]
 80116be:	460b      	mov	r3, r1
 80116c0:	6939      	ldr	r1, [r7, #16]
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f7ff f918 	bl	80108f8 <tcp_create_segment>
 80116c8:	60f8      	str	r0, [r7, #12]
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d109      	bne.n	80116e4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	8b5b      	ldrh	r3, [r3, #26]
 80116d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116d8:	b29a      	uxth	r2, r3
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80116de:	f04f 33ff 	mov.w	r3, #4294967295
 80116e2:	e070      	b.n	80117c6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	68db      	ldr	r3, [r3, #12]
 80116e8:	f003 0303 	and.w	r3, r3, #3
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d006      	beq.n	80116fe <tcp_enqueue_flags+0xea>
 80116f0:	4b37      	ldr	r3, [pc, #220]	@ (80117d0 <tcp_enqueue_flags+0x1bc>)
 80116f2:	f240 4242 	movw	r2, #1090	@ 0x442
 80116f6:	493b      	ldr	r1, [pc, #236]	@ (80117e4 <tcp_enqueue_flags+0x1d0>)
 80116f8:	4837      	ldr	r0, [pc, #220]	@ (80117d8 <tcp_enqueue_flags+0x1c4>)
 80116fa:	f006 f9dd 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	891b      	ldrh	r3, [r3, #8]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d006      	beq.n	8011714 <tcp_enqueue_flags+0x100>
 8011706:	4b32      	ldr	r3, [pc, #200]	@ (80117d0 <tcp_enqueue_flags+0x1bc>)
 8011708:	f240 4243 	movw	r2, #1091	@ 0x443
 801170c:	4936      	ldr	r1, [pc, #216]	@ (80117e8 <tcp_enqueue_flags+0x1d4>)
 801170e:	4832      	ldr	r0, [pc, #200]	@ (80117d8 <tcp_enqueue_flags+0x1c4>)
 8011710:	f006 f9d2 	bl	8017ab8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011718:	2b00      	cmp	r3, #0
 801171a:	d103      	bne.n	8011724 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	68fa      	ldr	r2, [r7, #12]
 8011720:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011722:	e00d      	b.n	8011740 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011728:	61bb      	str	r3, [r7, #24]
 801172a:	e002      	b.n	8011732 <tcp_enqueue_flags+0x11e>
 801172c:	69bb      	ldr	r3, [r7, #24]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	61bb      	str	r3, [r7, #24]
 8011732:	69bb      	ldr	r3, [r7, #24]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d1f8      	bne.n	801172c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801173a:	69bb      	ldr	r3, [r7, #24]
 801173c:	68fa      	ldr	r2, [r7, #12]
 801173e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2200      	movs	r2, #0
 8011744:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011748:	78fb      	ldrb	r3, [r7, #3]
 801174a:	f003 0302 	and.w	r3, r3, #2
 801174e:	2b00      	cmp	r3, #0
 8011750:	d104      	bne.n	801175c <tcp_enqueue_flags+0x148>
 8011752:	78fb      	ldrb	r3, [r7, #3]
 8011754:	f003 0301 	and.w	r3, r3, #1
 8011758:	2b00      	cmp	r3, #0
 801175a:	d004      	beq.n	8011766 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011760:	1c5a      	adds	r2, r3, #1
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011766:	78fb      	ldrb	r3, [r7, #3]
 8011768:	f003 0301 	and.w	r3, r3, #1
 801176c:	2b00      	cmp	r3, #0
 801176e:	d006      	beq.n	801177e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	8b5b      	ldrh	r3, [r3, #26]
 8011774:	f043 0320 	orr.w	r3, r3, #32
 8011778:	b29a      	uxth	r2, r3
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	4618      	mov	r0, r3
 8011784:	f7fa fb64 	bl	800be50 <pbuf_clen>
 8011788:	4603      	mov	r3, r0
 801178a:	461a      	mov	r2, r3
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011792:	4413      	add	r3, r2
 8011794:	b29a      	uxth	r2, r3
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d00e      	beq.n	80117c4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d10a      	bne.n	80117c4 <tcp_enqueue_flags+0x1b0>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d106      	bne.n	80117c4 <tcp_enqueue_flags+0x1b0>
 80117b6:	4b06      	ldr	r3, [pc, #24]	@ (80117d0 <tcp_enqueue_flags+0x1bc>)
 80117b8:	f240 4265 	movw	r2, #1125	@ 0x465
 80117bc:	490b      	ldr	r1, [pc, #44]	@ (80117ec <tcp_enqueue_flags+0x1d8>)
 80117be:	4806      	ldr	r0, [pc, #24]	@ (80117d8 <tcp_enqueue_flags+0x1c4>)
 80117c0:	f006 f97a 	bl	8017ab8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80117c4:	2300      	movs	r3, #0
}
 80117c6:	4618      	mov	r0, r3
 80117c8:	3720      	adds	r7, #32
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}
 80117ce:	bf00      	nop
 80117d0:	0801a334 	.word	0x0801a334
 80117d4:	0801a758 	.word	0x0801a758
 80117d8:	0801a388 	.word	0x0801a388
 80117dc:	0801a7b0 	.word	0x0801a7b0
 80117e0:	0801a7d0 	.word	0x0801a7d0
 80117e4:	0801a80c 	.word	0x0801a80c
 80117e8:	0801a824 	.word	0x0801a824
 80117ec:	0801a850 	.word	0x0801a850

080117f0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80117f0:	b5b0      	push	{r4, r5, r7, lr}
 80117f2:	b08a      	sub	sp, #40	@ 0x28
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();
 80117f8:	f7f4 fd7c 	bl	80062f4 <sys_check_core_locking>

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d106      	bne.n	8011810 <tcp_output+0x20>
 8011802:	4b8a      	ldr	r3, [pc, #552]	@ (8011a2c <tcp_output+0x23c>)
 8011804:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8011808:	4989      	ldr	r1, [pc, #548]	@ (8011a30 <tcp_output+0x240>)
 801180a:	488a      	ldr	r0, [pc, #552]	@ (8011a34 <tcp_output+0x244>)
 801180c:	f006 f954 	bl	8017ab8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	7d1b      	ldrb	r3, [r3, #20]
 8011814:	2b01      	cmp	r3, #1
 8011816:	d106      	bne.n	8011826 <tcp_output+0x36>
 8011818:	4b84      	ldr	r3, [pc, #528]	@ (8011a2c <tcp_output+0x23c>)
 801181a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801181e:	4986      	ldr	r1, [pc, #536]	@ (8011a38 <tcp_output+0x248>)
 8011820:	4884      	ldr	r0, [pc, #528]	@ (8011a34 <tcp_output+0x244>)
 8011822:	f006 f949 	bl	8017ab8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011826:	4b85      	ldr	r3, [pc, #532]	@ (8011a3c <tcp_output+0x24c>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	429a      	cmp	r2, r3
 801182e:	d101      	bne.n	8011834 <tcp_output+0x44>
    return ERR_OK;
 8011830:	2300      	movs	r3, #0
 8011832:	e1ce      	b.n	8011bd2 <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011840:	4293      	cmp	r3, r2
 8011842:	bf28      	it	cs
 8011844:	4613      	movcs	r3, r2
 8011846:	b29b      	uxth	r3, r3
 8011848:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801184e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8011850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011852:	2b00      	cmp	r3, #0
 8011854:	d10b      	bne.n	801186e <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	8b5b      	ldrh	r3, [r3, #26]
 801185a:	f003 0302 	and.w	r3, r3, #2
 801185e:	2b00      	cmp	r3, #0
 8011860:	f000 81aa 	beq.w	8011bb8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f000 fdcb 	bl	8012400 <tcp_send_empty_ack>
 801186a:	4603      	mov	r3, r0
 801186c:	e1b1      	b.n	8011bd2 <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801186e:	6879      	ldr	r1, [r7, #4]
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	3304      	adds	r3, #4
 8011874:	461a      	mov	r2, r3
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f7ff f822 	bl	80108c0 <tcp_route>
 801187c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d102      	bne.n	801188a <tcp_output+0x9a>
    return ERR_RTE;
 8011884:	f06f 0303 	mvn.w	r3, #3
 8011888:	e1a3      	b.n	8011bd2 <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d003      	beq.n	8011898 <tcp_output+0xa8>
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d111      	bne.n	80118bc <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d002      	beq.n	80118a4 <tcp_output+0xb4>
 801189e:	697b      	ldr	r3, [r7, #20]
 80118a0:	3304      	adds	r3, #4
 80118a2:	e000      	b.n	80118a6 <tcp_output+0xb6>
 80118a4:	2300      	movs	r3, #0
 80118a6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d102      	bne.n	80118b4 <tcp_output+0xc4>
      return ERR_RTE;
 80118ae:	f06f 0303 	mvn.w	r3, #3
 80118b2:	e18e      	b.n	8011bd2 <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80118bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118be:	68db      	ldr	r3, [r3, #12]
 80118c0:	685b      	ldr	r3, [r3, #4]
 80118c2:	4618      	mov	r0, r3
 80118c4:	f7f8 fd9b 	bl	800a3fe <lwip_htonl>
 80118c8:	4602      	mov	r2, r0
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118ce:	1ad3      	subs	r3, r2, r3
 80118d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118d2:	8912      	ldrh	r2, [r2, #8]
 80118d4:	4413      	add	r3, r2
 80118d6:	69ba      	ldr	r2, [r7, #24]
 80118d8:	429a      	cmp	r2, r3
 80118da:	d227      	bcs.n	801192c <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80118e2:	461a      	mov	r2, r3
 80118e4:	69bb      	ldr	r3, [r7, #24]
 80118e6:	4293      	cmp	r3, r2
 80118e8:	d114      	bne.n	8011914 <tcp_output+0x124>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d110      	bne.n	8011914 <tcp_output+0x124>
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d10b      	bne.n	8011914 <tcp_output+0x124>
      pcb->persist_cnt = 0;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2200      	movs	r2, #0
 8011900:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2201      	movs	r2, #1
 8011908:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2200      	movs	r2, #0
 8011910:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	8b5b      	ldrh	r3, [r3, #26]
 8011918:	f003 0302 	and.w	r3, r3, #2
 801191c:	2b00      	cmp	r3, #0
 801191e:	f000 814d 	beq.w	8011bbc <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f000 fd6c 	bl	8012400 <tcp_send_empty_ack>
 8011928:	4603      	mov	r3, r0
 801192a:	e152      	b.n	8011bd2 <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2200      	movs	r2, #0
 8011930:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011938:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801193a:	6a3b      	ldr	r3, [r7, #32]
 801193c:	2b00      	cmp	r3, #0
 801193e:	f000 811c 	beq.w	8011b7a <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 8011942:	e002      	b.n	801194a <tcp_output+0x15a>
 8011944:	6a3b      	ldr	r3, [r7, #32]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	623b      	str	r3, [r7, #32]
 801194a:	6a3b      	ldr	r3, [r7, #32]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d1f8      	bne.n	8011944 <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011952:	e112      	b.n	8011b7a <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011956:	68db      	ldr	r3, [r3, #12]
 8011958:	899b      	ldrh	r3, [r3, #12]
 801195a:	b29b      	uxth	r3, r3
 801195c:	4618      	mov	r0, r3
 801195e:	f7f8 fd39 	bl	800a3d4 <lwip_htons>
 8011962:	4603      	mov	r3, r0
 8011964:	b2db      	uxtb	r3, r3
 8011966:	f003 0304 	and.w	r3, r3, #4
 801196a:	2b00      	cmp	r3, #0
 801196c:	d006      	beq.n	801197c <tcp_output+0x18c>
 801196e:	4b2f      	ldr	r3, [pc, #188]	@ (8011a2c <tcp_output+0x23c>)
 8011970:	f240 5236 	movw	r2, #1334	@ 0x536
 8011974:	4932      	ldr	r1, [pc, #200]	@ (8011a40 <tcp_output+0x250>)
 8011976:	482f      	ldr	r0, [pc, #188]	@ (8011a34 <tcp_output+0x244>)
 8011978:	f006 f89e 	bl	8017ab8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011980:	2b00      	cmp	r3, #0
 8011982:	d01f      	beq.n	80119c4 <tcp_output+0x1d4>
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	8b5b      	ldrh	r3, [r3, #26]
 8011988:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801198c:	2b00      	cmp	r3, #0
 801198e:	d119      	bne.n	80119c4 <tcp_output+0x1d4>
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011994:	2b00      	cmp	r3, #0
 8011996:	d00b      	beq.n	80119b0 <tcp_output+0x1c0>
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d110      	bne.n	80119c4 <tcp_output+0x1d4>
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119a6:	891a      	ldrh	r2, [r3, #8]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d209      	bcs.n	80119c4 <tcp_output+0x1d4>
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d004      	beq.n	80119c4 <tcp_output+0x1d4>
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80119c0:	2b0f      	cmp	r3, #15
 80119c2:	d901      	bls.n	80119c8 <tcp_output+0x1d8>
 80119c4:	2301      	movs	r3, #1
 80119c6:	e000      	b.n	80119ca <tcp_output+0x1da>
 80119c8:	2300      	movs	r3, #0
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d106      	bne.n	80119dc <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	8b5b      	ldrh	r3, [r3, #26]
 80119d2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	f000 80e4 	beq.w	8011ba4 <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	7d1b      	ldrb	r3, [r3, #20]
 80119e0:	2b02      	cmp	r3, #2
 80119e2:	d00d      	beq.n	8011a00 <tcp_output+0x210>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80119e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e6:	68db      	ldr	r3, [r3, #12]
 80119e8:	899b      	ldrh	r3, [r3, #12]
 80119ea:	b29c      	uxth	r4, r3
 80119ec:	2010      	movs	r0, #16
 80119ee:	f7f8 fcf1 	bl	800a3d4 <lwip_htons>
 80119f2:	4603      	mov	r3, r0
 80119f4:	461a      	mov	r2, r3
 80119f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119f8:	68db      	ldr	r3, [r3, #12]
 80119fa:	4322      	orrs	r2, r4
 80119fc:	b292      	uxth	r2, r2
 80119fe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011a00:	697a      	ldr	r2, [r7, #20]
 8011a02:	6879      	ldr	r1, [r7, #4]
 8011a04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011a06:	f000 f909 	bl	8011c1c <tcp_output_segment>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d016      	beq.n	8011a44 <tcp_output+0x254>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	8b5b      	ldrh	r3, [r3, #26]
 8011a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a1e:	b29a      	uxth	r2, r3
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	835a      	strh	r2, [r3, #26]
      return err;
 8011a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a28:	e0d3      	b.n	8011bd2 <tcp_output+0x3e2>
 8011a2a:	bf00      	nop
 8011a2c:	0801a334 	.word	0x0801a334
 8011a30:	0801a878 	.word	0x0801a878
 8011a34:	0801a388 	.word	0x0801a388
 8011a38:	0801a890 	.word	0x0801a890
 8011a3c:	240105c4 	.word	0x240105c4
 8011a40:	0801a8b8 	.word	0x0801a8b8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a46:	681a      	ldr	r2, [r3, #0]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	7d1b      	ldrb	r3, [r3, #20]
 8011a50:	2b02      	cmp	r3, #2
 8011a52:	d006      	beq.n	8011a62 <tcp_output+0x272>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	8b5b      	ldrh	r3, [r3, #26]
 8011a58:	f023 0303 	bic.w	r3, r3, #3
 8011a5c:	b29a      	uxth	r2, r3
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a64:	68db      	ldr	r3, [r3, #12]
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7f8 fcc8 	bl	800a3fe <lwip_htonl>
 8011a6e:	4604      	mov	r4, r0
 8011a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a72:	891b      	ldrh	r3, [r3, #8]
 8011a74:	461d      	mov	r5, r3
 8011a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	899b      	ldrh	r3, [r3, #12]
 8011a7c:	b29b      	uxth	r3, r3
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7f8 fca8 	bl	800a3d4 <lwip_htons>
 8011a84:	4603      	mov	r3, r0
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	f003 0303 	and.w	r3, r3, #3
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d001      	beq.n	8011a94 <tcp_output+0x2a4>
 8011a90:	2301      	movs	r3, #1
 8011a92:	e000      	b.n	8011a96 <tcp_output+0x2a6>
 8011a94:	2300      	movs	r3, #0
 8011a96:	442b      	add	r3, r5
 8011a98:	4423      	add	r3, r4
 8011a9a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	1ad3      	subs	r3, r2, r3
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	da02      	bge.n	8011aae <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	68ba      	ldr	r2, [r7, #8]
 8011aac:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ab0:	891b      	ldrh	r3, [r3, #8]
 8011ab2:	461c      	mov	r4, r3
 8011ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ab6:	68db      	ldr	r3, [r3, #12]
 8011ab8:	899b      	ldrh	r3, [r3, #12]
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7f8 fc89 	bl	800a3d4 <lwip_htons>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	b2db      	uxtb	r3, r3
 8011ac6:	f003 0303 	and.w	r3, r3, #3
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d001      	beq.n	8011ad2 <tcp_output+0x2e2>
 8011ace:	2301      	movs	r3, #1
 8011ad0:	e000      	b.n	8011ad4 <tcp_output+0x2e4>
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	4423      	add	r3, r4
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d049      	beq.n	8011b6e <tcp_output+0x37e>
      seg->next = NULL;
 8011ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011adc:	2200      	movs	r2, #0
 8011ade:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d105      	bne.n	8011af4 <tcp_output+0x304>
        pcb->unacked = seg;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011aec:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8011aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011af0:	623b      	str	r3, [r7, #32]
 8011af2:	e03f      	b.n	8011b74 <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011af6:	68db      	ldr	r3, [r3, #12]
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7f8 fc7f 	bl	800a3fe <lwip_htonl>
 8011b00:	4604      	mov	r4, r0
 8011b02:	6a3b      	ldr	r3, [r7, #32]
 8011b04:	68db      	ldr	r3, [r3, #12]
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7f8 fc78 	bl	800a3fe <lwip_htonl>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	1ae3      	subs	r3, r4, r3
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	da24      	bge.n	8011b60 <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	3370      	adds	r3, #112	@ 0x70
 8011b1a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011b1c:	e002      	b.n	8011b24 <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011b1e:	69fb      	ldr	r3, [r7, #28]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011b24:	69fb      	ldr	r3, [r7, #28]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d011      	beq.n	8011b50 <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011b2c:	69fb      	ldr	r3, [r7, #28]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	68db      	ldr	r3, [r3, #12]
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7f8 fc62 	bl	800a3fe <lwip_htonl>
 8011b3a:	4604      	mov	r4, r0
 8011b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b3e:	68db      	ldr	r3, [r3, #12]
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7f8 fc5b 	bl	800a3fe <lwip_htonl>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	dbe6      	blt.n	8011b1e <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 8011b50:	69fb      	ldr	r3, [r7, #28]
 8011b52:	681a      	ldr	r2, [r3, #0]
 8011b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b56:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011b58:	69fb      	ldr	r3, [r7, #28]
 8011b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b5c:	601a      	str	r2, [r3, #0]
 8011b5e:	e009      	b.n	8011b74 <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011b60:	6a3b      	ldr	r3, [r7, #32]
 8011b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b64:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011b66:	6a3b      	ldr	r3, [r7, #32]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	623b      	str	r3, [r7, #32]
 8011b6c:	e002      	b.n	8011b74 <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011b6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011b70:	f7fb ff0d 	bl	800d98e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b78:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8011b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d012      	beq.n	8011ba6 <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b82:	68db      	ldr	r3, [r3, #12]
 8011b84:	685b      	ldr	r3, [r3, #4]
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7f8 fc39 	bl	800a3fe <lwip_htonl>
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b92:	1ad3      	subs	r3, r2, r3
 8011b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b96:	8912      	ldrh	r2, [r2, #8]
 8011b98:	4413      	add	r3, r2
  while (seg != NULL &&
 8011b9a:	69ba      	ldr	r2, [r7, #24]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	f4bf aed9 	bcs.w	8011954 <tcp_output+0x164>
 8011ba2:	e000      	b.n	8011ba6 <tcp_output+0x3b6>
      break;
 8011ba4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d108      	bne.n	8011bc0 <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8011bb6:	e004      	b.n	8011bc2 <tcp_output+0x3d2>
    goto output_done;
 8011bb8:	bf00      	nop
 8011bba:	e002      	b.n	8011bc2 <tcp_output+0x3d2>
    goto output_done;
 8011bbc:	bf00      	nop
 8011bbe:	e000      	b.n	8011bc2 <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011bc0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	8b5b      	ldrh	r3, [r3, #26]
 8011bc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011bca:	b29a      	uxth	r2, r3
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011bd0:	2300      	movs	r3, #0
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3728      	adds	r7, #40	@ 0x28
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8011bda:	bf00      	nop

08011bdc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d106      	bne.n	8011bf8 <tcp_output_segment_busy+0x1c>
 8011bea:	4b09      	ldr	r3, [pc, #36]	@ (8011c10 <tcp_output_segment_busy+0x34>)
 8011bec:	f240 529a 	movw	r2, #1434	@ 0x59a
 8011bf0:	4908      	ldr	r1, [pc, #32]	@ (8011c14 <tcp_output_segment_busy+0x38>)
 8011bf2:	4809      	ldr	r0, [pc, #36]	@ (8011c18 <tcp_output_segment_busy+0x3c>)
 8011bf4:	f005 ff60 	bl	8017ab8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	685b      	ldr	r3, [r3, #4]
 8011bfc:	7b9b      	ldrb	r3, [r3, #14]
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d001      	beq.n	8011c06 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011c02:	2301      	movs	r3, #1
 8011c04:	e000      	b.n	8011c08 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011c06:	2300      	movs	r3, #0
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	3708      	adds	r7, #8
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd80      	pop	{r7, pc}
 8011c10:	0801a334 	.word	0x0801a334
 8011c14:	0801a8d0 	.word	0x0801a8d0
 8011c18:	0801a388 	.word	0x0801a388

08011c1c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011c1c:	b5b0      	push	{r4, r5, r7, lr}
 8011c1e:	b08c      	sub	sp, #48	@ 0x30
 8011c20:	af04      	add	r7, sp, #16
 8011c22:	60f8      	str	r0, [r7, #12]
 8011c24:	60b9      	str	r1, [r7, #8]
 8011c26:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d106      	bne.n	8011c3c <tcp_output_segment+0x20>
 8011c2e:	4b64      	ldr	r3, [pc, #400]	@ (8011dc0 <tcp_output_segment+0x1a4>)
 8011c30:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8011c34:	4963      	ldr	r1, [pc, #396]	@ (8011dc4 <tcp_output_segment+0x1a8>)
 8011c36:	4864      	ldr	r0, [pc, #400]	@ (8011dc8 <tcp_output_segment+0x1ac>)
 8011c38:	f005 ff3e 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d106      	bne.n	8011c50 <tcp_output_segment+0x34>
 8011c42:	4b5f      	ldr	r3, [pc, #380]	@ (8011dc0 <tcp_output_segment+0x1a4>)
 8011c44:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8011c48:	4960      	ldr	r1, [pc, #384]	@ (8011dcc <tcp_output_segment+0x1b0>)
 8011c4a:	485f      	ldr	r0, [pc, #380]	@ (8011dc8 <tcp_output_segment+0x1ac>)
 8011c4c:	f005 ff34 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d106      	bne.n	8011c64 <tcp_output_segment+0x48>
 8011c56:	4b5a      	ldr	r3, [pc, #360]	@ (8011dc0 <tcp_output_segment+0x1a4>)
 8011c58:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8011c5c:	495c      	ldr	r1, [pc, #368]	@ (8011dd0 <tcp_output_segment+0x1b4>)
 8011c5e:	485a      	ldr	r0, [pc, #360]	@ (8011dc8 <tcp_output_segment+0x1ac>)
 8011c60:	f005 ff2a 	bl	8017ab8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011c64:	68f8      	ldr	r0, [r7, #12]
 8011c66:	f7ff ffb9 	bl	8011bdc <tcp_output_segment_busy>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d001      	beq.n	8011c74 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011c70:	2300      	movs	r3, #0
 8011c72:	e0a1      	b.n	8011db8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	68dc      	ldr	r4, [r3, #12]
 8011c7c:	4610      	mov	r0, r2
 8011c7e:	f7f8 fbbe 	bl	800a3fe <lwip_htonl>
 8011c82:	4603      	mov	r3, r0
 8011c84:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	68dc      	ldr	r4, [r3, #12]
 8011c8e:	4610      	mov	r0, r2
 8011c90:	f7f8 fba0 	bl	800a3d4 <lwip_htons>
 8011c94:	4603      	mov	r3, r0
 8011c96:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c9c:	68ba      	ldr	r2, [r7, #8]
 8011c9e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011ca0:	441a      	add	r2, r3
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	68db      	ldr	r3, [r3, #12]
 8011caa:	3314      	adds	r3, #20
 8011cac:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	7a9b      	ldrb	r3, [r3, #10]
 8011cb2:	f003 0301 	and.w	r3, r3, #1
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d015      	beq.n	8011ce6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	3304      	adds	r3, #4
 8011cbe:	461a      	mov	r2, r3
 8011cc0:	6879      	ldr	r1, [r7, #4]
 8011cc2:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8011cc6:	f7fc fa31 	bl	800e12c <tcp_eff_send_mss_netif>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011cce:	8b7b      	ldrh	r3, [r7, #26]
 8011cd0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7f8 fb92 	bl	800a3fe <lwip_htonl>
 8011cda:	4602      	mov	r2, r0
 8011cdc:	69fb      	ldr	r3, [r7, #28]
 8011cde:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011ce0:	69fb      	ldr	r3, [r7, #28]
 8011ce2:	3304      	adds	r3, #4
 8011ce4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	da02      	bge.n	8011cf6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d10c      	bne.n	8011d18 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011cfe:	4b35      	ldr	r3, [pc, #212]	@ (8011dd4 <tcp_output_segment+0x1b8>)
 8011d00:	681a      	ldr	r2, [r3, #0]
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	68db      	ldr	r3, [r3, #12]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7f8 fb76 	bl	800a3fe <lwip_htonl>
 8011d12:	4602      	mov	r2, r0
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	68da      	ldr	r2, [r3, #12]
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	1ad3      	subs	r3, r2, r3
 8011d24:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	8959      	ldrh	r1, [r3, #10]
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	8b3a      	ldrh	r2, [r7, #24]
 8011d32:	1a8a      	subs	r2, r1, r2
 8011d34:	b292      	uxth	r2, r2
 8011d36:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	685b      	ldr	r3, [r3, #4]
 8011d3c:	8919      	ldrh	r1, [r3, #8]
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	685b      	ldr	r3, [r3, #4]
 8011d42:	8b3a      	ldrh	r2, [r7, #24]
 8011d44:	1a8a      	subs	r2, r1, r2
 8011d46:	b292      	uxth	r2, r2
 8011d48:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	685b      	ldr	r3, [r3, #4]
 8011d4e:	68fa      	ldr	r2, [r7, #12]
 8011d50:	68d2      	ldr	r2, [r2, #12]
 8011d52:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	741a      	strb	r2, [r3, #16]
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	68da      	ldr	r2, [r3, #12]
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	7a9b      	ldrb	r3, [r3, #10]
 8011d68:	f003 0301 	and.w	r3, r3, #1
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d001      	beq.n	8011d74 <tcp_output_segment+0x158>
 8011d70:	2318      	movs	r3, #24
 8011d72:	e000      	b.n	8011d76 <tcp_output_segment+0x15a>
 8011d74:	2314      	movs	r3, #20
 8011d76:	4413      	add	r3, r2
 8011d78:	69fa      	ldr	r2, [r7, #28]
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d006      	beq.n	8011d8c <tcp_output_segment+0x170>
 8011d7e:	4b10      	ldr	r3, [pc, #64]	@ (8011dc0 <tcp_output_segment+0x1a4>)
 8011d80:	f240 621c 	movw	r2, #1564	@ 0x61c
 8011d84:	4914      	ldr	r1, [pc, #80]	@ (8011dd8 <tcp_output_segment+0x1bc>)
 8011d86:	4810      	ldr	r0, [pc, #64]	@ (8011dc8 <tcp_output_segment+0x1ac>)
 8011d88:	f005 fe96 	bl	8017ab8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	6858      	ldr	r0, [r3, #4]
 8011d90:	68b9      	ldr	r1, [r7, #8]
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	1d1c      	adds	r4, r3, #4
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	7add      	ldrb	r5, [r3, #11]
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	7a9b      	ldrb	r3, [r3, #10]
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	9202      	str	r2, [sp, #8]
 8011da2:	2206      	movs	r2, #6
 8011da4:	9201      	str	r2, [sp, #4]
 8011da6:	9300      	str	r3, [sp, #0]
 8011da8:	462b      	mov	r3, r5
 8011daa:	4622      	mov	r2, r4
 8011dac:	f004 fc5e 	bl	801666c <ip4_output_if>
 8011db0:	4603      	mov	r3, r0
 8011db2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011db4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3720      	adds	r7, #32
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8011dc0:	0801a334 	.word	0x0801a334
 8011dc4:	0801a8f8 	.word	0x0801a8f8
 8011dc8:	0801a388 	.word	0x0801a388
 8011dcc:	0801a918 	.word	0x0801a918
 8011dd0:	0801a938 	.word	0x0801a938
 8011dd4:	24010578 	.word	0x24010578
 8011dd8:	0801a95c 	.word	0x0801a95c

08011ddc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011ddc:	b5b0      	push	{r4, r5, r7, lr}
 8011dde:	b084      	sub	sp, #16
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d106      	bne.n	8011df8 <tcp_rexmit_rto_prepare+0x1c>
 8011dea:	4b31      	ldr	r3, [pc, #196]	@ (8011eb0 <tcp_rexmit_rto_prepare+0xd4>)
 8011dec:	f240 6263 	movw	r2, #1635	@ 0x663
 8011df0:	4930      	ldr	r1, [pc, #192]	@ (8011eb4 <tcp_rexmit_rto_prepare+0xd8>)
 8011df2:	4831      	ldr	r0, [pc, #196]	@ (8011eb8 <tcp_rexmit_rto_prepare+0xdc>)
 8011df4:	f005 fe60 	bl	8017ab8 <iprintf>

  if (pcb->unacked == NULL) {
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d102      	bne.n	8011e06 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011e00:	f06f 0305 	mvn.w	r3, #5
 8011e04:	e050      	b.n	8011ea8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e0a:	60fb      	str	r3, [r7, #12]
 8011e0c:	e00b      	b.n	8011e26 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	f7ff fee4 	bl	8011bdc <tcp_output_segment_busy>
 8011e14:	4603      	mov	r3, r0
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d002      	beq.n	8011e20 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011e1a:	f06f 0305 	mvn.w	r3, #5
 8011e1e:	e043      	b.n	8011ea8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	60fb      	str	r3, [r7, #12]
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d1ef      	bne.n	8011e0e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011e2e:	68f8      	ldr	r0, [r7, #12]
 8011e30:	f7ff fed4 	bl	8011bdc <tcp_output_segment_busy>
 8011e34:	4603      	mov	r3, r0
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d002      	beq.n	8011e40 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011e3a:	f06f 0305 	mvn.w	r3, #5
 8011e3e:	e033      	b.n	8011ea8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2200      	movs	r2, #0
 8011e54:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	8b5b      	ldrh	r3, [r3, #26]
 8011e5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8011e5e:	b29a      	uxth	r2, r3
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	68db      	ldr	r3, [r3, #12]
 8011e68:	685b      	ldr	r3, [r3, #4]
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7f8 fac7 	bl	800a3fe <lwip_htonl>
 8011e70:	4604      	mov	r4, r0
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	891b      	ldrh	r3, [r3, #8]
 8011e76:	461d      	mov	r5, r3
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	899b      	ldrh	r3, [r3, #12]
 8011e7e:	b29b      	uxth	r3, r3
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7f8 faa7 	bl	800a3d4 <lwip_htons>
 8011e86:	4603      	mov	r3, r0
 8011e88:	b2db      	uxtb	r3, r3
 8011e8a:	f003 0303 	and.w	r3, r3, #3
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d001      	beq.n	8011e96 <tcp_rexmit_rto_prepare+0xba>
 8011e92:	2301      	movs	r3, #1
 8011e94:	e000      	b.n	8011e98 <tcp_rexmit_rto_prepare+0xbc>
 8011e96:	2300      	movs	r3, #0
 8011e98:	442b      	add	r3, r5
 8011e9a:	18e2      	adds	r2, r4, r3
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8011ea6:	2300      	movs	r3, #0
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3710      	adds	r7, #16
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bdb0      	pop	{r4, r5, r7, pc}
 8011eb0:	0801a334 	.word	0x0801a334
 8011eb4:	0801a970 	.word	0x0801a970
 8011eb8:	0801a388 	.word	0x0801a388

08011ebc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b082      	sub	sp, #8
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d106      	bne.n	8011ed8 <tcp_rexmit_rto_commit+0x1c>
 8011eca:	4b0d      	ldr	r3, [pc, #52]	@ (8011f00 <tcp_rexmit_rto_commit+0x44>)
 8011ecc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011ed0:	490c      	ldr	r1, [pc, #48]	@ (8011f04 <tcp_rexmit_rto_commit+0x48>)
 8011ed2:	480d      	ldr	r0, [pc, #52]	@ (8011f08 <tcp_rexmit_rto_commit+0x4c>)
 8011ed4:	f005 fdf0 	bl	8017ab8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011ede:	2bff      	cmp	r3, #255	@ 0xff
 8011ee0:	d007      	beq.n	8011ef2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011ee8:	3301      	adds	r3, #1
 8011eea:	b2da      	uxtb	r2, r3
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011ef2:	6878      	ldr	r0, [r7, #4]
 8011ef4:	f7ff fc7c 	bl	80117f0 <tcp_output>
}
 8011ef8:	bf00      	nop
 8011efa:	3708      	adds	r7, #8
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	0801a334 	.word	0x0801a334
 8011f04:	0801a994 	.word	0x0801a994
 8011f08:	0801a388 	.word	0x0801a388

08011f0c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b082      	sub	sp, #8
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d106      	bne.n	8011f28 <tcp_rexmit_rto+0x1c>
 8011f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8011f44 <tcp_rexmit_rto+0x38>)
 8011f1c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8011f20:	4909      	ldr	r1, [pc, #36]	@ (8011f48 <tcp_rexmit_rto+0x3c>)
 8011f22:	480a      	ldr	r0, [pc, #40]	@ (8011f4c <tcp_rexmit_rto+0x40>)
 8011f24:	f005 fdc8 	bl	8017ab8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f7ff ff57 	bl	8011ddc <tcp_rexmit_rto_prepare>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d102      	bne.n	8011f3a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f7ff ffc1 	bl	8011ebc <tcp_rexmit_rto_commit>
  }
}
 8011f3a:	bf00      	nop
 8011f3c:	3708      	adds	r7, #8
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	0801a334 	.word	0x0801a334
 8011f48:	0801a9b8 	.word	0x0801a9b8
 8011f4c:	0801a388 	.word	0x0801a388

08011f50 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011f50:	b590      	push	{r4, r7, lr}
 8011f52:	b085      	sub	sp, #20
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d106      	bne.n	8011f6c <tcp_rexmit+0x1c>
 8011f5e:	4b2f      	ldr	r3, [pc, #188]	@ (801201c <tcp_rexmit+0xcc>)
 8011f60:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8011f64:	492e      	ldr	r1, [pc, #184]	@ (8012020 <tcp_rexmit+0xd0>)
 8011f66:	482f      	ldr	r0, [pc, #188]	@ (8012024 <tcp_rexmit+0xd4>)
 8011f68:	f005 fda6 	bl	8017ab8 <iprintf>

  if (pcb->unacked == NULL) {
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d102      	bne.n	8011f7a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011f74:	f06f 0305 	mvn.w	r3, #5
 8011f78:	e04c      	b.n	8012014 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f7e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011f80:	68b8      	ldr	r0, [r7, #8]
 8011f82:	f7ff fe2b 	bl	8011bdc <tcp_output_segment_busy>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d002      	beq.n	8011f92 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011f8c:	f06f 0305 	mvn.w	r3, #5
 8011f90:	e040      	b.n	8012014 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	681a      	ldr	r2, [r3, #0]
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	336c      	adds	r3, #108	@ 0x6c
 8011f9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011fa0:	e002      	b.n	8011fa8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d011      	beq.n	8011fd4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	68db      	ldr	r3, [r3, #12]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7f8 fa20 	bl	800a3fe <lwip_htonl>
 8011fbe:	4604      	mov	r4, r0
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f7f8 fa19 	bl	800a3fe <lwip_htonl>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	dbe6      	blt.n	8011fa2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	681a      	ldr	r2, [r3, #0]
 8011fd8:	68bb      	ldr	r3, [r7, #8]
 8011fda:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	68ba      	ldr	r2, [r7, #8]
 8011fe0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d103      	bne.n	8011ff2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	2200      	movs	r2, #0
 8011fee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011ff8:	2bff      	cmp	r3, #255	@ 0xff
 8011ffa:	d007      	beq.n	801200c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012002:	3301      	adds	r3, #1
 8012004:	b2da      	uxtb	r2, r3
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2200      	movs	r2, #0
 8012010:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012012:	2300      	movs	r3, #0
}
 8012014:	4618      	mov	r0, r3
 8012016:	3714      	adds	r7, #20
 8012018:	46bd      	mov	sp, r7
 801201a:	bd90      	pop	{r4, r7, pc}
 801201c:	0801a334 	.word	0x0801a334
 8012020:	0801a9d4 	.word	0x0801a9d4
 8012024:	0801a388 	.word	0x0801a388

08012028 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b082      	sub	sp, #8
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d106      	bne.n	8012044 <tcp_rexmit_fast+0x1c>
 8012036:	4b2a      	ldr	r3, [pc, #168]	@ (80120e0 <tcp_rexmit_fast+0xb8>)
 8012038:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801203c:	4929      	ldr	r1, [pc, #164]	@ (80120e4 <tcp_rexmit_fast+0xbc>)
 801203e:	482a      	ldr	r0, [pc, #168]	@ (80120e8 <tcp_rexmit_fast+0xc0>)
 8012040:	f005 fd3a 	bl	8017ab8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012048:	2b00      	cmp	r3, #0
 801204a:	d045      	beq.n	80120d8 <tcp_rexmit_fast+0xb0>
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	8b5b      	ldrh	r3, [r3, #26]
 8012050:	f003 0304 	and.w	r3, r3, #4
 8012054:	2b00      	cmp	r3, #0
 8012056:	d13f      	bne.n	80120d8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012058:	6878      	ldr	r0, [r7, #4]
 801205a:	f7ff ff79 	bl	8011f50 <tcp_rexmit>
 801205e:	4603      	mov	r3, r0
 8012060:	2b00      	cmp	r3, #0
 8012062:	d139      	bne.n	80120d8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012070:	4293      	cmp	r3, r2
 8012072:	bf28      	it	cs
 8012074:	4613      	movcs	r3, r2
 8012076:	b29b      	uxth	r3, r3
 8012078:	2b00      	cmp	r3, #0
 801207a:	da00      	bge.n	801207e <tcp_rexmit_fast+0x56>
 801207c:	3301      	adds	r3, #1
 801207e:	105b      	asrs	r3, r3, #1
 8012080:	b29a      	uxth	r2, r3
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801208e:	461a      	mov	r2, r3
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012094:	005b      	lsls	r3, r3, #1
 8012096:	429a      	cmp	r2, r3
 8012098:	d206      	bcs.n	80120a8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801209e:	005b      	lsls	r3, r3, #1
 80120a0:	b29a      	uxth	r2, r3
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80120b2:	4619      	mov	r1, r3
 80120b4:	0049      	lsls	r1, r1, #1
 80120b6:	440b      	add	r3, r1
 80120b8:	b29b      	uxth	r3, r3
 80120ba:	4413      	add	r3, r2
 80120bc:	b29a      	uxth	r2, r3
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	8b5b      	ldrh	r3, [r3, #26]
 80120c8:	f043 0304 	orr.w	r3, r3, #4
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2200      	movs	r2, #0
 80120d6:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80120d8:	bf00      	nop
 80120da:	3708      	adds	r7, #8
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}
 80120e0:	0801a334 	.word	0x0801a334
 80120e4:	0801a9ec 	.word	0x0801a9ec
 80120e8:	0801a388 	.word	0x0801a388

080120ec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b086      	sub	sp, #24
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	60f8      	str	r0, [r7, #12]
 80120f4:	607b      	str	r3, [r7, #4]
 80120f6:	460b      	mov	r3, r1
 80120f8:	817b      	strh	r3, [r7, #10]
 80120fa:	4613      	mov	r3, r2
 80120fc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80120fe:	897a      	ldrh	r2, [r7, #10]
 8012100:	893b      	ldrh	r3, [r7, #8]
 8012102:	4413      	add	r3, r2
 8012104:	b29b      	uxth	r3, r3
 8012106:	3314      	adds	r3, #20
 8012108:	b29b      	uxth	r3, r3
 801210a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801210e:	4619      	mov	r1, r3
 8012110:	2022      	movs	r0, #34	@ 0x22
 8012112:	f7f9 fb2b 	bl	800b76c <pbuf_alloc>
 8012116:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d04d      	beq.n	80121ba <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801211e:	897b      	ldrh	r3, [r7, #10]
 8012120:	3313      	adds	r3, #19
 8012122:	697a      	ldr	r2, [r7, #20]
 8012124:	8952      	ldrh	r2, [r2, #10]
 8012126:	4293      	cmp	r3, r2
 8012128:	db06      	blt.n	8012138 <tcp_output_alloc_header_common+0x4c>
 801212a:	4b26      	ldr	r3, [pc, #152]	@ (80121c4 <tcp_output_alloc_header_common+0xd8>)
 801212c:	f240 7223 	movw	r2, #1827	@ 0x723
 8012130:	4925      	ldr	r1, [pc, #148]	@ (80121c8 <tcp_output_alloc_header_common+0xdc>)
 8012132:	4826      	ldr	r0, [pc, #152]	@ (80121cc <tcp_output_alloc_header_common+0xe0>)
 8012134:	f005 fcc0 	bl	8017ab8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012138:	697b      	ldr	r3, [r7, #20]
 801213a:	685b      	ldr	r3, [r3, #4]
 801213c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801213e:	8c3b      	ldrh	r3, [r7, #32]
 8012140:	4618      	mov	r0, r3
 8012142:	f7f8 f947 	bl	800a3d4 <lwip_htons>
 8012146:	4603      	mov	r3, r0
 8012148:	461a      	mov	r2, r3
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801214e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012150:	4618      	mov	r0, r3
 8012152:	f7f8 f93f 	bl	800a3d4 <lwip_htons>
 8012156:	4603      	mov	r3, r0
 8012158:	461a      	mov	r2, r3
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801215e:	693b      	ldr	r3, [r7, #16]
 8012160:	687a      	ldr	r2, [r7, #4]
 8012162:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012164:	68f8      	ldr	r0, [r7, #12]
 8012166:	f7f8 f94a 	bl	800a3fe <lwip_htonl>
 801216a:	4602      	mov	r2, r0
 801216c:	693b      	ldr	r3, [r7, #16]
 801216e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012170:	897b      	ldrh	r3, [r7, #10]
 8012172:	089b      	lsrs	r3, r3, #2
 8012174:	b29b      	uxth	r3, r3
 8012176:	3305      	adds	r3, #5
 8012178:	b29b      	uxth	r3, r3
 801217a:	031b      	lsls	r3, r3, #12
 801217c:	b29a      	uxth	r2, r3
 801217e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012182:	b29b      	uxth	r3, r3
 8012184:	4313      	orrs	r3, r2
 8012186:	b29b      	uxth	r3, r3
 8012188:	4618      	mov	r0, r3
 801218a:	f7f8 f923 	bl	800a3d4 <lwip_htons>
 801218e:	4603      	mov	r3, r0
 8012190:	461a      	mov	r2, r3
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012196:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012198:	4618      	mov	r0, r3
 801219a:	f7f8 f91b 	bl	800a3d4 <lwip_htons>
 801219e:	4603      	mov	r3, r0
 80121a0:	461a      	mov	r2, r3
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80121a6:	693b      	ldr	r3, [r7, #16]
 80121a8:	2200      	movs	r2, #0
 80121aa:	741a      	strb	r2, [r3, #16]
 80121ac:	2200      	movs	r2, #0
 80121ae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	2200      	movs	r2, #0
 80121b4:	749a      	strb	r2, [r3, #18]
 80121b6:	2200      	movs	r2, #0
 80121b8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80121ba:	697b      	ldr	r3, [r7, #20]
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3718      	adds	r7, #24
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}
 80121c4:	0801a334 	.word	0x0801a334
 80121c8:	0801aa0c 	.word	0x0801aa0c
 80121cc:	0801a388 	.word	0x0801a388

080121d0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80121d0:	b5b0      	push	{r4, r5, r7, lr}
 80121d2:	b08a      	sub	sp, #40	@ 0x28
 80121d4:	af04      	add	r7, sp, #16
 80121d6:	60f8      	str	r0, [r7, #12]
 80121d8:	607b      	str	r3, [r7, #4]
 80121da:	460b      	mov	r3, r1
 80121dc:	817b      	strh	r3, [r7, #10]
 80121de:	4613      	mov	r3, r2
 80121e0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d106      	bne.n	80121f6 <tcp_output_alloc_header+0x26>
 80121e8:	4b15      	ldr	r3, [pc, #84]	@ (8012240 <tcp_output_alloc_header+0x70>)
 80121ea:	f240 7242 	movw	r2, #1858	@ 0x742
 80121ee:	4915      	ldr	r1, [pc, #84]	@ (8012244 <tcp_output_alloc_header+0x74>)
 80121f0:	4815      	ldr	r0, [pc, #84]	@ (8012248 <tcp_output_alloc_header+0x78>)
 80121f2:	f005 fc61 	bl	8017ab8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	8adb      	ldrh	r3, [r3, #22]
 80121fe:	68fa      	ldr	r2, [r7, #12]
 8012200:	8b12      	ldrh	r2, [r2, #24]
 8012202:	68f9      	ldr	r1, [r7, #12]
 8012204:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8012206:	893d      	ldrh	r5, [r7, #8]
 8012208:	897c      	ldrh	r4, [r7, #10]
 801220a:	9103      	str	r1, [sp, #12]
 801220c:	2110      	movs	r1, #16
 801220e:	9102      	str	r1, [sp, #8]
 8012210:	9201      	str	r2, [sp, #4]
 8012212:	9300      	str	r3, [sp, #0]
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	462a      	mov	r2, r5
 8012218:	4621      	mov	r1, r4
 801221a:	f7ff ff67 	bl	80120ec <tcp_output_alloc_header_common>
 801221e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012220:	697b      	ldr	r3, [r7, #20]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d006      	beq.n	8012234 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801222a:	68fa      	ldr	r2, [r7, #12]
 801222c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801222e:	441a      	add	r2, r3
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012234:	697b      	ldr	r3, [r7, #20]
}
 8012236:	4618      	mov	r0, r3
 8012238:	3718      	adds	r7, #24
 801223a:	46bd      	mov	sp, r7
 801223c:	bdb0      	pop	{r4, r5, r7, pc}
 801223e:	bf00      	nop
 8012240:	0801a334 	.word	0x0801a334
 8012244:	0801aa3c 	.word	0x0801aa3c
 8012248:	0801a388 	.word	0x0801a388

0801224c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b088      	sub	sp, #32
 8012250:	af00      	add	r7, sp, #0
 8012252:	60f8      	str	r0, [r7, #12]
 8012254:	60b9      	str	r1, [r7, #8]
 8012256:	4611      	mov	r1, r2
 8012258:	461a      	mov	r2, r3
 801225a:	460b      	mov	r3, r1
 801225c:	71fb      	strb	r3, [r7, #7]
 801225e:	4613      	mov	r3, r2
 8012260:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012262:	2300      	movs	r3, #0
 8012264:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012266:	68bb      	ldr	r3, [r7, #8]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d106      	bne.n	801227a <tcp_output_fill_options+0x2e>
 801226c:	4b12      	ldr	r3, [pc, #72]	@ (80122b8 <tcp_output_fill_options+0x6c>)
 801226e:	f240 7256 	movw	r2, #1878	@ 0x756
 8012272:	4912      	ldr	r1, [pc, #72]	@ (80122bc <tcp_output_fill_options+0x70>)
 8012274:	4812      	ldr	r0, [pc, #72]	@ (80122c0 <tcp_output_fill_options+0x74>)
 8012276:	f005 fc1f 	bl	8017ab8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012280:	69bb      	ldr	r3, [r7, #24]
 8012282:	3314      	adds	r3, #20
 8012284:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012286:	8bfb      	ldrh	r3, [r7, #30]
 8012288:	009b      	lsls	r3, r3, #2
 801228a:	461a      	mov	r2, r3
 801228c:	79fb      	ldrb	r3, [r7, #7]
 801228e:	009b      	lsls	r3, r3, #2
 8012290:	f003 0304 	and.w	r3, r3, #4
 8012294:	4413      	add	r3, r2
 8012296:	3314      	adds	r3, #20
 8012298:	69ba      	ldr	r2, [r7, #24]
 801229a:	4413      	add	r3, r2
 801229c:	697a      	ldr	r2, [r7, #20]
 801229e:	429a      	cmp	r2, r3
 80122a0:	d006      	beq.n	80122b0 <tcp_output_fill_options+0x64>
 80122a2:	4b05      	ldr	r3, [pc, #20]	@ (80122b8 <tcp_output_fill_options+0x6c>)
 80122a4:	f240 7275 	movw	r2, #1909	@ 0x775
 80122a8:	4906      	ldr	r1, [pc, #24]	@ (80122c4 <tcp_output_fill_options+0x78>)
 80122aa:	4805      	ldr	r0, [pc, #20]	@ (80122c0 <tcp_output_fill_options+0x74>)
 80122ac:	f005 fc04 	bl	8017ab8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80122b0:	bf00      	nop
 80122b2:	3720      	adds	r7, #32
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd80      	pop	{r7, pc}
 80122b8:	0801a334 	.word	0x0801a334
 80122bc:	0801aa64 	.word	0x0801aa64
 80122c0:	0801a388 	.word	0x0801a388
 80122c4:	0801a95c 	.word	0x0801a95c

080122c8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b08a      	sub	sp, #40	@ 0x28
 80122cc:	af04      	add	r7, sp, #16
 80122ce:	60f8      	str	r0, [r7, #12]
 80122d0:	60b9      	str	r1, [r7, #8]
 80122d2:	607a      	str	r2, [r7, #4]
 80122d4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d106      	bne.n	80122ea <tcp_output_control_segment+0x22>
 80122dc:	4b1c      	ldr	r3, [pc, #112]	@ (8012350 <tcp_output_control_segment+0x88>)
 80122de:	f240 7287 	movw	r2, #1927	@ 0x787
 80122e2:	491c      	ldr	r1, [pc, #112]	@ (8012354 <tcp_output_control_segment+0x8c>)
 80122e4:	481c      	ldr	r0, [pc, #112]	@ (8012358 <tcp_output_control_segment+0x90>)
 80122e6:	f005 fbe7 	bl	8017ab8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80122ea:	683a      	ldr	r2, [r7, #0]
 80122ec:	6879      	ldr	r1, [r7, #4]
 80122ee:	68f8      	ldr	r0, [r7, #12]
 80122f0:	f7fe fae6 	bl	80108c0 <tcp_route>
 80122f4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80122f6:	693b      	ldr	r3, [r7, #16]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d102      	bne.n	8012302 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80122fc:	23fc      	movs	r3, #252	@ 0xfc
 80122fe:	75fb      	strb	r3, [r7, #23]
 8012300:	e01c      	b.n	801233c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d006      	beq.n	8012316 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	7adb      	ldrb	r3, [r3, #11]
 801230c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	7a9b      	ldrb	r3, [r3, #10]
 8012312:	757b      	strb	r3, [r7, #21]
 8012314:	e003      	b.n	801231e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012316:	23ff      	movs	r3, #255	@ 0xff
 8012318:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801231a:	2300      	movs	r3, #0
 801231c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801231e:	7dba      	ldrb	r2, [r7, #22]
 8012320:	693b      	ldr	r3, [r7, #16]
 8012322:	9302      	str	r3, [sp, #8]
 8012324:	2306      	movs	r3, #6
 8012326:	9301      	str	r3, [sp, #4]
 8012328:	7d7b      	ldrb	r3, [r7, #21]
 801232a:	9300      	str	r3, [sp, #0]
 801232c:	4613      	mov	r3, r2
 801232e:	683a      	ldr	r2, [r7, #0]
 8012330:	6879      	ldr	r1, [r7, #4]
 8012332:	68b8      	ldr	r0, [r7, #8]
 8012334:	f004 f99a 	bl	801666c <ip4_output_if>
 8012338:	4603      	mov	r3, r0
 801233a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801233c:	68b8      	ldr	r0, [r7, #8]
 801233e:	f7f9 fcf9 	bl	800bd34 <pbuf_free>
  return err;
 8012342:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012346:	4618      	mov	r0, r3
 8012348:	3718      	adds	r7, #24
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}
 801234e:	bf00      	nop
 8012350:	0801a334 	.word	0x0801a334
 8012354:	0801aa8c 	.word	0x0801aa8c
 8012358:	0801a388 	.word	0x0801a388

0801235c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801235c:	b590      	push	{r4, r7, lr}
 801235e:	b08b      	sub	sp, #44	@ 0x2c
 8012360:	af04      	add	r7, sp, #16
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	60b9      	str	r1, [r7, #8]
 8012366:	607a      	str	r2, [r7, #4]
 8012368:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d106      	bne.n	801237e <tcp_rst+0x22>
 8012370:	4b1f      	ldr	r3, [pc, #124]	@ (80123f0 <tcp_rst+0x94>)
 8012372:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8012376:	491f      	ldr	r1, [pc, #124]	@ (80123f4 <tcp_rst+0x98>)
 8012378:	481f      	ldr	r0, [pc, #124]	@ (80123f8 <tcp_rst+0x9c>)
 801237a:	f005 fb9d 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012380:	2b00      	cmp	r3, #0
 8012382:	d106      	bne.n	8012392 <tcp_rst+0x36>
 8012384:	4b1a      	ldr	r3, [pc, #104]	@ (80123f0 <tcp_rst+0x94>)
 8012386:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801238a:	491c      	ldr	r1, [pc, #112]	@ (80123fc <tcp_rst+0xa0>)
 801238c:	481a      	ldr	r0, [pc, #104]	@ (80123f8 <tcp_rst+0x9c>)
 801238e:	f005 fb93 	bl	8017ab8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012392:	2300      	movs	r3, #0
 8012394:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012396:	f24d 0316 	movw	r3, #53270	@ 0xd016
 801239a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801239c:	7dfb      	ldrb	r3, [r7, #23]
 801239e:	b29c      	uxth	r4, r3
 80123a0:	68b8      	ldr	r0, [r7, #8]
 80123a2:	f7f8 f82c 	bl	800a3fe <lwip_htonl>
 80123a6:	4602      	mov	r2, r0
 80123a8:	8abb      	ldrh	r3, [r7, #20]
 80123aa:	9303      	str	r3, [sp, #12]
 80123ac:	2314      	movs	r3, #20
 80123ae:	9302      	str	r3, [sp, #8]
 80123b0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80123b2:	9301      	str	r3, [sp, #4]
 80123b4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80123b6:	9300      	str	r3, [sp, #0]
 80123b8:	4613      	mov	r3, r2
 80123ba:	2200      	movs	r2, #0
 80123bc:	4621      	mov	r1, r4
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f7ff fe94 	bl	80120ec <tcp_output_alloc_header_common>
 80123c4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d00c      	beq.n	80123e6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80123cc:	7dfb      	ldrb	r3, [r7, #23]
 80123ce:	2200      	movs	r2, #0
 80123d0:	6939      	ldr	r1, [r7, #16]
 80123d2:	68f8      	ldr	r0, [r7, #12]
 80123d4:	f7ff ff3a 	bl	801224c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80123d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123da:	683a      	ldr	r2, [r7, #0]
 80123dc:	6939      	ldr	r1, [r7, #16]
 80123de:	68f8      	ldr	r0, [r7, #12]
 80123e0:	f7ff ff72 	bl	80122c8 <tcp_output_control_segment>
 80123e4:	e000      	b.n	80123e8 <tcp_rst+0x8c>
    return;
 80123e6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80123e8:	371c      	adds	r7, #28
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd90      	pop	{r4, r7, pc}
 80123ee:	bf00      	nop
 80123f0:	0801a334 	.word	0x0801a334
 80123f4:	0801aab8 	.word	0x0801aab8
 80123f8:	0801a388 	.word	0x0801a388
 80123fc:	0801aad4 	.word	0x0801aad4

08012400 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012400:	b590      	push	{r4, r7, lr}
 8012402:	b087      	sub	sp, #28
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012408:	2300      	movs	r3, #0
 801240a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801240c:	2300      	movs	r3, #0
 801240e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d106      	bne.n	8012424 <tcp_send_empty_ack+0x24>
 8012416:	4b28      	ldr	r3, [pc, #160]	@ (80124b8 <tcp_send_empty_ack+0xb8>)
 8012418:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801241c:	4927      	ldr	r1, [pc, #156]	@ (80124bc <tcp_send_empty_ack+0xbc>)
 801241e:	4828      	ldr	r0, [pc, #160]	@ (80124c0 <tcp_send_empty_ack+0xc0>)
 8012420:	f005 fb4a 	bl	8017ab8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012424:	7dfb      	ldrb	r3, [r7, #23]
 8012426:	009b      	lsls	r3, r3, #2
 8012428:	b2db      	uxtb	r3, r3
 801242a:	f003 0304 	and.w	r3, r3, #4
 801242e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012430:	7d7b      	ldrb	r3, [r7, #21]
 8012432:	b29c      	uxth	r4, r3
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012438:	4618      	mov	r0, r3
 801243a:	f7f7 ffe0 	bl	800a3fe <lwip_htonl>
 801243e:	4603      	mov	r3, r0
 8012440:	2200      	movs	r2, #0
 8012442:	4621      	mov	r1, r4
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f7ff fec3 	bl	80121d0 <tcp_output_alloc_header>
 801244a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d109      	bne.n	8012466 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	8b5b      	ldrh	r3, [r3, #26]
 8012456:	f043 0303 	orr.w	r3, r3, #3
 801245a:	b29a      	uxth	r2, r3
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012460:	f06f 0301 	mvn.w	r3, #1
 8012464:	e023      	b.n	80124ae <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012466:	7dbb      	ldrb	r3, [r7, #22]
 8012468:	7dfa      	ldrb	r2, [r7, #23]
 801246a:	6939      	ldr	r1, [r7, #16]
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f7ff feed 	bl	801224c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	3304      	adds	r3, #4
 8012478:	6939      	ldr	r1, [r7, #16]
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f7ff ff24 	bl	80122c8 <tcp_output_control_segment>
 8012480:	4603      	mov	r3, r0
 8012482:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d007      	beq.n	801249c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	8b5b      	ldrh	r3, [r3, #26]
 8012490:	f043 0303 	orr.w	r3, r3, #3
 8012494:	b29a      	uxth	r2, r3
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	835a      	strh	r2, [r3, #26]
 801249a:	e006      	b.n	80124aa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	8b5b      	ldrh	r3, [r3, #26]
 80124a0:	f023 0303 	bic.w	r3, r3, #3
 80124a4:	b29a      	uxth	r2, r3
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80124aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	371c      	adds	r7, #28
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd90      	pop	{r4, r7, pc}
 80124b6:	bf00      	nop
 80124b8:	0801a334 	.word	0x0801a334
 80124bc:	0801aaf0 	.word	0x0801aaf0
 80124c0:	0801a388 	.word	0x0801a388

080124c4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80124c4:	b590      	push	{r4, r7, lr}
 80124c6:	b087      	sub	sp, #28
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80124cc:	2300      	movs	r3, #0
 80124ce:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d106      	bne.n	80124e4 <tcp_keepalive+0x20>
 80124d6:	4b18      	ldr	r3, [pc, #96]	@ (8012538 <tcp_keepalive+0x74>)
 80124d8:	f640 0224 	movw	r2, #2084	@ 0x824
 80124dc:	4917      	ldr	r1, [pc, #92]	@ (801253c <tcp_keepalive+0x78>)
 80124de:	4818      	ldr	r0, [pc, #96]	@ (8012540 <tcp_keepalive+0x7c>)
 80124e0:	f005 faea 	bl	8017ab8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80124e4:	7dfb      	ldrb	r3, [r7, #23]
 80124e6:	b29c      	uxth	r4, r3
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80124ec:	3b01      	subs	r3, #1
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7f7 ff85 	bl	800a3fe <lwip_htonl>
 80124f4:	4603      	mov	r3, r0
 80124f6:	2200      	movs	r2, #0
 80124f8:	4621      	mov	r1, r4
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f7ff fe68 	bl	80121d0 <tcp_output_alloc_header>
 8012500:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d102      	bne.n	801250e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012508:	f04f 33ff 	mov.w	r3, #4294967295
 801250c:	e010      	b.n	8012530 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801250e:	7dfb      	ldrb	r3, [r7, #23]
 8012510:	2200      	movs	r2, #0
 8012512:	6939      	ldr	r1, [r7, #16]
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f7ff fe99 	bl	801224c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801251a:	687a      	ldr	r2, [r7, #4]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	3304      	adds	r3, #4
 8012520:	6939      	ldr	r1, [r7, #16]
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f7ff fed0 	bl	80122c8 <tcp_output_control_segment>
 8012528:	4603      	mov	r3, r0
 801252a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801252c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012530:	4618      	mov	r0, r3
 8012532:	371c      	adds	r7, #28
 8012534:	46bd      	mov	sp, r7
 8012536:	bd90      	pop	{r4, r7, pc}
 8012538:	0801a334 	.word	0x0801a334
 801253c:	0801ab10 	.word	0x0801ab10
 8012540:	0801a388 	.word	0x0801a388

08012544 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012544:	b590      	push	{r4, r7, lr}
 8012546:	b08b      	sub	sp, #44	@ 0x2c
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801254c:	2300      	movs	r3, #0
 801254e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d106      	bne.n	8012566 <tcp_zero_window_probe+0x22>
 8012558:	4b4c      	ldr	r3, [pc, #304]	@ (801268c <tcp_zero_window_probe+0x148>)
 801255a:	f640 024f 	movw	r2, #2127	@ 0x84f
 801255e:	494c      	ldr	r1, [pc, #304]	@ (8012690 <tcp_zero_window_probe+0x14c>)
 8012560:	484c      	ldr	r0, [pc, #304]	@ (8012694 <tcp_zero_window_probe+0x150>)
 8012562:	f005 faa9 	bl	8017ab8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801256a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801256c:	6a3b      	ldr	r3, [r7, #32]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d101      	bne.n	8012576 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012572:	2300      	movs	r3, #0
 8012574:	e086      	b.n	8012684 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801257c:	2bff      	cmp	r3, #255	@ 0xff
 801257e:	d007      	beq.n	8012590 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012586:	3301      	adds	r3, #1
 8012588:	b2da      	uxtb	r2, r3
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012590:	6a3b      	ldr	r3, [r7, #32]
 8012592:	68db      	ldr	r3, [r3, #12]
 8012594:	899b      	ldrh	r3, [r3, #12]
 8012596:	b29b      	uxth	r3, r3
 8012598:	4618      	mov	r0, r3
 801259a:	f7f7 ff1b 	bl	800a3d4 <lwip_htons>
 801259e:	4603      	mov	r3, r0
 80125a0:	b2db      	uxtb	r3, r3
 80125a2:	f003 0301 	and.w	r3, r3, #1
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d005      	beq.n	80125b6 <tcp_zero_window_probe+0x72>
 80125aa:	6a3b      	ldr	r3, [r7, #32]
 80125ac:	891b      	ldrh	r3, [r3, #8]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d101      	bne.n	80125b6 <tcp_zero_window_probe+0x72>
 80125b2:	2301      	movs	r3, #1
 80125b4:	e000      	b.n	80125b8 <tcp_zero_window_probe+0x74>
 80125b6:	2300      	movs	r3, #0
 80125b8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80125ba:	7ffb      	ldrb	r3, [r7, #31]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	bf0c      	ite	eq
 80125c0:	2301      	moveq	r3, #1
 80125c2:	2300      	movne	r3, #0
 80125c4:	b2db      	uxtb	r3, r3
 80125c6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80125c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80125cc:	b299      	uxth	r1, r3
 80125ce:	6a3b      	ldr	r3, [r7, #32]
 80125d0:	68db      	ldr	r3, [r3, #12]
 80125d2:	685b      	ldr	r3, [r3, #4]
 80125d4:	8bba      	ldrh	r2, [r7, #28]
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f7ff fdfa 	bl	80121d0 <tcp_output_alloc_header>
 80125dc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80125de:	69bb      	ldr	r3, [r7, #24]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d102      	bne.n	80125ea <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80125e4:	f04f 33ff 	mov.w	r3, #4294967295
 80125e8:	e04c      	b.n	8012684 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80125ea:	69bb      	ldr	r3, [r7, #24]
 80125ec:	685b      	ldr	r3, [r3, #4]
 80125ee:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80125f0:	7ffb      	ldrb	r3, [r7, #31]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d011      	beq.n	801261a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	899b      	ldrh	r3, [r3, #12]
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	b21b      	sxth	r3, r3
 80125fe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012602:	b21c      	sxth	r4, r3
 8012604:	2011      	movs	r0, #17
 8012606:	f7f7 fee5 	bl	800a3d4 <lwip_htons>
 801260a:	4603      	mov	r3, r0
 801260c:	b21b      	sxth	r3, r3
 801260e:	4323      	orrs	r3, r4
 8012610:	b21b      	sxth	r3, r3
 8012612:	b29a      	uxth	r2, r3
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	819a      	strh	r2, [r3, #12]
 8012618:	e010      	b.n	801263c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801261a:	69bb      	ldr	r3, [r7, #24]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	3314      	adds	r3, #20
 8012620:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012622:	6a3b      	ldr	r3, [r7, #32]
 8012624:	6858      	ldr	r0, [r3, #4]
 8012626:	6a3b      	ldr	r3, [r7, #32]
 8012628:	685b      	ldr	r3, [r3, #4]
 801262a:	891a      	ldrh	r2, [r3, #8]
 801262c:	6a3b      	ldr	r3, [r7, #32]
 801262e:	891b      	ldrh	r3, [r3, #8]
 8012630:	1ad3      	subs	r3, r2, r3
 8012632:	b29b      	uxth	r3, r3
 8012634:	2201      	movs	r2, #1
 8012636:	6939      	ldr	r1, [r7, #16]
 8012638:	f7f9 fd82 	bl	800c140 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801263c:	6a3b      	ldr	r3, [r7, #32]
 801263e:	68db      	ldr	r3, [r3, #12]
 8012640:	685b      	ldr	r3, [r3, #4]
 8012642:	4618      	mov	r0, r3
 8012644:	f7f7 fedb 	bl	800a3fe <lwip_htonl>
 8012648:	4603      	mov	r3, r0
 801264a:	3301      	adds	r3, #1
 801264c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	1ad3      	subs	r3, r2, r3
 8012656:	2b00      	cmp	r3, #0
 8012658:	da02      	bge.n	8012660 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	68fa      	ldr	r2, [r7, #12]
 801265e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012664:	2200      	movs	r2, #0
 8012666:	69b9      	ldr	r1, [r7, #24]
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f7ff fdef 	bl	801224c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801266e:	687a      	ldr	r2, [r7, #4]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	3304      	adds	r3, #4
 8012674:	69b9      	ldr	r1, [r7, #24]
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f7ff fe26 	bl	80122c8 <tcp_output_control_segment>
 801267c:	4603      	mov	r3, r0
 801267e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012680:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012684:	4618      	mov	r0, r3
 8012686:	372c      	adds	r7, #44	@ 0x2c
 8012688:	46bd      	mov	sp, r7
 801268a:	bd90      	pop	{r4, r7, pc}
 801268c:	0801a334 	.word	0x0801a334
 8012690:	0801ab2c 	.word	0x0801ab2c
 8012694:	0801a388 	.word	0x0801a388

08012698 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80126a0:	f7f9 fef4 	bl	800c48c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80126a4:	4b0a      	ldr	r3, [pc, #40]	@ (80126d0 <tcpip_tcp_timer+0x38>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d103      	bne.n	80126b4 <tcpip_tcp_timer+0x1c>
 80126ac:	4b09      	ldr	r3, [pc, #36]	@ (80126d4 <tcpip_tcp_timer+0x3c>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d005      	beq.n	80126c0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80126b4:	2200      	movs	r2, #0
 80126b6:	4908      	ldr	r1, [pc, #32]	@ (80126d8 <tcpip_tcp_timer+0x40>)
 80126b8:	20fa      	movs	r0, #250	@ 0xfa
 80126ba:	f000 f8f5 	bl	80128a8 <sys_timeout>
 80126be:	e003      	b.n	80126c8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80126c0:	4b06      	ldr	r3, [pc, #24]	@ (80126dc <tcpip_tcp_timer+0x44>)
 80126c2:	2200      	movs	r2, #0
 80126c4:	601a      	str	r2, [r3, #0]
  }
}
 80126c6:	bf00      	nop
 80126c8:	bf00      	nop
 80126ca:	3708      	adds	r7, #8
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}
 80126d0:	24010584 	.word	0x24010584
 80126d4:	24010588 	.word	0x24010588
 80126d8:	08012699 	.word	0x08012699
 80126dc:	240105d0 	.word	0x240105d0

080126e0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
 80126e4:	f7f3 fe06 	bl	80062f4 <sys_check_core_locking>

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80126e8:	4b0a      	ldr	r3, [pc, #40]	@ (8012714 <tcp_timer_needed+0x34>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d10f      	bne.n	8012710 <tcp_timer_needed+0x30>
 80126f0:	4b09      	ldr	r3, [pc, #36]	@ (8012718 <tcp_timer_needed+0x38>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d103      	bne.n	8012700 <tcp_timer_needed+0x20>
 80126f8:	4b08      	ldr	r3, [pc, #32]	@ (801271c <tcp_timer_needed+0x3c>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d007      	beq.n	8012710 <tcp_timer_needed+0x30>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012700:	4b04      	ldr	r3, [pc, #16]	@ (8012714 <tcp_timer_needed+0x34>)
 8012702:	2201      	movs	r2, #1
 8012704:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012706:	2200      	movs	r2, #0
 8012708:	4905      	ldr	r1, [pc, #20]	@ (8012720 <tcp_timer_needed+0x40>)
 801270a:	20fa      	movs	r0, #250	@ 0xfa
 801270c:	f000 f8cc 	bl	80128a8 <sys_timeout>
  }
}
 8012710:	bf00      	nop
 8012712:	bd80      	pop	{r7, pc}
 8012714:	240105d0 	.word	0x240105d0
 8012718:	24010584 	.word	0x24010584
 801271c:	24010588 	.word	0x24010588
 8012720:	08012699 	.word	0x08012699

08012724 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b086      	sub	sp, #24
 8012728:	af00      	add	r7, sp, #0
 801272a:	60f8      	str	r0, [r7, #12]
 801272c:	60b9      	str	r1, [r7, #8]
 801272e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012730:	200a      	movs	r0, #10
 8012732:	f7f8 fbcd 	bl	800aed0 <memp_malloc>
 8012736:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d109      	bne.n	8012752 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d151      	bne.n	80127e8 <sys_timeout_abs+0xc4>
 8012744:	4b2a      	ldr	r3, [pc, #168]	@ (80127f0 <sys_timeout_abs+0xcc>)
 8012746:	22be      	movs	r2, #190	@ 0xbe
 8012748:	492a      	ldr	r1, [pc, #168]	@ (80127f4 <sys_timeout_abs+0xd0>)
 801274a:	482b      	ldr	r0, [pc, #172]	@ (80127f8 <sys_timeout_abs+0xd4>)
 801274c:	f005 f9b4 	bl	8017ab8 <iprintf>
    return;
 8012750:	e04a      	b.n	80127e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	2200      	movs	r2, #0
 8012756:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	68ba      	ldr	r2, [r7, #8]
 801275c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012764:	693b      	ldr	r3, [r7, #16]
 8012766:	68fa      	ldr	r2, [r7, #12]
 8012768:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801276a:	4b24      	ldr	r3, [pc, #144]	@ (80127fc <sys_timeout_abs+0xd8>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d103      	bne.n	801277a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012772:	4a22      	ldr	r2, [pc, #136]	@ (80127fc <sys_timeout_abs+0xd8>)
 8012774:	693b      	ldr	r3, [r7, #16]
 8012776:	6013      	str	r3, [r2, #0]
    return;
 8012778:	e037      	b.n	80127ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801277a:	693b      	ldr	r3, [r7, #16]
 801277c:	685a      	ldr	r2, [r3, #4]
 801277e:	4b1f      	ldr	r3, [pc, #124]	@ (80127fc <sys_timeout_abs+0xd8>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	685b      	ldr	r3, [r3, #4]
 8012784:	1ad3      	subs	r3, r2, r3
 8012786:	0fdb      	lsrs	r3, r3, #31
 8012788:	f003 0301 	and.w	r3, r3, #1
 801278c:	b2db      	uxtb	r3, r3
 801278e:	2b00      	cmp	r3, #0
 8012790:	d007      	beq.n	80127a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012792:	4b1a      	ldr	r3, [pc, #104]	@ (80127fc <sys_timeout_abs+0xd8>)
 8012794:	681a      	ldr	r2, [r3, #0]
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801279a:	4a18      	ldr	r2, [pc, #96]	@ (80127fc <sys_timeout_abs+0xd8>)
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	6013      	str	r3, [r2, #0]
 80127a0:	e023      	b.n	80127ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80127a2:	4b16      	ldr	r3, [pc, #88]	@ (80127fc <sys_timeout_abs+0xd8>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	617b      	str	r3, [r7, #20]
 80127a8:	e01a      	b.n	80127e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d00b      	beq.n	80127ca <sys_timeout_abs+0xa6>
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	685a      	ldr	r2, [r3, #4]
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	1ad3      	subs	r3, r2, r3
 80127be:	0fdb      	lsrs	r3, r3, #31
 80127c0:	f003 0301 	and.w	r3, r3, #1
 80127c4:	b2db      	uxtb	r3, r3
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d007      	beq.n	80127da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	681a      	ldr	r2, [r3, #0]
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	693a      	ldr	r2, [r7, #16]
 80127d6:	601a      	str	r2, [r3, #0]
        break;
 80127d8:	e007      	b.n	80127ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	617b      	str	r3, [r7, #20]
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d1e1      	bne.n	80127aa <sys_timeout_abs+0x86>
 80127e6:	e000      	b.n	80127ea <sys_timeout_abs+0xc6>
    return;
 80127e8:	bf00      	nop
      }
    }
  }
}
 80127ea:	3718      	adds	r7, #24
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	0801ab50 	.word	0x0801ab50
 80127f4:	0801ab84 	.word	0x0801ab84
 80127f8:	0801abc4 	.word	0x0801abc4
 80127fc:	240105c8 	.word	0x240105c8

08012800 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b086      	sub	sp, #24
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801280c:	697b      	ldr	r3, [r7, #20]
 801280e:	685b      	ldr	r3, [r3, #4]
 8012810:	4798      	blx	r3

  now = sys_now();
 8012812:	f7f3 faed 	bl	8005df0 <sys_now>
 8012816:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	681a      	ldr	r2, [r3, #0]
 801281c:	4b0f      	ldr	r3, [pc, #60]	@ (801285c <lwip_cyclic_timer+0x5c>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	4413      	add	r3, r2
 8012822:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012824:	68fa      	ldr	r2, [r7, #12]
 8012826:	693b      	ldr	r3, [r7, #16]
 8012828:	1ad3      	subs	r3, r2, r3
 801282a:	0fdb      	lsrs	r3, r3, #31
 801282c:	f003 0301 	and.w	r3, r3, #1
 8012830:	b2db      	uxtb	r3, r3
 8012832:	2b00      	cmp	r3, #0
 8012834:	d009      	beq.n	801284a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	681a      	ldr	r2, [r3, #0]
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	4413      	add	r3, r2
 801283e:	687a      	ldr	r2, [r7, #4]
 8012840:	4907      	ldr	r1, [pc, #28]	@ (8012860 <lwip_cyclic_timer+0x60>)
 8012842:	4618      	mov	r0, r3
 8012844:	f7ff ff6e 	bl	8012724 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012848:	e004      	b.n	8012854 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801284a:	687a      	ldr	r2, [r7, #4]
 801284c:	4904      	ldr	r1, [pc, #16]	@ (8012860 <lwip_cyclic_timer+0x60>)
 801284e:	68f8      	ldr	r0, [r7, #12]
 8012850:	f7ff ff68 	bl	8012724 <sys_timeout_abs>
}
 8012854:	bf00      	nop
 8012856:	3718      	adds	r7, #24
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}
 801285c:	240105cc 	.word	0x240105cc
 8012860:	08012801 	.word	0x08012801

08012864 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b082      	sub	sp, #8
 8012868:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801286a:	2301      	movs	r3, #1
 801286c:	607b      	str	r3, [r7, #4]
 801286e:	e00e      	b.n	801288e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012870:	4a0b      	ldr	r2, [pc, #44]	@ (80128a0 <sys_timeouts_init+0x3c>)
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	00db      	lsls	r3, r3, #3
 801287c:	4a08      	ldr	r2, [pc, #32]	@ (80128a0 <sys_timeouts_init+0x3c>)
 801287e:	4413      	add	r3, r2
 8012880:	461a      	mov	r2, r3
 8012882:	4908      	ldr	r1, [pc, #32]	@ (80128a4 <sys_timeouts_init+0x40>)
 8012884:	f000 f810 	bl	80128a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	3301      	adds	r3, #1
 801288c:	607b      	str	r3, [r7, #4]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2b04      	cmp	r3, #4
 8012892:	d9ed      	bls.n	8012870 <sys_timeouts_init+0xc>
  }
}
 8012894:	bf00      	nop
 8012896:	bf00      	nop
 8012898:	3708      	adds	r7, #8
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}
 801289e:	bf00      	nop
 80128a0:	0801c180 	.word	0x0801c180
 80128a4:	08012801 	.word	0x08012801

080128a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b086      	sub	sp, #24
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	60f8      	str	r0, [r7, #12]
 80128b0:	60b9      	str	r1, [r7, #8]
 80128b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 80128b4:	f7f3 fd1e 	bl	80062f4 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80128be:	d306      	bcc.n	80128ce <sys_timeout+0x26>
 80128c0:	4b0a      	ldr	r3, [pc, #40]	@ (80128ec <sys_timeout+0x44>)
 80128c2:	f240 1229 	movw	r2, #297	@ 0x129
 80128c6:	490a      	ldr	r1, [pc, #40]	@ (80128f0 <sys_timeout+0x48>)
 80128c8:	480a      	ldr	r0, [pc, #40]	@ (80128f4 <sys_timeout+0x4c>)
 80128ca:	f005 f8f5 	bl	8017ab8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80128ce:	f7f3 fa8f 	bl	8005df0 <sys_now>
 80128d2:	4602      	mov	r2, r0
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	4413      	add	r3, r2
 80128d8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80128da:	687a      	ldr	r2, [r7, #4]
 80128dc:	68b9      	ldr	r1, [r7, #8]
 80128de:	6978      	ldr	r0, [r7, #20]
 80128e0:	f7ff ff20 	bl	8012724 <sys_timeout_abs>
#endif
}
 80128e4:	bf00      	nop
 80128e6:	3718      	adds	r7, #24
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	0801ab50 	.word	0x0801ab50
 80128f0:	0801abec 	.word	0x0801abec
 80128f4:	0801abc4 	.word	0x0801abc4

080128f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 80128fe:	f7f3 fcf9 	bl	80062f4 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012902:	f7f3 fa75 	bl	8005df0 <sys_now>
 8012906:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012908:	4b17      	ldr	r3, [pc, #92]	@ (8012968 <sys_check_timeouts+0x70>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d022      	beq.n	801295a <sys_check_timeouts+0x62>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	68fa      	ldr	r2, [r7, #12]
 801291a:	1ad3      	subs	r3, r2, r3
 801291c:	0fdb      	lsrs	r3, r3, #31
 801291e:	f003 0301 	and.w	r3, r3, #1
 8012922:	b2db      	uxtb	r3, r3
 8012924:	2b00      	cmp	r3, #0
 8012926:	d11a      	bne.n	801295e <sys_check_timeouts+0x66>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	4a0e      	ldr	r2, [pc, #56]	@ (8012968 <sys_check_timeouts+0x70>)
 801292e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	689b      	ldr	r3, [r3, #8]
 8012934:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	68db      	ldr	r3, [r3, #12]
 801293a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	685b      	ldr	r3, [r3, #4]
 8012940:	4a0a      	ldr	r2, [pc, #40]	@ (801296c <sys_check_timeouts+0x74>)
 8012942:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012944:	68b9      	ldr	r1, [r7, #8]
 8012946:	200a      	movs	r0, #10
 8012948:	f7f8 fb38 	bl	800afbc <memp_free>
    if (handler != NULL) {
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d0da      	beq.n	8012908 <sys_check_timeouts+0x10>
      handler(arg);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6838      	ldr	r0, [r7, #0]
 8012956:	4798      	blx	r3
  do {
 8012958:	e7d6      	b.n	8012908 <sys_check_timeouts+0x10>
      return;
 801295a:	bf00      	nop
 801295c:	e000      	b.n	8012960 <sys_check_timeouts+0x68>
      return;
 801295e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012960:	3710      	adds	r7, #16
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	240105c8 	.word	0x240105c8
 801296c:	240105cc 	.word	0x240105cc

08012970 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 8012976:	f7f3 fcbd 	bl	80062f4 <sys_check_core_locking>

  if (next_timeout == NULL) {
 801297a:	4b16      	ldr	r3, [pc, #88]	@ (80129d4 <sys_timeouts_sleeptime+0x64>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d102      	bne.n	8012988 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012982:	f04f 33ff 	mov.w	r3, #4294967295
 8012986:	e020      	b.n	80129ca <sys_timeouts_sleeptime+0x5a>
  }
  now = sys_now();
 8012988:	f7f3 fa32 	bl	8005df0 <sys_now>
 801298c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801298e:	4b11      	ldr	r3, [pc, #68]	@ (80129d4 <sys_timeouts_sleeptime+0x64>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	685a      	ldr	r2, [r3, #4]
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	1ad3      	subs	r3, r2, r3
 8012998:	0fdb      	lsrs	r3, r3, #31
 801299a:	f003 0301 	and.w	r3, r3, #1
 801299e:	b2db      	uxtb	r3, r3
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d001      	beq.n	80129a8 <sys_timeouts_sleeptime+0x38>
    return 0;
 80129a4:	2300      	movs	r3, #0
 80129a6:	e010      	b.n	80129ca <sys_timeouts_sleeptime+0x5a>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80129a8:	4b0a      	ldr	r3, [pc, #40]	@ (80129d4 <sys_timeouts_sleeptime+0x64>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	685a      	ldr	r2, [r3, #4]
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	1ad3      	subs	r3, r2, r3
 80129b2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	da06      	bge.n	80129c8 <sys_timeouts_sleeptime+0x58>
 80129ba:	4b07      	ldr	r3, [pc, #28]	@ (80129d8 <sys_timeouts_sleeptime+0x68>)
 80129bc:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80129c0:	4906      	ldr	r1, [pc, #24]	@ (80129dc <sys_timeouts_sleeptime+0x6c>)
 80129c2:	4807      	ldr	r0, [pc, #28]	@ (80129e0 <sys_timeouts_sleeptime+0x70>)
 80129c4:	f005 f878 	bl	8017ab8 <iprintf>
    return ret;
 80129c8:	683b      	ldr	r3, [r7, #0]
  }
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3708      	adds	r7, #8
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
 80129d2:	bf00      	nop
 80129d4:	240105c8 	.word	0x240105c8
 80129d8:	0801ab50 	.word	0x0801ab50
 80129dc:	0801ac24 	.word	0x0801ac24
 80129e0:	0801abc4 	.word	0x0801abc4

080129e4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80129e8:	f004 ff66 	bl	80178b8 <rand>
 80129ec:	4603      	mov	r3, r0
 80129ee:	b29b      	uxth	r3, r3
 80129f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80129fa:	b29a      	uxth	r2, r3
 80129fc:	4b01      	ldr	r3, [pc, #4]	@ (8012a04 <udp_init+0x20>)
 80129fe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012a00:	bf00      	nop
 8012a02:	bd80      	pop	{r7, pc}
 8012a04:	2400003c 	.word	0x2400003c

08012a08 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b083      	sub	sp, #12
 8012a0c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012a12:	4b17      	ldr	r3, [pc, #92]	@ (8012a70 <udp_new_port+0x68>)
 8012a14:	881b      	ldrh	r3, [r3, #0]
 8012a16:	1c5a      	adds	r2, r3, #1
 8012a18:	b291      	uxth	r1, r2
 8012a1a:	4a15      	ldr	r2, [pc, #84]	@ (8012a70 <udp_new_port+0x68>)
 8012a1c:	8011      	strh	r1, [r2, #0]
 8012a1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012a22:	4293      	cmp	r3, r2
 8012a24:	d103      	bne.n	8012a2e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012a26:	4b12      	ldr	r3, [pc, #72]	@ (8012a70 <udp_new_port+0x68>)
 8012a28:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012a2c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a2e:	4b11      	ldr	r3, [pc, #68]	@ (8012a74 <udp_new_port+0x6c>)
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	603b      	str	r3, [r7, #0]
 8012a34:	e011      	b.n	8012a5a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	8a5a      	ldrh	r2, [r3, #18]
 8012a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8012a70 <udp_new_port+0x68>)
 8012a3c:	881b      	ldrh	r3, [r3, #0]
 8012a3e:	429a      	cmp	r2, r3
 8012a40:	d108      	bne.n	8012a54 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012a42:	88fb      	ldrh	r3, [r7, #6]
 8012a44:	3301      	adds	r3, #1
 8012a46:	80fb      	strh	r3, [r7, #6]
 8012a48:	88fb      	ldrh	r3, [r7, #6]
 8012a4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012a4e:	d3e0      	bcc.n	8012a12 <udp_new_port+0xa>
        return 0;
 8012a50:	2300      	movs	r3, #0
 8012a52:	e007      	b.n	8012a64 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	68db      	ldr	r3, [r3, #12]
 8012a58:	603b      	str	r3, [r7, #0]
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d1ea      	bne.n	8012a36 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012a60:	4b03      	ldr	r3, [pc, #12]	@ (8012a70 <udp_new_port+0x68>)
 8012a62:	881b      	ldrh	r3, [r3, #0]
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	370c      	adds	r7, #12
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6e:	4770      	bx	lr
 8012a70:	2400003c 	.word	0x2400003c
 8012a74:	240105d4 	.word	0x240105d4

08012a78 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b084      	sub	sp, #16
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	60f8      	str	r0, [r7, #12]
 8012a80:	60b9      	str	r1, [r7, #8]
 8012a82:	4613      	mov	r3, r2
 8012a84:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d105      	bne.n	8012a98 <udp_input_local_match+0x20>
 8012a8c:	4b27      	ldr	r3, [pc, #156]	@ (8012b2c <udp_input_local_match+0xb4>)
 8012a8e:	2287      	movs	r2, #135	@ 0x87
 8012a90:	4927      	ldr	r1, [pc, #156]	@ (8012b30 <udp_input_local_match+0xb8>)
 8012a92:	4828      	ldr	r0, [pc, #160]	@ (8012b34 <udp_input_local_match+0xbc>)
 8012a94:	f005 f810 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012a98:	68bb      	ldr	r3, [r7, #8]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d105      	bne.n	8012aaa <udp_input_local_match+0x32>
 8012a9e:	4b23      	ldr	r3, [pc, #140]	@ (8012b2c <udp_input_local_match+0xb4>)
 8012aa0:	2288      	movs	r2, #136	@ 0x88
 8012aa2:	4925      	ldr	r1, [pc, #148]	@ (8012b38 <udp_input_local_match+0xc0>)
 8012aa4:	4823      	ldr	r0, [pc, #140]	@ (8012b34 <udp_input_local_match+0xbc>)
 8012aa6:	f005 f807 	bl	8017ab8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	7a1b      	ldrb	r3, [r3, #8]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d00b      	beq.n	8012aca <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	7a1a      	ldrb	r2, [r3, #8]
 8012ab6:	4b21      	ldr	r3, [pc, #132]	@ (8012b3c <udp_input_local_match+0xc4>)
 8012ab8:	685b      	ldr	r3, [r3, #4]
 8012aba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012abe:	3301      	adds	r3, #1
 8012ac0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ac2:	429a      	cmp	r2, r3
 8012ac4:	d001      	beq.n	8012aca <udp_input_local_match+0x52>
    return 0;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	e02b      	b.n	8012b22 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012aca:	79fb      	ldrb	r3, [r7, #7]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d018      	beq.n	8012b02 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d013      	beq.n	8012afe <udp_input_local_match+0x86>
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d00f      	beq.n	8012afe <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012ade:	4b17      	ldr	r3, [pc, #92]	@ (8012b3c <udp_input_local_match+0xc4>)
 8012ae0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ae6:	d00a      	beq.n	8012afe <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	681a      	ldr	r2, [r3, #0]
 8012aec:	4b13      	ldr	r3, [pc, #76]	@ (8012b3c <udp_input_local_match+0xc4>)
 8012aee:	695b      	ldr	r3, [r3, #20]
 8012af0:	405a      	eors	r2, r3
 8012af2:	68bb      	ldr	r3, [r7, #8]
 8012af4:	3308      	adds	r3, #8
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d110      	bne.n	8012b20 <udp_input_local_match+0xa8>
          return 1;
 8012afe:	2301      	movs	r3, #1
 8012b00:	e00f      	b.n	8012b22 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d009      	beq.n	8012b1c <udp_input_local_match+0xa4>
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d005      	beq.n	8012b1c <udp_input_local_match+0xa4>
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	681a      	ldr	r2, [r3, #0]
 8012b14:	4b09      	ldr	r3, [pc, #36]	@ (8012b3c <udp_input_local_match+0xc4>)
 8012b16:	695b      	ldr	r3, [r3, #20]
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d101      	bne.n	8012b20 <udp_input_local_match+0xa8>
        return 1;
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	e000      	b.n	8012b22 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012b20:	2300      	movs	r3, #0
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3710      	adds	r7, #16
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	0801ac38 	.word	0x0801ac38
 8012b30:	0801ac68 	.word	0x0801ac68
 8012b34:	0801ac8c 	.word	0x0801ac8c
 8012b38:	0801acb4 	.word	0x0801acb4
 8012b3c:	24009a98 	.word	0x24009a98

08012b40 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012b40:	b590      	push	{r4, r7, lr}
 8012b42:	b08d      	sub	sp, #52	@ 0x34
 8012b44:	af02      	add	r7, sp, #8
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 8012b4e:	f7f3 fbd1 	bl	80062f4 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d105      	bne.n	8012b64 <udp_input+0x24>
 8012b58:	4b7c      	ldr	r3, [pc, #496]	@ (8012d4c <udp_input+0x20c>)
 8012b5a:	22cf      	movs	r2, #207	@ 0xcf
 8012b5c:	497c      	ldr	r1, [pc, #496]	@ (8012d50 <udp_input+0x210>)
 8012b5e:	487d      	ldr	r0, [pc, #500]	@ (8012d54 <udp_input+0x214>)
 8012b60:	f004 ffaa 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d105      	bne.n	8012b76 <udp_input+0x36>
 8012b6a:	4b78      	ldr	r3, [pc, #480]	@ (8012d4c <udp_input+0x20c>)
 8012b6c:	22d0      	movs	r2, #208	@ 0xd0
 8012b6e:	497a      	ldr	r1, [pc, #488]	@ (8012d58 <udp_input+0x218>)
 8012b70:	4878      	ldr	r0, [pc, #480]	@ (8012d54 <udp_input+0x214>)
 8012b72:	f004 ffa1 	bl	8017ab8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	895b      	ldrh	r3, [r3, #10]
 8012b7a:	2b07      	cmp	r3, #7
 8012b7c:	d803      	bhi.n	8012b86 <udp_input+0x46>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f7f9 f8d8 	bl	800bd34 <pbuf_free>
    goto end;
 8012b84:	e0de      	b.n	8012d44 <udp_input+0x204>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	685b      	ldr	r3, [r3, #4]
 8012b8a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012b8c:	4b73      	ldr	r3, [pc, #460]	@ (8012d5c <udp_input+0x21c>)
 8012b8e:	695b      	ldr	r3, [r3, #20]
 8012b90:	4a72      	ldr	r2, [pc, #456]	@ (8012d5c <udp_input+0x21c>)
 8012b92:	6812      	ldr	r2, [r2, #0]
 8012b94:	4611      	mov	r1, r2
 8012b96:	4618      	mov	r0, r3
 8012b98:	f003 fe42 	bl	8016820 <ip4_addr_isbroadcast_u32>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	881b      	ldrh	r3, [r3, #0]
 8012ba4:	b29b      	uxth	r3, r3
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7f7 fc14 	bl	800a3d4 <lwip_htons>
 8012bac:	4603      	mov	r3, r0
 8012bae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012bb0:	697b      	ldr	r3, [r7, #20]
 8012bb2:	885b      	ldrh	r3, [r3, #2]
 8012bb4:	b29b      	uxth	r3, r3
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7f7 fc0c 	bl	800a3d4 <lwip_htons>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012bc8:	2300      	movs	r3, #0
 8012bca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bcc:	4b64      	ldr	r3, [pc, #400]	@ (8012d60 <udp_input+0x220>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8012bd2:	e054      	b.n	8012c7e <udp_input+0x13e>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bd6:	8a5b      	ldrh	r3, [r3, #18]
 8012bd8:	89fa      	ldrh	r2, [r7, #14]
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	d14a      	bne.n	8012c74 <udp_input+0x134>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012bde:	7cfb      	ldrb	r3, [r7, #19]
 8012be0:	461a      	mov	r2, r3
 8012be2:	6839      	ldr	r1, [r7, #0]
 8012be4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012be6:	f7ff ff47 	bl	8012a78 <udp_input_local_match>
 8012bea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d041      	beq.n	8012c74 <udp_input+0x134>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bf2:	7c1b      	ldrb	r3, [r3, #16]
 8012bf4:	f003 0304 	and.w	r3, r3, #4
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d11d      	bne.n	8012c38 <udp_input+0xf8>
        if (uncon_pcb == NULL) {
 8012bfc:	69fb      	ldr	r3, [r7, #28]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d102      	bne.n	8012c08 <udp_input+0xc8>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c04:	61fb      	str	r3, [r7, #28]
 8012c06:	e017      	b.n	8012c38 <udp_input+0xf8>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012c08:	7cfb      	ldrb	r3, [r7, #19]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d014      	beq.n	8012c38 <udp_input+0xf8>
 8012c0e:	4b53      	ldr	r3, [pc, #332]	@ (8012d5c <udp_input+0x21c>)
 8012c10:	695b      	ldr	r3, [r3, #20]
 8012c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c16:	d10f      	bne.n	8012c38 <udp_input+0xf8>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012c18:	69fb      	ldr	r3, [r7, #28]
 8012c1a:	681a      	ldr	r2, [r3, #0]
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	3304      	adds	r3, #4
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d008      	beq.n	8012c38 <udp_input+0xf8>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c28:	681a      	ldr	r2, [r3, #0]
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	3304      	adds	r3, #4
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d101      	bne.n	8012c38 <udp_input+0xf8>
              /* better match */
              uncon_pcb = pcb;
 8012c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c36:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c3a:	8a9b      	ldrh	r3, [r3, #20]
 8012c3c:	8a3a      	ldrh	r2, [r7, #16]
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d118      	bne.n	8012c74 <udp_input+0x134>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c44:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d005      	beq.n	8012c56 <udp_input+0x116>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c4c:	685a      	ldr	r2, [r3, #4]
 8012c4e:	4b43      	ldr	r3, [pc, #268]	@ (8012d5c <udp_input+0x21c>)
 8012c50:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d10e      	bne.n	8012c74 <udp_input+0x134>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012c56:	6a3b      	ldr	r3, [r7, #32]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d014      	beq.n	8012c86 <udp_input+0x146>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c5e:	68da      	ldr	r2, [r3, #12]
 8012c60:	6a3b      	ldr	r3, [r7, #32]
 8012c62:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012c64:	4b3e      	ldr	r3, [pc, #248]	@ (8012d60 <udp_input+0x220>)
 8012c66:	681a      	ldr	r2, [r3, #0]
 8012c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c6a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012c6c:	4a3c      	ldr	r2, [pc, #240]	@ (8012d60 <udp_input+0x220>)
 8012c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c70:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012c72:	e008      	b.n	8012c86 <udp_input+0x146>
      }
    }

    prev = pcb;
 8012c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c76:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c7a:	68db      	ldr	r3, [r3, #12]
 8012c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8012c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d1a7      	bne.n	8012bd4 <udp_input+0x94>
 8012c84:	e000      	b.n	8012c88 <udp_input+0x148>
        break;
 8012c86:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d101      	bne.n	8012c92 <udp_input+0x152>
    pcb = uncon_pcb;
 8012c8e:	69fb      	ldr	r3, [r7, #28]
 8012c90:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d002      	beq.n	8012c9e <udp_input+0x15e>
    for_us = 1;
 8012c98:	2301      	movs	r3, #1
 8012c9a:	76fb      	strb	r3, [r7, #27]
 8012c9c:	e00a      	b.n	8012cb4 <udp_input+0x174>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	3304      	adds	r3, #4
 8012ca2:	681a      	ldr	r2, [r3, #0]
 8012ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8012d5c <udp_input+0x21c>)
 8012ca6:	695b      	ldr	r3, [r3, #20]
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	bf0c      	ite	eq
 8012cac:	2301      	moveq	r3, #1
 8012cae:	2300      	movne	r3, #0
 8012cb0:	b2db      	uxtb	r3, r3
 8012cb2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012cb4:	7efb      	ldrb	r3, [r7, #27]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d041      	beq.n	8012d3e <udp_input+0x1fe>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012cba:	2108      	movs	r1, #8
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f7f8 ffb3 	bl	800bc28 <pbuf_remove_header>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d00a      	beq.n	8012cde <udp_input+0x19e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012cc8:	4b20      	ldr	r3, [pc, #128]	@ (8012d4c <udp_input+0x20c>)
 8012cca:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8012cce:	4925      	ldr	r1, [pc, #148]	@ (8012d64 <udp_input+0x224>)
 8012cd0:	4820      	ldr	r0, [pc, #128]	@ (8012d54 <udp_input+0x214>)
 8012cd2:	f004 fef1 	bl	8017ab8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f7f9 f82c 	bl	800bd34 <pbuf_free>
      goto end;
 8012cdc:	e032      	b.n	8012d44 <udp_input+0x204>
    }

    if (pcb != NULL) {
 8012cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d012      	beq.n	8012d0a <udp_input+0x1ca>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ce6:	699b      	ldr	r3, [r3, #24]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d00a      	beq.n	8012d02 <udp_input+0x1c2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cee:	699c      	ldr	r4, [r3, #24]
 8012cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cf2:	69d8      	ldr	r0, [r3, #28]
 8012cf4:	8a3b      	ldrh	r3, [r7, #16]
 8012cf6:	9300      	str	r3, [sp, #0]
 8012cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8012d68 <udp_input+0x228>)
 8012cfa:	687a      	ldr	r2, [r7, #4]
 8012cfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012cfe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012d00:	e021      	b.n	8012d46 <udp_input+0x206>
        pbuf_free(p);
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f7f9 f816 	bl	800bd34 <pbuf_free>
        goto end;
 8012d08:	e01c      	b.n	8012d44 <udp_input+0x204>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012d0a:	7cfb      	ldrb	r3, [r7, #19]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d112      	bne.n	8012d36 <udp_input+0x1f6>
 8012d10:	4b12      	ldr	r3, [pc, #72]	@ (8012d5c <udp_input+0x21c>)
 8012d12:	695b      	ldr	r3, [r3, #20]
 8012d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012d18:	2be0      	cmp	r3, #224	@ 0xe0
 8012d1a:	d00c      	beq.n	8012d36 <udp_input+0x1f6>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8012d5c <udp_input+0x21c>)
 8012d1e:	899b      	ldrh	r3, [r3, #12]
 8012d20:	3308      	adds	r3, #8
 8012d22:	b29b      	uxth	r3, r3
 8012d24:	b21b      	sxth	r3, r3
 8012d26:	4619      	mov	r1, r3
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7f8 fff0 	bl	800bd0e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012d2e:	2103      	movs	r1, #3
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f003 fa29 	bl	8016188 <icmp_dest_unreach>
      pbuf_free(p);
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f7f8 fffc 	bl	800bd34 <pbuf_free>
  return;
 8012d3c:	e003      	b.n	8012d46 <udp_input+0x206>
    pbuf_free(p);
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f7f8 fff8 	bl	800bd34 <pbuf_free>
  return;
 8012d44:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012d46:	372c      	adds	r7, #44	@ 0x2c
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd90      	pop	{r4, r7, pc}
 8012d4c:	0801ac38 	.word	0x0801ac38
 8012d50:	0801acdc 	.word	0x0801acdc
 8012d54:	0801ac8c 	.word	0x0801ac8c
 8012d58:	0801acf4 	.word	0x0801acf4
 8012d5c:	24009a98 	.word	0x24009a98
 8012d60:	240105d4 	.word	0x240105d4
 8012d64:	0801ad10 	.word	0x0801ad10
 8012d68:	24009aa8 	.word	0x24009aa8

08012d6c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b088      	sub	sp, #32
 8012d70:	af02      	add	r7, sp, #8
 8012d72:	60f8      	str	r0, [r7, #12]
 8012d74:	60b9      	str	r1, [r7, #8]
 8012d76:	607a      	str	r2, [r7, #4]
 8012d78:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d109      	bne.n	8012d94 <udp_sendto_if+0x28>
 8012d80:	4b2e      	ldr	r3, [pc, #184]	@ (8012e3c <udp_sendto_if+0xd0>)
 8012d82:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012d86:	492e      	ldr	r1, [pc, #184]	@ (8012e40 <udp_sendto_if+0xd4>)
 8012d88:	482e      	ldr	r0, [pc, #184]	@ (8012e44 <udp_sendto_if+0xd8>)
 8012d8a:	f004 fe95 	bl	8017ab8 <iprintf>
 8012d8e:	f06f 030f 	mvn.w	r3, #15
 8012d92:	e04f      	b.n	8012e34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012d94:	68bb      	ldr	r3, [r7, #8]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d109      	bne.n	8012dae <udp_sendto_if+0x42>
 8012d9a:	4b28      	ldr	r3, [pc, #160]	@ (8012e3c <udp_sendto_if+0xd0>)
 8012d9c:	f240 2281 	movw	r2, #641	@ 0x281
 8012da0:	4929      	ldr	r1, [pc, #164]	@ (8012e48 <udp_sendto_if+0xdc>)
 8012da2:	4828      	ldr	r0, [pc, #160]	@ (8012e44 <udp_sendto_if+0xd8>)
 8012da4:	f004 fe88 	bl	8017ab8 <iprintf>
 8012da8:	f06f 030f 	mvn.w	r3, #15
 8012dac:	e042      	b.n	8012e34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d109      	bne.n	8012dc8 <udp_sendto_if+0x5c>
 8012db4:	4b21      	ldr	r3, [pc, #132]	@ (8012e3c <udp_sendto_if+0xd0>)
 8012db6:	f240 2282 	movw	r2, #642	@ 0x282
 8012dba:	4924      	ldr	r1, [pc, #144]	@ (8012e4c <udp_sendto_if+0xe0>)
 8012dbc:	4821      	ldr	r0, [pc, #132]	@ (8012e44 <udp_sendto_if+0xd8>)
 8012dbe:	f004 fe7b 	bl	8017ab8 <iprintf>
 8012dc2:	f06f 030f 	mvn.w	r3, #15
 8012dc6:	e035      	b.n	8012e34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012dc8:	6a3b      	ldr	r3, [r7, #32]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d109      	bne.n	8012de2 <udp_sendto_if+0x76>
 8012dce:	4b1b      	ldr	r3, [pc, #108]	@ (8012e3c <udp_sendto_if+0xd0>)
 8012dd0:	f240 2283 	movw	r2, #643	@ 0x283
 8012dd4:	491e      	ldr	r1, [pc, #120]	@ (8012e50 <udp_sendto_if+0xe4>)
 8012dd6:	481b      	ldr	r0, [pc, #108]	@ (8012e44 <udp_sendto_if+0xd8>)
 8012dd8:	f004 fe6e 	bl	8017ab8 <iprintf>
 8012ddc:	f06f 030f 	mvn.w	r3, #15
 8012de0:	e028      	b.n	8012e34 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d009      	beq.n	8012dfc <udp_sendto_if+0x90>
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d005      	beq.n	8012dfc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012df8:	2be0      	cmp	r3, #224	@ 0xe0
 8012dfa:	d103      	bne.n	8012e04 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012dfc:	6a3b      	ldr	r3, [r7, #32]
 8012dfe:	3304      	adds	r3, #4
 8012e00:	617b      	str	r3, [r7, #20]
 8012e02:	e00b      	b.n	8012e1c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	681a      	ldr	r2, [r3, #0]
 8012e08:	6a3b      	ldr	r3, [r7, #32]
 8012e0a:	3304      	adds	r3, #4
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d002      	beq.n	8012e18 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012e12:	f06f 0303 	mvn.w	r3, #3
 8012e16:	e00d      	b.n	8012e34 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012e1c:	887a      	ldrh	r2, [r7, #2]
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	9301      	str	r3, [sp, #4]
 8012e22:	6a3b      	ldr	r3, [r7, #32]
 8012e24:	9300      	str	r3, [sp, #0]
 8012e26:	4613      	mov	r3, r2
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	68b9      	ldr	r1, [r7, #8]
 8012e2c:	68f8      	ldr	r0, [r7, #12]
 8012e2e:	f000 f811 	bl	8012e54 <udp_sendto_if_src>
 8012e32:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3718      	adds	r7, #24
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	0801ac38 	.word	0x0801ac38
 8012e40:	0801adac 	.word	0x0801adac
 8012e44:	0801ac8c 	.word	0x0801ac8c
 8012e48:	0801adc8 	.word	0x0801adc8
 8012e4c:	0801ade4 	.word	0x0801ade4
 8012e50:	0801ae04 	.word	0x0801ae04

08012e54 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b08c      	sub	sp, #48	@ 0x30
 8012e58:	af04      	add	r7, sp, #16
 8012e5a:	60f8      	str	r0, [r7, #12]
 8012e5c:	60b9      	str	r1, [r7, #8]
 8012e5e:	607a      	str	r2, [r7, #4]
 8012e60:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();
 8012e62:	f7f3 fa47 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d109      	bne.n	8012e80 <udp_sendto_if_src+0x2c>
 8012e6c:	4b65      	ldr	r3, [pc, #404]	@ (8013004 <udp_sendto_if_src+0x1b0>)
 8012e6e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8012e72:	4965      	ldr	r1, [pc, #404]	@ (8013008 <udp_sendto_if_src+0x1b4>)
 8012e74:	4865      	ldr	r0, [pc, #404]	@ (801300c <udp_sendto_if_src+0x1b8>)
 8012e76:	f004 fe1f 	bl	8017ab8 <iprintf>
 8012e7a:	f06f 030f 	mvn.w	r3, #15
 8012e7e:	e0bc      	b.n	8012ffa <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d109      	bne.n	8012e9a <udp_sendto_if_src+0x46>
 8012e86:	4b5f      	ldr	r3, [pc, #380]	@ (8013004 <udp_sendto_if_src+0x1b0>)
 8012e88:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8012e8c:	4960      	ldr	r1, [pc, #384]	@ (8013010 <udp_sendto_if_src+0x1bc>)
 8012e8e:	485f      	ldr	r0, [pc, #380]	@ (801300c <udp_sendto_if_src+0x1b8>)
 8012e90:	f004 fe12 	bl	8017ab8 <iprintf>
 8012e94:	f06f 030f 	mvn.w	r3, #15
 8012e98:	e0af      	b.n	8012ffa <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d109      	bne.n	8012eb4 <udp_sendto_if_src+0x60>
 8012ea0:	4b58      	ldr	r3, [pc, #352]	@ (8013004 <udp_sendto_if_src+0x1b0>)
 8012ea2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8012ea6:	495b      	ldr	r1, [pc, #364]	@ (8013014 <udp_sendto_if_src+0x1c0>)
 8012ea8:	4858      	ldr	r0, [pc, #352]	@ (801300c <udp_sendto_if_src+0x1b8>)
 8012eaa:	f004 fe05 	bl	8017ab8 <iprintf>
 8012eae:	f06f 030f 	mvn.w	r3, #15
 8012eb2:	e0a2      	b.n	8012ffa <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d109      	bne.n	8012ece <udp_sendto_if_src+0x7a>
 8012eba:	4b52      	ldr	r3, [pc, #328]	@ (8013004 <udp_sendto_if_src+0x1b0>)
 8012ebc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8012ec0:	4955      	ldr	r1, [pc, #340]	@ (8013018 <udp_sendto_if_src+0x1c4>)
 8012ec2:	4852      	ldr	r0, [pc, #328]	@ (801300c <udp_sendto_if_src+0x1b8>)
 8012ec4:	f004 fdf8 	bl	8017ab8 <iprintf>
 8012ec8:	f06f 030f 	mvn.w	r3, #15
 8012ecc:	e095      	b.n	8012ffa <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d109      	bne.n	8012ee8 <udp_sendto_if_src+0x94>
 8012ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8013004 <udp_sendto_if_src+0x1b0>)
 8012ed6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8012eda:	4950      	ldr	r1, [pc, #320]	@ (801301c <udp_sendto_if_src+0x1c8>)
 8012edc:	484b      	ldr	r0, [pc, #300]	@ (801300c <udp_sendto_if_src+0x1b8>)
 8012ede:	f004 fdeb 	bl	8017ab8 <iprintf>
 8012ee2:	f06f 030f 	mvn.w	r3, #15
 8012ee6:	e088      	b.n	8012ffa <udp_sendto_if_src+0x1a6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	8a5b      	ldrh	r3, [r3, #18]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d10f      	bne.n	8012f10 <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012ef0:	68f9      	ldr	r1, [r7, #12]
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	8a5b      	ldrh	r3, [r3, #18]
 8012ef6:	461a      	mov	r2, r3
 8012ef8:	68f8      	ldr	r0, [r7, #12]
 8012efa:	f000 f893 	bl	8013024 <udp_bind>
 8012efe:	4603      	mov	r3, r0
 8012f00:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012f02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d002      	beq.n	8012f10 <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012f0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012f0e:	e074      	b.n	8012ffa <udp_sendto_if_src+0x1a6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	891b      	ldrh	r3, [r3, #8]
 8012f14:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8012f18:	4293      	cmp	r3, r2
 8012f1a:	d902      	bls.n	8012f22 <udp_sendto_if_src+0xce>
    return ERR_MEM;
 8012f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8012f20:	e06b      	b.n	8012ffa <udp_sendto_if_src+0x1a6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8012f22:	2108      	movs	r1, #8
 8012f24:	68b8      	ldr	r0, [r7, #8]
 8012f26:	f7f8 fe6f 	bl	800bc08 <pbuf_add_header>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d015      	beq.n	8012f5c <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012f30:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012f34:	2108      	movs	r1, #8
 8012f36:	2022      	movs	r0, #34	@ 0x22
 8012f38:	f7f8 fc18 	bl	800b76c <pbuf_alloc>
 8012f3c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012f3e:	69fb      	ldr	r3, [r7, #28]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d102      	bne.n	8012f4a <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012f44:	f04f 33ff 	mov.w	r3, #4294967295
 8012f48:	e057      	b.n	8012ffa <udp_sendto_if_src+0x1a6>
    }
    if (p->tot_len != 0) {
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	891b      	ldrh	r3, [r3, #8]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d006      	beq.n	8012f60 <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012f52:	68b9      	ldr	r1, [r7, #8]
 8012f54:	69f8      	ldr	r0, [r7, #28]
 8012f56:	f7f9 f811 	bl	800bf7c <pbuf_chain>
 8012f5a:	e001      	b.n	8012f60 <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012f60:	69fb      	ldr	r3, [r7, #28]
 8012f62:	895b      	ldrh	r3, [r3, #10]
 8012f64:	2b07      	cmp	r3, #7
 8012f66:	d806      	bhi.n	8012f76 <udp_sendto_if_src+0x122>
 8012f68:	4b26      	ldr	r3, [pc, #152]	@ (8013004 <udp_sendto_if_src+0x1b0>)
 8012f6a:	f240 320d 	movw	r2, #781	@ 0x30d
 8012f6e:	492c      	ldr	r1, [pc, #176]	@ (8013020 <udp_sendto_if_src+0x1cc>)
 8012f70:	4826      	ldr	r0, [pc, #152]	@ (801300c <udp_sendto_if_src+0x1b8>)
 8012f72:	f004 fda1 	bl	8017ab8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012f76:	69fb      	ldr	r3, [r7, #28]
 8012f78:	685b      	ldr	r3, [r3, #4]
 8012f7a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	8a5b      	ldrh	r3, [r3, #18]
 8012f80:	4618      	mov	r0, r3
 8012f82:	f7f7 fa27 	bl	800a3d4 <lwip_htons>
 8012f86:	4603      	mov	r3, r0
 8012f88:	461a      	mov	r2, r3
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012f8e:	887b      	ldrh	r3, [r7, #2]
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7f7 fa1f 	bl	800a3d4 <lwip_htons>
 8012f96:	4603      	mov	r3, r0
 8012f98:	461a      	mov	r2, r3
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	719a      	strb	r2, [r3, #6]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012fa8:	69fb      	ldr	r3, [r7, #28]
 8012faa:	891b      	ldrh	r3, [r3, #8]
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7f7 fa11 	bl	800a3d4 <lwip_htons>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012fba:	2311      	movs	r3, #17
 8012fbc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	7adb      	ldrb	r3, [r3, #11]
 8012fc2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	7a9b      	ldrb	r3, [r3, #10]
 8012fc8:	7cb9      	ldrb	r1, [r7, #18]
 8012fca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012fcc:	9202      	str	r2, [sp, #8]
 8012fce:	7cfa      	ldrb	r2, [r7, #19]
 8012fd0:	9201      	str	r2, [sp, #4]
 8012fd2:	9300      	str	r3, [sp, #0]
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	687a      	ldr	r2, [r7, #4]
 8012fd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012fda:	69f8      	ldr	r0, [r7, #28]
 8012fdc:	f003 fb70 	bl	80166c0 <ip4_output_if_src>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012fe4:	69fa      	ldr	r2, [r7, #28]
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d004      	beq.n	8012ff6 <udp_sendto_if_src+0x1a2>
    /* free the header pbuf */
    pbuf_free(q);
 8012fec:	69f8      	ldr	r0, [r7, #28]
 8012fee:	f7f8 fea1 	bl	800bd34 <pbuf_free>
    q = NULL;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012ff6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	3720      	adds	r7, #32
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}
 8013002:	bf00      	nop
 8013004:	0801ac38 	.word	0x0801ac38
 8013008:	0801ae24 	.word	0x0801ae24
 801300c:	0801ac8c 	.word	0x0801ac8c
 8013010:	0801ae44 	.word	0x0801ae44
 8013014:	0801ae64 	.word	0x0801ae64
 8013018:	0801ae88 	.word	0x0801ae88
 801301c:	0801aeac 	.word	0x0801aeac
 8013020:	0801aed0 	.word	0x0801aed0

08013024 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b086      	sub	sp, #24
 8013028:	af00      	add	r7, sp, #0
 801302a:	60f8      	str	r0, [r7, #12]
 801302c:	60b9      	str	r1, [r7, #8]
 801302e:	4613      	mov	r3, r2
 8013030:	80fb      	strh	r3, [r7, #6]
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 8013032:	f7f3 f95f 	bl	80062f4 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d101      	bne.n	8013040 <udp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801303c:	4b39      	ldr	r3, [pc, #228]	@ (8013124 <udp_bind+0x100>)
 801303e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d109      	bne.n	801305a <udp_bind+0x36>
 8013046:	4b38      	ldr	r3, [pc, #224]	@ (8013128 <udp_bind+0x104>)
 8013048:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801304c:	4937      	ldr	r1, [pc, #220]	@ (801312c <udp_bind+0x108>)
 801304e:	4838      	ldr	r0, [pc, #224]	@ (8013130 <udp_bind+0x10c>)
 8013050:	f004 fd32 	bl	8017ab8 <iprintf>
 8013054:	f06f 030f 	mvn.w	r3, #15
 8013058:	e060      	b.n	801311c <udp_bind+0xf8>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801305a:	2300      	movs	r3, #0
 801305c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801305e:	4b35      	ldr	r3, [pc, #212]	@ (8013134 <udp_bind+0x110>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	617b      	str	r3, [r7, #20]
 8013064:	e009      	b.n	801307a <udp_bind+0x56>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013066:	68fa      	ldr	r2, [r7, #12]
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	429a      	cmp	r2, r3
 801306c:	d102      	bne.n	8013074 <udp_bind+0x50>
      rebind = 1;
 801306e:	2301      	movs	r3, #1
 8013070:	74fb      	strb	r3, [r7, #19]
      break;
 8013072:	e005      	b.n	8013080 <udp_bind+0x5c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	68db      	ldr	r3, [r3, #12]
 8013078:	617b      	str	r3, [r7, #20]
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d1f2      	bne.n	8013066 <udp_bind+0x42>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013080:	88fb      	ldrh	r3, [r7, #6]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d109      	bne.n	801309a <udp_bind+0x76>
    port = udp_new_port();
 8013086:	f7ff fcbf 	bl	8012a08 <udp_new_port>
 801308a:	4603      	mov	r3, r0
 801308c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801308e:	88fb      	ldrh	r3, [r7, #6]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d12c      	bne.n	80130ee <udp_bind+0xca>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013094:	f06f 0307 	mvn.w	r3, #7
 8013098:	e040      	b.n	801311c <udp_bind+0xf8>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801309a:	4b26      	ldr	r3, [pc, #152]	@ (8013134 <udp_bind+0x110>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	617b      	str	r3, [r7, #20]
 80130a0:	e022      	b.n	80130e8 <udp_bind+0xc4>
      if (pcb != ipcb) {
 80130a2:	68fa      	ldr	r2, [r7, #12]
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d01b      	beq.n	80130e2 <udp_bind+0xbe>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	8a5b      	ldrh	r3, [r3, #18]
 80130ae:	88fa      	ldrh	r2, [r7, #6]
 80130b0:	429a      	cmp	r2, r3
 80130b2:	d116      	bne.n	80130e2 <udp_bind+0xbe>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	681a      	ldr	r2, [r3, #0]
 80130b8:	68bb      	ldr	r3, [r7, #8]
 80130ba:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80130bc:	429a      	cmp	r2, r3
 80130be:	d00d      	beq.n	80130dc <udp_bind+0xb8>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d00a      	beq.n	80130dc <udp_bind+0xb8>
 80130c6:	68bb      	ldr	r3, [r7, #8]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d006      	beq.n	80130dc <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 80130ce:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d003      	beq.n	80130dc <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d102      	bne.n	80130e2 <udp_bind+0xbe>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80130dc:	f06f 0307 	mvn.w	r3, #7
 80130e0:	e01c      	b.n	801311c <udp_bind+0xf8>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	68db      	ldr	r3, [r3, #12]
 80130e6:	617b      	str	r3, [r7, #20]
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d1d9      	bne.n	80130a2 <udp_bind+0x7e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d002      	beq.n	80130fa <udp_bind+0xd6>
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	e000      	b.n	80130fc <udp_bind+0xd8>
 80130fa:	2300      	movs	r3, #0
 80130fc:	68fa      	ldr	r2, [r7, #12]
 80130fe:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	88fa      	ldrh	r2, [r7, #6]
 8013104:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013106:	7cfb      	ldrb	r3, [r7, #19]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d106      	bne.n	801311a <udp_bind+0xf6>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801310c:	4b09      	ldr	r3, [pc, #36]	@ (8013134 <udp_bind+0x110>)
 801310e:	681a      	ldr	r2, [r3, #0]
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013114:	4a07      	ldr	r2, [pc, #28]	@ (8013134 <udp_bind+0x110>)
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801311a:	2300      	movs	r3, #0
}
 801311c:	4618      	mov	r0, r3
 801311e:	3718      	adds	r7, #24
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}
 8013124:	0801c1a8 	.word	0x0801c1a8
 8013128:	0801ac38 	.word	0x0801ac38
 801312c:	0801af00 	.word	0x0801af00
 8013130:	0801ac8c 	.word	0x0801ac8c
 8013134:	240105d4 	.word	0x240105d4

08013138 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b086      	sub	sp, #24
 801313c:	af00      	add	r7, sp, #0
 801313e:	60f8      	str	r0, [r7, #12]
 8013140:	60b9      	str	r1, [r7, #8]
 8013142:	4613      	mov	r3, r2
 8013144:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();
 8013146:	f7f3 f8d5 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d109      	bne.n	8013164 <udp_connect+0x2c>
 8013150:	4b2c      	ldr	r3, [pc, #176]	@ (8013204 <udp_connect+0xcc>)
 8013152:	f240 4235 	movw	r2, #1077	@ 0x435
 8013156:	492c      	ldr	r1, [pc, #176]	@ (8013208 <udp_connect+0xd0>)
 8013158:	482c      	ldr	r0, [pc, #176]	@ (801320c <udp_connect+0xd4>)
 801315a:	f004 fcad 	bl	8017ab8 <iprintf>
 801315e:	f06f 030f 	mvn.w	r3, #15
 8013162:	e04b      	b.n	80131fc <udp_connect+0xc4>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d109      	bne.n	801317e <udp_connect+0x46>
 801316a:	4b26      	ldr	r3, [pc, #152]	@ (8013204 <udp_connect+0xcc>)
 801316c:	f240 4236 	movw	r2, #1078	@ 0x436
 8013170:	4927      	ldr	r1, [pc, #156]	@ (8013210 <udp_connect+0xd8>)
 8013172:	4826      	ldr	r0, [pc, #152]	@ (801320c <udp_connect+0xd4>)
 8013174:	f004 fca0 	bl	8017ab8 <iprintf>
 8013178:	f06f 030f 	mvn.w	r3, #15
 801317c:	e03e      	b.n	80131fc <udp_connect+0xc4>

  if (pcb->local_port == 0) {
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	8a5b      	ldrh	r3, [r3, #18]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d10f      	bne.n	80131a6 <udp_connect+0x6e>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013186:	68f9      	ldr	r1, [r7, #12]
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	8a5b      	ldrh	r3, [r3, #18]
 801318c:	461a      	mov	r2, r3
 801318e:	68f8      	ldr	r0, [r7, #12]
 8013190:	f7ff ff48 	bl	8013024 <udp_bind>
 8013194:	4603      	mov	r3, r0
 8013196:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013198:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d002      	beq.n	80131a6 <udp_connect+0x6e>
      return err;
 80131a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80131a4:	e02a      	b.n	80131fc <udp_connect+0xc4>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d002      	beq.n	80131b2 <udp_connect+0x7a>
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	e000      	b.n	80131b4 <udp_connect+0x7c>
 80131b2:	2300      	movs	r3, #0
 80131b4:	68fa      	ldr	r2, [r7, #12]
 80131b6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	88fa      	ldrh	r2, [r7, #6]
 80131bc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	7c1b      	ldrb	r3, [r3, #16]
 80131c2:	f043 0304 	orr.w	r3, r3, #4
 80131c6:	b2da      	uxtb	r2, r3
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80131cc:	4b11      	ldr	r3, [pc, #68]	@ (8013214 <udp_connect+0xdc>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	617b      	str	r3, [r7, #20]
 80131d2:	e008      	b.n	80131e6 <udp_connect+0xae>
    if (pcb == ipcb) {
 80131d4:	68fa      	ldr	r2, [r7, #12]
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	429a      	cmp	r2, r3
 80131da:	d101      	bne.n	80131e0 <udp_connect+0xa8>
      /* already on the list, just return */
      return ERR_OK;
 80131dc:	2300      	movs	r3, #0
 80131de:	e00d      	b.n	80131fc <udp_connect+0xc4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	68db      	ldr	r3, [r3, #12]
 80131e4:	617b      	str	r3, [r7, #20]
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d1f3      	bne.n	80131d4 <udp_connect+0x9c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80131ec:	4b09      	ldr	r3, [pc, #36]	@ (8013214 <udp_connect+0xdc>)
 80131ee:	681a      	ldr	r2, [r3, #0]
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80131f4:	4a07      	ldr	r2, [pc, #28]	@ (8013214 <udp_connect+0xdc>)
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80131fa:	2300      	movs	r3, #0
}
 80131fc:	4618      	mov	r0, r3
 80131fe:	3718      	adds	r7, #24
 8013200:	46bd      	mov	sp, r7
 8013202:	bd80      	pop	{r7, pc}
 8013204:	0801ac38 	.word	0x0801ac38
 8013208:	0801af18 	.word	0x0801af18
 801320c:	0801ac8c 	.word	0x0801ac8c
 8013210:	0801af34 	.word	0x0801af34
 8013214:	240105d4 	.word	0x240105d4

08013218 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b084      	sub	sp, #16
 801321c:	af00      	add	r7, sp, #0
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	60b9      	str	r1, [r7, #8]
 8013222:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8013224:	f7f3 f866 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d107      	bne.n	801323e <udp_recv+0x26>
 801322e:	4b08      	ldr	r3, [pc, #32]	@ (8013250 <udp_recv+0x38>)
 8013230:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013234:	4907      	ldr	r1, [pc, #28]	@ (8013254 <udp_recv+0x3c>)
 8013236:	4808      	ldr	r0, [pc, #32]	@ (8013258 <udp_recv+0x40>)
 8013238:	f004 fc3e 	bl	8017ab8 <iprintf>
 801323c:	e005      	b.n	801324a <udp_recv+0x32>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	68ba      	ldr	r2, [r7, #8]
 8013242:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	687a      	ldr	r2, [r7, #4]
 8013248:	61da      	str	r2, [r3, #28]
}
 801324a:	3710      	adds	r7, #16
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}
 8013250:	0801ac38 	.word	0x0801ac38
 8013254:	0801af6c 	.word	0x0801af6c
 8013258:	0801ac8c 	.word	0x0801ac8c

0801325c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b084      	sub	sp, #16
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();
 8013264:	f7f3 f846 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d107      	bne.n	801327e <udp_remove+0x22>
 801326e:	4b19      	ldr	r3, [pc, #100]	@ (80132d4 <udp_remove+0x78>)
 8013270:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8013274:	4918      	ldr	r1, [pc, #96]	@ (80132d8 <udp_remove+0x7c>)
 8013276:	4819      	ldr	r0, [pc, #100]	@ (80132dc <udp_remove+0x80>)
 8013278:	f004 fc1e 	bl	8017ab8 <iprintf>
 801327c:	e026      	b.n	80132cc <udp_remove+0x70>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801327e:	4b18      	ldr	r3, [pc, #96]	@ (80132e0 <udp_remove+0x84>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	687a      	ldr	r2, [r7, #4]
 8013284:	429a      	cmp	r2, r3
 8013286:	d105      	bne.n	8013294 <udp_remove+0x38>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013288:	4b15      	ldr	r3, [pc, #84]	@ (80132e0 <udp_remove+0x84>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	68db      	ldr	r3, [r3, #12]
 801328e:	4a14      	ldr	r2, [pc, #80]	@ (80132e0 <udp_remove+0x84>)
 8013290:	6013      	str	r3, [r2, #0]
 8013292:	e017      	b.n	80132c4 <udp_remove+0x68>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013294:	4b12      	ldr	r3, [pc, #72]	@ (80132e0 <udp_remove+0x84>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	60fb      	str	r3, [r7, #12]
 801329a:	e010      	b.n	80132be <udp_remove+0x62>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	68db      	ldr	r3, [r3, #12]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d009      	beq.n	80132b8 <udp_remove+0x5c>
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	68db      	ldr	r3, [r3, #12]
 80132a8:	687a      	ldr	r2, [r7, #4]
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d104      	bne.n	80132b8 <udp_remove+0x5c>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	68da      	ldr	r2, [r3, #12]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	60da      	str	r2, [r3, #12]
        break;
 80132b6:	e005      	b.n	80132c4 <udp_remove+0x68>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	60fb      	str	r3, [r7, #12]
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d1eb      	bne.n	801329c <udp_remove+0x40>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80132c4:	6879      	ldr	r1, [r7, #4]
 80132c6:	2000      	movs	r0, #0
 80132c8:	f7f7 fe78 	bl	800afbc <memp_free>
}
 80132cc:	3710      	adds	r7, #16
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}
 80132d2:	bf00      	nop
 80132d4:	0801ac38 	.word	0x0801ac38
 80132d8:	0801af84 	.word	0x0801af84
 80132dc:	0801ac8c 	.word	0x0801ac8c
 80132e0:	240105d4 	.word	0x240105d4

080132e4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b082      	sub	sp, #8
 80132e8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 80132ea:	f7f3 f803 	bl	80062f4 <sys_check_core_locking>

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80132ee:	2000      	movs	r0, #0
 80132f0:	f7f7 fdee 	bl	800aed0 <memp_malloc>
 80132f4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d007      	beq.n	801330c <udp_new+0x28>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80132fc:	2220      	movs	r2, #32
 80132fe:	2100      	movs	r1, #0
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f004 fc3e 	bl	8017b82 <memset>
    pcb->ttl = UDP_TTL;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	22ff      	movs	r2, #255	@ 0xff
 801330a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801330c:	687b      	ldr	r3, [r7, #4]
}
 801330e:	4618      	mov	r0, r3
 8013310:	3708      	adds	r7, #8
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
	...

08013318 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013318:	b480      	push	{r7}
 801331a:	b085      	sub	sp, #20
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d01e      	beq.n	8013366 <udp_netif_ip_addr_changed+0x4e>
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d01a      	beq.n	8013366 <udp_netif_ip_addr_changed+0x4e>
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d017      	beq.n	8013366 <udp_netif_ip_addr_changed+0x4e>
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d013      	beq.n	8013366 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801333e:	4b0d      	ldr	r3, [pc, #52]	@ (8013374 <udp_netif_ip_addr_changed+0x5c>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	60fb      	str	r3, [r7, #12]
 8013344:	e00c      	b.n	8013360 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	681a      	ldr	r2, [r3, #0]
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	429a      	cmp	r2, r3
 8013350:	d103      	bne.n	801335a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	681a      	ldr	r2, [r3, #0]
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	68db      	ldr	r3, [r3, #12]
 801335e:	60fb      	str	r3, [r7, #12]
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d1ef      	bne.n	8013346 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013366:	bf00      	nop
 8013368:	3714      	adds	r7, #20
 801336a:	46bd      	mov	sp, r7
 801336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013370:	4770      	bx	lr
 8013372:	bf00      	nop
 8013374:	240105d4 	.word	0x240105d4

08013378 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801337c:	4b20      	ldr	r3, [pc, #128]	@ (8013400 <dhcp_inc_pcb_refcount+0x88>)
 801337e:	781b      	ldrb	r3, [r3, #0]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d133      	bne.n	80133ec <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013384:	4b1f      	ldr	r3, [pc, #124]	@ (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d005      	beq.n	8013398 <dhcp_inc_pcb_refcount+0x20>
 801338c:	4b1e      	ldr	r3, [pc, #120]	@ (8013408 <dhcp_inc_pcb_refcount+0x90>)
 801338e:	22e5      	movs	r2, #229	@ 0xe5
 8013390:	491e      	ldr	r1, [pc, #120]	@ (801340c <dhcp_inc_pcb_refcount+0x94>)
 8013392:	481f      	ldr	r0, [pc, #124]	@ (8013410 <dhcp_inc_pcb_refcount+0x98>)
 8013394:	f004 fb90 	bl	8017ab8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013398:	f7ff ffa4 	bl	80132e4 <udp_new>
 801339c:	4603      	mov	r3, r0
 801339e:	4a19      	ldr	r2, [pc, #100]	@ (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 80133a0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80133a2:	4b18      	ldr	r3, [pc, #96]	@ (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d102      	bne.n	80133b0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80133aa:	f04f 33ff 	mov.w	r3, #4294967295
 80133ae:	e024      	b.n	80133fa <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80133b0:	4b14      	ldr	r3, [pc, #80]	@ (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	7a5a      	ldrb	r2, [r3, #9]
 80133b6:	4b13      	ldr	r3, [pc, #76]	@ (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f042 0220 	orr.w	r2, r2, #32
 80133be:	b2d2      	uxtb	r2, r2
 80133c0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80133c2:	4b10      	ldr	r3, [pc, #64]	@ (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	2244      	movs	r2, #68	@ 0x44
 80133c8:	4912      	ldr	r1, [pc, #72]	@ (8013414 <dhcp_inc_pcb_refcount+0x9c>)
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7ff fe2a 	bl	8013024 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80133d0:	4b0c      	ldr	r3, [pc, #48]	@ (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 80133d2:	681b      	ldr	r3, [r3, #0]
 80133d4:	2243      	movs	r2, #67	@ 0x43
 80133d6:	490f      	ldr	r1, [pc, #60]	@ (8013414 <dhcp_inc_pcb_refcount+0x9c>)
 80133d8:	4618      	mov	r0, r3
 80133da:	f7ff fead 	bl	8013138 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80133de:	4b09      	ldr	r3, [pc, #36]	@ (8013404 <dhcp_inc_pcb_refcount+0x8c>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	2200      	movs	r2, #0
 80133e4:	490c      	ldr	r1, [pc, #48]	@ (8013418 <dhcp_inc_pcb_refcount+0xa0>)
 80133e6:	4618      	mov	r0, r3
 80133e8:	f7ff ff16 	bl	8013218 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80133ec:	4b04      	ldr	r3, [pc, #16]	@ (8013400 <dhcp_inc_pcb_refcount+0x88>)
 80133ee:	781b      	ldrb	r3, [r3, #0]
 80133f0:	3301      	adds	r3, #1
 80133f2:	b2da      	uxtb	r2, r3
 80133f4:	4b02      	ldr	r3, [pc, #8]	@ (8013400 <dhcp_inc_pcb_refcount+0x88>)
 80133f6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80133f8:	2300      	movs	r3, #0
}
 80133fa:	4618      	mov	r0, r3
 80133fc:	bd80      	pop	{r7, pc}
 80133fe:	bf00      	nop
 8013400:	24010604 	.word	0x24010604
 8013404:	24010600 	.word	0x24010600
 8013408:	0801af9c 	.word	0x0801af9c
 801340c:	0801afd4 	.word	0x0801afd4
 8013410:	0801affc 	.word	0x0801affc
 8013414:	0801c1a8 	.word	0x0801c1a8
 8013418:	08014cb1 	.word	0x08014cb1

0801341c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013420:	4b0e      	ldr	r3, [pc, #56]	@ (801345c <dhcp_dec_pcb_refcount+0x40>)
 8013422:	781b      	ldrb	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d105      	bne.n	8013434 <dhcp_dec_pcb_refcount+0x18>
 8013428:	4b0d      	ldr	r3, [pc, #52]	@ (8013460 <dhcp_dec_pcb_refcount+0x44>)
 801342a:	22ff      	movs	r2, #255	@ 0xff
 801342c:	490d      	ldr	r1, [pc, #52]	@ (8013464 <dhcp_dec_pcb_refcount+0x48>)
 801342e:	480e      	ldr	r0, [pc, #56]	@ (8013468 <dhcp_dec_pcb_refcount+0x4c>)
 8013430:	f004 fb42 	bl	8017ab8 <iprintf>
  dhcp_pcb_refcount--;
 8013434:	4b09      	ldr	r3, [pc, #36]	@ (801345c <dhcp_dec_pcb_refcount+0x40>)
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	3b01      	subs	r3, #1
 801343a:	b2da      	uxtb	r2, r3
 801343c:	4b07      	ldr	r3, [pc, #28]	@ (801345c <dhcp_dec_pcb_refcount+0x40>)
 801343e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013440:	4b06      	ldr	r3, [pc, #24]	@ (801345c <dhcp_dec_pcb_refcount+0x40>)
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d107      	bne.n	8013458 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013448:	4b08      	ldr	r3, [pc, #32]	@ (801346c <dhcp_dec_pcb_refcount+0x50>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	4618      	mov	r0, r3
 801344e:	f7ff ff05 	bl	801325c <udp_remove>
    dhcp_pcb = NULL;
 8013452:	4b06      	ldr	r3, [pc, #24]	@ (801346c <dhcp_dec_pcb_refcount+0x50>)
 8013454:	2200      	movs	r2, #0
 8013456:	601a      	str	r2, [r3, #0]
  }
}
 8013458:	bf00      	nop
 801345a:	bd80      	pop	{r7, pc}
 801345c:	24010604 	.word	0x24010604
 8013460:	0801af9c 	.word	0x0801af9c
 8013464:	0801b024 	.word	0x0801b024
 8013468:	0801affc 	.word	0x0801affc
 801346c:	24010600 	.word	0x24010600

08013470 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b084      	sub	sp, #16
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801347c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801347e:	210c      	movs	r1, #12
 8013480:	68f8      	ldr	r0, [r7, #12]
 8013482:	f001 f857 	bl	8014534 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013486:	4b06      	ldr	r3, [pc, #24]	@ (80134a0 <dhcp_handle_nak+0x30>)
 8013488:	4a05      	ldr	r2, [pc, #20]	@ (80134a0 <dhcp_handle_nak+0x30>)
 801348a:	4905      	ldr	r1, [pc, #20]	@ (80134a0 <dhcp_handle_nak+0x30>)
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f7f7 ff39 	bl	800b304 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013492:	6878      	ldr	r0, [r7, #4]
 8013494:	f000 fc4c 	bl	8013d30 <dhcp_discover>
}
 8013498:	bf00      	nop
 801349a:	3710      	adds	r7, #16
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}
 80134a0:	0801c1a8 	.word	0x0801c1a8

080134a4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b084      	sub	sp, #16
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134b0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80134b2:	2108      	movs	r1, #8
 80134b4:	68f8      	ldr	r0, [r7, #12]
 80134b6:	f001 f83d 	bl	8014534 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	331c      	adds	r3, #28
 80134be:	2200      	movs	r2, #0
 80134c0:	4619      	mov	r1, r3
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f002 fb42 	bl	8015b4c <etharp_query>
 80134c8:	4603      	mov	r3, r0
 80134ca:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	799b      	ldrb	r3, [r3, #6]
 80134d0:	2bff      	cmp	r3, #255	@ 0xff
 80134d2:	d005      	beq.n	80134e0 <dhcp_check+0x3c>
    dhcp->tries++;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	799b      	ldrb	r3, [r3, #6]
 80134d8:	3301      	adds	r3, #1
 80134da:	b2da      	uxtb	r2, r3
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80134e0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80134e4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80134e6:	893b      	ldrh	r3, [r7, #8]
 80134e8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80134ec:	4a06      	ldr	r2, [pc, #24]	@ (8013508 <dhcp_check+0x64>)
 80134ee:	fb82 1203 	smull	r1, r2, r2, r3
 80134f2:	1152      	asrs	r2, r2, #5
 80134f4:	17db      	asrs	r3, r3, #31
 80134f6:	1ad3      	subs	r3, r2, r3
 80134f8:	b29a      	uxth	r2, r3
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80134fe:	bf00      	nop
 8013500:	3710      	adds	r7, #16
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}
 8013506:	bf00      	nop
 8013508:	10624dd3 	.word	0x10624dd3

0801350c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b084      	sub	sp, #16
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801351a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801351c:	4b0c      	ldr	r3, [pc, #48]	@ (8013550 <dhcp_handle_offer+0x44>)
 801351e:	789b      	ldrb	r3, [r3, #2]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d011      	beq.n	8013548 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	2200      	movs	r2, #0
 8013528:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801352a:	4b0a      	ldr	r3, [pc, #40]	@ (8013554 <dhcp_handle_offer+0x48>)
 801352c:	689b      	ldr	r3, [r3, #8]
 801352e:	4618      	mov	r0, r3
 8013530:	f7f6 ff65 	bl	800a3fe <lwip_htonl>
 8013534:	4602      	mov	r2, r0
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	691a      	ldr	r2, [r3, #16]
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013542:	6878      	ldr	r0, [r7, #4]
 8013544:	f000 f808 	bl	8013558 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013548:	bf00      	nop
 801354a:	3710      	adds	r7, #16
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}
 8013550:	240105f8 	.word	0x240105f8
 8013554:	240105d8 	.word	0x240105d8

08013558 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013558:	b5b0      	push	{r4, r5, r7, lr}
 801355a:	b08a      	sub	sp, #40	@ 0x28
 801355c:	af02      	add	r7, sp, #8
 801355e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d109      	bne.n	801357a <dhcp_select+0x22>
 8013566:	4b71      	ldr	r3, [pc, #452]	@ (801372c <dhcp_select+0x1d4>)
 8013568:	f240 1277 	movw	r2, #375	@ 0x177
 801356c:	4970      	ldr	r1, [pc, #448]	@ (8013730 <dhcp_select+0x1d8>)
 801356e:	4871      	ldr	r0, [pc, #452]	@ (8013734 <dhcp_select+0x1dc>)
 8013570:	f004 faa2 	bl	8017ab8 <iprintf>
 8013574:	f06f 030f 	mvn.w	r3, #15
 8013578:	e0d3      	b.n	8013722 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801357e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013580:	69bb      	ldr	r3, [r7, #24]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d109      	bne.n	801359a <dhcp_select+0x42>
 8013586:	4b69      	ldr	r3, [pc, #420]	@ (801372c <dhcp_select+0x1d4>)
 8013588:	f240 1279 	movw	r2, #377	@ 0x179
 801358c:	496a      	ldr	r1, [pc, #424]	@ (8013738 <dhcp_select+0x1e0>)
 801358e:	4869      	ldr	r0, [pc, #420]	@ (8013734 <dhcp_select+0x1dc>)
 8013590:	f004 fa92 	bl	8017ab8 <iprintf>
 8013594:	f06f 0305 	mvn.w	r3, #5
 8013598:	e0c3      	b.n	8013722 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801359a:	2101      	movs	r1, #1
 801359c:	69b8      	ldr	r0, [r7, #24]
 801359e:	f000 ffc9 	bl	8014534 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80135a2:	f107 030c 	add.w	r3, r7, #12
 80135a6:	2203      	movs	r2, #3
 80135a8:	69b9      	ldr	r1, [r7, #24]
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f001 fc4e 	bl	8014e4c <dhcp_create_msg>
 80135b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80135b2:	697b      	ldr	r3, [r7, #20]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	f000 8085 	beq.w	80136c4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	685b      	ldr	r3, [r3, #4]
 80135be:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80135c0:	89b8      	ldrh	r0, [r7, #12]
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80135c8:	2302      	movs	r3, #2
 80135ca:	2239      	movs	r2, #57	@ 0x39
 80135cc:	f000 ffcc 	bl	8014568 <dhcp_option>
 80135d0:	4603      	mov	r3, r0
 80135d2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80135d4:	89b8      	ldrh	r0, [r7, #12]
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80135e0:	461a      	mov	r2, r3
 80135e2:	f001 f81b 	bl	801461c <dhcp_option_short>
 80135e6:	4603      	mov	r3, r0
 80135e8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80135ea:	89b8      	ldrh	r0, [r7, #12]
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80135f2:	2304      	movs	r3, #4
 80135f4:	2232      	movs	r2, #50	@ 0x32
 80135f6:	f000 ffb7 	bl	8014568 <dhcp_option>
 80135fa:	4603      	mov	r3, r0
 80135fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80135fe:	89bc      	ldrh	r4, [r7, #12]
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	69db      	ldr	r3, [r3, #28]
 801360a:	4618      	mov	r0, r3
 801360c:	f7f6 fef7 	bl	800a3fe <lwip_htonl>
 8013610:	4603      	mov	r3, r0
 8013612:	461a      	mov	r2, r3
 8013614:	4629      	mov	r1, r5
 8013616:	4620      	mov	r0, r4
 8013618:	f001 f832 	bl	8014680 <dhcp_option_long>
 801361c:	4603      	mov	r3, r0
 801361e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013620:	89b8      	ldrh	r0, [r7, #12]
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013628:	2304      	movs	r3, #4
 801362a:	2236      	movs	r2, #54	@ 0x36
 801362c:	f000 ff9c 	bl	8014568 <dhcp_option>
 8013630:	4603      	mov	r3, r0
 8013632:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013634:	89bc      	ldrh	r4, [r7, #12]
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801363c:	69bb      	ldr	r3, [r7, #24]
 801363e:	699b      	ldr	r3, [r3, #24]
 8013640:	4618      	mov	r0, r3
 8013642:	f7f6 fedc 	bl	800a3fe <lwip_htonl>
 8013646:	4603      	mov	r3, r0
 8013648:	461a      	mov	r2, r3
 801364a:	4629      	mov	r1, r5
 801364c:	4620      	mov	r0, r4
 801364e:	f001 f817 	bl	8014680 <dhcp_option_long>
 8013652:	4603      	mov	r3, r0
 8013654:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013656:	89b8      	ldrh	r0, [r7, #12]
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801365e:	2303      	movs	r3, #3
 8013660:	2237      	movs	r2, #55	@ 0x37
 8013662:	f000 ff81 	bl	8014568 <dhcp_option>
 8013666:	4603      	mov	r3, r0
 8013668:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801366a:	2300      	movs	r3, #0
 801366c:	77bb      	strb	r3, [r7, #30]
 801366e:	e00e      	b.n	801368e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013670:	89b8      	ldrh	r0, [r7, #12]
 8013672:	693b      	ldr	r3, [r7, #16]
 8013674:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013678:	7fbb      	ldrb	r3, [r7, #30]
 801367a:	4a30      	ldr	r2, [pc, #192]	@ (801373c <dhcp_select+0x1e4>)
 801367c:	5cd3      	ldrb	r3, [r2, r3]
 801367e:	461a      	mov	r2, r3
 8013680:	f000 ffa6 	bl	80145d0 <dhcp_option_byte>
 8013684:	4603      	mov	r3, r0
 8013686:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013688:	7fbb      	ldrb	r3, [r7, #30]
 801368a:	3301      	adds	r3, #1
 801368c:	77bb      	strb	r3, [r7, #30]
 801368e:	7fbb      	ldrb	r3, [r7, #30]
 8013690:	2b02      	cmp	r3, #2
 8013692:	d9ed      	bls.n	8013670 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013694:	89b8      	ldrh	r0, [r7, #12]
 8013696:	693b      	ldr	r3, [r7, #16]
 8013698:	33f0      	adds	r3, #240	@ 0xf0
 801369a:	697a      	ldr	r2, [r7, #20]
 801369c:	4619      	mov	r1, r3
 801369e:	f001 fcab 	bl	8014ff8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80136a2:	4b27      	ldr	r3, [pc, #156]	@ (8013740 <dhcp_select+0x1e8>)
 80136a4:	6818      	ldr	r0, [r3, #0]
 80136a6:	4b27      	ldr	r3, [pc, #156]	@ (8013744 <dhcp_select+0x1ec>)
 80136a8:	9301      	str	r3, [sp, #4]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	9300      	str	r3, [sp, #0]
 80136ae:	2343      	movs	r3, #67	@ 0x43
 80136b0:	4a25      	ldr	r2, [pc, #148]	@ (8013748 <dhcp_select+0x1f0>)
 80136b2:	6979      	ldr	r1, [r7, #20]
 80136b4:	f7ff fbce 	bl	8012e54 <udp_sendto_if_src>
 80136b8:	4603      	mov	r3, r0
 80136ba:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80136bc:	6978      	ldr	r0, [r7, #20]
 80136be:	f7f8 fb39 	bl	800bd34 <pbuf_free>
 80136c2:	e001      	b.n	80136c8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80136c4:	23ff      	movs	r3, #255	@ 0xff
 80136c6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80136c8:	69bb      	ldr	r3, [r7, #24]
 80136ca:	799b      	ldrb	r3, [r3, #6]
 80136cc:	2bff      	cmp	r3, #255	@ 0xff
 80136ce:	d005      	beq.n	80136dc <dhcp_select+0x184>
    dhcp->tries++;
 80136d0:	69bb      	ldr	r3, [r7, #24]
 80136d2:	799b      	ldrb	r3, [r3, #6]
 80136d4:	3301      	adds	r3, #1
 80136d6:	b2da      	uxtb	r2, r3
 80136d8:	69bb      	ldr	r3, [r7, #24]
 80136da:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80136dc:	69bb      	ldr	r3, [r7, #24]
 80136de:	799b      	ldrb	r3, [r3, #6]
 80136e0:	2b05      	cmp	r3, #5
 80136e2:	d80d      	bhi.n	8013700 <dhcp_select+0x1a8>
 80136e4:	69bb      	ldr	r3, [r7, #24]
 80136e6:	799b      	ldrb	r3, [r3, #6]
 80136e8:	461a      	mov	r2, r3
 80136ea:	2301      	movs	r3, #1
 80136ec:	4093      	lsls	r3, r2
 80136ee:	b29b      	uxth	r3, r3
 80136f0:	461a      	mov	r2, r3
 80136f2:	0152      	lsls	r2, r2, #5
 80136f4:	1ad2      	subs	r2, r2, r3
 80136f6:	0092      	lsls	r2, r2, #2
 80136f8:	4413      	add	r3, r2
 80136fa:	00db      	lsls	r3, r3, #3
 80136fc:	b29b      	uxth	r3, r3
 80136fe:	e001      	b.n	8013704 <dhcp_select+0x1ac>
 8013700:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8013704:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013706:	89fb      	ldrh	r3, [r7, #14]
 8013708:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801370c:	4a0f      	ldr	r2, [pc, #60]	@ (801374c <dhcp_select+0x1f4>)
 801370e:	fb82 1203 	smull	r1, r2, r2, r3
 8013712:	1152      	asrs	r2, r2, #5
 8013714:	17db      	asrs	r3, r3, #31
 8013716:	1ad3      	subs	r3, r2, r3
 8013718:	b29a      	uxth	r2, r3
 801371a:	69bb      	ldr	r3, [r7, #24]
 801371c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801371e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013722:	4618      	mov	r0, r3
 8013724:	3720      	adds	r7, #32
 8013726:	46bd      	mov	sp, r7
 8013728:	bdb0      	pop	{r4, r5, r7, pc}
 801372a:	bf00      	nop
 801372c:	0801af9c 	.word	0x0801af9c
 8013730:	0801b048 	.word	0x0801b048
 8013734:	0801affc 	.word	0x0801affc
 8013738:	0801b064 	.word	0x0801b064
 801373c:	24000040 	.word	0x24000040
 8013740:	24010600 	.word	0x24010600
 8013744:	0801c1a8 	.word	0x0801c1a8
 8013748:	0801c1ac 	.word	0x0801c1ac
 801374c:	10624dd3 	.word	0x10624dd3

08013750 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b082      	sub	sp, #8
 8013754:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013756:	4b27      	ldr	r3, [pc, #156]	@ (80137f4 <dhcp_coarse_tmr+0xa4>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	607b      	str	r3, [r7, #4]
 801375c:	e042      	b.n	80137e4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013762:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d039      	beq.n	80137de <dhcp_coarse_tmr+0x8e>
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	795b      	ldrb	r3, [r3, #5]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d035      	beq.n	80137de <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	8a9b      	ldrh	r3, [r3, #20]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d012      	beq.n	80137a0 <dhcp_coarse_tmr+0x50>
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	8a5b      	ldrh	r3, [r3, #18]
 801377e:	3301      	adds	r3, #1
 8013780:	b29a      	uxth	r2, r3
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	825a      	strh	r2, [r3, #18]
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	8a5a      	ldrh	r2, [r3, #18]
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	8a9b      	ldrh	r3, [r3, #20]
 801378e:	429a      	cmp	r2, r3
 8013790:	d106      	bne.n	80137a0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013792:	6878      	ldr	r0, [r7, #4]
 8013794:	f000 fe32 	bl	80143fc <dhcp_release_and_stop>
        dhcp_start(netif);
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f000 f96b 	bl	8013a74 <dhcp_start>
 801379e:	e01e      	b.n	80137de <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	8a1b      	ldrh	r3, [r3, #16]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d00b      	beq.n	80137c0 <dhcp_coarse_tmr+0x70>
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	8a1b      	ldrh	r3, [r3, #16]
 80137ac:	1e5a      	subs	r2, r3, #1
 80137ae:	b291      	uxth	r1, r2
 80137b0:	683a      	ldr	r2, [r7, #0]
 80137b2:	8211      	strh	r1, [r2, #16]
 80137b4:	2b01      	cmp	r3, #1
 80137b6:	d103      	bne.n	80137c0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f000 f8c7 	bl	801394c <dhcp_t2_timeout>
 80137be:	e00e      	b.n	80137de <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	89db      	ldrh	r3, [r3, #14]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d00a      	beq.n	80137de <dhcp_coarse_tmr+0x8e>
 80137c8:	683b      	ldr	r3, [r7, #0]
 80137ca:	89db      	ldrh	r3, [r3, #14]
 80137cc:	1e5a      	subs	r2, r3, #1
 80137ce:	b291      	uxth	r1, r2
 80137d0:	683a      	ldr	r2, [r7, #0]
 80137d2:	81d1      	strh	r1, [r2, #14]
 80137d4:	2b01      	cmp	r3, #1
 80137d6:	d102      	bne.n	80137de <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f000 f888 	bl	80138ee <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	607b      	str	r3, [r7, #4]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d1b9      	bne.n	801375e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80137ea:	bf00      	nop
 80137ec:	bf00      	nop
 80137ee:	3708      	adds	r7, #8
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}
 80137f4:	2401056c 	.word	0x2401056c

080137f8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80137fe:	4b16      	ldr	r3, [pc, #88]	@ (8013858 <dhcp_fine_tmr+0x60>)
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	607b      	str	r3, [r7, #4]
 8013804:	e020      	b.n	8013848 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801380a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d017      	beq.n	8013842 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	891b      	ldrh	r3, [r3, #8]
 8013816:	2b01      	cmp	r3, #1
 8013818:	d906      	bls.n	8013828 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	891b      	ldrh	r3, [r3, #8]
 801381e:	3b01      	subs	r3, #1
 8013820:	b29a      	uxth	r2, r3
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	811a      	strh	r2, [r3, #8]
 8013826:	e00c      	b.n	8013842 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	891b      	ldrh	r3, [r3, #8]
 801382c:	2b01      	cmp	r3, #1
 801382e:	d108      	bne.n	8013842 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	891b      	ldrh	r3, [r3, #8]
 8013834:	3b01      	subs	r3, #1
 8013836:	b29a      	uxth	r2, r3
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f000 f80d 	bl	801385c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	607b      	str	r3, [r7, #4]
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d1db      	bne.n	8013806 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801384e:	bf00      	nop
 8013850:	bf00      	nop
 8013852:	3708      	adds	r7, #8
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}
 8013858:	2401056c 	.word	0x2401056c

0801385c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b084      	sub	sp, #16
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013868:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	795b      	ldrb	r3, [r3, #5]
 801386e:	2b0c      	cmp	r3, #12
 8013870:	d003      	beq.n	801387a <dhcp_timeout+0x1e>
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	795b      	ldrb	r3, [r3, #5]
 8013876:	2b06      	cmp	r3, #6
 8013878:	d103      	bne.n	8013882 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f000 fa58 	bl	8013d30 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013880:	e031      	b.n	80138e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	795b      	ldrb	r3, [r3, #5]
 8013886:	2b01      	cmp	r3, #1
 8013888:	d10e      	bne.n	80138a8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	799b      	ldrb	r3, [r3, #6]
 801388e:	2b05      	cmp	r3, #5
 8013890:	d803      	bhi.n	801389a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f7ff fe60 	bl	8013558 <dhcp_select>
}
 8013898:	e025      	b.n	80138e6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f000 fdae 	bl	80143fc <dhcp_release_and_stop>
      dhcp_start(netif);
 80138a0:	6878      	ldr	r0, [r7, #4]
 80138a2:	f000 f8e7 	bl	8013a74 <dhcp_start>
}
 80138a6:	e01e      	b.n	80138e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	795b      	ldrb	r3, [r3, #5]
 80138ac:	2b08      	cmp	r3, #8
 80138ae:	d10b      	bne.n	80138c8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	799b      	ldrb	r3, [r3, #6]
 80138b4:	2b01      	cmp	r3, #1
 80138b6:	d803      	bhi.n	80138c0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80138b8:	6878      	ldr	r0, [r7, #4]
 80138ba:	f7ff fdf3 	bl	80134a4 <dhcp_check>
}
 80138be:	e012      	b.n	80138e6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	f000 fad7 	bl	8013e74 <dhcp_bind>
}
 80138c6:	e00e      	b.n	80138e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	795b      	ldrb	r3, [r3, #5]
 80138cc:	2b03      	cmp	r3, #3
 80138ce:	d10a      	bne.n	80138e6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	799b      	ldrb	r3, [r3, #6]
 80138d4:	2b01      	cmp	r3, #1
 80138d6:	d803      	bhi.n	80138e0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f000 fcdb 	bl	8014294 <dhcp_reboot>
}
 80138de:	e002      	b.n	80138e6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f000 fa25 	bl	8013d30 <dhcp_discover>
}
 80138e6:	bf00      	nop
 80138e8:	3710      	adds	r7, #16
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bd80      	pop	{r7, pc}

080138ee <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80138ee:	b580      	push	{r7, lr}
 80138f0:	b084      	sub	sp, #16
 80138f2:	af00      	add	r7, sp, #0
 80138f4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138fa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	795b      	ldrb	r3, [r3, #5]
 8013900:	2b01      	cmp	r3, #1
 8013902:	d007      	beq.n	8013914 <dhcp_t1_timeout+0x26>
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	795b      	ldrb	r3, [r3, #5]
 8013908:	2b0a      	cmp	r3, #10
 801390a:	d003      	beq.n	8013914 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013910:	2b05      	cmp	r3, #5
 8013912:	d117      	bne.n	8013944 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f000 fb87 	bl	8014028 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	899b      	ldrh	r3, [r3, #12]
 801391e:	461a      	mov	r2, r3
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	8a5b      	ldrh	r3, [r3, #18]
 8013924:	1ad3      	subs	r3, r2, r3
 8013926:	2b01      	cmp	r3, #1
 8013928:	dd0c      	ble.n	8013944 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	899b      	ldrh	r3, [r3, #12]
 801392e:	461a      	mov	r2, r3
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	8a5b      	ldrh	r3, [r3, #18]
 8013934:	1ad3      	subs	r3, r2, r3
 8013936:	2b00      	cmp	r3, #0
 8013938:	da00      	bge.n	801393c <dhcp_t1_timeout+0x4e>
 801393a:	3301      	adds	r3, #1
 801393c:	105b      	asrs	r3, r3, #1
 801393e:	b29a      	uxth	r2, r3
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013944:	bf00      	nop
 8013946:	3710      	adds	r7, #16
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}

0801394c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b084      	sub	sp, #16
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013958:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	795b      	ldrb	r3, [r3, #5]
 801395e:	2b01      	cmp	r3, #1
 8013960:	d00b      	beq.n	801397a <dhcp_t2_timeout+0x2e>
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	795b      	ldrb	r3, [r3, #5]
 8013966:	2b0a      	cmp	r3, #10
 8013968:	d007      	beq.n	801397a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801396e:	2b05      	cmp	r3, #5
 8013970:	d003      	beq.n	801397a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	795b      	ldrb	r3, [r3, #5]
 8013976:	2b04      	cmp	r3, #4
 8013978:	d117      	bne.n	80139aa <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801397a:	6878      	ldr	r0, [r7, #4]
 801397c:	f000 fbf0 	bl	8014160 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	8a9b      	ldrh	r3, [r3, #20]
 8013984:	461a      	mov	r2, r3
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	8a5b      	ldrh	r3, [r3, #18]
 801398a:	1ad3      	subs	r3, r2, r3
 801398c:	2b01      	cmp	r3, #1
 801398e:	dd0c      	ble.n	80139aa <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	8a9b      	ldrh	r3, [r3, #20]
 8013994:	461a      	mov	r2, r3
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	8a5b      	ldrh	r3, [r3, #18]
 801399a:	1ad3      	subs	r3, r2, r3
 801399c:	2b00      	cmp	r3, #0
 801399e:	da00      	bge.n	80139a2 <dhcp_t2_timeout+0x56>
 80139a0:	3301      	adds	r3, #1
 80139a2:	105b      	asrs	r3, r3, #1
 80139a4:	b29a      	uxth	r2, r3
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80139aa:	bf00      	nop
 80139ac:	3710      	adds	r7, #16
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}
	...

080139b4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b084      	sub	sp, #16
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
 80139bc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139c2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	2200      	movs	r2, #0
 80139c8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	2200      	movs	r2, #0
 80139ce:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80139d0:	4b26      	ldr	r3, [pc, #152]	@ (8013a6c <dhcp_handle_ack+0xb8>)
 80139d2:	78db      	ldrb	r3, [r3, #3]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d003      	beq.n	80139e0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80139d8:	4b25      	ldr	r3, [pc, #148]	@ (8013a70 <dhcp_handle_ack+0xbc>)
 80139da:	68da      	ldr	r2, [r3, #12]
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80139e0:	4b22      	ldr	r3, [pc, #136]	@ (8013a6c <dhcp_handle_ack+0xb8>)
 80139e2:	791b      	ldrb	r3, [r3, #4]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d004      	beq.n	80139f2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80139e8:	4b21      	ldr	r3, [pc, #132]	@ (8013a70 <dhcp_handle_ack+0xbc>)
 80139ea:	691a      	ldr	r2, [r3, #16]
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 80139f0:	e004      	b.n	80139fc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139f6:	085a      	lsrs	r2, r3, #1
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80139fc:	4b1b      	ldr	r3, [pc, #108]	@ (8013a6c <dhcp_handle_ack+0xb8>)
 80139fe:	795b      	ldrb	r3, [r3, #5]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d004      	beq.n	8013a0e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013a04:	4b1a      	ldr	r3, [pc, #104]	@ (8013a70 <dhcp_handle_ack+0xbc>)
 8013a06:	695a      	ldr	r2, [r3, #20]
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8013a0c:	e007      	b.n	8013a1e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013a12:	4613      	mov	r3, r2
 8013a14:	00db      	lsls	r3, r3, #3
 8013a16:	1a9b      	subs	r3, r3, r2
 8013a18:	08da      	lsrs	r2, r3, #3
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	691a      	ldr	r2, [r3, #16]
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013a26:	4b11      	ldr	r3, [pc, #68]	@ (8013a6c <dhcp_handle_ack+0xb8>)
 8013a28:	799b      	ldrb	r3, [r3, #6]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d00b      	beq.n	8013a46 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013a2e:	4b10      	ldr	r3, [pc, #64]	@ (8013a70 <dhcp_handle_ack+0xbc>)
 8013a30:	699b      	ldr	r3, [r3, #24]
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7f6 fce3 	bl	800a3fe <lwip_htonl>
 8013a38:	4602      	mov	r2, r0
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	2201      	movs	r2, #1
 8013a42:	71da      	strb	r2, [r3, #7]
 8013a44:	e002      	b.n	8013a4c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	2200      	movs	r2, #0
 8013a4a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013a4c:	4b07      	ldr	r3, [pc, #28]	@ (8013a6c <dhcp_handle_ack+0xb8>)
 8013a4e:	79db      	ldrb	r3, [r3, #7]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d007      	beq.n	8013a64 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013a54:	4b06      	ldr	r3, [pc, #24]	@ (8013a70 <dhcp_handle_ack+0xbc>)
 8013a56:	69db      	ldr	r3, [r3, #28]
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7f6 fcd0 	bl	800a3fe <lwip_htonl>
 8013a5e:	4602      	mov	r2, r0
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013a64:	bf00      	nop
 8013a66:	3710      	adds	r7, #16
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}
 8013a6c:	240105f8 	.word	0x240105f8
 8013a70:	240105d8 	.word	0x240105d8

08013a74 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
 8013a7c:	f7f2 fc3a 	bl	80062f4 <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d109      	bne.n	8013a9a <dhcp_start+0x26>
 8013a86:	4b37      	ldr	r3, [pc, #220]	@ (8013b64 <dhcp_start+0xf0>)
 8013a88:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8013a8c:	4936      	ldr	r1, [pc, #216]	@ (8013b68 <dhcp_start+0xf4>)
 8013a8e:	4837      	ldr	r0, [pc, #220]	@ (8013b6c <dhcp_start+0xf8>)
 8013a90:	f004 f812 	bl	8017ab8 <iprintf>
 8013a94:	f06f 030f 	mvn.w	r3, #15
 8013a98:	e060      	b.n	8013b5c <dhcp_start+0xe8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013aa0:	f003 0301 	and.w	r3, r3, #1
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d109      	bne.n	8013abc <dhcp_start+0x48>
 8013aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8013b64 <dhcp_start+0xf0>)
 8013aaa:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8013aae:	4930      	ldr	r1, [pc, #192]	@ (8013b70 <dhcp_start+0xfc>)
 8013ab0:	482e      	ldr	r0, [pc, #184]	@ (8013b6c <dhcp_start+0xf8>)
 8013ab2:	f004 f801 	bl	8017ab8 <iprintf>
 8013ab6:	f06f 030f 	mvn.w	r3, #15
 8013aba:	e04f      	b.n	8013b5c <dhcp_start+0xe8>
  dhcp = netif_dhcp_data(netif);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ac0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ac6:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8013aca:	d202      	bcs.n	8013ad2 <dhcp_start+0x5e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013acc:	f04f 33ff 	mov.w	r3, #4294967295
 8013ad0:	e044      	b.n	8013b5c <dhcp_start+0xe8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d10d      	bne.n	8013af4 <dhcp_start+0x80>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013ad8:	2034      	movs	r0, #52	@ 0x34
 8013ada:	f7f7 f85d 	bl	800ab98 <mem_malloc>
 8013ade:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d102      	bne.n	8013aec <dhcp_start+0x78>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8013aea:	e037      	b.n	8013b5c <dhcp_start+0xe8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	68fa      	ldr	r2, [r7, #12]
 8013af0:	625a      	str	r2, [r3, #36]	@ 0x24
 8013af2:	e005      	b.n	8013b00 <dhcp_start+0x8c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	791b      	ldrb	r3, [r3, #4]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d001      	beq.n	8013b00 <dhcp_start+0x8c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013afc:	f7ff fc8e 	bl	801341c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8013b00:	2234      	movs	r2, #52	@ 0x34
 8013b02:	2100      	movs	r1, #0
 8013b04:	68f8      	ldr	r0, [r7, #12]
 8013b06:	f004 f83c 	bl	8017b82 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013b0a:	f7ff fc35 	bl	8013378 <dhcp_inc_pcb_refcount>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d002      	beq.n	8013b1a <dhcp_start+0xa6>
    return ERR_MEM;
 8013b14:	f04f 33ff 	mov.w	r3, #4294967295
 8013b18:	e020      	b.n	8013b5c <dhcp_start+0xe8>
  }
  dhcp->pcb_allocated = 1;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	2201      	movs	r2, #1
 8013b1e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013b26:	f003 0304 	and.w	r3, r3, #4
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d105      	bne.n	8013b3a <dhcp_start+0xc6>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8013b2e:	2102      	movs	r1, #2
 8013b30:	68f8      	ldr	r0, [r7, #12]
 8013b32:	f000 fcff 	bl	8014534 <dhcp_set_state>
    return ERR_OK;
 8013b36:	2300      	movs	r3, #0
 8013b38:	e010      	b.n	8013b5c <dhcp_start+0xe8>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013b3a:	6878      	ldr	r0, [r7, #4]
 8013b3c:	f000 f8f8 	bl	8013d30 <dhcp_discover>
 8013b40:	4603      	mov	r3, r0
 8013b42:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013b44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d005      	beq.n	8013b58 <dhcp_start+0xe4>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013b4c:	6878      	ldr	r0, [r7, #4]
 8013b4e:	f000 fc55 	bl	80143fc <dhcp_release_and_stop>
    return ERR_MEM;
 8013b52:	f04f 33ff 	mov.w	r3, #4294967295
 8013b56:	e001      	b.n	8013b5c <dhcp_start+0xe8>
  }
  return result;
 8013b58:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	3710      	adds	r7, #16
 8013b60:	46bd      	mov	sp, r7
 8013b62:	bd80      	pop	{r7, pc}
 8013b64:	0801af9c 	.word	0x0801af9c
 8013b68:	0801b080 	.word	0x0801b080
 8013b6c:	0801affc 	.word	0x0801affc
 8013b70:	0801b0c4 	.word	0x0801b0c4

08013b74 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b084      	sub	sp, #16
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b80:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d025      	beq.n	8013bd4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	795b      	ldrb	r3, [r3, #5]
 8013b8c:	2b0a      	cmp	r3, #10
 8013b8e:	d008      	beq.n	8013ba2 <dhcp_network_changed+0x2e>
 8013b90:	2b0a      	cmp	r3, #10
 8013b92:	dc0d      	bgt.n	8013bb0 <dhcp_network_changed+0x3c>
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d01f      	beq.n	8013bd8 <dhcp_network_changed+0x64>
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	db09      	blt.n	8013bb0 <dhcp_network_changed+0x3c>
 8013b9c:	3b03      	subs	r3, #3
 8013b9e:	2b02      	cmp	r3, #2
 8013ba0:	d806      	bhi.n	8013bb0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f000 fb73 	bl	8014294 <dhcp_reboot>
      break;
 8013bae:	e014      	b.n	8013bda <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	795b      	ldrb	r3, [r3, #5]
 8013bb4:	2b0c      	cmp	r3, #12
 8013bb6:	d906      	bls.n	8013bc6 <dhcp_network_changed+0x52>
 8013bb8:	4b09      	ldr	r3, [pc, #36]	@ (8013be0 <dhcp_network_changed+0x6c>)
 8013bba:	f240 326d 	movw	r2, #877	@ 0x36d
 8013bbe:	4909      	ldr	r1, [pc, #36]	@ (8013be4 <dhcp_network_changed+0x70>)
 8013bc0:	4809      	ldr	r0, [pc, #36]	@ (8013be8 <dhcp_network_changed+0x74>)
 8013bc2:	f003 ff79 	bl	8017ab8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	2200      	movs	r2, #0
 8013bca:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	f000 f8af 	bl	8013d30 <dhcp_discover>
      break;
 8013bd2:	e002      	b.n	8013bda <dhcp_network_changed+0x66>
    return;
 8013bd4:	bf00      	nop
 8013bd6:	e000      	b.n	8013bda <dhcp_network_changed+0x66>
      break;
 8013bd8:	bf00      	nop
  }
}
 8013bda:	3710      	adds	r7, #16
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}
 8013be0:	0801af9c 	.word	0x0801af9c
 8013be4:	0801b0e8 	.word	0x0801b0e8
 8013be8:	0801affc 	.word	0x0801affc

08013bec <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b084      	sub	sp, #16
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d107      	bne.n	8013c0c <dhcp_arp_reply+0x20>
 8013bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8013c38 <dhcp_arp_reply+0x4c>)
 8013bfe:	f240 328b 	movw	r2, #907	@ 0x38b
 8013c02:	490e      	ldr	r1, [pc, #56]	@ (8013c3c <dhcp_arp_reply+0x50>)
 8013c04:	480e      	ldr	r0, [pc, #56]	@ (8013c40 <dhcp_arp_reply+0x54>)
 8013c06:	f003 ff57 	bl	8017ab8 <iprintf>
 8013c0a:	e012      	b.n	8013c32 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c10:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d00c      	beq.n	8013c32 <dhcp_arp_reply+0x46>
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	795b      	ldrb	r3, [r3, #5]
 8013c1c:	2b08      	cmp	r3, #8
 8013c1e:	d108      	bne.n	8013c32 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	681a      	ldr	r2, [r3, #0]
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	69db      	ldr	r3, [r3, #28]
 8013c28:	429a      	cmp	r2, r3
 8013c2a:	d102      	bne.n	8013c32 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013c2c:	6878      	ldr	r0, [r7, #4]
 8013c2e:	f000 f809 	bl	8013c44 <dhcp_decline>
    }
  }
}
 8013c32:	3710      	adds	r7, #16
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}
 8013c38:	0801af9c 	.word	0x0801af9c
 8013c3c:	0801b080 	.word	0x0801b080
 8013c40:	0801affc 	.word	0x0801affc

08013c44 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013c44:	b5b0      	push	{r4, r5, r7, lr}
 8013c46:	b08a      	sub	sp, #40	@ 0x28
 8013c48:	af02      	add	r7, sp, #8
 8013c4a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c50:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013c52:	210c      	movs	r1, #12
 8013c54:	69b8      	ldr	r0, [r7, #24]
 8013c56:	f000 fc6d 	bl	8014534 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013c5a:	f107 030c 	add.w	r3, r7, #12
 8013c5e:	2204      	movs	r2, #4
 8013c60:	69b9      	ldr	r1, [r7, #24]
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	f001 f8f2 	bl	8014e4c <dhcp_create_msg>
 8013c68:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013c6a:	697b      	ldr	r3, [r7, #20]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d035      	beq.n	8013cdc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013c70:	697b      	ldr	r3, [r7, #20]
 8013c72:	685b      	ldr	r3, [r3, #4]
 8013c74:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013c76:	89b8      	ldrh	r0, [r7, #12]
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013c7e:	2304      	movs	r3, #4
 8013c80:	2232      	movs	r2, #50	@ 0x32
 8013c82:	f000 fc71 	bl	8014568 <dhcp_option>
 8013c86:	4603      	mov	r3, r0
 8013c88:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013c8a:	89bc      	ldrh	r4, [r7, #12]
 8013c8c:	693b      	ldr	r3, [r7, #16]
 8013c8e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013c92:	69bb      	ldr	r3, [r7, #24]
 8013c94:	69db      	ldr	r3, [r3, #28]
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7f6 fbb1 	bl	800a3fe <lwip_htonl>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	461a      	mov	r2, r3
 8013ca0:	4629      	mov	r1, r5
 8013ca2:	4620      	mov	r0, r4
 8013ca4:	f000 fcec 	bl	8014680 <dhcp_option_long>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013cac:	89b8      	ldrh	r0, [r7, #12]
 8013cae:	693b      	ldr	r3, [r7, #16]
 8013cb0:	33f0      	adds	r3, #240	@ 0xf0
 8013cb2:	697a      	ldr	r2, [r7, #20]
 8013cb4:	4619      	mov	r1, r3
 8013cb6:	f001 f99f 	bl	8014ff8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013cba:	4b19      	ldr	r3, [pc, #100]	@ (8013d20 <dhcp_decline+0xdc>)
 8013cbc:	6818      	ldr	r0, [r3, #0]
 8013cbe:	4b19      	ldr	r3, [pc, #100]	@ (8013d24 <dhcp_decline+0xe0>)
 8013cc0:	9301      	str	r3, [sp, #4]
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	9300      	str	r3, [sp, #0]
 8013cc6:	2343      	movs	r3, #67	@ 0x43
 8013cc8:	4a17      	ldr	r2, [pc, #92]	@ (8013d28 <dhcp_decline+0xe4>)
 8013cca:	6979      	ldr	r1, [r7, #20]
 8013ccc:	f7ff f8c2 	bl	8012e54 <udp_sendto_if_src>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013cd4:	6978      	ldr	r0, [r7, #20]
 8013cd6:	f7f8 f82d 	bl	800bd34 <pbuf_free>
 8013cda:	e001      	b.n	8013ce0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013cdc:	23ff      	movs	r3, #255	@ 0xff
 8013cde:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013ce0:	69bb      	ldr	r3, [r7, #24]
 8013ce2:	799b      	ldrb	r3, [r3, #6]
 8013ce4:	2bff      	cmp	r3, #255	@ 0xff
 8013ce6:	d005      	beq.n	8013cf4 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013ce8:	69bb      	ldr	r3, [r7, #24]
 8013cea:	799b      	ldrb	r3, [r3, #6]
 8013cec:	3301      	adds	r3, #1
 8013cee:	b2da      	uxtb	r2, r3
 8013cf0:	69bb      	ldr	r3, [r7, #24]
 8013cf2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013cf4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013cf8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013cfa:	89fb      	ldrh	r3, [r7, #14]
 8013cfc:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013d00:	4a0a      	ldr	r2, [pc, #40]	@ (8013d2c <dhcp_decline+0xe8>)
 8013d02:	fb82 1203 	smull	r1, r2, r2, r3
 8013d06:	1152      	asrs	r2, r2, #5
 8013d08:	17db      	asrs	r3, r3, #31
 8013d0a:	1ad3      	subs	r3, r2, r3
 8013d0c:	b29a      	uxth	r2, r3
 8013d0e:	69bb      	ldr	r3, [r7, #24]
 8013d10:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013d12:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	3720      	adds	r7, #32
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8013d1e:	bf00      	nop
 8013d20:	24010600 	.word	0x24010600
 8013d24:	0801c1a8 	.word	0x0801c1a8
 8013d28:	0801c1ac 	.word	0x0801c1ac
 8013d2c:	10624dd3 	.word	0x10624dd3

08013d30 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b08a      	sub	sp, #40	@ 0x28
 8013d34:	af02      	add	r7, sp, #8
 8013d36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d3c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013d42:	69bb      	ldr	r3, [r7, #24]
 8013d44:	2200      	movs	r2, #0
 8013d46:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013d48:	2106      	movs	r1, #6
 8013d4a:	69b8      	ldr	r0, [r7, #24]
 8013d4c:	f000 fbf2 	bl	8014534 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8013d50:	f107 0308 	add.w	r3, r7, #8
 8013d54:	2201      	movs	r2, #1
 8013d56:	69b9      	ldr	r1, [r7, #24]
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f001 f877 	bl	8014e4c <dhcp_create_msg>
 8013d5e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d04b      	beq.n	8013dfe <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013d66:	693b      	ldr	r3, [r7, #16]
 8013d68:	685b      	ldr	r3, [r3, #4]
 8013d6a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013d6c:	8938      	ldrh	r0, [r7, #8]
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013d74:	2302      	movs	r3, #2
 8013d76:	2239      	movs	r2, #57	@ 0x39
 8013d78:	f000 fbf6 	bl	8014568 <dhcp_option>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013d80:	8938      	ldrh	r0, [r7, #8]
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d8c:	461a      	mov	r2, r3
 8013d8e:	f000 fc45 	bl	801461c <dhcp_option_short>
 8013d92:	4603      	mov	r3, r0
 8013d94:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013d96:	8938      	ldrh	r0, [r7, #8]
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013d9e:	2303      	movs	r3, #3
 8013da0:	2237      	movs	r2, #55	@ 0x37
 8013da2:	f000 fbe1 	bl	8014568 <dhcp_option>
 8013da6:	4603      	mov	r3, r0
 8013da8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013daa:	2300      	movs	r3, #0
 8013dac:	77fb      	strb	r3, [r7, #31]
 8013dae:	e00e      	b.n	8013dce <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013db0:	8938      	ldrh	r0, [r7, #8]
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013db8:	7ffb      	ldrb	r3, [r7, #31]
 8013dba:	4a29      	ldr	r2, [pc, #164]	@ (8013e60 <dhcp_discover+0x130>)
 8013dbc:	5cd3      	ldrb	r3, [r2, r3]
 8013dbe:	461a      	mov	r2, r3
 8013dc0:	f000 fc06 	bl	80145d0 <dhcp_option_byte>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013dc8:	7ffb      	ldrb	r3, [r7, #31]
 8013dca:	3301      	adds	r3, #1
 8013dcc:	77fb      	strb	r3, [r7, #31]
 8013dce:	7ffb      	ldrb	r3, [r7, #31]
 8013dd0:	2b02      	cmp	r3, #2
 8013dd2:	d9ed      	bls.n	8013db0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013dd4:	8938      	ldrh	r0, [r7, #8]
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	33f0      	adds	r3, #240	@ 0xf0
 8013dda:	693a      	ldr	r2, [r7, #16]
 8013ddc:	4619      	mov	r1, r3
 8013dde:	f001 f90b 	bl	8014ff8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013de2:	4b20      	ldr	r3, [pc, #128]	@ (8013e64 <dhcp_discover+0x134>)
 8013de4:	6818      	ldr	r0, [r3, #0]
 8013de6:	4b20      	ldr	r3, [pc, #128]	@ (8013e68 <dhcp_discover+0x138>)
 8013de8:	9301      	str	r3, [sp, #4]
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	9300      	str	r3, [sp, #0]
 8013dee:	2343      	movs	r3, #67	@ 0x43
 8013df0:	4a1e      	ldr	r2, [pc, #120]	@ (8013e6c <dhcp_discover+0x13c>)
 8013df2:	6939      	ldr	r1, [r7, #16]
 8013df4:	f7ff f82e 	bl	8012e54 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8013df8:	6938      	ldr	r0, [r7, #16]
 8013dfa:	f7f7 ff9b 	bl	800bd34 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013dfe:	69bb      	ldr	r3, [r7, #24]
 8013e00:	799b      	ldrb	r3, [r3, #6]
 8013e02:	2bff      	cmp	r3, #255	@ 0xff
 8013e04:	d005      	beq.n	8013e12 <dhcp_discover+0xe2>
    dhcp->tries++;
 8013e06:	69bb      	ldr	r3, [r7, #24]
 8013e08:	799b      	ldrb	r3, [r3, #6]
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	b2da      	uxtb	r2, r3
 8013e0e:	69bb      	ldr	r3, [r7, #24]
 8013e10:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013e12:	69bb      	ldr	r3, [r7, #24]
 8013e14:	799b      	ldrb	r3, [r3, #6]
 8013e16:	2b05      	cmp	r3, #5
 8013e18:	d80d      	bhi.n	8013e36 <dhcp_discover+0x106>
 8013e1a:	69bb      	ldr	r3, [r7, #24]
 8013e1c:	799b      	ldrb	r3, [r3, #6]
 8013e1e:	461a      	mov	r2, r3
 8013e20:	2301      	movs	r3, #1
 8013e22:	4093      	lsls	r3, r2
 8013e24:	b29b      	uxth	r3, r3
 8013e26:	461a      	mov	r2, r3
 8013e28:	0152      	lsls	r2, r2, #5
 8013e2a:	1ad2      	subs	r2, r2, r3
 8013e2c:	0092      	lsls	r2, r2, #2
 8013e2e:	4413      	add	r3, r2
 8013e30:	00db      	lsls	r3, r3, #3
 8013e32:	b29b      	uxth	r3, r3
 8013e34:	e001      	b.n	8013e3a <dhcp_discover+0x10a>
 8013e36:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8013e3a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013e3c:	897b      	ldrh	r3, [r7, #10]
 8013e3e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013e42:	4a0b      	ldr	r2, [pc, #44]	@ (8013e70 <dhcp_discover+0x140>)
 8013e44:	fb82 1203 	smull	r1, r2, r2, r3
 8013e48:	1152      	asrs	r2, r2, #5
 8013e4a:	17db      	asrs	r3, r3, #31
 8013e4c:	1ad3      	subs	r3, r2, r3
 8013e4e:	b29a      	uxth	r2, r3
 8013e50:	69bb      	ldr	r3, [r7, #24]
 8013e52:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013e54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	3720      	adds	r7, #32
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}
 8013e60:	24000040 	.word	0x24000040
 8013e64:	24010600 	.word	0x24010600
 8013e68:	0801c1a8 	.word	0x0801c1a8
 8013e6c:	0801c1ac 	.word	0x0801c1ac
 8013e70:	10624dd3 	.word	0x10624dd3

08013e74 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b088      	sub	sp, #32
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d107      	bne.n	8013e92 <dhcp_bind+0x1e>
 8013e82:	4b64      	ldr	r3, [pc, #400]	@ (8014014 <dhcp_bind+0x1a0>)
 8013e84:	f240 4215 	movw	r2, #1045	@ 0x415
 8013e88:	4963      	ldr	r1, [pc, #396]	@ (8014018 <dhcp_bind+0x1a4>)
 8013e8a:	4864      	ldr	r0, [pc, #400]	@ (801401c <dhcp_bind+0x1a8>)
 8013e8c:	f003 fe14 	bl	8017ab8 <iprintf>
 8013e90:	e0bc      	b.n	801400c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e96:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013e98:	69bb      	ldr	r3, [r7, #24]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d107      	bne.n	8013eae <dhcp_bind+0x3a>
 8013e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8014014 <dhcp_bind+0x1a0>)
 8013ea0:	f240 4217 	movw	r2, #1047	@ 0x417
 8013ea4:	495e      	ldr	r1, [pc, #376]	@ (8014020 <dhcp_bind+0x1ac>)
 8013ea6:	485d      	ldr	r0, [pc, #372]	@ (801401c <dhcp_bind+0x1a8>)
 8013ea8:	f003 fe06 	bl	8017ab8 <iprintf>
 8013eac:	e0ae      	b.n	801400c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8013eae:	69bb      	ldr	r3, [r7, #24]
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013eb4:	69bb      	ldr	r3, [r7, #24]
 8013eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ebc:	d019      	beq.n	8013ef2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013ebe:	69bb      	ldr	r3, [r7, #24]
 8013ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ec2:	331e      	adds	r3, #30
 8013ec4:	4a57      	ldr	r2, [pc, #348]	@ (8014024 <dhcp_bind+0x1b0>)
 8013ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8013eca:	095b      	lsrs	r3, r3, #5
 8013ecc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013ece:	69fb      	ldr	r3, [r7, #28]
 8013ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013ed4:	d302      	bcc.n	8013edc <dhcp_bind+0x68>
      timeout = 0xffff;
 8013ed6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013eda:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8013edc:	69fb      	ldr	r3, [r7, #28]
 8013ede:	b29a      	uxth	r2, r3
 8013ee0:	69bb      	ldr	r3, [r7, #24]
 8013ee2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8013ee4:	69bb      	ldr	r3, [r7, #24]
 8013ee6:	8a9b      	ldrh	r3, [r3, #20]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d102      	bne.n	8013ef2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8013eec:	69bb      	ldr	r3, [r7, #24]
 8013eee:	2201      	movs	r2, #1
 8013ef0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8013ef2:	69bb      	ldr	r3, [r7, #24]
 8013ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013efa:	d01d      	beq.n	8013f38 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013efc:	69bb      	ldr	r3, [r7, #24]
 8013efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f00:	331e      	adds	r3, #30
 8013f02:	4a48      	ldr	r2, [pc, #288]	@ (8014024 <dhcp_bind+0x1b0>)
 8013f04:	fba2 2303 	umull	r2, r3, r2, r3
 8013f08:	095b      	lsrs	r3, r3, #5
 8013f0a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013f0c:	69fb      	ldr	r3, [r7, #28]
 8013f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f12:	d302      	bcc.n	8013f1a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8013f14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013f18:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8013f1a:	69fb      	ldr	r3, [r7, #28]
 8013f1c:	b29a      	uxth	r2, r3
 8013f1e:	69bb      	ldr	r3, [r7, #24]
 8013f20:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8013f22:	69bb      	ldr	r3, [r7, #24]
 8013f24:	895b      	ldrh	r3, [r3, #10]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d102      	bne.n	8013f30 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8013f2a:	69bb      	ldr	r3, [r7, #24]
 8013f2c:	2201      	movs	r2, #1
 8013f2e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8013f30:	69bb      	ldr	r3, [r7, #24]
 8013f32:	895a      	ldrh	r2, [r3, #10]
 8013f34:	69bb      	ldr	r3, [r7, #24]
 8013f36:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013f38:	69bb      	ldr	r3, [r7, #24]
 8013f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f40:	d01d      	beq.n	8013f7e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013f42:	69bb      	ldr	r3, [r7, #24]
 8013f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f46:	331e      	adds	r3, #30
 8013f48:	4a36      	ldr	r2, [pc, #216]	@ (8014024 <dhcp_bind+0x1b0>)
 8013f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8013f4e:	095b      	lsrs	r3, r3, #5
 8013f50:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013f52:	69fb      	ldr	r3, [r7, #28]
 8013f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f58:	d302      	bcc.n	8013f60 <dhcp_bind+0xec>
      timeout = 0xffff;
 8013f5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013f5e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8013f60:	69fb      	ldr	r3, [r7, #28]
 8013f62:	b29a      	uxth	r2, r3
 8013f64:	69bb      	ldr	r3, [r7, #24]
 8013f66:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8013f68:	69bb      	ldr	r3, [r7, #24]
 8013f6a:	899b      	ldrh	r3, [r3, #12]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d102      	bne.n	8013f76 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8013f70:	69bb      	ldr	r3, [r7, #24]
 8013f72:	2201      	movs	r2, #1
 8013f74:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013f76:	69bb      	ldr	r3, [r7, #24]
 8013f78:	899a      	ldrh	r2, [r3, #12]
 8013f7a:	69bb      	ldr	r3, [r7, #24]
 8013f7c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	895a      	ldrh	r2, [r3, #10]
 8013f82:	69bb      	ldr	r3, [r7, #24]
 8013f84:	899b      	ldrh	r3, [r3, #12]
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d306      	bcc.n	8013f98 <dhcp_bind+0x124>
 8013f8a:	69bb      	ldr	r3, [r7, #24]
 8013f8c:	899b      	ldrh	r3, [r3, #12]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d002      	beq.n	8013f98 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8013f92:	69bb      	ldr	r3, [r7, #24]
 8013f94:	2200      	movs	r2, #0
 8013f96:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8013f98:	69bb      	ldr	r3, [r7, #24]
 8013f9a:	79db      	ldrb	r3, [r3, #7]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d003      	beq.n	8013fa8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8013fa0:	69bb      	ldr	r3, [r7, #24]
 8013fa2:	6a1b      	ldr	r3, [r3, #32]
 8013fa4:	613b      	str	r3, [r7, #16]
 8013fa6:	e014      	b.n	8013fd2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013fa8:	69bb      	ldr	r3, [r7, #24]
 8013faa:	331c      	adds	r3, #28
 8013fac:	781b      	ldrb	r3, [r3, #0]
 8013fae:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8013fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	db02      	blt.n	8013fbe <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013fb8:	23ff      	movs	r3, #255	@ 0xff
 8013fba:	613b      	str	r3, [r7, #16]
 8013fbc:	e009      	b.n	8013fd2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8013fbe:	7dfb      	ldrb	r3, [r7, #23]
 8013fc0:	2bbf      	cmp	r3, #191	@ 0xbf
 8013fc2:	d903      	bls.n	8013fcc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8013fc4:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8013fc8:	613b      	str	r3, [r7, #16]
 8013fca:	e002      	b.n	8013fd2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8013fcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013fd0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8013fd2:	69bb      	ldr	r3, [r7, #24]
 8013fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fd6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d108      	bne.n	8013ff0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8013fde:	69bb      	ldr	r3, [r7, #24]
 8013fe0:	69da      	ldr	r2, [r3, #28]
 8013fe2:	693b      	ldr	r3, [r7, #16]
 8013fe4:	4013      	ands	r3, r2
 8013fe6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8013fee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8013ff0:	210a      	movs	r1, #10
 8013ff2:	69b8      	ldr	r0, [r7, #24]
 8013ff4:	f000 fa9e 	bl	8014534 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013ff8:	69bb      	ldr	r3, [r7, #24]
 8013ffa:	f103 011c 	add.w	r1, r3, #28
 8013ffe:	f107 030c 	add.w	r3, r7, #12
 8014002:	f107 0210 	add.w	r2, r7, #16
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f7f7 f97c 	bl	800b304 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801400c:	3720      	adds	r7, #32
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}
 8014012:	bf00      	nop
 8014014:	0801af9c 	.word	0x0801af9c
 8014018:	0801b0fc 	.word	0x0801b0fc
 801401c:	0801affc 	.word	0x0801affc
 8014020:	0801b118 	.word	0x0801b118
 8014024:	88888889 	.word	0x88888889

08014028 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b08a      	sub	sp, #40	@ 0x28
 801402c:	af02      	add	r7, sp, #8
 801402e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014034:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
 8014036:	f7f2 f95d 	bl	80062f4 <sys_check_core_locking>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801403a:	2105      	movs	r1, #5
 801403c:	69b8      	ldr	r0, [r7, #24]
 801403e:	f000 fa79 	bl	8014534 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014042:	f107 030c 	add.w	r3, r7, #12
 8014046:	2203      	movs	r2, #3
 8014048:	69b9      	ldr	r1, [r7, #24]
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f000 fefe 	bl	8014e4c <dhcp_create_msg>
 8014050:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014052:	697b      	ldr	r3, [r7, #20]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d04e      	beq.n	80140f6 <dhcp_renew+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	685b      	ldr	r3, [r3, #4]
 801405c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801405e:	89b8      	ldrh	r0, [r7, #12]
 8014060:	693b      	ldr	r3, [r7, #16]
 8014062:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014066:	2302      	movs	r3, #2
 8014068:	2239      	movs	r2, #57	@ 0x39
 801406a:	f000 fa7d 	bl	8014568 <dhcp_option>
 801406e:	4603      	mov	r3, r0
 8014070:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014072:	89b8      	ldrh	r0, [r7, #12]
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801407e:	461a      	mov	r2, r3
 8014080:	f000 facc 	bl	801461c <dhcp_option_short>
 8014084:	4603      	mov	r3, r0
 8014086:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014088:	89b8      	ldrh	r0, [r7, #12]
 801408a:	693b      	ldr	r3, [r7, #16]
 801408c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014090:	2303      	movs	r3, #3
 8014092:	2237      	movs	r2, #55	@ 0x37
 8014094:	f000 fa68 	bl	8014568 <dhcp_option>
 8014098:	4603      	mov	r3, r0
 801409a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801409c:	2300      	movs	r3, #0
 801409e:	77bb      	strb	r3, [r7, #30]
 80140a0:	e00e      	b.n	80140c0 <dhcp_renew+0x98>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80140a2:	89b8      	ldrh	r0, [r7, #12]
 80140a4:	693b      	ldr	r3, [r7, #16]
 80140a6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80140aa:	7fbb      	ldrb	r3, [r7, #30]
 80140ac:	4a29      	ldr	r2, [pc, #164]	@ (8014154 <dhcp_renew+0x12c>)
 80140ae:	5cd3      	ldrb	r3, [r2, r3]
 80140b0:	461a      	mov	r2, r3
 80140b2:	f000 fa8d 	bl	80145d0 <dhcp_option_byte>
 80140b6:	4603      	mov	r3, r0
 80140b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80140ba:	7fbb      	ldrb	r3, [r7, #30]
 80140bc:	3301      	adds	r3, #1
 80140be:	77bb      	strb	r3, [r7, #30]
 80140c0:	7fbb      	ldrb	r3, [r7, #30]
 80140c2:	2b02      	cmp	r3, #2
 80140c4:	d9ed      	bls.n	80140a2 <dhcp_renew+0x7a>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80140c6:	89b8      	ldrh	r0, [r7, #12]
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	33f0      	adds	r3, #240	@ 0xf0
 80140cc:	697a      	ldr	r2, [r7, #20]
 80140ce:	4619      	mov	r1, r3
 80140d0:	f000 ff92 	bl	8014ff8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80140d4:	4b20      	ldr	r3, [pc, #128]	@ (8014158 <dhcp_renew+0x130>)
 80140d6:	6818      	ldr	r0, [r3, #0]
 80140d8:	69bb      	ldr	r3, [r7, #24]
 80140da:	f103 0218 	add.w	r2, r3, #24
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	9300      	str	r3, [sp, #0]
 80140e2:	2343      	movs	r3, #67	@ 0x43
 80140e4:	6979      	ldr	r1, [r7, #20]
 80140e6:	f7fe fe41 	bl	8012d6c <udp_sendto_if>
 80140ea:	4603      	mov	r3, r0
 80140ec:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80140ee:	6978      	ldr	r0, [r7, #20]
 80140f0:	f7f7 fe20 	bl	800bd34 <pbuf_free>
 80140f4:	e001      	b.n	80140fa <dhcp_renew+0xd2>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80140f6:	23ff      	movs	r3, #255	@ 0xff
 80140f8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80140fa:	69bb      	ldr	r3, [r7, #24]
 80140fc:	799b      	ldrb	r3, [r3, #6]
 80140fe:	2bff      	cmp	r3, #255	@ 0xff
 8014100:	d005      	beq.n	801410e <dhcp_renew+0xe6>
    dhcp->tries++;
 8014102:	69bb      	ldr	r3, [r7, #24]
 8014104:	799b      	ldrb	r3, [r3, #6]
 8014106:	3301      	adds	r3, #1
 8014108:	b2da      	uxtb	r2, r3
 801410a:	69bb      	ldr	r3, [r7, #24]
 801410c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801410e:	69bb      	ldr	r3, [r7, #24]
 8014110:	799b      	ldrb	r3, [r3, #6]
 8014112:	2b09      	cmp	r3, #9
 8014114:	d809      	bhi.n	801412a <dhcp_renew+0x102>
 8014116:	69bb      	ldr	r3, [r7, #24]
 8014118:	799b      	ldrb	r3, [r3, #6]
 801411a:	461a      	mov	r2, r3
 801411c:	0152      	lsls	r2, r2, #5
 801411e:	1ad2      	subs	r2, r2, r3
 8014120:	0092      	lsls	r2, r2, #2
 8014122:	4413      	add	r3, r2
 8014124:	011b      	lsls	r3, r3, #4
 8014126:	b29b      	uxth	r3, r3
 8014128:	e001      	b.n	801412e <dhcp_renew+0x106>
 801412a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801412e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014130:	89fb      	ldrh	r3, [r7, #14]
 8014132:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014136:	4a09      	ldr	r2, [pc, #36]	@ (801415c <dhcp_renew+0x134>)
 8014138:	fb82 1203 	smull	r1, r2, r2, r3
 801413c:	1152      	asrs	r2, r2, #5
 801413e:	17db      	asrs	r3, r3, #31
 8014140:	1ad3      	subs	r3, r2, r3
 8014142:	b29a      	uxth	r2, r3
 8014144:	69bb      	ldr	r3, [r7, #24]
 8014146:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014148:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801414c:	4618      	mov	r0, r3
 801414e:	3720      	adds	r7, #32
 8014150:	46bd      	mov	sp, r7
 8014152:	bd80      	pop	{r7, pc}
 8014154:	24000040 	.word	0x24000040
 8014158:	24010600 	.word	0x24010600
 801415c:	10624dd3 	.word	0x10624dd3

08014160 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b08a      	sub	sp, #40	@ 0x28
 8014164:	af02      	add	r7, sp, #8
 8014166:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801416c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801416e:	2104      	movs	r1, #4
 8014170:	69b8      	ldr	r0, [r7, #24]
 8014172:	f000 f9df 	bl	8014534 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014176:	f107 030c 	add.w	r3, r7, #12
 801417a:	2203      	movs	r2, #3
 801417c:	69b9      	ldr	r1, [r7, #24]
 801417e:	6878      	ldr	r0, [r7, #4]
 8014180:	f000 fe64 	bl	8014e4c <dhcp_create_msg>
 8014184:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014186:	697b      	ldr	r3, [r7, #20]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d04c      	beq.n	8014226 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	685b      	ldr	r3, [r3, #4]
 8014190:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014192:	89b8      	ldrh	r0, [r7, #12]
 8014194:	693b      	ldr	r3, [r7, #16]
 8014196:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801419a:	2302      	movs	r3, #2
 801419c:	2239      	movs	r2, #57	@ 0x39
 801419e:	f000 f9e3 	bl	8014568 <dhcp_option>
 80141a2:	4603      	mov	r3, r0
 80141a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80141a6:	89b8      	ldrh	r0, [r7, #12]
 80141a8:	693b      	ldr	r3, [r7, #16]
 80141aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80141b2:	461a      	mov	r2, r3
 80141b4:	f000 fa32 	bl	801461c <dhcp_option_short>
 80141b8:	4603      	mov	r3, r0
 80141ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80141bc:	89b8      	ldrh	r0, [r7, #12]
 80141be:	693b      	ldr	r3, [r7, #16]
 80141c0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80141c4:	2303      	movs	r3, #3
 80141c6:	2237      	movs	r2, #55	@ 0x37
 80141c8:	f000 f9ce 	bl	8014568 <dhcp_option>
 80141cc:	4603      	mov	r3, r0
 80141ce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80141d0:	2300      	movs	r3, #0
 80141d2:	77bb      	strb	r3, [r7, #30]
 80141d4:	e00e      	b.n	80141f4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80141d6:	89b8      	ldrh	r0, [r7, #12]
 80141d8:	693b      	ldr	r3, [r7, #16]
 80141da:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80141de:	7fbb      	ldrb	r3, [r7, #30]
 80141e0:	4a28      	ldr	r2, [pc, #160]	@ (8014284 <dhcp_rebind+0x124>)
 80141e2:	5cd3      	ldrb	r3, [r2, r3]
 80141e4:	461a      	mov	r2, r3
 80141e6:	f000 f9f3 	bl	80145d0 <dhcp_option_byte>
 80141ea:	4603      	mov	r3, r0
 80141ec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80141ee:	7fbb      	ldrb	r3, [r7, #30]
 80141f0:	3301      	adds	r3, #1
 80141f2:	77bb      	strb	r3, [r7, #30]
 80141f4:	7fbb      	ldrb	r3, [r7, #30]
 80141f6:	2b02      	cmp	r3, #2
 80141f8:	d9ed      	bls.n	80141d6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80141fa:	89b8      	ldrh	r0, [r7, #12]
 80141fc:	693b      	ldr	r3, [r7, #16]
 80141fe:	33f0      	adds	r3, #240	@ 0xf0
 8014200:	697a      	ldr	r2, [r7, #20]
 8014202:	4619      	mov	r1, r3
 8014204:	f000 fef8 	bl	8014ff8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014208:	4b1f      	ldr	r3, [pc, #124]	@ (8014288 <dhcp_rebind+0x128>)
 801420a:	6818      	ldr	r0, [r3, #0]
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	9300      	str	r3, [sp, #0]
 8014210:	2343      	movs	r3, #67	@ 0x43
 8014212:	4a1e      	ldr	r2, [pc, #120]	@ (801428c <dhcp_rebind+0x12c>)
 8014214:	6979      	ldr	r1, [r7, #20]
 8014216:	f7fe fda9 	bl	8012d6c <udp_sendto_if>
 801421a:	4603      	mov	r3, r0
 801421c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801421e:	6978      	ldr	r0, [r7, #20]
 8014220:	f7f7 fd88 	bl	800bd34 <pbuf_free>
 8014224:	e001      	b.n	801422a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014226:	23ff      	movs	r3, #255	@ 0xff
 8014228:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801422a:	69bb      	ldr	r3, [r7, #24]
 801422c:	799b      	ldrb	r3, [r3, #6]
 801422e:	2bff      	cmp	r3, #255	@ 0xff
 8014230:	d005      	beq.n	801423e <dhcp_rebind+0xde>
    dhcp->tries++;
 8014232:	69bb      	ldr	r3, [r7, #24]
 8014234:	799b      	ldrb	r3, [r3, #6]
 8014236:	3301      	adds	r3, #1
 8014238:	b2da      	uxtb	r2, r3
 801423a:	69bb      	ldr	r3, [r7, #24]
 801423c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801423e:	69bb      	ldr	r3, [r7, #24]
 8014240:	799b      	ldrb	r3, [r3, #6]
 8014242:	2b09      	cmp	r3, #9
 8014244:	d809      	bhi.n	801425a <dhcp_rebind+0xfa>
 8014246:	69bb      	ldr	r3, [r7, #24]
 8014248:	799b      	ldrb	r3, [r3, #6]
 801424a:	461a      	mov	r2, r3
 801424c:	0152      	lsls	r2, r2, #5
 801424e:	1ad2      	subs	r2, r2, r3
 8014250:	0092      	lsls	r2, r2, #2
 8014252:	4413      	add	r3, r2
 8014254:	00db      	lsls	r3, r3, #3
 8014256:	b29b      	uxth	r3, r3
 8014258:	e001      	b.n	801425e <dhcp_rebind+0xfe>
 801425a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801425e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014260:	89fb      	ldrh	r3, [r7, #14]
 8014262:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014266:	4a0a      	ldr	r2, [pc, #40]	@ (8014290 <dhcp_rebind+0x130>)
 8014268:	fb82 1203 	smull	r1, r2, r2, r3
 801426c:	1152      	asrs	r2, r2, #5
 801426e:	17db      	asrs	r3, r3, #31
 8014270:	1ad3      	subs	r3, r2, r3
 8014272:	b29a      	uxth	r2, r3
 8014274:	69bb      	ldr	r3, [r7, #24]
 8014276:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014278:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801427c:	4618      	mov	r0, r3
 801427e:	3720      	adds	r7, #32
 8014280:	46bd      	mov	sp, r7
 8014282:	bd80      	pop	{r7, pc}
 8014284:	24000040 	.word	0x24000040
 8014288:	24010600 	.word	0x24010600
 801428c:	0801c1ac 	.word	0x0801c1ac
 8014290:	10624dd3 	.word	0x10624dd3

08014294 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014294:	b5b0      	push	{r4, r5, r7, lr}
 8014296:	b08a      	sub	sp, #40	@ 0x28
 8014298:	af02      	add	r7, sp, #8
 801429a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142a0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80142a2:	2103      	movs	r1, #3
 80142a4:	69b8      	ldr	r0, [r7, #24]
 80142a6:	f000 f945 	bl	8014534 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80142aa:	f107 030c 	add.w	r3, r7, #12
 80142ae:	2203      	movs	r2, #3
 80142b0:	69b9      	ldr	r1, [r7, #24]
 80142b2:	6878      	ldr	r0, [r7, #4]
 80142b4:	f000 fdca 	bl	8014e4c <dhcp_create_msg>
 80142b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80142ba:	697b      	ldr	r3, [r7, #20]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d066      	beq.n	801438e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80142c0:	697b      	ldr	r3, [r7, #20]
 80142c2:	685b      	ldr	r3, [r3, #4]
 80142c4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80142c6:	89b8      	ldrh	r0, [r7, #12]
 80142c8:	693b      	ldr	r3, [r7, #16]
 80142ca:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80142ce:	2302      	movs	r3, #2
 80142d0:	2239      	movs	r2, #57	@ 0x39
 80142d2:	f000 f949 	bl	8014568 <dhcp_option>
 80142d6:	4603      	mov	r3, r0
 80142d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80142da:	89b8      	ldrh	r0, [r7, #12]
 80142dc:	693b      	ldr	r3, [r7, #16]
 80142de:	33f0      	adds	r3, #240	@ 0xf0
 80142e0:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80142e4:	4619      	mov	r1, r3
 80142e6:	f000 f999 	bl	801461c <dhcp_option_short>
 80142ea:	4603      	mov	r3, r0
 80142ec:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80142ee:	89b8      	ldrh	r0, [r7, #12]
 80142f0:	693b      	ldr	r3, [r7, #16]
 80142f2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80142f6:	2304      	movs	r3, #4
 80142f8:	2232      	movs	r2, #50	@ 0x32
 80142fa:	f000 f935 	bl	8014568 <dhcp_option>
 80142fe:	4603      	mov	r3, r0
 8014300:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014302:	89bc      	ldrh	r4, [r7, #12]
 8014304:	693b      	ldr	r3, [r7, #16]
 8014306:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801430a:	69bb      	ldr	r3, [r7, #24]
 801430c:	69db      	ldr	r3, [r3, #28]
 801430e:	4618      	mov	r0, r3
 8014310:	f7f6 f875 	bl	800a3fe <lwip_htonl>
 8014314:	4603      	mov	r3, r0
 8014316:	461a      	mov	r2, r3
 8014318:	4629      	mov	r1, r5
 801431a:	4620      	mov	r0, r4
 801431c:	f000 f9b0 	bl	8014680 <dhcp_option_long>
 8014320:	4603      	mov	r3, r0
 8014322:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014324:	89b8      	ldrh	r0, [r7, #12]
 8014326:	693b      	ldr	r3, [r7, #16]
 8014328:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801432c:	2303      	movs	r3, #3
 801432e:	2237      	movs	r2, #55	@ 0x37
 8014330:	f000 f91a 	bl	8014568 <dhcp_option>
 8014334:	4603      	mov	r3, r0
 8014336:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014338:	2300      	movs	r3, #0
 801433a:	77bb      	strb	r3, [r7, #30]
 801433c:	e00e      	b.n	801435c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801433e:	89b8      	ldrh	r0, [r7, #12]
 8014340:	693b      	ldr	r3, [r7, #16]
 8014342:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014346:	7fbb      	ldrb	r3, [r7, #30]
 8014348:	4a28      	ldr	r2, [pc, #160]	@ (80143ec <dhcp_reboot+0x158>)
 801434a:	5cd3      	ldrb	r3, [r2, r3]
 801434c:	461a      	mov	r2, r3
 801434e:	f000 f93f 	bl	80145d0 <dhcp_option_byte>
 8014352:	4603      	mov	r3, r0
 8014354:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014356:	7fbb      	ldrb	r3, [r7, #30]
 8014358:	3301      	adds	r3, #1
 801435a:	77bb      	strb	r3, [r7, #30]
 801435c:	7fbb      	ldrb	r3, [r7, #30]
 801435e:	2b02      	cmp	r3, #2
 8014360:	d9ed      	bls.n	801433e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014362:	89b8      	ldrh	r0, [r7, #12]
 8014364:	693b      	ldr	r3, [r7, #16]
 8014366:	33f0      	adds	r3, #240	@ 0xf0
 8014368:	697a      	ldr	r2, [r7, #20]
 801436a:	4619      	mov	r1, r3
 801436c:	f000 fe44 	bl	8014ff8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014370:	4b1f      	ldr	r3, [pc, #124]	@ (80143f0 <dhcp_reboot+0x15c>)
 8014372:	6818      	ldr	r0, [r3, #0]
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	9300      	str	r3, [sp, #0]
 8014378:	2343      	movs	r3, #67	@ 0x43
 801437a:	4a1e      	ldr	r2, [pc, #120]	@ (80143f4 <dhcp_reboot+0x160>)
 801437c:	6979      	ldr	r1, [r7, #20]
 801437e:	f7fe fcf5 	bl	8012d6c <udp_sendto_if>
 8014382:	4603      	mov	r3, r0
 8014384:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014386:	6978      	ldr	r0, [r7, #20]
 8014388:	f7f7 fcd4 	bl	800bd34 <pbuf_free>
 801438c:	e001      	b.n	8014392 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801438e:	23ff      	movs	r3, #255	@ 0xff
 8014390:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014392:	69bb      	ldr	r3, [r7, #24]
 8014394:	799b      	ldrb	r3, [r3, #6]
 8014396:	2bff      	cmp	r3, #255	@ 0xff
 8014398:	d005      	beq.n	80143a6 <dhcp_reboot+0x112>
    dhcp->tries++;
 801439a:	69bb      	ldr	r3, [r7, #24]
 801439c:	799b      	ldrb	r3, [r3, #6]
 801439e:	3301      	adds	r3, #1
 80143a0:	b2da      	uxtb	r2, r3
 80143a2:	69bb      	ldr	r3, [r7, #24]
 80143a4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80143a6:	69bb      	ldr	r3, [r7, #24]
 80143a8:	799b      	ldrb	r3, [r3, #6]
 80143aa:	2b09      	cmp	r3, #9
 80143ac:	d809      	bhi.n	80143c2 <dhcp_reboot+0x12e>
 80143ae:	69bb      	ldr	r3, [r7, #24]
 80143b0:	799b      	ldrb	r3, [r3, #6]
 80143b2:	461a      	mov	r2, r3
 80143b4:	0152      	lsls	r2, r2, #5
 80143b6:	1ad2      	subs	r2, r2, r3
 80143b8:	0092      	lsls	r2, r2, #2
 80143ba:	4413      	add	r3, r2
 80143bc:	00db      	lsls	r3, r3, #3
 80143be:	b29b      	uxth	r3, r3
 80143c0:	e001      	b.n	80143c6 <dhcp_reboot+0x132>
 80143c2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80143c6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80143c8:	89fb      	ldrh	r3, [r7, #14]
 80143ca:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80143ce:	4a0a      	ldr	r2, [pc, #40]	@ (80143f8 <dhcp_reboot+0x164>)
 80143d0:	fb82 1203 	smull	r1, r2, r2, r3
 80143d4:	1152      	asrs	r2, r2, #5
 80143d6:	17db      	asrs	r3, r3, #31
 80143d8:	1ad3      	subs	r3, r2, r3
 80143da:	b29a      	uxth	r2, r3
 80143dc:	69bb      	ldr	r3, [r7, #24]
 80143de:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80143e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3720      	adds	r7, #32
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bdb0      	pop	{r4, r5, r7, pc}
 80143ec:	24000040 	.word	0x24000040
 80143f0:	24010600 	.word	0x24010600
 80143f4:	0801c1ac 	.word	0x0801c1ac
 80143f8:	10624dd3 	.word	0x10624dd3

080143fc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80143fc:	b5b0      	push	{r4, r5, r7, lr}
 80143fe:	b08a      	sub	sp, #40	@ 0x28
 8014400:	af02      	add	r7, sp, #8
 8014402:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014408:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
 801440a:	f7f1 ff73 	bl	80062f4 <sys_check_core_locking>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801440e:	69fb      	ldr	r3, [r7, #28]
 8014410:	2b00      	cmp	r3, #0
 8014412:	f000 8084 	beq.w	801451e <dhcp_release_and_stop+0x122>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014416:	69fb      	ldr	r3, [r7, #28]
 8014418:	795b      	ldrb	r3, [r3, #5]
 801441a:	2b00      	cmp	r3, #0
 801441c:	f000 8081 	beq.w	8014522 <dhcp_release_and_stop+0x126>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014420:	69fb      	ldr	r3, [r7, #28]
 8014422:	699b      	ldr	r3, [r3, #24]
 8014424:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014426:	69fb      	ldr	r3, [r7, #28]
 8014428:	2200      	movs	r2, #0
 801442a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801442c:	69fb      	ldr	r3, [r7, #28]
 801442e:	2200      	movs	r2, #0
 8014430:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014432:	69fb      	ldr	r3, [r7, #28]
 8014434:	2200      	movs	r2, #0
 8014436:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014438:	69fb      	ldr	r3, [r7, #28]
 801443a:	2200      	movs	r2, #0
 801443c:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801443e:	69fb      	ldr	r3, [r7, #28]
 8014440:	2200      	movs	r2, #0
 8014442:	631a      	str	r2, [r3, #48]	@ 0x30
 8014444:	69fb      	ldr	r3, [r7, #28]
 8014446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014448:	69fb      	ldr	r3, [r7, #28]
 801444a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801444c:	69fb      	ldr	r3, [r7, #28]
 801444e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014450:	69fb      	ldr	r3, [r7, #28]
 8014452:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014454:	69fb      	ldr	r3, [r7, #28]
 8014456:	2200      	movs	r2, #0
 8014458:	829a      	strh	r2, [r3, #20]
 801445a:	69fb      	ldr	r3, [r7, #28]
 801445c:	8a9a      	ldrh	r2, [r3, #20]
 801445e:	69fb      	ldr	r3, [r7, #28]
 8014460:	825a      	strh	r2, [r3, #18]
 8014462:	69fb      	ldr	r3, [r7, #28]
 8014464:	8a5a      	ldrh	r2, [r3, #18]
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	821a      	strh	r2, [r3, #16]
 801446a:	69fb      	ldr	r3, [r7, #28]
 801446c:	8a1a      	ldrh	r2, [r3, #16]
 801446e:	69fb      	ldr	r3, [r7, #28]
 8014470:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014472:	6878      	ldr	r0, [r7, #4]
 8014474:	f000 fdee 	bl	8015054 <dhcp_supplied_address>
 8014478:	4603      	mov	r3, r0
 801447a:	2b00      	cmp	r3, #0
 801447c:	d03b      	beq.n	80144f6 <dhcp_release_and_stop+0xfa>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801447e:	f107 030e 	add.w	r3, r7, #14
 8014482:	2207      	movs	r2, #7
 8014484:	69f9      	ldr	r1, [r7, #28]
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f000 fce0 	bl	8014e4c <dhcp_create_msg>
 801448c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801448e:	69bb      	ldr	r3, [r7, #24]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d030      	beq.n	80144f6 <dhcp_release_and_stop+0xfa>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014494:	69bb      	ldr	r3, [r7, #24]
 8014496:	685b      	ldr	r3, [r3, #4]
 8014498:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801449a:	89f8      	ldrh	r0, [r7, #14]
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80144a2:	2304      	movs	r3, #4
 80144a4:	2236      	movs	r2, #54	@ 0x36
 80144a6:	f000 f85f 	bl	8014568 <dhcp_option>
 80144aa:	4603      	mov	r3, r0
 80144ac:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80144ae:	89fc      	ldrh	r4, [r7, #14]
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	4618      	mov	r0, r3
 80144ba:	f7f5 ffa0 	bl	800a3fe <lwip_htonl>
 80144be:	4603      	mov	r3, r0
 80144c0:	461a      	mov	r2, r3
 80144c2:	4629      	mov	r1, r5
 80144c4:	4620      	mov	r0, r4
 80144c6:	f000 f8db 	bl	8014680 <dhcp_option_long>
 80144ca:	4603      	mov	r3, r0
 80144cc:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80144ce:	89f8      	ldrh	r0, [r7, #14]
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	33f0      	adds	r3, #240	@ 0xf0
 80144d4:	69ba      	ldr	r2, [r7, #24]
 80144d6:	4619      	mov	r1, r3
 80144d8:	f000 fd8e 	bl	8014ff8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80144dc:	4b13      	ldr	r3, [pc, #76]	@ (801452c <dhcp_release_and_stop+0x130>)
 80144de:	6818      	ldr	r0, [r3, #0]
 80144e0:	f107 0210 	add.w	r2, r7, #16
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	9300      	str	r3, [sp, #0]
 80144e8:	2343      	movs	r3, #67	@ 0x43
 80144ea:	69b9      	ldr	r1, [r7, #24]
 80144ec:	f7fe fc3e 	bl	8012d6c <udp_sendto_if>
      pbuf_free(p_out);
 80144f0:	69b8      	ldr	r0, [r7, #24]
 80144f2:	f7f7 fc1f 	bl	800bd34 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80144f6:	4b0e      	ldr	r3, [pc, #56]	@ (8014530 <dhcp_release_and_stop+0x134>)
 80144f8:	4a0d      	ldr	r2, [pc, #52]	@ (8014530 <dhcp_release_and_stop+0x134>)
 80144fa:	490d      	ldr	r1, [pc, #52]	@ (8014530 <dhcp_release_and_stop+0x134>)
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f7f6 ff01 	bl	800b304 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014502:	2100      	movs	r1, #0
 8014504:	69f8      	ldr	r0, [r7, #28]
 8014506:	f000 f815 	bl	8014534 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801450a:	69fb      	ldr	r3, [r7, #28]
 801450c:	791b      	ldrb	r3, [r3, #4]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d008      	beq.n	8014524 <dhcp_release_and_stop+0x128>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014512:	f7fe ff83 	bl	801341c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014516:	69fb      	ldr	r3, [r7, #28]
 8014518:	2200      	movs	r2, #0
 801451a:	711a      	strb	r2, [r3, #4]
 801451c:	e002      	b.n	8014524 <dhcp_release_and_stop+0x128>
    return;
 801451e:	bf00      	nop
 8014520:	e000      	b.n	8014524 <dhcp_release_and_stop+0x128>
    return;
 8014522:	bf00      	nop
  }
}
 8014524:	3720      	adds	r7, #32
 8014526:	46bd      	mov	sp, r7
 8014528:	bdb0      	pop	{r4, r5, r7, pc}
 801452a:	bf00      	nop
 801452c:	24010600 	.word	0x24010600
 8014530:	0801c1a8 	.word	0x0801c1a8

08014534 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014534:	b480      	push	{r7}
 8014536:	b083      	sub	sp, #12
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
 801453c:	460b      	mov	r3, r1
 801453e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	795b      	ldrb	r3, [r3, #5]
 8014544:	78fa      	ldrb	r2, [r7, #3]
 8014546:	429a      	cmp	r2, r3
 8014548:	d008      	beq.n	801455c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	78fa      	ldrb	r2, [r7, #3]
 801454e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2200      	movs	r2, #0
 8014554:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2200      	movs	r2, #0
 801455a:	811a      	strh	r2, [r3, #8]
  }
}
 801455c:	bf00      	nop
 801455e:	370c      	adds	r7, #12
 8014560:	46bd      	mov	sp, r7
 8014562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014566:	4770      	bx	lr

08014568 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b082      	sub	sp, #8
 801456c:	af00      	add	r7, sp, #0
 801456e:	6039      	str	r1, [r7, #0]
 8014570:	4611      	mov	r1, r2
 8014572:	461a      	mov	r2, r3
 8014574:	4603      	mov	r3, r0
 8014576:	80fb      	strh	r3, [r7, #6]
 8014578:	460b      	mov	r3, r1
 801457a:	717b      	strb	r3, [r7, #5]
 801457c:	4613      	mov	r3, r2
 801457e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014580:	88fa      	ldrh	r2, [r7, #6]
 8014582:	793b      	ldrb	r3, [r7, #4]
 8014584:	4413      	add	r3, r2
 8014586:	3302      	adds	r3, #2
 8014588:	2b44      	cmp	r3, #68	@ 0x44
 801458a:	d906      	bls.n	801459a <dhcp_option+0x32>
 801458c:	4b0d      	ldr	r3, [pc, #52]	@ (80145c4 <dhcp_option+0x5c>)
 801458e:	f240 529a 	movw	r2, #1434	@ 0x59a
 8014592:	490d      	ldr	r1, [pc, #52]	@ (80145c8 <dhcp_option+0x60>)
 8014594:	480d      	ldr	r0, [pc, #52]	@ (80145cc <dhcp_option+0x64>)
 8014596:	f003 fa8f 	bl	8017ab8 <iprintf>
  options[options_out_len++] = option_type;
 801459a:	88fb      	ldrh	r3, [r7, #6]
 801459c:	1c5a      	adds	r2, r3, #1
 801459e:	80fa      	strh	r2, [r7, #6]
 80145a0:	461a      	mov	r2, r3
 80145a2:	683b      	ldr	r3, [r7, #0]
 80145a4:	4413      	add	r3, r2
 80145a6:	797a      	ldrb	r2, [r7, #5]
 80145a8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80145aa:	88fb      	ldrh	r3, [r7, #6]
 80145ac:	1c5a      	adds	r2, r3, #1
 80145ae:	80fa      	strh	r2, [r7, #6]
 80145b0:	461a      	mov	r2, r3
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	4413      	add	r3, r2
 80145b6:	793a      	ldrb	r2, [r7, #4]
 80145b8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80145ba:	88fb      	ldrh	r3, [r7, #6]
}
 80145bc:	4618      	mov	r0, r3
 80145be:	3708      	adds	r7, #8
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}
 80145c4:	0801af9c 	.word	0x0801af9c
 80145c8:	0801b130 	.word	0x0801b130
 80145cc:	0801affc 	.word	0x0801affc

080145d0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b082      	sub	sp, #8
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	4603      	mov	r3, r0
 80145d8:	6039      	str	r1, [r7, #0]
 80145da:	80fb      	strh	r3, [r7, #6]
 80145dc:	4613      	mov	r3, r2
 80145de:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80145e0:	88fb      	ldrh	r3, [r7, #6]
 80145e2:	2b43      	cmp	r3, #67	@ 0x43
 80145e4:	d906      	bls.n	80145f4 <dhcp_option_byte+0x24>
 80145e6:	4b0a      	ldr	r3, [pc, #40]	@ (8014610 <dhcp_option_byte+0x40>)
 80145e8:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 80145ec:	4909      	ldr	r1, [pc, #36]	@ (8014614 <dhcp_option_byte+0x44>)
 80145ee:	480a      	ldr	r0, [pc, #40]	@ (8014618 <dhcp_option_byte+0x48>)
 80145f0:	f003 fa62 	bl	8017ab8 <iprintf>
  options[options_out_len++] = value;
 80145f4:	88fb      	ldrh	r3, [r7, #6]
 80145f6:	1c5a      	adds	r2, r3, #1
 80145f8:	80fa      	strh	r2, [r7, #6]
 80145fa:	461a      	mov	r2, r3
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	4413      	add	r3, r2
 8014600:	797a      	ldrb	r2, [r7, #5]
 8014602:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014604:	88fb      	ldrh	r3, [r7, #6]
}
 8014606:	4618      	mov	r0, r3
 8014608:	3708      	adds	r7, #8
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}
 801460e:	bf00      	nop
 8014610:	0801af9c 	.word	0x0801af9c
 8014614:	0801b174 	.word	0x0801b174
 8014618:	0801affc 	.word	0x0801affc

0801461c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b082      	sub	sp, #8
 8014620:	af00      	add	r7, sp, #0
 8014622:	4603      	mov	r3, r0
 8014624:	6039      	str	r1, [r7, #0]
 8014626:	80fb      	strh	r3, [r7, #6]
 8014628:	4613      	mov	r3, r2
 801462a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801462c:	88fb      	ldrh	r3, [r7, #6]
 801462e:	3302      	adds	r3, #2
 8014630:	2b44      	cmp	r3, #68	@ 0x44
 8014632:	d906      	bls.n	8014642 <dhcp_option_short+0x26>
 8014634:	4b0f      	ldr	r3, [pc, #60]	@ (8014674 <dhcp_option_short+0x58>)
 8014636:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801463a:	490f      	ldr	r1, [pc, #60]	@ (8014678 <dhcp_option_short+0x5c>)
 801463c:	480f      	ldr	r0, [pc, #60]	@ (801467c <dhcp_option_short+0x60>)
 801463e:	f003 fa3b 	bl	8017ab8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014642:	88bb      	ldrh	r3, [r7, #4]
 8014644:	0a1b      	lsrs	r3, r3, #8
 8014646:	b29a      	uxth	r2, r3
 8014648:	88fb      	ldrh	r3, [r7, #6]
 801464a:	1c59      	adds	r1, r3, #1
 801464c:	80f9      	strh	r1, [r7, #6]
 801464e:	4619      	mov	r1, r3
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	440b      	add	r3, r1
 8014654:	b2d2      	uxtb	r2, r2
 8014656:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014658:	88fb      	ldrh	r3, [r7, #6]
 801465a:	1c5a      	adds	r2, r3, #1
 801465c:	80fa      	strh	r2, [r7, #6]
 801465e:	461a      	mov	r2, r3
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	4413      	add	r3, r2
 8014664:	88ba      	ldrh	r2, [r7, #4]
 8014666:	b2d2      	uxtb	r2, r2
 8014668:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801466a:	88fb      	ldrh	r3, [r7, #6]
}
 801466c:	4618      	mov	r0, r3
 801466e:	3708      	adds	r7, #8
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}
 8014674:	0801af9c 	.word	0x0801af9c
 8014678:	0801b1ac 	.word	0x0801b1ac
 801467c:	0801affc 	.word	0x0801affc

08014680 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b084      	sub	sp, #16
 8014684:	af00      	add	r7, sp, #0
 8014686:	4603      	mov	r3, r0
 8014688:	60b9      	str	r1, [r7, #8]
 801468a:	607a      	str	r2, [r7, #4]
 801468c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801468e:	89fb      	ldrh	r3, [r7, #14]
 8014690:	3304      	adds	r3, #4
 8014692:	2b44      	cmp	r3, #68	@ 0x44
 8014694:	d906      	bls.n	80146a4 <dhcp_option_long+0x24>
 8014696:	4b19      	ldr	r3, [pc, #100]	@ (80146fc <dhcp_option_long+0x7c>)
 8014698:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 801469c:	4918      	ldr	r1, [pc, #96]	@ (8014700 <dhcp_option_long+0x80>)
 801469e:	4819      	ldr	r0, [pc, #100]	@ (8014704 <dhcp_option_long+0x84>)
 80146a0:	f003 fa0a 	bl	8017ab8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	0e1a      	lsrs	r2, r3, #24
 80146a8:	89fb      	ldrh	r3, [r7, #14]
 80146aa:	1c59      	adds	r1, r3, #1
 80146ac:	81f9      	strh	r1, [r7, #14]
 80146ae:	4619      	mov	r1, r3
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	440b      	add	r3, r1
 80146b4:	b2d2      	uxtb	r2, r2
 80146b6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	0c1a      	lsrs	r2, r3, #16
 80146bc:	89fb      	ldrh	r3, [r7, #14]
 80146be:	1c59      	adds	r1, r3, #1
 80146c0:	81f9      	strh	r1, [r7, #14]
 80146c2:	4619      	mov	r1, r3
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	440b      	add	r3, r1
 80146c8:	b2d2      	uxtb	r2, r2
 80146ca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	0a1a      	lsrs	r2, r3, #8
 80146d0:	89fb      	ldrh	r3, [r7, #14]
 80146d2:	1c59      	adds	r1, r3, #1
 80146d4:	81f9      	strh	r1, [r7, #14]
 80146d6:	4619      	mov	r1, r3
 80146d8:	68bb      	ldr	r3, [r7, #8]
 80146da:	440b      	add	r3, r1
 80146dc:	b2d2      	uxtb	r2, r2
 80146de:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80146e0:	89fb      	ldrh	r3, [r7, #14]
 80146e2:	1c5a      	adds	r2, r3, #1
 80146e4:	81fa      	strh	r2, [r7, #14]
 80146e6:	461a      	mov	r2, r3
 80146e8:	68bb      	ldr	r3, [r7, #8]
 80146ea:	4413      	add	r3, r2
 80146ec:	687a      	ldr	r2, [r7, #4]
 80146ee:	b2d2      	uxtb	r2, r2
 80146f0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80146f2:	89fb      	ldrh	r3, [r7, #14]
}
 80146f4:	4618      	mov	r0, r3
 80146f6:	3710      	adds	r7, #16
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}
 80146fc:	0801af9c 	.word	0x0801af9c
 8014700:	0801b1e8 	.word	0x0801b1e8
 8014704:	0801affc 	.word	0x0801affc

08014708 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014708:	b580      	push	{r7, lr}
 801470a:	b090      	sub	sp, #64	@ 0x40
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014712:	2300      	movs	r3, #0
 8014714:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8014716:	2300      	movs	r3, #0
 8014718:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801471a:	2208      	movs	r2, #8
 801471c:	2100      	movs	r1, #0
 801471e:	48b5      	ldr	r0, [pc, #724]	@ (80149f4 <dhcp_parse_reply+0x2ec>)
 8014720:	f003 fa2f 	bl	8017b82 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	895b      	ldrh	r3, [r3, #10]
 8014728:	2b2b      	cmp	r3, #43	@ 0x2b
 801472a:	d802      	bhi.n	8014732 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801472c:	f06f 0301 	mvn.w	r3, #1
 8014730:	e2a7      	b.n	8014c82 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	685b      	ldr	r3, [r3, #4]
 8014736:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014738:	23f0      	movs	r3, #240	@ 0xf0
 801473a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	891b      	ldrh	r3, [r3, #8]
 8014740:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014746:	e00c      	b.n	8014762 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801474a:	895b      	ldrh	r3, [r3, #10]
 801474c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801474e:	1ad3      	subs	r3, r2, r3
 8014750:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014754:	895b      	ldrh	r3, [r3, #10]
 8014756:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8014758:	1ad3      	subs	r3, r2, r3
 801475a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 801475c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014764:	2b00      	cmp	r3, #0
 8014766:	d004      	beq.n	8014772 <dhcp_parse_reply+0x6a>
 8014768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801476a:	895b      	ldrh	r3, [r3, #10]
 801476c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801476e:	429a      	cmp	r2, r3
 8014770:	d2ea      	bcs.n	8014748 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014774:	2b00      	cmp	r3, #0
 8014776:	d102      	bne.n	801477e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014778:	f06f 0301 	mvn.w	r3, #1
 801477c:	e281      	b.n	8014c82 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801477e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014780:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8014782:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014784:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8014786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014788:	685b      	ldr	r3, [r3, #4]
 801478a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801478c:	e239      	b.n	8014c02 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801478e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014790:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014792:	4413      	add	r3, r2
 8014794:	781b      	ldrb	r3, [r3, #0]
 8014796:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014798:	2300      	movs	r3, #0
 801479a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 801479e:	f04f 33ff 	mov.w	r3, #4294967295
 80147a2:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80147a4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80147a6:	3302      	adds	r3, #2
 80147a8:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80147aa:	8bfa      	ldrh	r2, [r7, #30]
 80147ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80147ae:	429a      	cmp	r2, r3
 80147b0:	d202      	bcs.n	80147b8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80147b2:	f06f 0301 	mvn.w	r3, #1
 80147b6:	e264      	b.n	8014c82 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80147b8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80147ba:	3301      	adds	r3, #1
 80147bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80147be:	8952      	ldrh	r2, [r2, #10]
 80147c0:	4293      	cmp	r3, r2
 80147c2:	da07      	bge.n	80147d4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80147c4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80147c6:	3301      	adds	r3, #1
 80147c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80147ca:	4413      	add	r3, r2
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80147d2:	e00b      	b.n	80147ec <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80147d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d004      	beq.n	80147e6 <dhcp_parse_reply+0xde>
 80147dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	685b      	ldr	r3, [r3, #4]
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	e000      	b.n	80147e8 <dhcp_parse_reply+0xe0>
 80147e6:	2300      	movs	r3, #0
 80147e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80147ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80147f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 80147f4:	7dfb      	ldrb	r3, [r7, #23]
 80147f6:	2b3b      	cmp	r3, #59	@ 0x3b
 80147f8:	f200 812c 	bhi.w	8014a54 <dhcp_parse_reply+0x34c>
 80147fc:	a201      	add	r2, pc, #4	@ (adr r2, 8014804 <dhcp_parse_reply+0xfc>)
 80147fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014802:	bf00      	nop
 8014804:	080148f5 	.word	0x080148f5
 8014808:	08014905 	.word	0x08014905
 801480c:	08014a55 	.word	0x08014a55
 8014810:	08014927 	.word	0x08014927
 8014814:	08014a55 	.word	0x08014a55
 8014818:	08014a55 	.word	0x08014a55
 801481c:	08014a55 	.word	0x08014a55
 8014820:	08014a55 	.word	0x08014a55
 8014824:	08014a55 	.word	0x08014a55
 8014828:	08014a55 	.word	0x08014a55
 801482c:	08014a55 	.word	0x08014a55
 8014830:	08014a55 	.word	0x08014a55
 8014834:	08014a55 	.word	0x08014a55
 8014838:	08014a55 	.word	0x08014a55
 801483c:	08014a55 	.word	0x08014a55
 8014840:	08014a55 	.word	0x08014a55
 8014844:	08014a55 	.word	0x08014a55
 8014848:	08014a55 	.word	0x08014a55
 801484c:	08014a55 	.word	0x08014a55
 8014850:	08014a55 	.word	0x08014a55
 8014854:	08014a55 	.word	0x08014a55
 8014858:	08014a55 	.word	0x08014a55
 801485c:	08014a55 	.word	0x08014a55
 8014860:	08014a55 	.word	0x08014a55
 8014864:	08014a55 	.word	0x08014a55
 8014868:	08014a55 	.word	0x08014a55
 801486c:	08014a55 	.word	0x08014a55
 8014870:	08014a55 	.word	0x08014a55
 8014874:	08014a55 	.word	0x08014a55
 8014878:	08014a55 	.word	0x08014a55
 801487c:	08014a55 	.word	0x08014a55
 8014880:	08014a55 	.word	0x08014a55
 8014884:	08014a55 	.word	0x08014a55
 8014888:	08014a55 	.word	0x08014a55
 801488c:	08014a55 	.word	0x08014a55
 8014890:	08014a55 	.word	0x08014a55
 8014894:	08014a55 	.word	0x08014a55
 8014898:	08014a55 	.word	0x08014a55
 801489c:	08014a55 	.word	0x08014a55
 80148a0:	08014a55 	.word	0x08014a55
 80148a4:	08014a55 	.word	0x08014a55
 80148a8:	08014a55 	.word	0x08014a55
 80148ac:	08014a55 	.word	0x08014a55
 80148b0:	08014a55 	.word	0x08014a55
 80148b4:	08014a55 	.word	0x08014a55
 80148b8:	08014a55 	.word	0x08014a55
 80148bc:	08014a55 	.word	0x08014a55
 80148c0:	08014a55 	.word	0x08014a55
 80148c4:	08014a55 	.word	0x08014a55
 80148c8:	08014a55 	.word	0x08014a55
 80148cc:	08014a55 	.word	0x08014a55
 80148d0:	08014953 	.word	0x08014953
 80148d4:	08014975 	.word	0x08014975
 80148d8:	080149b1 	.word	0x080149b1
 80148dc:	080149d3 	.word	0x080149d3
 80148e0:	08014a55 	.word	0x08014a55
 80148e4:	08014a55 	.word	0x08014a55
 80148e8:	08014a55 	.word	0x08014a55
 80148ec:	08014a11 	.word	0x08014a11
 80148f0:	08014a33 	.word	0x08014a33
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80148f4:	2300      	movs	r3, #0
 80148f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80148fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80148fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8014902:	e0ab      	b.n	8014a5c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014908:	2b04      	cmp	r3, #4
 801490a:	d009      	beq.n	8014920 <dhcp_parse_reply+0x218>
 801490c:	4b3a      	ldr	r3, [pc, #232]	@ (80149f8 <dhcp_parse_reply+0x2f0>)
 801490e:	f240 622e 	movw	r2, #1582	@ 0x62e
 8014912:	493a      	ldr	r1, [pc, #232]	@ (80149fc <dhcp_parse_reply+0x2f4>)
 8014914:	483a      	ldr	r0, [pc, #232]	@ (8014a00 <dhcp_parse_reply+0x2f8>)
 8014916:	f003 f8cf 	bl	8017ab8 <iprintf>
 801491a:	f06f 0305 	mvn.w	r3, #5
 801491e:	e1b0      	b.n	8014c82 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014920:	2306      	movs	r3, #6
 8014922:	623b      	str	r3, [r7, #32]
        break;
 8014924:	e09a      	b.n	8014a5c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014926:	2304      	movs	r3, #4
 8014928:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801492c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014930:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014934:	429a      	cmp	r2, r3
 8014936:	d209      	bcs.n	801494c <dhcp_parse_reply+0x244>
 8014938:	4b2f      	ldr	r3, [pc, #188]	@ (80149f8 <dhcp_parse_reply+0x2f0>)
 801493a:	f240 6233 	movw	r2, #1587	@ 0x633
 801493e:	4931      	ldr	r1, [pc, #196]	@ (8014a04 <dhcp_parse_reply+0x2fc>)
 8014940:	482f      	ldr	r0, [pc, #188]	@ (8014a00 <dhcp_parse_reply+0x2f8>)
 8014942:	f003 f8b9 	bl	8017ab8 <iprintf>
 8014946:	f06f 0305 	mvn.w	r3, #5
 801494a:	e19a      	b.n	8014c82 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801494c:	2307      	movs	r3, #7
 801494e:	623b      	str	r3, [r7, #32]
        break;
 8014950:	e084      	b.n	8014a5c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014952:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014956:	2b04      	cmp	r3, #4
 8014958:	d009      	beq.n	801496e <dhcp_parse_reply+0x266>
 801495a:	4b27      	ldr	r3, [pc, #156]	@ (80149f8 <dhcp_parse_reply+0x2f0>)
 801495c:	f240 6241 	movw	r2, #1601	@ 0x641
 8014960:	4926      	ldr	r1, [pc, #152]	@ (80149fc <dhcp_parse_reply+0x2f4>)
 8014962:	4827      	ldr	r0, [pc, #156]	@ (8014a00 <dhcp_parse_reply+0x2f8>)
 8014964:	f003 f8a8 	bl	8017ab8 <iprintf>
 8014968:	f06f 0305 	mvn.w	r3, #5
 801496c:	e189      	b.n	8014c82 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801496e:	2303      	movs	r3, #3
 8014970:	623b      	str	r3, [r7, #32]
        break;
 8014972:	e073      	b.n	8014a5c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014978:	2b01      	cmp	r3, #1
 801497a:	d009      	beq.n	8014990 <dhcp_parse_reply+0x288>
 801497c:	4b1e      	ldr	r3, [pc, #120]	@ (80149f8 <dhcp_parse_reply+0x2f0>)
 801497e:	f240 624f 	movw	r2, #1615	@ 0x64f
 8014982:	4921      	ldr	r1, [pc, #132]	@ (8014a08 <dhcp_parse_reply+0x300>)
 8014984:	481e      	ldr	r0, [pc, #120]	@ (8014a00 <dhcp_parse_reply+0x2f8>)
 8014986:	f003 f897 	bl	8017ab8 <iprintf>
 801498a:	f06f 0305 	mvn.w	r3, #5
 801498e:	e178      	b.n	8014c82 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014990:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014992:	2bf0      	cmp	r3, #240	@ 0xf0
 8014994:	d009      	beq.n	80149aa <dhcp_parse_reply+0x2a2>
 8014996:	4b18      	ldr	r3, [pc, #96]	@ (80149f8 <dhcp_parse_reply+0x2f0>)
 8014998:	f240 6251 	movw	r2, #1617	@ 0x651
 801499c:	491b      	ldr	r1, [pc, #108]	@ (8014a0c <dhcp_parse_reply+0x304>)
 801499e:	4818      	ldr	r0, [pc, #96]	@ (8014a00 <dhcp_parse_reply+0x2f8>)
 80149a0:	f003 f88a 	bl	8017ab8 <iprintf>
 80149a4:	f06f 0305 	mvn.w	r3, #5
 80149a8:	e16b      	b.n	8014c82 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80149aa:	2300      	movs	r3, #0
 80149ac:	623b      	str	r3, [r7, #32]
        break;
 80149ae:	e055      	b.n	8014a5c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80149b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80149b4:	2b01      	cmp	r3, #1
 80149b6:	d009      	beq.n	80149cc <dhcp_parse_reply+0x2c4>
 80149b8:	4b0f      	ldr	r3, [pc, #60]	@ (80149f8 <dhcp_parse_reply+0x2f0>)
 80149ba:	f240 6255 	movw	r2, #1621	@ 0x655
 80149be:	4912      	ldr	r1, [pc, #72]	@ (8014a08 <dhcp_parse_reply+0x300>)
 80149c0:	480f      	ldr	r0, [pc, #60]	@ (8014a00 <dhcp_parse_reply+0x2f8>)
 80149c2:	f003 f879 	bl	8017ab8 <iprintf>
 80149c6:	f06f 0305 	mvn.w	r3, #5
 80149ca:	e15a      	b.n	8014c82 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80149cc:	2301      	movs	r3, #1
 80149ce:	623b      	str	r3, [r7, #32]
        break;
 80149d0:	e044      	b.n	8014a5c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80149d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80149d6:	2b04      	cmp	r3, #4
 80149d8:	d009      	beq.n	80149ee <dhcp_parse_reply+0x2e6>
 80149da:	4b07      	ldr	r3, [pc, #28]	@ (80149f8 <dhcp_parse_reply+0x2f0>)
 80149dc:	f240 6259 	movw	r2, #1625	@ 0x659
 80149e0:	4906      	ldr	r1, [pc, #24]	@ (80149fc <dhcp_parse_reply+0x2f4>)
 80149e2:	4807      	ldr	r0, [pc, #28]	@ (8014a00 <dhcp_parse_reply+0x2f8>)
 80149e4:	f003 f868 	bl	8017ab8 <iprintf>
 80149e8:	f06f 0305 	mvn.w	r3, #5
 80149ec:	e149      	b.n	8014c82 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80149ee:	2302      	movs	r3, #2
 80149f0:	623b      	str	r3, [r7, #32]
        break;
 80149f2:	e033      	b.n	8014a5c <dhcp_parse_reply+0x354>
 80149f4:	240105f8 	.word	0x240105f8
 80149f8:	0801af9c 	.word	0x0801af9c
 80149fc:	0801b224 	.word	0x0801b224
 8014a00:	0801affc 	.word	0x0801affc
 8014a04:	0801b230 	.word	0x0801b230
 8014a08:	0801b244 	.word	0x0801b244
 8014a0c:	0801b250 	.word	0x0801b250
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014a14:	2b04      	cmp	r3, #4
 8014a16:	d009      	beq.n	8014a2c <dhcp_parse_reply+0x324>
 8014a18:	4b9c      	ldr	r3, [pc, #624]	@ (8014c8c <dhcp_parse_reply+0x584>)
 8014a1a:	f240 625d 	movw	r2, #1629	@ 0x65d
 8014a1e:	499c      	ldr	r1, [pc, #624]	@ (8014c90 <dhcp_parse_reply+0x588>)
 8014a20:	489c      	ldr	r0, [pc, #624]	@ (8014c94 <dhcp_parse_reply+0x58c>)
 8014a22:	f003 f849 	bl	8017ab8 <iprintf>
 8014a26:	f06f 0305 	mvn.w	r3, #5
 8014a2a:	e12a      	b.n	8014c82 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014a2c:	2304      	movs	r3, #4
 8014a2e:	623b      	str	r3, [r7, #32]
        break;
 8014a30:	e014      	b.n	8014a5c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014a32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014a36:	2b04      	cmp	r3, #4
 8014a38:	d009      	beq.n	8014a4e <dhcp_parse_reply+0x346>
 8014a3a:	4b94      	ldr	r3, [pc, #592]	@ (8014c8c <dhcp_parse_reply+0x584>)
 8014a3c:	f240 6261 	movw	r2, #1633	@ 0x661
 8014a40:	4993      	ldr	r1, [pc, #588]	@ (8014c90 <dhcp_parse_reply+0x588>)
 8014a42:	4894      	ldr	r0, [pc, #592]	@ (8014c94 <dhcp_parse_reply+0x58c>)
 8014a44:	f003 f838 	bl	8017ab8 <iprintf>
 8014a48:	f06f 0305 	mvn.w	r3, #5
 8014a4c:	e119      	b.n	8014c82 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014a4e:	2305      	movs	r3, #5
 8014a50:	623b      	str	r3, [r7, #32]
        break;
 8014a52:	e003      	b.n	8014a5c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8014a54:	2300      	movs	r3, #0
 8014a56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014a5a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014a5c:	7dfb      	ldrb	r3, [r7, #23]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d103      	bne.n	8014a6a <dhcp_parse_reply+0x362>
      offset++;
 8014a62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014a64:	3301      	adds	r3, #1
 8014a66:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8014a68:	e0a1      	b.n	8014bae <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014a6a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014a70:	4413      	add	r3, r2
 8014a72:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8014a76:	4293      	cmp	r3, r2
 8014a78:	dd02      	ble.n	8014a80 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8014a7a:	f06f 0301 	mvn.w	r3, #1
 8014a7e:	e100      	b.n	8014c82 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8014a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014a84:	b29a      	uxth	r2, r3
 8014a86:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014a88:	4413      	add	r3, r2
 8014a8a:	b29b      	uxth	r3, r3
 8014a8c:	3302      	adds	r3, #2
 8014a8e:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8014a90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	f000 808a 	beq.w	8014bae <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014a9e:	6a3b      	ldr	r3, [r7, #32]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	db02      	blt.n	8014aaa <dhcp_parse_reply+0x3a2>
 8014aa4:	6a3b      	ldr	r3, [r7, #32]
 8014aa6:	2b07      	cmp	r3, #7
 8014aa8:	dd06      	ble.n	8014ab8 <dhcp_parse_reply+0x3b0>
 8014aaa:	4b78      	ldr	r3, [pc, #480]	@ (8014c8c <dhcp_parse_reply+0x584>)
 8014aac:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8014ab0:	4979      	ldr	r1, [pc, #484]	@ (8014c98 <dhcp_parse_reply+0x590>)
 8014ab2:	4878      	ldr	r0, [pc, #480]	@ (8014c94 <dhcp_parse_reply+0x58c>)
 8014ab4:	f003 f800 	bl	8017ab8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014ab8:	4a78      	ldr	r2, [pc, #480]	@ (8014c9c <dhcp_parse_reply+0x594>)
 8014aba:	6a3b      	ldr	r3, [r7, #32]
 8014abc:	4413      	add	r3, r2
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d174      	bne.n	8014bae <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8014ac4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014ac8:	2b04      	cmp	r3, #4
 8014aca:	bf28      	it	cs
 8014acc:	2304      	movcs	r3, #4
 8014ace:	b2db      	uxtb	r3, r3
 8014ad0:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014ad2:	8bfb      	ldrh	r3, [r7, #30]
 8014ad4:	8aba      	ldrh	r2, [r7, #20]
 8014ad6:	f107 0108 	add.w	r1, r7, #8
 8014ada:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014adc:	f7f7 fb30 	bl	800c140 <pbuf_copy_partial>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	461a      	mov	r2, r3
 8014ae4:	8abb      	ldrh	r3, [r7, #20]
 8014ae6:	4293      	cmp	r3, r2
 8014ae8:	d002      	beq.n	8014af0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8014aea:	f06f 0301 	mvn.w	r3, #1
 8014aee:	e0c8      	b.n	8014c82 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8014af0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014af4:	2b04      	cmp	r3, #4
 8014af6:	d933      	bls.n	8014b60 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014af8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014afc:	f003 0303 	and.w	r3, r3, #3
 8014b00:	b2db      	uxtb	r3, r3
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d009      	beq.n	8014b1a <dhcp_parse_reply+0x412>
 8014b06:	4b61      	ldr	r3, [pc, #388]	@ (8014c8c <dhcp_parse_reply+0x584>)
 8014b08:	f240 6281 	movw	r2, #1665	@ 0x681
 8014b0c:	4964      	ldr	r1, [pc, #400]	@ (8014ca0 <dhcp_parse_reply+0x598>)
 8014b0e:	4861      	ldr	r0, [pc, #388]	@ (8014c94 <dhcp_parse_reply+0x58c>)
 8014b10:	f002 ffd2 	bl	8017ab8 <iprintf>
 8014b14:	f06f 0305 	mvn.w	r3, #5
 8014b18:	e0b3      	b.n	8014c82 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8014b1a:	4a60      	ldr	r2, [pc, #384]	@ (8014c9c <dhcp_parse_reply+0x594>)
 8014b1c:	6a3b      	ldr	r3, [r7, #32]
 8014b1e:	4413      	add	r3, r2
 8014b20:	2201      	movs	r2, #1
 8014b22:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7f5 fc69 	bl	800a3fe <lwip_htonl>
 8014b2c:	4602      	mov	r2, r0
 8014b2e:	495d      	ldr	r1, [pc, #372]	@ (8014ca4 <dhcp_parse_reply+0x59c>)
 8014b30:	6a3b      	ldr	r3, [r7, #32]
 8014b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014b36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014b3a:	3b04      	subs	r3, #4
 8014b3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014b40:	8bfb      	ldrh	r3, [r7, #30]
 8014b42:	3304      	adds	r3, #4
 8014b44:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014b46:	8a7a      	ldrh	r2, [r7, #18]
 8014b48:	8bfb      	ldrh	r3, [r7, #30]
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d202      	bcs.n	8014b54 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8014b4e:	f06f 0301 	mvn.w	r3, #1
 8014b52:	e096      	b.n	8014c82 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8014b54:	8a7b      	ldrh	r3, [r7, #18]
 8014b56:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8014b58:	6a3b      	ldr	r3, [r7, #32]
 8014b5a:	3301      	adds	r3, #1
 8014b5c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014b5e:	e79e      	b.n	8014a9e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8014b60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014b64:	2b04      	cmp	r3, #4
 8014b66:	d106      	bne.n	8014b76 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8014b68:	68bb      	ldr	r3, [r7, #8]
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7f5 fc47 	bl	800a3fe <lwip_htonl>
 8014b70:	4603      	mov	r3, r0
 8014b72:	60bb      	str	r3, [r7, #8]
 8014b74:	e011      	b.n	8014b9a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014b76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014b7a:	2b01      	cmp	r3, #1
 8014b7c:	d009      	beq.n	8014b92 <dhcp_parse_reply+0x48a>
 8014b7e:	4b43      	ldr	r3, [pc, #268]	@ (8014c8c <dhcp_parse_reply+0x584>)
 8014b80:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8014b84:	4948      	ldr	r1, [pc, #288]	@ (8014ca8 <dhcp_parse_reply+0x5a0>)
 8014b86:	4843      	ldr	r0, [pc, #268]	@ (8014c94 <dhcp_parse_reply+0x58c>)
 8014b88:	f002 ff96 	bl	8017ab8 <iprintf>
 8014b8c:	f06f 0305 	mvn.w	r3, #5
 8014b90:	e077      	b.n	8014c82 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8014b92:	f107 0308 	add.w	r3, r7, #8
 8014b96:	781b      	ldrb	r3, [r3, #0]
 8014b98:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8014b9a:	4a40      	ldr	r2, [pc, #256]	@ (8014c9c <dhcp_parse_reply+0x594>)
 8014b9c:	6a3b      	ldr	r3, [r7, #32]
 8014b9e:	4413      	add	r3, r2
 8014ba0:	2201      	movs	r2, #1
 8014ba2:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014ba4:	68ba      	ldr	r2, [r7, #8]
 8014ba6:	493f      	ldr	r1, [pc, #252]	@ (8014ca4 <dhcp_parse_reply+0x59c>)
 8014ba8:	6a3b      	ldr	r3, [r7, #32]
 8014baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8014bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bb0:	895b      	ldrh	r3, [r3, #10]
 8014bb2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014bb4:	429a      	cmp	r2, r3
 8014bb6:	d324      	bcc.n	8014c02 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8014bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bba:	895b      	ldrh	r3, [r3, #10]
 8014bbc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014bbe:	1ad3      	subs	r3, r2, r3
 8014bc0:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8014bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bc4:	895b      	ldrh	r3, [r3, #10]
 8014bc6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8014bc8:	1ad3      	subs	r3, r2, r3
 8014bca:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8014bcc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014bce:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8014bd0:	429a      	cmp	r2, r3
 8014bd2:	d213      	bcs.n	8014bfc <dhcp_parse_reply+0x4f4>
        q = q->next;
 8014bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d109      	bne.n	8014bf4 <dhcp_parse_reply+0x4ec>
 8014be0:	4b2a      	ldr	r3, [pc, #168]	@ (8014c8c <dhcp_parse_reply+0x584>)
 8014be2:	f240 629d 	movw	r2, #1693	@ 0x69d
 8014be6:	4931      	ldr	r1, [pc, #196]	@ (8014cac <dhcp_parse_reply+0x5a4>)
 8014be8:	482a      	ldr	r0, [pc, #168]	@ (8014c94 <dhcp_parse_reply+0x58c>)
 8014bea:	f002 ff65 	bl	8017ab8 <iprintf>
 8014bee:	f06f 0305 	mvn.w	r3, #5
 8014bf2:	e046      	b.n	8014c82 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8014bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bf6:	685b      	ldr	r3, [r3, #4]
 8014bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014bfa:	e002      	b.n	8014c02 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014bfc:	f06f 0301 	mvn.w	r3, #1
 8014c00:	e03f      	b.n	8014c82 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d00a      	beq.n	8014c1e <dhcp_parse_reply+0x516>
 8014c08:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014c0a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8014c0c:	429a      	cmp	r2, r3
 8014c0e:	d206      	bcs.n	8014c1e <dhcp_parse_reply+0x516>
 8014c10:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014c12:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014c14:	4413      	add	r3, r2
 8014c16:	781b      	ldrb	r3, [r3, #0]
 8014c18:	2bff      	cmp	r3, #255	@ 0xff
 8014c1a:	f47f adb8 	bne.w	801478e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8014c9c <dhcp_parse_reply+0x594>)
 8014c20:	781b      	ldrb	r3, [r3, #0]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d018      	beq.n	8014c58 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014c26:	4b1f      	ldr	r3, [pc, #124]	@ (8014ca4 <dhcp_parse_reply+0x59c>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8014c9c <dhcp_parse_reply+0x594>)
 8014c2e:	2200      	movs	r2, #0
 8014c30:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	2b01      	cmp	r3, #1
 8014c36:	d102      	bne.n	8014c3e <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8014c38:	2301      	movs	r3, #1
 8014c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014c3c:	e00c      	b.n	8014c58 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	2b02      	cmp	r3, #2
 8014c42:	d102      	bne.n	8014c4a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8014c44:	2301      	movs	r3, #1
 8014c46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014c48:	e006      	b.n	8014c58 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	2b03      	cmp	r3, #3
 8014c4e:	d103      	bne.n	8014c58 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8014c50:	2301      	movs	r3, #1
 8014c52:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8014c54:	2301      	movs	r3, #1
 8014c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8014c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d006      	beq.n	8014c6c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8014c62:	236c      	movs	r3, #108	@ 0x6c
 8014c64:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014c66:	23ec      	movs	r3, #236	@ 0xec
 8014c68:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8014c6a:	e56a      	b.n	8014742 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8014c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d006      	beq.n	8014c80 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8014c72:	2300      	movs	r3, #0
 8014c74:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8014c76:	232c      	movs	r3, #44	@ 0x2c
 8014c78:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014c7a:	236c      	movs	r3, #108	@ 0x6c
 8014c7c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8014c7e:	e560      	b.n	8014742 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014c80:	2300      	movs	r3, #0
}
 8014c82:	4618      	mov	r0, r3
 8014c84:	3740      	adds	r7, #64	@ 0x40
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd80      	pop	{r7, pc}
 8014c8a:	bf00      	nop
 8014c8c:	0801af9c 	.word	0x0801af9c
 8014c90:	0801b224 	.word	0x0801b224
 8014c94:	0801affc 	.word	0x0801affc
 8014c98:	0801b268 	.word	0x0801b268
 8014c9c:	240105f8 	.word	0x240105f8
 8014ca0:	0801b27c 	.word	0x0801b27c
 8014ca4:	240105d8 	.word	0x240105d8
 8014ca8:	0801b294 	.word	0x0801b294
 8014cac:	0801b2a8 	.word	0x0801b2a8

08014cb0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b08a      	sub	sp, #40	@ 0x28
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	60f8      	str	r0, [r7, #12]
 8014cb8:	60b9      	str	r1, [r7, #8]
 8014cba:	607a      	str	r2, [r7, #4]
 8014cbc:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8014cbe:	4b60      	ldr	r3, [pc, #384]	@ (8014e40 <dhcp_recv+0x190>)
 8014cc0:	685b      	ldr	r3, [r3, #4]
 8014cc2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014cc4:	6a3b      	ldr	r3, [r7, #32]
 8014cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cc8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	685b      	ldr	r3, [r3, #4]
 8014cce:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014cd0:	69fb      	ldr	r3, [r7, #28]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	f000 809d 	beq.w	8014e12 <dhcp_recv+0x162>
 8014cd8:	69fb      	ldr	r3, [r7, #28]
 8014cda:	791b      	ldrb	r3, [r3, #4]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	f000 8098 	beq.w	8014e12 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	895b      	ldrh	r3, [r3, #10]
 8014ce6:	2b2b      	cmp	r3, #43	@ 0x2b
 8014ce8:	f240 8095 	bls.w	8014e16 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014cec:	69bb      	ldr	r3, [r7, #24]
 8014cee:	781b      	ldrb	r3, [r3, #0]
 8014cf0:	2b02      	cmp	r3, #2
 8014cf2:	f040 8092 	bne.w	8014e1a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014cfc:	e012      	b.n	8014d24 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014d02:	6a3a      	ldr	r2, [r7, #32]
 8014d04:	4413      	add	r3, r2
 8014d06:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8014d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014d0e:	69b9      	ldr	r1, [r7, #24]
 8014d10:	440b      	add	r3, r1
 8014d12:	7f1b      	ldrb	r3, [r3, #28]
 8014d14:	429a      	cmp	r2, r3
 8014d16:	f040 8082 	bne.w	8014e1e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014d1e:	3301      	adds	r3, #1
 8014d20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014d24:	6a3b      	ldr	r3, [r7, #32]
 8014d26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014d2a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	d203      	bcs.n	8014d3a <dhcp_recv+0x8a>
 8014d32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014d36:	2b05      	cmp	r3, #5
 8014d38:	d9e1      	bls.n	8014cfe <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8014d3a:	69bb      	ldr	r3, [r7, #24]
 8014d3c:	685b      	ldr	r3, [r3, #4]
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f7f5 fb5d 	bl	800a3fe <lwip_htonl>
 8014d44:	4602      	mov	r2, r0
 8014d46:	69fb      	ldr	r3, [r7, #28]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d169      	bne.n	8014e22 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8014d4e:	69f9      	ldr	r1, [r7, #28]
 8014d50:	6878      	ldr	r0, [r7, #4]
 8014d52:	f7ff fcd9 	bl	8014708 <dhcp_parse_reply>
 8014d56:	4603      	mov	r3, r0
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d164      	bne.n	8014e26 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8014d5c:	4b39      	ldr	r3, [pc, #228]	@ (8014e44 <dhcp_recv+0x194>)
 8014d5e:	785b      	ldrb	r3, [r3, #1]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d062      	beq.n	8014e2a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	685b      	ldr	r3, [r3, #4]
 8014d68:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8014d6a:	4b37      	ldr	r3, [pc, #220]	@ (8014e48 <dhcp_recv+0x198>)
 8014d6c:	685b      	ldr	r3, [r3, #4]
 8014d6e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014d70:	7cfb      	ldrb	r3, [r7, #19]
 8014d72:	2b05      	cmp	r3, #5
 8014d74:	d12a      	bne.n	8014dcc <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014d76:	69fb      	ldr	r3, [r7, #28]
 8014d78:	795b      	ldrb	r3, [r3, #5]
 8014d7a:	2b01      	cmp	r3, #1
 8014d7c:	d112      	bne.n	8014da4 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8014d7e:	6979      	ldr	r1, [r7, #20]
 8014d80:	6a38      	ldr	r0, [r7, #32]
 8014d82:	f7fe fe17 	bl	80139b4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014d86:	6a3b      	ldr	r3, [r7, #32]
 8014d88:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014d8c:	f003 0308 	and.w	r3, r3, #8
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d003      	beq.n	8014d9c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014d94:	6a38      	ldr	r0, [r7, #32]
 8014d96:	f7fe fb85 	bl	80134a4 <dhcp_check>
 8014d9a:	e049      	b.n	8014e30 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8014d9c:	6a38      	ldr	r0, [r7, #32]
 8014d9e:	f7ff f869 	bl	8013e74 <dhcp_bind>
 8014da2:	e045      	b.n	8014e30 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014da4:	69fb      	ldr	r3, [r7, #28]
 8014da6:	795b      	ldrb	r3, [r3, #5]
 8014da8:	2b03      	cmp	r3, #3
 8014daa:	d007      	beq.n	8014dbc <dhcp_recv+0x10c>
 8014dac:	69fb      	ldr	r3, [r7, #28]
 8014dae:	795b      	ldrb	r3, [r3, #5]
 8014db0:	2b04      	cmp	r3, #4
 8014db2:	d003      	beq.n	8014dbc <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014db4:	69fb      	ldr	r3, [r7, #28]
 8014db6:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014db8:	2b05      	cmp	r3, #5
 8014dba:	d139      	bne.n	8014e30 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8014dbc:	6979      	ldr	r1, [r7, #20]
 8014dbe:	6a38      	ldr	r0, [r7, #32]
 8014dc0:	f7fe fdf8 	bl	80139b4 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014dc4:	6a38      	ldr	r0, [r7, #32]
 8014dc6:	f7ff f855 	bl	8013e74 <dhcp_bind>
 8014dca:	e031      	b.n	8014e30 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014dcc:	7cfb      	ldrb	r3, [r7, #19]
 8014dce:	2b06      	cmp	r3, #6
 8014dd0:	d113      	bne.n	8014dfa <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014dd2:	69fb      	ldr	r3, [r7, #28]
 8014dd4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8014dd6:	2b03      	cmp	r3, #3
 8014dd8:	d00b      	beq.n	8014df2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014dda:	69fb      	ldr	r3, [r7, #28]
 8014ddc:	795b      	ldrb	r3, [r3, #5]
 8014dde:	2b01      	cmp	r3, #1
 8014de0:	d007      	beq.n	8014df2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014de2:	69fb      	ldr	r3, [r7, #28]
 8014de4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014de6:	2b04      	cmp	r3, #4
 8014de8:	d003      	beq.n	8014df2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014dea:	69fb      	ldr	r3, [r7, #28]
 8014dec:	795b      	ldrb	r3, [r3, #5]
 8014dee:	2b05      	cmp	r3, #5
 8014df0:	d103      	bne.n	8014dfa <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8014df2:	6a38      	ldr	r0, [r7, #32]
 8014df4:	f7fe fb3c 	bl	8013470 <dhcp_handle_nak>
 8014df8:	e01a      	b.n	8014e30 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8014dfa:	7cfb      	ldrb	r3, [r7, #19]
 8014dfc:	2b02      	cmp	r3, #2
 8014dfe:	d116      	bne.n	8014e2e <dhcp_recv+0x17e>
 8014e00:	69fb      	ldr	r3, [r7, #28]
 8014e02:	795b      	ldrb	r3, [r3, #5]
 8014e04:	2b06      	cmp	r3, #6
 8014e06:	d112      	bne.n	8014e2e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8014e08:	6979      	ldr	r1, [r7, #20]
 8014e0a:	6a38      	ldr	r0, [r7, #32]
 8014e0c:	f7fe fb7e 	bl	801350c <dhcp_handle_offer>
 8014e10:	e00e      	b.n	8014e30 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014e12:	bf00      	nop
 8014e14:	e00c      	b.n	8014e30 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014e16:	bf00      	nop
 8014e18:	e00a      	b.n	8014e30 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014e1a:	bf00      	nop
 8014e1c:	e008      	b.n	8014e30 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8014e1e:	bf00      	nop
 8014e20:	e006      	b.n	8014e30 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014e22:	bf00      	nop
 8014e24:	e004      	b.n	8014e30 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014e26:	bf00      	nop
 8014e28:	e002      	b.n	8014e30 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014e2a:	bf00      	nop
 8014e2c:	e000      	b.n	8014e30 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8014e2e:	bf00      	nop
  pbuf_free(p);
 8014e30:	6878      	ldr	r0, [r7, #4]
 8014e32:	f7f6 ff7f 	bl	800bd34 <pbuf_free>
}
 8014e36:	bf00      	nop
 8014e38:	3728      	adds	r7, #40	@ 0x28
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	24009a98 	.word	0x24009a98
 8014e44:	240105f8 	.word	0x240105f8
 8014e48:	240105d8 	.word	0x240105d8

08014e4c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b088      	sub	sp, #32
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	60f8      	str	r0, [r7, #12]
 8014e54:	60b9      	str	r1, [r7, #8]
 8014e56:	603b      	str	r3, [r7, #0]
 8014e58:	4613      	mov	r3, r2
 8014e5a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d108      	bne.n	8014e74 <dhcp_create_msg+0x28>
 8014e62:	4b5f      	ldr	r3, [pc, #380]	@ (8014fe0 <dhcp_create_msg+0x194>)
 8014e64:	f240 7269 	movw	r2, #1897	@ 0x769
 8014e68:	495e      	ldr	r1, [pc, #376]	@ (8014fe4 <dhcp_create_msg+0x198>)
 8014e6a:	485f      	ldr	r0, [pc, #380]	@ (8014fe8 <dhcp_create_msg+0x19c>)
 8014e6c:	f002 fe24 	bl	8017ab8 <iprintf>
 8014e70:	2300      	movs	r3, #0
 8014e72:	e0b1      	b.n	8014fd8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014e74:	68bb      	ldr	r3, [r7, #8]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d108      	bne.n	8014e8c <dhcp_create_msg+0x40>
 8014e7a:	4b59      	ldr	r3, [pc, #356]	@ (8014fe0 <dhcp_create_msg+0x194>)
 8014e7c:	f240 726a 	movw	r2, #1898	@ 0x76a
 8014e80:	495a      	ldr	r1, [pc, #360]	@ (8014fec <dhcp_create_msg+0x1a0>)
 8014e82:	4859      	ldr	r0, [pc, #356]	@ (8014fe8 <dhcp_create_msg+0x19c>)
 8014e84:	f002 fe18 	bl	8017ab8 <iprintf>
 8014e88:	2300      	movs	r3, #0
 8014e8a:	e0a5      	b.n	8014fd8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8014e8c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014e90:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8014e94:	2036      	movs	r0, #54	@ 0x36
 8014e96:	f7f6 fc69 	bl	800b76c <pbuf_alloc>
 8014e9a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8014e9c:	69bb      	ldr	r3, [r7, #24]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d101      	bne.n	8014ea6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	e098      	b.n	8014fd8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8014ea6:	69bb      	ldr	r3, [r7, #24]
 8014ea8:	895b      	ldrh	r3, [r3, #10]
 8014eaa:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8014eae:	d206      	bcs.n	8014ebe <dhcp_create_msg+0x72>
 8014eb0:	4b4b      	ldr	r3, [pc, #300]	@ (8014fe0 <dhcp_create_msg+0x194>)
 8014eb2:	f240 7271 	movw	r2, #1905	@ 0x771
 8014eb6:	494e      	ldr	r1, [pc, #312]	@ (8014ff0 <dhcp_create_msg+0x1a4>)
 8014eb8:	484b      	ldr	r0, [pc, #300]	@ (8014fe8 <dhcp_create_msg+0x19c>)
 8014eba:	f002 fdfd 	bl	8017ab8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8014ebe:	79fb      	ldrb	r3, [r7, #7]
 8014ec0:	2b03      	cmp	r3, #3
 8014ec2:	d103      	bne.n	8014ecc <dhcp_create_msg+0x80>
 8014ec4:	68bb      	ldr	r3, [r7, #8]
 8014ec6:	795b      	ldrb	r3, [r3, #5]
 8014ec8:	2b03      	cmp	r3, #3
 8014eca:	d10d      	bne.n	8014ee8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	799b      	ldrb	r3, [r3, #6]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d105      	bne.n	8014ee0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8014ed4:	f002 fcf0 	bl	80178b8 <rand>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	461a      	mov	r2, r3
 8014edc:	4b45      	ldr	r3, [pc, #276]	@ (8014ff4 <dhcp_create_msg+0x1a8>)
 8014ede:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8014ee0:	4b44      	ldr	r3, [pc, #272]	@ (8014ff4 <dhcp_create_msg+0x1a8>)
 8014ee2:	681a      	ldr	r2, [r3, #0]
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8014ee8:	69bb      	ldr	r3, [r7, #24]
 8014eea:	685b      	ldr	r3, [r3, #4]
 8014eec:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8014eee:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8014ef2:	2100      	movs	r1, #0
 8014ef4:	6978      	ldr	r0, [r7, #20]
 8014ef6:	f002 fe44 	bl	8017b82 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8014efa:	697b      	ldr	r3, [r7, #20]
 8014efc:	2201      	movs	r2, #1
 8014efe:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8014f00:	697b      	ldr	r3, [r7, #20]
 8014f02:	2201      	movs	r2, #1
 8014f04:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8014f0c:	697b      	ldr	r3, [r7, #20]
 8014f0e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	4618      	mov	r0, r3
 8014f16:	f7f5 fa72 	bl	800a3fe <lwip_htonl>
 8014f1a:	4602      	mov	r2, r0
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014f20:	79fb      	ldrb	r3, [r7, #7]
 8014f22:	2b08      	cmp	r3, #8
 8014f24:	d010      	beq.n	8014f48 <dhcp_create_msg+0xfc>
 8014f26:	79fb      	ldrb	r3, [r7, #7]
 8014f28:	2b04      	cmp	r3, #4
 8014f2a:	d00d      	beq.n	8014f48 <dhcp_create_msg+0xfc>
 8014f2c:	79fb      	ldrb	r3, [r7, #7]
 8014f2e:	2b07      	cmp	r3, #7
 8014f30:	d00a      	beq.n	8014f48 <dhcp_create_msg+0xfc>
 8014f32:	79fb      	ldrb	r3, [r7, #7]
 8014f34:	2b03      	cmp	r3, #3
 8014f36:	d10c      	bne.n	8014f52 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014f38:	68bb      	ldr	r3, [r7, #8]
 8014f3a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8014f3c:	2b05      	cmp	r3, #5
 8014f3e:	d003      	beq.n	8014f48 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	795b      	ldrb	r3, [r3, #5]
 8014f44:	2b04      	cmp	r3, #4
 8014f46:	d104      	bne.n	8014f52 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	3304      	adds	r3, #4
 8014f4c:	681a      	ldr	r2, [r3, #0]
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014f52:	2300      	movs	r3, #0
 8014f54:	83fb      	strh	r3, [r7, #30]
 8014f56:	e00c      	b.n	8014f72 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8014f58:	8bfa      	ldrh	r2, [r7, #30]
 8014f5a:	8bfb      	ldrh	r3, [r7, #30]
 8014f5c:	68f9      	ldr	r1, [r7, #12]
 8014f5e:	440a      	add	r2, r1
 8014f60:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8014f64:	697a      	ldr	r2, [r7, #20]
 8014f66:	4413      	add	r3, r2
 8014f68:	460a      	mov	r2, r1
 8014f6a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014f6c:	8bfb      	ldrh	r3, [r7, #30]
 8014f6e:	3301      	adds	r3, #1
 8014f70:	83fb      	strh	r3, [r7, #30]
 8014f72:	8bfb      	ldrh	r3, [r7, #30]
 8014f74:	2b05      	cmp	r3, #5
 8014f76:	d9ef      	bls.n	8014f58 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8014f78:	697b      	ldr	r3, [r7, #20]
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8014f80:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8014f84:	2200      	movs	r2, #0
 8014f86:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8014f8a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8014f8e:	2200      	movs	r2, #0
 8014f90:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8014f94:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8014f98:	2200      	movs	r2, #0
 8014f9a:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8014f9e:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8014fa2:	697b      	ldr	r3, [r7, #20]
 8014fa4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014fa8:	2301      	movs	r3, #1
 8014faa:	2235      	movs	r2, #53	@ 0x35
 8014fac:	2000      	movs	r0, #0
 8014fae:	f7ff fadb 	bl	8014568 <dhcp_option>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8014fb6:	697b      	ldr	r3, [r7, #20]
 8014fb8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014fbc:	79fa      	ldrb	r2, [r7, #7]
 8014fbe:	8a7b      	ldrh	r3, [r7, #18]
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7ff fb05 	bl	80145d0 <dhcp_option_byte>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8014fca:	683b      	ldr	r3, [r7, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d002      	beq.n	8014fd6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	8a7a      	ldrh	r2, [r7, #18]
 8014fd4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8014fd6:	69bb      	ldr	r3, [r7, #24]
}
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3720      	adds	r7, #32
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}
 8014fe0:	0801af9c 	.word	0x0801af9c
 8014fe4:	0801b2bc 	.word	0x0801b2bc
 8014fe8:	0801affc 	.word	0x0801affc
 8014fec:	0801b2dc 	.word	0x0801b2dc
 8014ff0:	0801b2fc 	.word	0x0801b2fc
 8014ff4:	24010608 	.word	0x24010608

08014ff8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b084      	sub	sp, #16
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	4603      	mov	r3, r0
 8015000:	60b9      	str	r1, [r7, #8]
 8015002:	607a      	str	r2, [r7, #4]
 8015004:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015006:	89fb      	ldrh	r3, [r7, #14]
 8015008:	1c5a      	adds	r2, r3, #1
 801500a:	81fa      	strh	r2, [r7, #14]
 801500c:	461a      	mov	r2, r3
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	4413      	add	r3, r2
 8015012:	22ff      	movs	r2, #255	@ 0xff
 8015014:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015016:	e007      	b.n	8015028 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015018:	89fb      	ldrh	r3, [r7, #14]
 801501a:	1c5a      	adds	r2, r3, #1
 801501c:	81fa      	strh	r2, [r7, #14]
 801501e:	461a      	mov	r2, r3
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	4413      	add	r3, r2
 8015024:	2200      	movs	r2, #0
 8015026:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015028:	89fb      	ldrh	r3, [r7, #14]
 801502a:	2b43      	cmp	r3, #67	@ 0x43
 801502c:	d904      	bls.n	8015038 <dhcp_option_trailer+0x40>
 801502e:	89fb      	ldrh	r3, [r7, #14]
 8015030:	f003 0303 	and.w	r3, r3, #3
 8015034:	2b00      	cmp	r3, #0
 8015036:	d002      	beq.n	801503e <dhcp_option_trailer+0x46>
 8015038:	89fb      	ldrh	r3, [r7, #14]
 801503a:	2b43      	cmp	r3, #67	@ 0x43
 801503c:	d9ec      	bls.n	8015018 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801503e:	89fb      	ldrh	r3, [r7, #14]
 8015040:	33f0      	adds	r3, #240	@ 0xf0
 8015042:	b29b      	uxth	r3, r3
 8015044:	4619      	mov	r1, r3
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f7f6 fcf0 	bl	800ba2c <pbuf_realloc>
}
 801504c:	bf00      	nop
 801504e:	3710      	adds	r7, #16
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015054:	b480      	push	{r7}
 8015056:	b085      	sub	sp, #20
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d017      	beq.n	8015092 <dhcp_supplied_address+0x3e>
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015066:	2b00      	cmp	r3, #0
 8015068:	d013      	beq.n	8015092 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801506e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	795b      	ldrb	r3, [r3, #5]
 8015074:	2b0a      	cmp	r3, #10
 8015076:	d007      	beq.n	8015088 <dhcp_supplied_address+0x34>
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	795b      	ldrb	r3, [r3, #5]
 801507c:	2b05      	cmp	r3, #5
 801507e:	d003      	beq.n	8015088 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015084:	2b04      	cmp	r3, #4
 8015086:	d101      	bne.n	801508c <dhcp_supplied_address+0x38>
 8015088:	2301      	movs	r3, #1
 801508a:	e000      	b.n	801508e <dhcp_supplied_address+0x3a>
 801508c:	2300      	movs	r3, #0
 801508e:	b2db      	uxtb	r3, r3
 8015090:	e000      	b.n	8015094 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015092:	2300      	movs	r3, #0
}
 8015094:	4618      	mov	r0, r3
 8015096:	3714      	adds	r7, #20
 8015098:	46bd      	mov	sp, r7
 801509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509e:	4770      	bx	lr

080150a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80150a8:	4915      	ldr	r1, [pc, #84]	@ (8015100 <etharp_free_entry+0x60>)
 80150aa:	687a      	ldr	r2, [r7, #4]
 80150ac:	4613      	mov	r3, r2
 80150ae:	005b      	lsls	r3, r3, #1
 80150b0:	4413      	add	r3, r2
 80150b2:	00db      	lsls	r3, r3, #3
 80150b4:	440b      	add	r3, r1
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d013      	beq.n	80150e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80150bc:	4910      	ldr	r1, [pc, #64]	@ (8015100 <etharp_free_entry+0x60>)
 80150be:	687a      	ldr	r2, [r7, #4]
 80150c0:	4613      	mov	r3, r2
 80150c2:	005b      	lsls	r3, r3, #1
 80150c4:	4413      	add	r3, r2
 80150c6:	00db      	lsls	r3, r3, #3
 80150c8:	440b      	add	r3, r1
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	4618      	mov	r0, r3
 80150ce:	f7f6 fe31 	bl	800bd34 <pbuf_free>
    arp_table[i].q = NULL;
 80150d2:	490b      	ldr	r1, [pc, #44]	@ (8015100 <etharp_free_entry+0x60>)
 80150d4:	687a      	ldr	r2, [r7, #4]
 80150d6:	4613      	mov	r3, r2
 80150d8:	005b      	lsls	r3, r3, #1
 80150da:	4413      	add	r3, r2
 80150dc:	00db      	lsls	r3, r3, #3
 80150de:	440b      	add	r3, r1
 80150e0:	2200      	movs	r2, #0
 80150e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80150e4:	4906      	ldr	r1, [pc, #24]	@ (8015100 <etharp_free_entry+0x60>)
 80150e6:	687a      	ldr	r2, [r7, #4]
 80150e8:	4613      	mov	r3, r2
 80150ea:	005b      	lsls	r3, r3, #1
 80150ec:	4413      	add	r3, r2
 80150ee:	00db      	lsls	r3, r3, #3
 80150f0:	440b      	add	r3, r1
 80150f2:	3314      	adds	r3, #20
 80150f4:	2200      	movs	r2, #0
 80150f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80150f8:	bf00      	nop
 80150fa:	3708      	adds	r7, #8
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}
 8015100:	2401060c 	.word	0x2401060c

08015104 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b082      	sub	sp, #8
 8015108:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801510a:	2300      	movs	r3, #0
 801510c:	607b      	str	r3, [r7, #4]
 801510e:	e096      	b.n	801523e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015110:	494f      	ldr	r1, [pc, #316]	@ (8015250 <etharp_tmr+0x14c>)
 8015112:	687a      	ldr	r2, [r7, #4]
 8015114:	4613      	mov	r3, r2
 8015116:	005b      	lsls	r3, r3, #1
 8015118:	4413      	add	r3, r2
 801511a:	00db      	lsls	r3, r3, #3
 801511c:	440b      	add	r3, r1
 801511e:	3314      	adds	r3, #20
 8015120:	781b      	ldrb	r3, [r3, #0]
 8015122:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015124:	78fb      	ldrb	r3, [r7, #3]
 8015126:	2b00      	cmp	r3, #0
 8015128:	f000 8086 	beq.w	8015238 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801512c:	4948      	ldr	r1, [pc, #288]	@ (8015250 <etharp_tmr+0x14c>)
 801512e:	687a      	ldr	r2, [r7, #4]
 8015130:	4613      	mov	r3, r2
 8015132:	005b      	lsls	r3, r3, #1
 8015134:	4413      	add	r3, r2
 8015136:	00db      	lsls	r3, r3, #3
 8015138:	440b      	add	r3, r1
 801513a:	3312      	adds	r3, #18
 801513c:	881b      	ldrh	r3, [r3, #0]
 801513e:	3301      	adds	r3, #1
 8015140:	b298      	uxth	r0, r3
 8015142:	4943      	ldr	r1, [pc, #268]	@ (8015250 <etharp_tmr+0x14c>)
 8015144:	687a      	ldr	r2, [r7, #4]
 8015146:	4613      	mov	r3, r2
 8015148:	005b      	lsls	r3, r3, #1
 801514a:	4413      	add	r3, r2
 801514c:	00db      	lsls	r3, r3, #3
 801514e:	440b      	add	r3, r1
 8015150:	3312      	adds	r3, #18
 8015152:	4602      	mov	r2, r0
 8015154:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015156:	493e      	ldr	r1, [pc, #248]	@ (8015250 <etharp_tmr+0x14c>)
 8015158:	687a      	ldr	r2, [r7, #4]
 801515a:	4613      	mov	r3, r2
 801515c:	005b      	lsls	r3, r3, #1
 801515e:	4413      	add	r3, r2
 8015160:	00db      	lsls	r3, r3, #3
 8015162:	440b      	add	r3, r1
 8015164:	3312      	adds	r3, #18
 8015166:	881b      	ldrh	r3, [r3, #0]
 8015168:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801516c:	d215      	bcs.n	801519a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801516e:	4938      	ldr	r1, [pc, #224]	@ (8015250 <etharp_tmr+0x14c>)
 8015170:	687a      	ldr	r2, [r7, #4]
 8015172:	4613      	mov	r3, r2
 8015174:	005b      	lsls	r3, r3, #1
 8015176:	4413      	add	r3, r2
 8015178:	00db      	lsls	r3, r3, #3
 801517a:	440b      	add	r3, r1
 801517c:	3314      	adds	r3, #20
 801517e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015180:	2b01      	cmp	r3, #1
 8015182:	d10e      	bne.n	80151a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015184:	4932      	ldr	r1, [pc, #200]	@ (8015250 <etharp_tmr+0x14c>)
 8015186:	687a      	ldr	r2, [r7, #4]
 8015188:	4613      	mov	r3, r2
 801518a:	005b      	lsls	r3, r3, #1
 801518c:	4413      	add	r3, r2
 801518e:	00db      	lsls	r3, r3, #3
 8015190:	440b      	add	r3, r1
 8015192:	3312      	adds	r3, #18
 8015194:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015196:	2b04      	cmp	r3, #4
 8015198:	d903      	bls.n	80151a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801519a:	6878      	ldr	r0, [r7, #4]
 801519c:	f7ff ff80 	bl	80150a0 <etharp_free_entry>
 80151a0:	e04a      	b.n	8015238 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80151a2:	492b      	ldr	r1, [pc, #172]	@ (8015250 <etharp_tmr+0x14c>)
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	4613      	mov	r3, r2
 80151a8:	005b      	lsls	r3, r3, #1
 80151aa:	4413      	add	r3, r2
 80151ac:	00db      	lsls	r3, r3, #3
 80151ae:	440b      	add	r3, r1
 80151b0:	3314      	adds	r3, #20
 80151b2:	781b      	ldrb	r3, [r3, #0]
 80151b4:	2b03      	cmp	r3, #3
 80151b6:	d10a      	bne.n	80151ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80151b8:	4925      	ldr	r1, [pc, #148]	@ (8015250 <etharp_tmr+0x14c>)
 80151ba:	687a      	ldr	r2, [r7, #4]
 80151bc:	4613      	mov	r3, r2
 80151be:	005b      	lsls	r3, r3, #1
 80151c0:	4413      	add	r3, r2
 80151c2:	00db      	lsls	r3, r3, #3
 80151c4:	440b      	add	r3, r1
 80151c6:	3314      	adds	r3, #20
 80151c8:	2204      	movs	r2, #4
 80151ca:	701a      	strb	r2, [r3, #0]
 80151cc:	e034      	b.n	8015238 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80151ce:	4920      	ldr	r1, [pc, #128]	@ (8015250 <etharp_tmr+0x14c>)
 80151d0:	687a      	ldr	r2, [r7, #4]
 80151d2:	4613      	mov	r3, r2
 80151d4:	005b      	lsls	r3, r3, #1
 80151d6:	4413      	add	r3, r2
 80151d8:	00db      	lsls	r3, r3, #3
 80151da:	440b      	add	r3, r1
 80151dc:	3314      	adds	r3, #20
 80151de:	781b      	ldrb	r3, [r3, #0]
 80151e0:	2b04      	cmp	r3, #4
 80151e2:	d10a      	bne.n	80151fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80151e4:	491a      	ldr	r1, [pc, #104]	@ (8015250 <etharp_tmr+0x14c>)
 80151e6:	687a      	ldr	r2, [r7, #4]
 80151e8:	4613      	mov	r3, r2
 80151ea:	005b      	lsls	r3, r3, #1
 80151ec:	4413      	add	r3, r2
 80151ee:	00db      	lsls	r3, r3, #3
 80151f0:	440b      	add	r3, r1
 80151f2:	3314      	adds	r3, #20
 80151f4:	2202      	movs	r2, #2
 80151f6:	701a      	strb	r2, [r3, #0]
 80151f8:	e01e      	b.n	8015238 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80151fa:	4915      	ldr	r1, [pc, #84]	@ (8015250 <etharp_tmr+0x14c>)
 80151fc:	687a      	ldr	r2, [r7, #4]
 80151fe:	4613      	mov	r3, r2
 8015200:	005b      	lsls	r3, r3, #1
 8015202:	4413      	add	r3, r2
 8015204:	00db      	lsls	r3, r3, #3
 8015206:	440b      	add	r3, r1
 8015208:	3314      	adds	r3, #20
 801520a:	781b      	ldrb	r3, [r3, #0]
 801520c:	2b01      	cmp	r3, #1
 801520e:	d113      	bne.n	8015238 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015210:	490f      	ldr	r1, [pc, #60]	@ (8015250 <etharp_tmr+0x14c>)
 8015212:	687a      	ldr	r2, [r7, #4]
 8015214:	4613      	mov	r3, r2
 8015216:	005b      	lsls	r3, r3, #1
 8015218:	4413      	add	r3, r2
 801521a:	00db      	lsls	r3, r3, #3
 801521c:	440b      	add	r3, r1
 801521e:	3308      	adds	r3, #8
 8015220:	6818      	ldr	r0, [r3, #0]
 8015222:	687a      	ldr	r2, [r7, #4]
 8015224:	4613      	mov	r3, r2
 8015226:	005b      	lsls	r3, r3, #1
 8015228:	4413      	add	r3, r2
 801522a:	00db      	lsls	r3, r3, #3
 801522c:	4a08      	ldr	r2, [pc, #32]	@ (8015250 <etharp_tmr+0x14c>)
 801522e:	4413      	add	r3, r2
 8015230:	3304      	adds	r3, #4
 8015232:	4619      	mov	r1, r3
 8015234:	f000 fe76 	bl	8015f24 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	3301      	adds	r3, #1
 801523c:	607b      	str	r3, [r7, #4]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	2b09      	cmp	r3, #9
 8015242:	f77f af65 	ble.w	8015110 <etharp_tmr+0xc>
      }
    }
  }
}
 8015246:	bf00      	nop
 8015248:	bf00      	nop
 801524a:	3708      	adds	r7, #8
 801524c:	46bd      	mov	sp, r7
 801524e:	bd80      	pop	{r7, pc}
 8015250:	2401060c 	.word	0x2401060c

08015254 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b08a      	sub	sp, #40	@ 0x28
 8015258:	af00      	add	r7, sp, #0
 801525a:	60f8      	str	r0, [r7, #12]
 801525c:	460b      	mov	r3, r1
 801525e:	607a      	str	r2, [r7, #4]
 8015260:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015262:	230a      	movs	r3, #10
 8015264:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8015266:	230a      	movs	r3, #10
 8015268:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801526a:	230a      	movs	r3, #10
 801526c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801526e:	2300      	movs	r3, #0
 8015270:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015272:	230a      	movs	r3, #10
 8015274:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015276:	2300      	movs	r3, #0
 8015278:	83bb      	strh	r3, [r7, #28]
 801527a:	2300      	movs	r3, #0
 801527c:	837b      	strh	r3, [r7, #26]
 801527e:	2300      	movs	r3, #0
 8015280:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015282:	2300      	movs	r3, #0
 8015284:	843b      	strh	r3, [r7, #32]
 8015286:	e0ae      	b.n	80153e6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015288:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801528c:	49a6      	ldr	r1, [pc, #664]	@ (8015528 <etharp_find_entry+0x2d4>)
 801528e:	4613      	mov	r3, r2
 8015290:	005b      	lsls	r3, r3, #1
 8015292:	4413      	add	r3, r2
 8015294:	00db      	lsls	r3, r3, #3
 8015296:	440b      	add	r3, r1
 8015298:	3314      	adds	r3, #20
 801529a:	781b      	ldrb	r3, [r3, #0]
 801529c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801529e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80152a2:	2b0a      	cmp	r3, #10
 80152a4:	d105      	bne.n	80152b2 <etharp_find_entry+0x5e>
 80152a6:	7dfb      	ldrb	r3, [r7, #23]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d102      	bne.n	80152b2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80152ac:	8c3b      	ldrh	r3, [r7, #32]
 80152ae:	847b      	strh	r3, [r7, #34]	@ 0x22
 80152b0:	e095      	b.n	80153de <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80152b2:	7dfb      	ldrb	r3, [r7, #23]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	f000 8092 	beq.w	80153de <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80152ba:	7dfb      	ldrb	r3, [r7, #23]
 80152bc:	2b01      	cmp	r3, #1
 80152be:	d009      	beq.n	80152d4 <etharp_find_entry+0x80>
 80152c0:	7dfb      	ldrb	r3, [r7, #23]
 80152c2:	2b01      	cmp	r3, #1
 80152c4:	d806      	bhi.n	80152d4 <etharp_find_entry+0x80>
 80152c6:	4b99      	ldr	r3, [pc, #612]	@ (801552c <etharp_find_entry+0x2d8>)
 80152c8:	f240 1223 	movw	r2, #291	@ 0x123
 80152cc:	4998      	ldr	r1, [pc, #608]	@ (8015530 <etharp_find_entry+0x2dc>)
 80152ce:	4899      	ldr	r0, [pc, #612]	@ (8015534 <etharp_find_entry+0x2e0>)
 80152d0:	f002 fbf2 	bl	8017ab8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d020      	beq.n	801531c <etharp_find_entry+0xc8>
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	6819      	ldr	r1, [r3, #0]
 80152de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80152e2:	4891      	ldr	r0, [pc, #580]	@ (8015528 <etharp_find_entry+0x2d4>)
 80152e4:	4613      	mov	r3, r2
 80152e6:	005b      	lsls	r3, r3, #1
 80152e8:	4413      	add	r3, r2
 80152ea:	00db      	lsls	r3, r3, #3
 80152ec:	4403      	add	r3, r0
 80152ee:	3304      	adds	r3, #4
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	4299      	cmp	r1, r3
 80152f4:	d112      	bne.n	801531c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d00c      	beq.n	8015316 <etharp_find_entry+0xc2>
 80152fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015300:	4989      	ldr	r1, [pc, #548]	@ (8015528 <etharp_find_entry+0x2d4>)
 8015302:	4613      	mov	r3, r2
 8015304:	005b      	lsls	r3, r3, #1
 8015306:	4413      	add	r3, r2
 8015308:	00db      	lsls	r3, r3, #3
 801530a:	440b      	add	r3, r1
 801530c:	3308      	adds	r3, #8
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	687a      	ldr	r2, [r7, #4]
 8015312:	429a      	cmp	r2, r3
 8015314:	d102      	bne.n	801531c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015316:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801531a:	e100      	b.n	801551e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801531c:	7dfb      	ldrb	r3, [r7, #23]
 801531e:	2b01      	cmp	r3, #1
 8015320:	d140      	bne.n	80153a4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015322:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015326:	4980      	ldr	r1, [pc, #512]	@ (8015528 <etharp_find_entry+0x2d4>)
 8015328:	4613      	mov	r3, r2
 801532a:	005b      	lsls	r3, r3, #1
 801532c:	4413      	add	r3, r2
 801532e:	00db      	lsls	r3, r3, #3
 8015330:	440b      	add	r3, r1
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d01a      	beq.n	801536e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015338:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801533c:	497a      	ldr	r1, [pc, #488]	@ (8015528 <etharp_find_entry+0x2d4>)
 801533e:	4613      	mov	r3, r2
 8015340:	005b      	lsls	r3, r3, #1
 8015342:	4413      	add	r3, r2
 8015344:	00db      	lsls	r3, r3, #3
 8015346:	440b      	add	r3, r1
 8015348:	3312      	adds	r3, #18
 801534a:	881b      	ldrh	r3, [r3, #0]
 801534c:	8bba      	ldrh	r2, [r7, #28]
 801534e:	429a      	cmp	r2, r3
 8015350:	d845      	bhi.n	80153de <etharp_find_entry+0x18a>
            old_queue = i;
 8015352:	8c3b      	ldrh	r3, [r7, #32]
 8015354:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015356:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801535a:	4973      	ldr	r1, [pc, #460]	@ (8015528 <etharp_find_entry+0x2d4>)
 801535c:	4613      	mov	r3, r2
 801535e:	005b      	lsls	r3, r3, #1
 8015360:	4413      	add	r3, r2
 8015362:	00db      	lsls	r3, r3, #3
 8015364:	440b      	add	r3, r1
 8015366:	3312      	adds	r3, #18
 8015368:	881b      	ldrh	r3, [r3, #0]
 801536a:	83bb      	strh	r3, [r7, #28]
 801536c:	e037      	b.n	80153de <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801536e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015372:	496d      	ldr	r1, [pc, #436]	@ (8015528 <etharp_find_entry+0x2d4>)
 8015374:	4613      	mov	r3, r2
 8015376:	005b      	lsls	r3, r3, #1
 8015378:	4413      	add	r3, r2
 801537a:	00db      	lsls	r3, r3, #3
 801537c:	440b      	add	r3, r1
 801537e:	3312      	adds	r3, #18
 8015380:	881b      	ldrh	r3, [r3, #0]
 8015382:	8b7a      	ldrh	r2, [r7, #26]
 8015384:	429a      	cmp	r2, r3
 8015386:	d82a      	bhi.n	80153de <etharp_find_entry+0x18a>
            old_pending = i;
 8015388:	8c3b      	ldrh	r3, [r7, #32]
 801538a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801538c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015390:	4965      	ldr	r1, [pc, #404]	@ (8015528 <etharp_find_entry+0x2d4>)
 8015392:	4613      	mov	r3, r2
 8015394:	005b      	lsls	r3, r3, #1
 8015396:	4413      	add	r3, r2
 8015398:	00db      	lsls	r3, r3, #3
 801539a:	440b      	add	r3, r1
 801539c:	3312      	adds	r3, #18
 801539e:	881b      	ldrh	r3, [r3, #0]
 80153a0:	837b      	strh	r3, [r7, #26]
 80153a2:	e01c      	b.n	80153de <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80153a4:	7dfb      	ldrb	r3, [r7, #23]
 80153a6:	2b01      	cmp	r3, #1
 80153a8:	d919      	bls.n	80153de <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80153aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153ae:	495e      	ldr	r1, [pc, #376]	@ (8015528 <etharp_find_entry+0x2d4>)
 80153b0:	4613      	mov	r3, r2
 80153b2:	005b      	lsls	r3, r3, #1
 80153b4:	4413      	add	r3, r2
 80153b6:	00db      	lsls	r3, r3, #3
 80153b8:	440b      	add	r3, r1
 80153ba:	3312      	adds	r3, #18
 80153bc:	881b      	ldrh	r3, [r3, #0]
 80153be:	8b3a      	ldrh	r2, [r7, #24]
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d80c      	bhi.n	80153de <etharp_find_entry+0x18a>
            old_stable = i;
 80153c4:	8c3b      	ldrh	r3, [r7, #32]
 80153c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80153c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153cc:	4956      	ldr	r1, [pc, #344]	@ (8015528 <etharp_find_entry+0x2d4>)
 80153ce:	4613      	mov	r3, r2
 80153d0:	005b      	lsls	r3, r3, #1
 80153d2:	4413      	add	r3, r2
 80153d4:	00db      	lsls	r3, r3, #3
 80153d6:	440b      	add	r3, r1
 80153d8:	3312      	adds	r3, #18
 80153da:	881b      	ldrh	r3, [r3, #0]
 80153dc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80153de:	8c3b      	ldrh	r3, [r7, #32]
 80153e0:	3301      	adds	r3, #1
 80153e2:	b29b      	uxth	r3, r3
 80153e4:	843b      	strh	r3, [r7, #32]
 80153e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80153ea:	2b09      	cmp	r3, #9
 80153ec:	f77f af4c 	ble.w	8015288 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80153f0:	7afb      	ldrb	r3, [r7, #11]
 80153f2:	f003 0302 	and.w	r3, r3, #2
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d108      	bne.n	801540c <etharp_find_entry+0x1b8>
 80153fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80153fe:	2b0a      	cmp	r3, #10
 8015400:	d107      	bne.n	8015412 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015402:	7afb      	ldrb	r3, [r7, #11]
 8015404:	f003 0301 	and.w	r3, r3, #1
 8015408:	2b00      	cmp	r3, #0
 801540a:	d102      	bne.n	8015412 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801540c:	f04f 33ff 	mov.w	r3, #4294967295
 8015410:	e085      	b.n	801551e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015412:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015416:	2b09      	cmp	r3, #9
 8015418:	dc02      	bgt.n	8015420 <etharp_find_entry+0x1cc>
    i = empty;
 801541a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801541c:	843b      	strh	r3, [r7, #32]
 801541e:	e039      	b.n	8015494 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015420:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8015424:	2b09      	cmp	r3, #9
 8015426:	dc14      	bgt.n	8015452 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015428:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801542a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801542c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015430:	493d      	ldr	r1, [pc, #244]	@ (8015528 <etharp_find_entry+0x2d4>)
 8015432:	4613      	mov	r3, r2
 8015434:	005b      	lsls	r3, r3, #1
 8015436:	4413      	add	r3, r2
 8015438:	00db      	lsls	r3, r3, #3
 801543a:	440b      	add	r3, r1
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d018      	beq.n	8015474 <etharp_find_entry+0x220>
 8015442:	4b3a      	ldr	r3, [pc, #232]	@ (801552c <etharp_find_entry+0x2d8>)
 8015444:	f240 126d 	movw	r2, #365	@ 0x16d
 8015448:	493b      	ldr	r1, [pc, #236]	@ (8015538 <etharp_find_entry+0x2e4>)
 801544a:	483a      	ldr	r0, [pc, #232]	@ (8015534 <etharp_find_entry+0x2e0>)
 801544c:	f002 fb34 	bl	8017ab8 <iprintf>
 8015450:	e010      	b.n	8015474 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015452:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8015456:	2b09      	cmp	r3, #9
 8015458:	dc02      	bgt.n	8015460 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801545a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801545c:	843b      	strh	r3, [r7, #32]
 801545e:	e009      	b.n	8015474 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015460:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015464:	2b09      	cmp	r3, #9
 8015466:	dc02      	bgt.n	801546e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015468:	8bfb      	ldrh	r3, [r7, #30]
 801546a:	843b      	strh	r3, [r7, #32]
 801546c:	e002      	b.n	8015474 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801546e:	f04f 33ff 	mov.w	r3, #4294967295
 8015472:	e054      	b.n	801551e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015474:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015478:	2b09      	cmp	r3, #9
 801547a:	dd06      	ble.n	801548a <etharp_find_entry+0x236>
 801547c:	4b2b      	ldr	r3, [pc, #172]	@ (801552c <etharp_find_entry+0x2d8>)
 801547e:	f240 127f 	movw	r2, #383	@ 0x17f
 8015482:	492e      	ldr	r1, [pc, #184]	@ (801553c <etharp_find_entry+0x2e8>)
 8015484:	482b      	ldr	r0, [pc, #172]	@ (8015534 <etharp_find_entry+0x2e0>)
 8015486:	f002 fb17 	bl	8017ab8 <iprintf>
    etharp_free_entry(i);
 801548a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801548e:	4618      	mov	r0, r3
 8015490:	f7ff fe06 	bl	80150a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015494:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015498:	2b09      	cmp	r3, #9
 801549a:	dd06      	ble.n	80154aa <etharp_find_entry+0x256>
 801549c:	4b23      	ldr	r3, [pc, #140]	@ (801552c <etharp_find_entry+0x2d8>)
 801549e:	f240 1283 	movw	r2, #387	@ 0x183
 80154a2:	4926      	ldr	r1, [pc, #152]	@ (801553c <etharp_find_entry+0x2e8>)
 80154a4:	4823      	ldr	r0, [pc, #140]	@ (8015534 <etharp_find_entry+0x2e0>)
 80154a6:	f002 fb07 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80154aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154ae:	491e      	ldr	r1, [pc, #120]	@ (8015528 <etharp_find_entry+0x2d4>)
 80154b0:	4613      	mov	r3, r2
 80154b2:	005b      	lsls	r3, r3, #1
 80154b4:	4413      	add	r3, r2
 80154b6:	00db      	lsls	r3, r3, #3
 80154b8:	440b      	add	r3, r1
 80154ba:	3314      	adds	r3, #20
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d006      	beq.n	80154d0 <etharp_find_entry+0x27c>
 80154c2:	4b1a      	ldr	r3, [pc, #104]	@ (801552c <etharp_find_entry+0x2d8>)
 80154c4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80154c8:	491d      	ldr	r1, [pc, #116]	@ (8015540 <etharp_find_entry+0x2ec>)
 80154ca:	481a      	ldr	r0, [pc, #104]	@ (8015534 <etharp_find_entry+0x2e0>)
 80154cc:	f002 faf4 	bl	8017ab8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d00b      	beq.n	80154ee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80154d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	6819      	ldr	r1, [r3, #0]
 80154de:	4812      	ldr	r0, [pc, #72]	@ (8015528 <etharp_find_entry+0x2d4>)
 80154e0:	4613      	mov	r3, r2
 80154e2:	005b      	lsls	r3, r3, #1
 80154e4:	4413      	add	r3, r2
 80154e6:	00db      	lsls	r3, r3, #3
 80154e8:	4403      	add	r3, r0
 80154ea:	3304      	adds	r3, #4
 80154ec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80154ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154f2:	490d      	ldr	r1, [pc, #52]	@ (8015528 <etharp_find_entry+0x2d4>)
 80154f4:	4613      	mov	r3, r2
 80154f6:	005b      	lsls	r3, r3, #1
 80154f8:	4413      	add	r3, r2
 80154fa:	00db      	lsls	r3, r3, #3
 80154fc:	440b      	add	r3, r1
 80154fe:	3312      	adds	r3, #18
 8015500:	2200      	movs	r2, #0
 8015502:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015504:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015508:	4907      	ldr	r1, [pc, #28]	@ (8015528 <etharp_find_entry+0x2d4>)
 801550a:	4613      	mov	r3, r2
 801550c:	005b      	lsls	r3, r3, #1
 801550e:	4413      	add	r3, r2
 8015510:	00db      	lsls	r3, r3, #3
 8015512:	440b      	add	r3, r1
 8015514:	3308      	adds	r3, #8
 8015516:	687a      	ldr	r2, [r7, #4]
 8015518:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801551a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801551e:	4618      	mov	r0, r3
 8015520:	3728      	adds	r7, #40	@ 0x28
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}
 8015526:	bf00      	nop
 8015528:	2401060c 	.word	0x2401060c
 801552c:	0801b33c 	.word	0x0801b33c
 8015530:	0801b374 	.word	0x0801b374
 8015534:	0801b3b4 	.word	0x0801b3b4
 8015538:	0801b3dc 	.word	0x0801b3dc
 801553c:	0801b3f4 	.word	0x0801b3f4
 8015540:	0801b408 	.word	0x0801b408

08015544 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b088      	sub	sp, #32
 8015548:	af02      	add	r7, sp, #8
 801554a:	60f8      	str	r0, [r7, #12]
 801554c:	60b9      	str	r1, [r7, #8]
 801554e:	607a      	str	r2, [r7, #4]
 8015550:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015558:	2b06      	cmp	r3, #6
 801555a:	d006      	beq.n	801556a <etharp_update_arp_entry+0x26>
 801555c:	4b48      	ldr	r3, [pc, #288]	@ (8015680 <etharp_update_arp_entry+0x13c>)
 801555e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8015562:	4948      	ldr	r1, [pc, #288]	@ (8015684 <etharp_update_arp_entry+0x140>)
 8015564:	4848      	ldr	r0, [pc, #288]	@ (8015688 <etharp_update_arp_entry+0x144>)
 8015566:	f002 faa7 	bl	8017ab8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d012      	beq.n	8015596 <etharp_update_arp_entry+0x52>
 8015570:	68bb      	ldr	r3, [r7, #8]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d00e      	beq.n	8015596 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	68f9      	ldr	r1, [r7, #12]
 801557e:	4618      	mov	r0, r3
 8015580:	f001 f94e 	bl	8016820 <ip4_addr_isbroadcast_u32>
 8015584:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015586:	2b00      	cmp	r3, #0
 8015588:	d105      	bne.n	8015596 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801558a:	68bb      	ldr	r3, [r7, #8]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015592:	2be0      	cmp	r3, #224	@ 0xe0
 8015594:	d102      	bne.n	801559c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015596:	f06f 030f 	mvn.w	r3, #15
 801559a:	e06c      	b.n	8015676 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801559c:	78fb      	ldrb	r3, [r7, #3]
 801559e:	68fa      	ldr	r2, [r7, #12]
 80155a0:	4619      	mov	r1, r3
 80155a2:	68b8      	ldr	r0, [r7, #8]
 80155a4:	f7ff fe56 	bl	8015254 <etharp_find_entry>
 80155a8:	4603      	mov	r3, r0
 80155aa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80155ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	da02      	bge.n	80155ba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80155b4:	8afb      	ldrh	r3, [r7, #22]
 80155b6:	b25b      	sxtb	r3, r3
 80155b8:	e05d      	b.n	8015676 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80155ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80155be:	4933      	ldr	r1, [pc, #204]	@ (801568c <etharp_update_arp_entry+0x148>)
 80155c0:	4613      	mov	r3, r2
 80155c2:	005b      	lsls	r3, r3, #1
 80155c4:	4413      	add	r3, r2
 80155c6:	00db      	lsls	r3, r3, #3
 80155c8:	440b      	add	r3, r1
 80155ca:	3314      	adds	r3, #20
 80155cc:	2202      	movs	r2, #2
 80155ce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80155d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80155d4:	492d      	ldr	r1, [pc, #180]	@ (801568c <etharp_update_arp_entry+0x148>)
 80155d6:	4613      	mov	r3, r2
 80155d8:	005b      	lsls	r3, r3, #1
 80155da:	4413      	add	r3, r2
 80155dc:	00db      	lsls	r3, r3, #3
 80155de:	440b      	add	r3, r1
 80155e0:	3308      	adds	r3, #8
 80155e2:	68fa      	ldr	r2, [r7, #12]
 80155e4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80155e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80155ea:	4613      	mov	r3, r2
 80155ec:	005b      	lsls	r3, r3, #1
 80155ee:	4413      	add	r3, r2
 80155f0:	00db      	lsls	r3, r3, #3
 80155f2:	3308      	adds	r3, #8
 80155f4:	4a25      	ldr	r2, [pc, #148]	@ (801568c <etharp_update_arp_entry+0x148>)
 80155f6:	4413      	add	r3, r2
 80155f8:	3304      	adds	r3, #4
 80155fa:	2206      	movs	r2, #6
 80155fc:	6879      	ldr	r1, [r7, #4]
 80155fe:	4618      	mov	r0, r3
 8015600:	f002 fb8b 	bl	8017d1a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015604:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015608:	4920      	ldr	r1, [pc, #128]	@ (801568c <etharp_update_arp_entry+0x148>)
 801560a:	4613      	mov	r3, r2
 801560c:	005b      	lsls	r3, r3, #1
 801560e:	4413      	add	r3, r2
 8015610:	00db      	lsls	r3, r3, #3
 8015612:	440b      	add	r3, r1
 8015614:	3312      	adds	r3, #18
 8015616:	2200      	movs	r2, #0
 8015618:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801561a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801561e:	491b      	ldr	r1, [pc, #108]	@ (801568c <etharp_update_arp_entry+0x148>)
 8015620:	4613      	mov	r3, r2
 8015622:	005b      	lsls	r3, r3, #1
 8015624:	4413      	add	r3, r2
 8015626:	00db      	lsls	r3, r3, #3
 8015628:	440b      	add	r3, r1
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d021      	beq.n	8015674 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015630:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015634:	4915      	ldr	r1, [pc, #84]	@ (801568c <etharp_update_arp_entry+0x148>)
 8015636:	4613      	mov	r3, r2
 8015638:	005b      	lsls	r3, r3, #1
 801563a:	4413      	add	r3, r2
 801563c:	00db      	lsls	r3, r3, #3
 801563e:	440b      	add	r3, r1
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015644:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015648:	4910      	ldr	r1, [pc, #64]	@ (801568c <etharp_update_arp_entry+0x148>)
 801564a:	4613      	mov	r3, r2
 801564c:	005b      	lsls	r3, r3, #1
 801564e:	4413      	add	r3, r2
 8015650:	00db      	lsls	r3, r3, #3
 8015652:	440b      	add	r3, r1
 8015654:	2200      	movs	r2, #0
 8015656:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801565e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015662:	9300      	str	r3, [sp, #0]
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	6939      	ldr	r1, [r7, #16]
 8015668:	68f8      	ldr	r0, [r7, #12]
 801566a:	f001 ffe9 	bl	8017640 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801566e:	6938      	ldr	r0, [r7, #16]
 8015670:	f7f6 fb60 	bl	800bd34 <pbuf_free>
  }
  return ERR_OK;
 8015674:	2300      	movs	r3, #0
}
 8015676:	4618      	mov	r0, r3
 8015678:	3718      	adds	r7, #24
 801567a:	46bd      	mov	sp, r7
 801567c:	bd80      	pop	{r7, pc}
 801567e:	bf00      	nop
 8015680:	0801b33c 	.word	0x0801b33c
 8015684:	0801b434 	.word	0x0801b434
 8015688:	0801b3b4 	.word	0x0801b3b4
 801568c:	2401060c 	.word	0x2401060c

08015690 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b084      	sub	sp, #16
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015698:	2300      	movs	r3, #0
 801569a:	60fb      	str	r3, [r7, #12]
 801569c:	e01e      	b.n	80156dc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801569e:	4913      	ldr	r1, [pc, #76]	@ (80156ec <etharp_cleanup_netif+0x5c>)
 80156a0:	68fa      	ldr	r2, [r7, #12]
 80156a2:	4613      	mov	r3, r2
 80156a4:	005b      	lsls	r3, r3, #1
 80156a6:	4413      	add	r3, r2
 80156a8:	00db      	lsls	r3, r3, #3
 80156aa:	440b      	add	r3, r1
 80156ac:	3314      	adds	r3, #20
 80156ae:	781b      	ldrb	r3, [r3, #0]
 80156b0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80156b2:	7afb      	ldrb	r3, [r7, #11]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d00e      	beq.n	80156d6 <etharp_cleanup_netif+0x46>
 80156b8:	490c      	ldr	r1, [pc, #48]	@ (80156ec <etharp_cleanup_netif+0x5c>)
 80156ba:	68fa      	ldr	r2, [r7, #12]
 80156bc:	4613      	mov	r3, r2
 80156be:	005b      	lsls	r3, r3, #1
 80156c0:	4413      	add	r3, r2
 80156c2:	00db      	lsls	r3, r3, #3
 80156c4:	440b      	add	r3, r1
 80156c6:	3308      	adds	r3, #8
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	687a      	ldr	r2, [r7, #4]
 80156cc:	429a      	cmp	r2, r3
 80156ce:	d102      	bne.n	80156d6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80156d0:	68f8      	ldr	r0, [r7, #12]
 80156d2:	f7ff fce5 	bl	80150a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	3301      	adds	r3, #1
 80156da:	60fb      	str	r3, [r7, #12]
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	2b09      	cmp	r3, #9
 80156e0:	dddd      	ble.n	801569e <etharp_cleanup_netif+0xe>
    }
  }
}
 80156e2:	bf00      	nop
 80156e4:	bf00      	nop
 80156e6:	3710      	adds	r7, #16
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd80      	pop	{r7, pc}
 80156ec:	2401060c 	.word	0x2401060c

080156f0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80156f0:	b5b0      	push	{r4, r5, r7, lr}
 80156f2:	b08a      	sub	sp, #40	@ 0x28
 80156f4:	af04      	add	r7, sp, #16
 80156f6:	6078      	str	r0, [r7, #4]
 80156f8:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();
 80156fa:	f7f0 fdfb 	bl	80062f4 <sys_check_core_locking>

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80156fe:	683b      	ldr	r3, [r7, #0]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d107      	bne.n	8015714 <etharp_input+0x24>
 8015704:	4b3f      	ldr	r3, [pc, #252]	@ (8015804 <etharp_input+0x114>)
 8015706:	f240 228a 	movw	r2, #650	@ 0x28a
 801570a:	493f      	ldr	r1, [pc, #252]	@ (8015808 <etharp_input+0x118>)
 801570c:	483f      	ldr	r0, [pc, #252]	@ (801580c <etharp_input+0x11c>)
 801570e:	f002 f9d3 	bl	8017ab8 <iprintf>
 8015712:	e074      	b.n	80157fe <etharp_input+0x10e>

  hdr = (struct etharp_hdr *)p->payload;
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	685b      	ldr	r3, [r3, #4]
 8015718:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801571a:	693b      	ldr	r3, [r7, #16]
 801571c:	881b      	ldrh	r3, [r3, #0]
 801571e:	b29b      	uxth	r3, r3
 8015720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015724:	d10c      	bne.n	8015740 <etharp_input+0x50>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015726:	693b      	ldr	r3, [r7, #16]
 8015728:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801572a:	2b06      	cmp	r3, #6
 801572c:	d108      	bne.n	8015740 <etharp_input+0x50>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801572e:	693b      	ldr	r3, [r7, #16]
 8015730:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015732:	2b04      	cmp	r3, #4
 8015734:	d104      	bne.n	8015740 <etharp_input+0x50>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	885b      	ldrh	r3, [r3, #2]
 801573a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801573c:	2b08      	cmp	r3, #8
 801573e:	d003      	beq.n	8015748 <etharp_input+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f7f6 faf7 	bl	800bd34 <pbuf_free>
    return;
 8015746:	e05a      	b.n	80157fe <etharp_input+0x10e>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015748:	693b      	ldr	r3, [r7, #16]
 801574a:	330e      	adds	r3, #14
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015750:	693b      	ldr	r3, [r7, #16]
 8015752:	3318      	adds	r3, #24
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015758:	683b      	ldr	r3, [r7, #0]
 801575a:	3304      	adds	r3, #4
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d102      	bne.n	8015768 <etharp_input+0x78>
    for_us = 0;
 8015762:	2300      	movs	r3, #0
 8015764:	75fb      	strb	r3, [r7, #23]
 8015766:	e009      	b.n	801577c <etharp_input+0x8c>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015768:	68ba      	ldr	r2, [r7, #8]
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	3304      	adds	r3, #4
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	429a      	cmp	r2, r3
 8015772:	bf0c      	ite	eq
 8015774:	2301      	moveq	r3, #1
 8015776:	2300      	movne	r3, #0
 8015778:	b2db      	uxtb	r3, r3
 801577a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801577c:	693b      	ldr	r3, [r7, #16]
 801577e:	f103 0208 	add.w	r2, r3, #8
 8015782:	7dfb      	ldrb	r3, [r7, #23]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d001      	beq.n	801578c <etharp_input+0x9c>
 8015788:	2301      	movs	r3, #1
 801578a:	e000      	b.n	801578e <etharp_input+0x9e>
 801578c:	2302      	movs	r3, #2
 801578e:	f107 010c 	add.w	r1, r7, #12
 8015792:	6838      	ldr	r0, [r7, #0]
 8015794:	f7ff fed6 	bl	8015544 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015798:	693b      	ldr	r3, [r7, #16]
 801579a:	88db      	ldrh	r3, [r3, #6]
 801579c:	b29b      	uxth	r3, r3
 801579e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80157a2:	d003      	beq.n	80157ac <etharp_input+0xbc>
 80157a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80157a8:	d01e      	beq.n	80157e8 <etharp_input+0xf8>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80157aa:	e025      	b.n	80157f8 <etharp_input+0x108>
      if (for_us) {
 80157ac:	7dfb      	ldrb	r3, [r7, #23]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d021      	beq.n	80157f6 <etharp_input+0x106>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80157b2:	683b      	ldr	r3, [r7, #0]
 80157b4:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80157b8:	693b      	ldr	r3, [r7, #16]
 80157ba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 80157c4:	683b      	ldr	r3, [r7, #0]
 80157c6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80157c8:	693a      	ldr	r2, [r7, #16]
 80157ca:	3208      	adds	r2, #8
        etharp_raw(netif,
 80157cc:	2102      	movs	r1, #2
 80157ce:	9103      	str	r1, [sp, #12]
 80157d0:	f107 010c 	add.w	r1, r7, #12
 80157d4:	9102      	str	r1, [sp, #8]
 80157d6:	9201      	str	r2, [sp, #4]
 80157d8:	9300      	str	r3, [sp, #0]
 80157da:	462b      	mov	r3, r5
 80157dc:	4622      	mov	r2, r4
 80157de:	4601      	mov	r1, r0
 80157e0:	6838      	ldr	r0, [r7, #0]
 80157e2:	f000 faf1 	bl	8015dc8 <etharp_raw>
      break;
 80157e6:	e006      	b.n	80157f6 <etharp_input+0x106>
      dhcp_arp_reply(netif, &sipaddr);
 80157e8:	f107 030c 	add.w	r3, r7, #12
 80157ec:	4619      	mov	r1, r3
 80157ee:	6838      	ldr	r0, [r7, #0]
 80157f0:	f7fe f9fc 	bl	8013bec <dhcp_arp_reply>
      break;
 80157f4:	e000      	b.n	80157f8 <etharp_input+0x108>
      break;
 80157f6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80157f8:	6878      	ldr	r0, [r7, #4]
 80157fa:	f7f6 fa9b 	bl	800bd34 <pbuf_free>
}
 80157fe:	3718      	adds	r7, #24
 8015800:	46bd      	mov	sp, r7
 8015802:	bdb0      	pop	{r4, r5, r7, pc}
 8015804:	0801b33c 	.word	0x0801b33c
 8015808:	0801b48c 	.word	0x0801b48c
 801580c:	0801b3b4 	.word	0x0801b3b4

08015810 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b086      	sub	sp, #24
 8015814:	af02      	add	r7, sp, #8
 8015816:	60f8      	str	r0, [r7, #12]
 8015818:	60b9      	str	r1, [r7, #8]
 801581a:	4613      	mov	r3, r2
 801581c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801581e:	79fa      	ldrb	r2, [r7, #7]
 8015820:	4944      	ldr	r1, [pc, #272]	@ (8015934 <etharp_output_to_arp_index+0x124>)
 8015822:	4613      	mov	r3, r2
 8015824:	005b      	lsls	r3, r3, #1
 8015826:	4413      	add	r3, r2
 8015828:	00db      	lsls	r3, r3, #3
 801582a:	440b      	add	r3, r1
 801582c:	3314      	adds	r3, #20
 801582e:	781b      	ldrb	r3, [r3, #0]
 8015830:	2b01      	cmp	r3, #1
 8015832:	d806      	bhi.n	8015842 <etharp_output_to_arp_index+0x32>
 8015834:	4b40      	ldr	r3, [pc, #256]	@ (8015938 <etharp_output_to_arp_index+0x128>)
 8015836:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801583a:	4940      	ldr	r1, [pc, #256]	@ (801593c <etharp_output_to_arp_index+0x12c>)
 801583c:	4840      	ldr	r0, [pc, #256]	@ (8015940 <etharp_output_to_arp_index+0x130>)
 801583e:	f002 f93b 	bl	8017ab8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015842:	79fa      	ldrb	r2, [r7, #7]
 8015844:	493b      	ldr	r1, [pc, #236]	@ (8015934 <etharp_output_to_arp_index+0x124>)
 8015846:	4613      	mov	r3, r2
 8015848:	005b      	lsls	r3, r3, #1
 801584a:	4413      	add	r3, r2
 801584c:	00db      	lsls	r3, r3, #3
 801584e:	440b      	add	r3, r1
 8015850:	3314      	adds	r3, #20
 8015852:	781b      	ldrb	r3, [r3, #0]
 8015854:	2b02      	cmp	r3, #2
 8015856:	d153      	bne.n	8015900 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015858:	79fa      	ldrb	r2, [r7, #7]
 801585a:	4936      	ldr	r1, [pc, #216]	@ (8015934 <etharp_output_to_arp_index+0x124>)
 801585c:	4613      	mov	r3, r2
 801585e:	005b      	lsls	r3, r3, #1
 8015860:	4413      	add	r3, r2
 8015862:	00db      	lsls	r3, r3, #3
 8015864:	440b      	add	r3, r1
 8015866:	3312      	adds	r3, #18
 8015868:	881b      	ldrh	r3, [r3, #0]
 801586a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801586e:	d919      	bls.n	80158a4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015870:	79fa      	ldrb	r2, [r7, #7]
 8015872:	4613      	mov	r3, r2
 8015874:	005b      	lsls	r3, r3, #1
 8015876:	4413      	add	r3, r2
 8015878:	00db      	lsls	r3, r3, #3
 801587a:	4a2e      	ldr	r2, [pc, #184]	@ (8015934 <etharp_output_to_arp_index+0x124>)
 801587c:	4413      	add	r3, r2
 801587e:	3304      	adds	r3, #4
 8015880:	4619      	mov	r1, r3
 8015882:	68f8      	ldr	r0, [r7, #12]
 8015884:	f000 fb4e 	bl	8015f24 <etharp_request>
 8015888:	4603      	mov	r3, r0
 801588a:	2b00      	cmp	r3, #0
 801588c:	d138      	bne.n	8015900 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801588e:	79fa      	ldrb	r2, [r7, #7]
 8015890:	4928      	ldr	r1, [pc, #160]	@ (8015934 <etharp_output_to_arp_index+0x124>)
 8015892:	4613      	mov	r3, r2
 8015894:	005b      	lsls	r3, r3, #1
 8015896:	4413      	add	r3, r2
 8015898:	00db      	lsls	r3, r3, #3
 801589a:	440b      	add	r3, r1
 801589c:	3314      	adds	r3, #20
 801589e:	2203      	movs	r2, #3
 80158a0:	701a      	strb	r2, [r3, #0]
 80158a2:	e02d      	b.n	8015900 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80158a4:	79fa      	ldrb	r2, [r7, #7]
 80158a6:	4923      	ldr	r1, [pc, #140]	@ (8015934 <etharp_output_to_arp_index+0x124>)
 80158a8:	4613      	mov	r3, r2
 80158aa:	005b      	lsls	r3, r3, #1
 80158ac:	4413      	add	r3, r2
 80158ae:	00db      	lsls	r3, r3, #3
 80158b0:	440b      	add	r3, r1
 80158b2:	3312      	adds	r3, #18
 80158b4:	881b      	ldrh	r3, [r3, #0]
 80158b6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80158ba:	d321      	bcc.n	8015900 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80158bc:	79fa      	ldrb	r2, [r7, #7]
 80158be:	4613      	mov	r3, r2
 80158c0:	005b      	lsls	r3, r3, #1
 80158c2:	4413      	add	r3, r2
 80158c4:	00db      	lsls	r3, r3, #3
 80158c6:	4a1b      	ldr	r2, [pc, #108]	@ (8015934 <etharp_output_to_arp_index+0x124>)
 80158c8:	4413      	add	r3, r2
 80158ca:	1d19      	adds	r1, r3, #4
 80158cc:	79fa      	ldrb	r2, [r7, #7]
 80158ce:	4613      	mov	r3, r2
 80158d0:	005b      	lsls	r3, r3, #1
 80158d2:	4413      	add	r3, r2
 80158d4:	00db      	lsls	r3, r3, #3
 80158d6:	3308      	adds	r3, #8
 80158d8:	4a16      	ldr	r2, [pc, #88]	@ (8015934 <etharp_output_to_arp_index+0x124>)
 80158da:	4413      	add	r3, r2
 80158dc:	3304      	adds	r3, #4
 80158de:	461a      	mov	r2, r3
 80158e0:	68f8      	ldr	r0, [r7, #12]
 80158e2:	f000 fafd 	bl	8015ee0 <etharp_request_dst>
 80158e6:	4603      	mov	r3, r0
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d109      	bne.n	8015900 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80158ec:	79fa      	ldrb	r2, [r7, #7]
 80158ee:	4911      	ldr	r1, [pc, #68]	@ (8015934 <etharp_output_to_arp_index+0x124>)
 80158f0:	4613      	mov	r3, r2
 80158f2:	005b      	lsls	r3, r3, #1
 80158f4:	4413      	add	r3, r2
 80158f6:	00db      	lsls	r3, r3, #3
 80158f8:	440b      	add	r3, r1
 80158fa:	3314      	adds	r3, #20
 80158fc:	2203      	movs	r2, #3
 80158fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8015906:	79fa      	ldrb	r2, [r7, #7]
 8015908:	4613      	mov	r3, r2
 801590a:	005b      	lsls	r3, r3, #1
 801590c:	4413      	add	r3, r2
 801590e:	00db      	lsls	r3, r3, #3
 8015910:	3308      	adds	r3, #8
 8015912:	4a08      	ldr	r2, [pc, #32]	@ (8015934 <etharp_output_to_arp_index+0x124>)
 8015914:	4413      	add	r3, r2
 8015916:	3304      	adds	r3, #4
 8015918:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801591c:	9200      	str	r2, [sp, #0]
 801591e:	460a      	mov	r2, r1
 8015920:	68b9      	ldr	r1, [r7, #8]
 8015922:	68f8      	ldr	r0, [r7, #12]
 8015924:	f001 fe8c 	bl	8017640 <ethernet_output>
 8015928:	4603      	mov	r3, r0
}
 801592a:	4618      	mov	r0, r3
 801592c:	3710      	adds	r7, #16
 801592e:	46bd      	mov	sp, r7
 8015930:	bd80      	pop	{r7, pc}
 8015932:	bf00      	nop
 8015934:	2401060c 	.word	0x2401060c
 8015938:	0801b33c 	.word	0x0801b33c
 801593c:	0801b4ac 	.word	0x0801b4ac
 8015940:	0801b3b4 	.word	0x0801b3b4

08015944 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b08a      	sub	sp, #40	@ 0x28
 8015948:	af02      	add	r7, sp, #8
 801594a:	60f8      	str	r0, [r7, #12]
 801594c:	60b9      	str	r1, [r7, #8]
 801594e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
 8015954:	f7f0 fcce 	bl	80062f4 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d106      	bne.n	801596c <etharp_output+0x28>
 801595e:	4b73      	ldr	r3, [pc, #460]	@ (8015b2c <etharp_output+0x1e8>)
 8015960:	f240 321e 	movw	r2, #798	@ 0x31e
 8015964:	4972      	ldr	r1, [pc, #456]	@ (8015b30 <etharp_output+0x1ec>)
 8015966:	4873      	ldr	r0, [pc, #460]	@ (8015b34 <etharp_output+0x1f0>)
 8015968:	f002 f8a6 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801596c:	68bb      	ldr	r3, [r7, #8]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d106      	bne.n	8015980 <etharp_output+0x3c>
 8015972:	4b6e      	ldr	r3, [pc, #440]	@ (8015b2c <etharp_output+0x1e8>)
 8015974:	f240 321f 	movw	r2, #799	@ 0x31f
 8015978:	496f      	ldr	r1, [pc, #444]	@ (8015b38 <etharp_output+0x1f4>)
 801597a:	486e      	ldr	r0, [pc, #440]	@ (8015b34 <etharp_output+0x1f0>)
 801597c:	f002 f89c 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d106      	bne.n	8015994 <etharp_output+0x50>
 8015986:	4b69      	ldr	r3, [pc, #420]	@ (8015b2c <etharp_output+0x1e8>)
 8015988:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801598c:	496b      	ldr	r1, [pc, #428]	@ (8015b3c <etharp_output+0x1f8>)
 801598e:	4869      	ldr	r0, [pc, #420]	@ (8015b34 <etharp_output+0x1f0>)
 8015990:	f002 f892 	bl	8017ab8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	68f9      	ldr	r1, [r7, #12]
 801599a:	4618      	mov	r0, r3
 801599c:	f000 ff40 	bl	8016820 <ip4_addr_isbroadcast_u32>
 80159a0:	4603      	mov	r3, r0
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d002      	beq.n	80159ac <etharp_output+0x68>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80159a6:	4b66      	ldr	r3, [pc, #408]	@ (8015b40 <etharp_output+0x1fc>)
 80159a8:	61fb      	str	r3, [r7, #28]
 80159aa:	e0af      	b.n	8015b0c <etharp_output+0x1c8>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80159b4:	2be0      	cmp	r3, #224	@ 0xe0
 80159b6:	d118      	bne.n	80159ea <etharp_output+0xa6>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80159b8:	2301      	movs	r3, #1
 80159ba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80159bc:	2300      	movs	r3, #0
 80159be:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80159c0:	235e      	movs	r3, #94	@ 0x5e
 80159c2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	3301      	adds	r3, #1
 80159c8:	781b      	ldrb	r3, [r3, #0]
 80159ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80159ce:	b2db      	uxtb	r3, r3
 80159d0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	3302      	adds	r3, #2
 80159d6:	781b      	ldrb	r3, [r3, #0]
 80159d8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	3303      	adds	r3, #3
 80159de:	781b      	ldrb	r3, [r3, #0]
 80159e0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80159e2:	f107 0310 	add.w	r3, r7, #16
 80159e6:	61fb      	str	r3, [r7, #28]
 80159e8:	e090      	b.n	8015b0c <etharp_output+0x1c8>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	681a      	ldr	r2, [r3, #0]
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	3304      	adds	r3, #4
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	405a      	eors	r2, r3
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	3308      	adds	r3, #8
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	4013      	ands	r3, r2
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d012      	beq.n	8015a28 <etharp_output+0xe4>
        !ip4_addr_islinklocal(ipaddr)) {
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015a08:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8015a0c:	4293      	cmp	r3, r2
 8015a0e:	d00b      	beq.n	8015a28 <etharp_output+0xe4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	330c      	adds	r3, #12
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d003      	beq.n	8015a22 <etharp_output+0xde>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	330c      	adds	r3, #12
 8015a1e:	61bb      	str	r3, [r7, #24]
 8015a20:	e002      	b.n	8015a28 <etharp_output+0xe4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015a22:	f06f 0303 	mvn.w	r3, #3
 8015a26:	e07d      	b.n	8015b24 <etharp_output+0x1e0>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015a28:	4b46      	ldr	r3, [pc, #280]	@ (8015b44 <etharp_output+0x200>)
 8015a2a:	781b      	ldrb	r3, [r3, #0]
 8015a2c:	4619      	mov	r1, r3
 8015a2e:	4a46      	ldr	r2, [pc, #280]	@ (8015b48 <etharp_output+0x204>)
 8015a30:	460b      	mov	r3, r1
 8015a32:	005b      	lsls	r3, r3, #1
 8015a34:	440b      	add	r3, r1
 8015a36:	00db      	lsls	r3, r3, #3
 8015a38:	4413      	add	r3, r2
 8015a3a:	3314      	adds	r3, #20
 8015a3c:	781b      	ldrb	r3, [r3, #0]
 8015a3e:	2b01      	cmp	r3, #1
 8015a40:	d925      	bls.n	8015a8e <etharp_output+0x14a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015a42:	4b40      	ldr	r3, [pc, #256]	@ (8015b44 <etharp_output+0x200>)
 8015a44:	781b      	ldrb	r3, [r3, #0]
 8015a46:	4619      	mov	r1, r3
 8015a48:	4a3f      	ldr	r2, [pc, #252]	@ (8015b48 <etharp_output+0x204>)
 8015a4a:	460b      	mov	r3, r1
 8015a4c:	005b      	lsls	r3, r3, #1
 8015a4e:	440b      	add	r3, r1
 8015a50:	00db      	lsls	r3, r3, #3
 8015a52:	4413      	add	r3, r2
 8015a54:	3308      	adds	r3, #8
 8015a56:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015a58:	68fa      	ldr	r2, [r7, #12]
 8015a5a:	429a      	cmp	r2, r3
 8015a5c:	d117      	bne.n	8015a8e <etharp_output+0x14a>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015a5e:	69bb      	ldr	r3, [r7, #24]
 8015a60:	681a      	ldr	r2, [r3, #0]
 8015a62:	4b38      	ldr	r3, [pc, #224]	@ (8015b44 <etharp_output+0x200>)
 8015a64:	781b      	ldrb	r3, [r3, #0]
 8015a66:	4618      	mov	r0, r3
 8015a68:	4937      	ldr	r1, [pc, #220]	@ (8015b48 <etharp_output+0x204>)
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	005b      	lsls	r3, r3, #1
 8015a6e:	4403      	add	r3, r0
 8015a70:	00db      	lsls	r3, r3, #3
 8015a72:	440b      	add	r3, r1
 8015a74:	3304      	adds	r3, #4
 8015a76:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015a78:	429a      	cmp	r2, r3
 8015a7a:	d108      	bne.n	8015a8e <etharp_output+0x14a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015a7c:	4b31      	ldr	r3, [pc, #196]	@ (8015b44 <etharp_output+0x200>)
 8015a7e:	781b      	ldrb	r3, [r3, #0]
 8015a80:	461a      	mov	r2, r3
 8015a82:	68b9      	ldr	r1, [r7, #8]
 8015a84:	68f8      	ldr	r0, [r7, #12]
 8015a86:	f7ff fec3 	bl	8015810 <etharp_output_to_arp_index>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	e04a      	b.n	8015b24 <etharp_output+0x1e0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015a8e:	2300      	movs	r3, #0
 8015a90:	75fb      	strb	r3, [r7, #23]
 8015a92:	e031      	b.n	8015af8 <etharp_output+0x1b4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015a94:	7dfa      	ldrb	r2, [r7, #23]
 8015a96:	492c      	ldr	r1, [pc, #176]	@ (8015b48 <etharp_output+0x204>)
 8015a98:	4613      	mov	r3, r2
 8015a9a:	005b      	lsls	r3, r3, #1
 8015a9c:	4413      	add	r3, r2
 8015a9e:	00db      	lsls	r3, r3, #3
 8015aa0:	440b      	add	r3, r1
 8015aa2:	3314      	adds	r3, #20
 8015aa4:	781b      	ldrb	r3, [r3, #0]
 8015aa6:	2b01      	cmp	r3, #1
 8015aa8:	d923      	bls.n	8015af2 <etharp_output+0x1ae>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015aaa:	7dfa      	ldrb	r2, [r7, #23]
 8015aac:	4926      	ldr	r1, [pc, #152]	@ (8015b48 <etharp_output+0x204>)
 8015aae:	4613      	mov	r3, r2
 8015ab0:	005b      	lsls	r3, r3, #1
 8015ab2:	4413      	add	r3, r2
 8015ab4:	00db      	lsls	r3, r3, #3
 8015ab6:	440b      	add	r3, r1
 8015ab8:	3308      	adds	r3, #8
 8015aba:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015abc:	68fa      	ldr	r2, [r7, #12]
 8015abe:	429a      	cmp	r2, r3
 8015ac0:	d117      	bne.n	8015af2 <etharp_output+0x1ae>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015ac2:	69bb      	ldr	r3, [r7, #24]
 8015ac4:	6819      	ldr	r1, [r3, #0]
 8015ac6:	7dfa      	ldrb	r2, [r7, #23]
 8015ac8:	481f      	ldr	r0, [pc, #124]	@ (8015b48 <etharp_output+0x204>)
 8015aca:	4613      	mov	r3, r2
 8015acc:	005b      	lsls	r3, r3, #1
 8015ace:	4413      	add	r3, r2
 8015ad0:	00db      	lsls	r3, r3, #3
 8015ad2:	4403      	add	r3, r0
 8015ad4:	3304      	adds	r3, #4
 8015ad6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015ad8:	4299      	cmp	r1, r3
 8015ada:	d10a      	bne.n	8015af2 <etharp_output+0x1ae>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015adc:	4a19      	ldr	r2, [pc, #100]	@ (8015b44 <etharp_output+0x200>)
 8015ade:	7dfb      	ldrb	r3, [r7, #23]
 8015ae0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015ae2:	7dfb      	ldrb	r3, [r7, #23]
 8015ae4:	461a      	mov	r2, r3
 8015ae6:	68b9      	ldr	r1, [r7, #8]
 8015ae8:	68f8      	ldr	r0, [r7, #12]
 8015aea:	f7ff fe91 	bl	8015810 <etharp_output_to_arp_index>
 8015aee:	4603      	mov	r3, r0
 8015af0:	e018      	b.n	8015b24 <etharp_output+0x1e0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015af2:	7dfb      	ldrb	r3, [r7, #23]
 8015af4:	3301      	adds	r3, #1
 8015af6:	75fb      	strb	r3, [r7, #23]
 8015af8:	7dfb      	ldrb	r3, [r7, #23]
 8015afa:	2b09      	cmp	r3, #9
 8015afc:	d9ca      	bls.n	8015a94 <etharp_output+0x150>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015afe:	68ba      	ldr	r2, [r7, #8]
 8015b00:	69b9      	ldr	r1, [r7, #24]
 8015b02:	68f8      	ldr	r0, [r7, #12]
 8015b04:	f000 f822 	bl	8015b4c <etharp_query>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	e00b      	b.n	8015b24 <etharp_output+0x1e0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8015b12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015b16:	9300      	str	r3, [sp, #0]
 8015b18:	69fb      	ldr	r3, [r7, #28]
 8015b1a:	68b9      	ldr	r1, [r7, #8]
 8015b1c:	68f8      	ldr	r0, [r7, #12]
 8015b1e:	f001 fd8f 	bl	8017640 <ethernet_output>
 8015b22:	4603      	mov	r3, r0
}
 8015b24:	4618      	mov	r0, r3
 8015b26:	3720      	adds	r7, #32
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bd80      	pop	{r7, pc}
 8015b2c:	0801b33c 	.word	0x0801b33c
 8015b30:	0801b48c 	.word	0x0801b48c
 8015b34:	0801b3b4 	.word	0x0801b3b4
 8015b38:	0801b4dc 	.word	0x0801b4dc
 8015b3c:	0801b47c 	.word	0x0801b47c
 8015b40:	0801c1b0 	.word	0x0801c1b0
 8015b44:	240106fc 	.word	0x240106fc
 8015b48:	2401060c 	.word	0x2401060c

08015b4c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b08c      	sub	sp, #48	@ 0x30
 8015b50:	af02      	add	r7, sp, #8
 8015b52:	60f8      	str	r0, [r7, #12]
 8015b54:	60b9      	str	r1, [r7, #8]
 8015b56:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	332a      	adds	r3, #42	@ 0x2a
 8015b5c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015b5e:	23ff      	movs	r3, #255	@ 0xff
 8015b60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8015b64:	2300      	movs	r3, #0
 8015b66:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015b68:	68bb      	ldr	r3, [r7, #8]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	68f9      	ldr	r1, [r7, #12]
 8015b6e:	4618      	mov	r0, r3
 8015b70:	f000 fe56 	bl	8016820 <ip4_addr_isbroadcast_u32>
 8015b74:	4603      	mov	r3, r0
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d10c      	bne.n	8015b94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015b7a:	68bb      	ldr	r3, [r7, #8]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015b82:	2be0      	cmp	r3, #224	@ 0xe0
 8015b84:	d006      	beq.n	8015b94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015b86:	68bb      	ldr	r3, [r7, #8]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d003      	beq.n	8015b94 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015b8c:	68bb      	ldr	r3, [r7, #8]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d102      	bne.n	8015b9a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015b94:	f06f 030f 	mvn.w	r3, #15
 8015b98:	e101      	b.n	8015d9e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015b9a:	68fa      	ldr	r2, [r7, #12]
 8015b9c:	2101      	movs	r1, #1
 8015b9e:	68b8      	ldr	r0, [r7, #8]
 8015ba0:	f7ff fb58 	bl	8015254 <etharp_find_entry>
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015ba8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	da02      	bge.n	8015bb6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015bb0:	8a7b      	ldrh	r3, [r7, #18]
 8015bb2:	b25b      	sxtb	r3, r3
 8015bb4:	e0f3      	b.n	8015d9e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015bb6:	8a7b      	ldrh	r3, [r7, #18]
 8015bb8:	2b7e      	cmp	r3, #126	@ 0x7e
 8015bba:	d906      	bls.n	8015bca <etharp_query+0x7e>
 8015bbc:	4b7a      	ldr	r3, [pc, #488]	@ (8015da8 <etharp_query+0x25c>)
 8015bbe:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8015bc2:	497a      	ldr	r1, [pc, #488]	@ (8015dac <etharp_query+0x260>)
 8015bc4:	487a      	ldr	r0, [pc, #488]	@ (8015db0 <etharp_query+0x264>)
 8015bc6:	f001 ff77 	bl	8017ab8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015bca:	8a7b      	ldrh	r3, [r7, #18]
 8015bcc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015bce:	7c7a      	ldrb	r2, [r7, #17]
 8015bd0:	4978      	ldr	r1, [pc, #480]	@ (8015db4 <etharp_query+0x268>)
 8015bd2:	4613      	mov	r3, r2
 8015bd4:	005b      	lsls	r3, r3, #1
 8015bd6:	4413      	add	r3, r2
 8015bd8:	00db      	lsls	r3, r3, #3
 8015bda:	440b      	add	r3, r1
 8015bdc:	3314      	adds	r3, #20
 8015bde:	781b      	ldrb	r3, [r3, #0]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d115      	bne.n	8015c10 <etharp_query+0xc4>
    is_new_entry = 1;
 8015be4:	2301      	movs	r3, #1
 8015be6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015be8:	7c7a      	ldrb	r2, [r7, #17]
 8015bea:	4972      	ldr	r1, [pc, #456]	@ (8015db4 <etharp_query+0x268>)
 8015bec:	4613      	mov	r3, r2
 8015bee:	005b      	lsls	r3, r3, #1
 8015bf0:	4413      	add	r3, r2
 8015bf2:	00db      	lsls	r3, r3, #3
 8015bf4:	440b      	add	r3, r1
 8015bf6:	3314      	adds	r3, #20
 8015bf8:	2201      	movs	r2, #1
 8015bfa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015bfc:	7c7a      	ldrb	r2, [r7, #17]
 8015bfe:	496d      	ldr	r1, [pc, #436]	@ (8015db4 <etharp_query+0x268>)
 8015c00:	4613      	mov	r3, r2
 8015c02:	005b      	lsls	r3, r3, #1
 8015c04:	4413      	add	r3, r2
 8015c06:	00db      	lsls	r3, r3, #3
 8015c08:	440b      	add	r3, r1
 8015c0a:	3308      	adds	r3, #8
 8015c0c:	68fa      	ldr	r2, [r7, #12]
 8015c0e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015c10:	7c7a      	ldrb	r2, [r7, #17]
 8015c12:	4968      	ldr	r1, [pc, #416]	@ (8015db4 <etharp_query+0x268>)
 8015c14:	4613      	mov	r3, r2
 8015c16:	005b      	lsls	r3, r3, #1
 8015c18:	4413      	add	r3, r2
 8015c1a:	00db      	lsls	r3, r3, #3
 8015c1c:	440b      	add	r3, r1
 8015c1e:	3314      	adds	r3, #20
 8015c20:	781b      	ldrb	r3, [r3, #0]
 8015c22:	2b01      	cmp	r3, #1
 8015c24:	d011      	beq.n	8015c4a <etharp_query+0xfe>
 8015c26:	7c7a      	ldrb	r2, [r7, #17]
 8015c28:	4962      	ldr	r1, [pc, #392]	@ (8015db4 <etharp_query+0x268>)
 8015c2a:	4613      	mov	r3, r2
 8015c2c:	005b      	lsls	r3, r3, #1
 8015c2e:	4413      	add	r3, r2
 8015c30:	00db      	lsls	r3, r3, #3
 8015c32:	440b      	add	r3, r1
 8015c34:	3314      	adds	r3, #20
 8015c36:	781b      	ldrb	r3, [r3, #0]
 8015c38:	2b01      	cmp	r3, #1
 8015c3a:	d806      	bhi.n	8015c4a <etharp_query+0xfe>
 8015c3c:	4b5a      	ldr	r3, [pc, #360]	@ (8015da8 <etharp_query+0x25c>)
 8015c3e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8015c42:	495d      	ldr	r1, [pc, #372]	@ (8015db8 <etharp_query+0x26c>)
 8015c44:	485a      	ldr	r0, [pc, #360]	@ (8015db0 <etharp_query+0x264>)
 8015c46:	f001 ff37 	bl	8017ab8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015c4a:	6a3b      	ldr	r3, [r7, #32]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d102      	bne.n	8015c56 <etharp_query+0x10a>
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d10c      	bne.n	8015c70 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015c56:	68b9      	ldr	r1, [r7, #8]
 8015c58:	68f8      	ldr	r0, [r7, #12]
 8015c5a:	f000 f963 	bl	8015f24 <etharp_request>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d102      	bne.n	8015c70 <etharp_query+0x124>
      return result;
 8015c6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015c6e:	e096      	b.n	8015d9e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d106      	bne.n	8015c84 <etharp_query+0x138>
 8015c76:	4b4c      	ldr	r3, [pc, #304]	@ (8015da8 <etharp_query+0x25c>)
 8015c78:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8015c7c:	494f      	ldr	r1, [pc, #316]	@ (8015dbc <etharp_query+0x270>)
 8015c7e:	484c      	ldr	r0, [pc, #304]	@ (8015db0 <etharp_query+0x264>)
 8015c80:	f001 ff1a 	bl	8017ab8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015c84:	7c7a      	ldrb	r2, [r7, #17]
 8015c86:	494b      	ldr	r1, [pc, #300]	@ (8015db4 <etharp_query+0x268>)
 8015c88:	4613      	mov	r3, r2
 8015c8a:	005b      	lsls	r3, r3, #1
 8015c8c:	4413      	add	r3, r2
 8015c8e:	00db      	lsls	r3, r3, #3
 8015c90:	440b      	add	r3, r1
 8015c92:	3314      	adds	r3, #20
 8015c94:	781b      	ldrb	r3, [r3, #0]
 8015c96:	2b01      	cmp	r3, #1
 8015c98:	d917      	bls.n	8015cca <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015c9a:	4a49      	ldr	r2, [pc, #292]	@ (8015dc0 <etharp_query+0x274>)
 8015c9c:	7c7b      	ldrb	r3, [r7, #17]
 8015c9e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015ca0:	7c7a      	ldrb	r2, [r7, #17]
 8015ca2:	4613      	mov	r3, r2
 8015ca4:	005b      	lsls	r3, r3, #1
 8015ca6:	4413      	add	r3, r2
 8015ca8:	00db      	lsls	r3, r3, #3
 8015caa:	3308      	adds	r3, #8
 8015cac:	4a41      	ldr	r2, [pc, #260]	@ (8015db4 <etharp_query+0x268>)
 8015cae:	4413      	add	r3, r2
 8015cb0:	3304      	adds	r3, #4
 8015cb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015cb6:	9200      	str	r2, [sp, #0]
 8015cb8:	697a      	ldr	r2, [r7, #20]
 8015cba:	6879      	ldr	r1, [r7, #4]
 8015cbc:	68f8      	ldr	r0, [r7, #12]
 8015cbe:	f001 fcbf 	bl	8017640 <ethernet_output>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015cc8:	e067      	b.n	8015d9a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015cca:	7c7a      	ldrb	r2, [r7, #17]
 8015ccc:	4939      	ldr	r1, [pc, #228]	@ (8015db4 <etharp_query+0x268>)
 8015cce:	4613      	mov	r3, r2
 8015cd0:	005b      	lsls	r3, r3, #1
 8015cd2:	4413      	add	r3, r2
 8015cd4:	00db      	lsls	r3, r3, #3
 8015cd6:	440b      	add	r3, r1
 8015cd8:	3314      	adds	r3, #20
 8015cda:	781b      	ldrb	r3, [r3, #0]
 8015cdc:	2b01      	cmp	r3, #1
 8015cde:	d15c      	bne.n	8015d9a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015ce8:	e01c      	b.n	8015d24 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015cea:	69fb      	ldr	r3, [r7, #28]
 8015cec:	895a      	ldrh	r2, [r3, #10]
 8015cee:	69fb      	ldr	r3, [r7, #28]
 8015cf0:	891b      	ldrh	r3, [r3, #8]
 8015cf2:	429a      	cmp	r2, r3
 8015cf4:	d10a      	bne.n	8015d0c <etharp_query+0x1c0>
 8015cf6:	69fb      	ldr	r3, [r7, #28]
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d006      	beq.n	8015d0c <etharp_query+0x1c0>
 8015cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8015da8 <etharp_query+0x25c>)
 8015d00:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8015d04:	492f      	ldr	r1, [pc, #188]	@ (8015dc4 <etharp_query+0x278>)
 8015d06:	482a      	ldr	r0, [pc, #168]	@ (8015db0 <etharp_query+0x264>)
 8015d08:	f001 fed6 	bl	8017ab8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015d0c:	69fb      	ldr	r3, [r7, #28]
 8015d0e:	7b1b      	ldrb	r3, [r3, #12]
 8015d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d002      	beq.n	8015d1e <etharp_query+0x1d2>
        copy_needed = 1;
 8015d18:	2301      	movs	r3, #1
 8015d1a:	61bb      	str	r3, [r7, #24]
        break;
 8015d1c:	e005      	b.n	8015d2a <etharp_query+0x1de>
      }
      p = p->next;
 8015d1e:	69fb      	ldr	r3, [r7, #28]
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015d24:	69fb      	ldr	r3, [r7, #28]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d1df      	bne.n	8015cea <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015d2a:	69bb      	ldr	r3, [r7, #24]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d007      	beq.n	8015d40 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015d30:	687a      	ldr	r2, [r7, #4]
 8015d32:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8015d36:	200e      	movs	r0, #14
 8015d38:	f7f6 fa9e 	bl	800c278 <pbuf_clone>
 8015d3c:	61f8      	str	r0, [r7, #28]
 8015d3e:	e004      	b.n	8015d4a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015d44:	69f8      	ldr	r0, [r7, #28]
 8015d46:	f7f6 f89b 	bl	800be80 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015d4a:	69fb      	ldr	r3, [r7, #28]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d021      	beq.n	8015d94 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015d50:	7c7a      	ldrb	r2, [r7, #17]
 8015d52:	4918      	ldr	r1, [pc, #96]	@ (8015db4 <etharp_query+0x268>)
 8015d54:	4613      	mov	r3, r2
 8015d56:	005b      	lsls	r3, r3, #1
 8015d58:	4413      	add	r3, r2
 8015d5a:	00db      	lsls	r3, r3, #3
 8015d5c:	440b      	add	r3, r1
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d00a      	beq.n	8015d7a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015d64:	7c7a      	ldrb	r2, [r7, #17]
 8015d66:	4913      	ldr	r1, [pc, #76]	@ (8015db4 <etharp_query+0x268>)
 8015d68:	4613      	mov	r3, r2
 8015d6a:	005b      	lsls	r3, r3, #1
 8015d6c:	4413      	add	r3, r2
 8015d6e:	00db      	lsls	r3, r3, #3
 8015d70:	440b      	add	r3, r1
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	4618      	mov	r0, r3
 8015d76:	f7f5 ffdd 	bl	800bd34 <pbuf_free>
      }
      arp_table[i].q = p;
 8015d7a:	7c7a      	ldrb	r2, [r7, #17]
 8015d7c:	490d      	ldr	r1, [pc, #52]	@ (8015db4 <etharp_query+0x268>)
 8015d7e:	4613      	mov	r3, r2
 8015d80:	005b      	lsls	r3, r3, #1
 8015d82:	4413      	add	r3, r2
 8015d84:	00db      	lsls	r3, r3, #3
 8015d86:	440b      	add	r3, r1
 8015d88:	69fa      	ldr	r2, [r7, #28]
 8015d8a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015d8c:	2300      	movs	r3, #0
 8015d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d92:	e002      	b.n	8015d9a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015d94:	23ff      	movs	r3, #255	@ 0xff
 8015d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8015d9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8015d9e:	4618      	mov	r0, r3
 8015da0:	3728      	adds	r7, #40	@ 0x28
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bd80      	pop	{r7, pc}
 8015da6:	bf00      	nop
 8015da8:	0801b33c 	.word	0x0801b33c
 8015dac:	0801b4e8 	.word	0x0801b4e8
 8015db0:	0801b3b4 	.word	0x0801b3b4
 8015db4:	2401060c 	.word	0x2401060c
 8015db8:	0801b4f8 	.word	0x0801b4f8
 8015dbc:	0801b4dc 	.word	0x0801b4dc
 8015dc0:	240106fc 	.word	0x240106fc
 8015dc4:	0801b520 	.word	0x0801b520

08015dc8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b08a      	sub	sp, #40	@ 0x28
 8015dcc:	af02      	add	r7, sp, #8
 8015dce:	60f8      	str	r0, [r7, #12]
 8015dd0:	60b9      	str	r1, [r7, #8]
 8015dd2:	607a      	str	r2, [r7, #4]
 8015dd4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d106      	bne.n	8015dee <etharp_raw+0x26>
 8015de0:	4b3a      	ldr	r3, [pc, #232]	@ (8015ecc <etharp_raw+0x104>)
 8015de2:	f240 4257 	movw	r2, #1111	@ 0x457
 8015de6:	493a      	ldr	r1, [pc, #232]	@ (8015ed0 <etharp_raw+0x108>)
 8015de8:	483a      	ldr	r0, [pc, #232]	@ (8015ed4 <etharp_raw+0x10c>)
 8015dea:	f001 fe65 	bl	8017ab8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015dee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015df2:	211c      	movs	r1, #28
 8015df4:	200e      	movs	r0, #14
 8015df6:	f7f5 fcb9 	bl	800b76c <pbuf_alloc>
 8015dfa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015dfc:	69bb      	ldr	r3, [r7, #24]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d102      	bne.n	8015e08 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015e02:	f04f 33ff 	mov.w	r3, #4294967295
 8015e06:	e05d      	b.n	8015ec4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015e08:	69bb      	ldr	r3, [r7, #24]
 8015e0a:	895b      	ldrh	r3, [r3, #10]
 8015e0c:	2b1b      	cmp	r3, #27
 8015e0e:	d806      	bhi.n	8015e1e <etharp_raw+0x56>
 8015e10:	4b2e      	ldr	r3, [pc, #184]	@ (8015ecc <etharp_raw+0x104>)
 8015e12:	f240 4262 	movw	r2, #1122	@ 0x462
 8015e16:	4930      	ldr	r1, [pc, #192]	@ (8015ed8 <etharp_raw+0x110>)
 8015e18:	482e      	ldr	r0, [pc, #184]	@ (8015ed4 <etharp_raw+0x10c>)
 8015e1a:	f001 fe4d 	bl	8017ab8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015e1e:	69bb      	ldr	r3, [r7, #24]
 8015e20:	685b      	ldr	r3, [r3, #4]
 8015e22:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015e24:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015e26:	4618      	mov	r0, r3
 8015e28:	f7f4 fad4 	bl	800a3d4 <lwip_htons>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	461a      	mov	r2, r3
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015e3a:	2b06      	cmp	r3, #6
 8015e3c:	d006      	beq.n	8015e4c <etharp_raw+0x84>
 8015e3e:	4b23      	ldr	r3, [pc, #140]	@ (8015ecc <etharp_raw+0x104>)
 8015e40:	f240 4269 	movw	r2, #1129	@ 0x469
 8015e44:	4925      	ldr	r1, [pc, #148]	@ (8015edc <etharp_raw+0x114>)
 8015e46:	4823      	ldr	r0, [pc, #140]	@ (8015ed4 <etharp_raw+0x10c>)
 8015e48:	f001 fe36 	bl	8017ab8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015e4c:	697b      	ldr	r3, [r7, #20]
 8015e4e:	3308      	adds	r3, #8
 8015e50:	2206      	movs	r2, #6
 8015e52:	6839      	ldr	r1, [r7, #0]
 8015e54:	4618      	mov	r0, r3
 8015e56:	f001 ff60 	bl	8017d1a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015e5a:	697b      	ldr	r3, [r7, #20]
 8015e5c:	3312      	adds	r3, #18
 8015e5e:	2206      	movs	r2, #6
 8015e60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015e62:	4618      	mov	r0, r3
 8015e64:	f001 ff59 	bl	8017d1a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015e68:	697b      	ldr	r3, [r7, #20]
 8015e6a:	330e      	adds	r3, #14
 8015e6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015e6e:	6812      	ldr	r2, [r2, #0]
 8015e70:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015e72:	697b      	ldr	r3, [r7, #20]
 8015e74:	3318      	adds	r3, #24
 8015e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015e78:	6812      	ldr	r2, [r2, #0]
 8015e7a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015e7c:	697b      	ldr	r3, [r7, #20]
 8015e7e:	2200      	movs	r2, #0
 8015e80:	701a      	strb	r2, [r3, #0]
 8015e82:	2200      	movs	r2, #0
 8015e84:	f042 0201 	orr.w	r2, r2, #1
 8015e88:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015e8a:	697b      	ldr	r3, [r7, #20]
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	f042 0208 	orr.w	r2, r2, #8
 8015e92:	709a      	strb	r2, [r3, #2]
 8015e94:	2200      	movs	r2, #0
 8015e96:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015e98:	697b      	ldr	r3, [r7, #20]
 8015e9a:	2206      	movs	r2, #6
 8015e9c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015e9e:	697b      	ldr	r3, [r7, #20]
 8015ea0:	2204      	movs	r2, #4
 8015ea2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015ea4:	f640 0306 	movw	r3, #2054	@ 0x806
 8015ea8:	9300      	str	r3, [sp, #0]
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	68ba      	ldr	r2, [r7, #8]
 8015eae:	69b9      	ldr	r1, [r7, #24]
 8015eb0:	68f8      	ldr	r0, [r7, #12]
 8015eb2:	f001 fbc5 	bl	8017640 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015eb6:	69b8      	ldr	r0, [r7, #24]
 8015eb8:	f7f5 ff3c 	bl	800bd34 <pbuf_free>
  p = NULL;
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015ec0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	3720      	adds	r7, #32
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}
 8015ecc:	0801b33c 	.word	0x0801b33c
 8015ed0:	0801b48c 	.word	0x0801b48c
 8015ed4:	0801b3b4 	.word	0x0801b3b4
 8015ed8:	0801b53c 	.word	0x0801b53c
 8015edc:	0801b570 	.word	0x0801b570

08015ee0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015ee0:	b580      	push	{r7, lr}
 8015ee2:	b088      	sub	sp, #32
 8015ee4:	af04      	add	r7, sp, #16
 8015ee6:	60f8      	str	r0, [r7, #12]
 8015ee8:	60b9      	str	r1, [r7, #8]
 8015eea:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015efc:	2201      	movs	r2, #1
 8015efe:	9203      	str	r2, [sp, #12]
 8015f00:	68ba      	ldr	r2, [r7, #8]
 8015f02:	9202      	str	r2, [sp, #8]
 8015f04:	4a06      	ldr	r2, [pc, #24]	@ (8015f20 <etharp_request_dst+0x40>)
 8015f06:	9201      	str	r2, [sp, #4]
 8015f08:	9300      	str	r3, [sp, #0]
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	687a      	ldr	r2, [r7, #4]
 8015f0e:	68f8      	ldr	r0, [r7, #12]
 8015f10:	f7ff ff5a 	bl	8015dc8 <etharp_raw>
 8015f14:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3710      	adds	r7, #16
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}
 8015f1e:	bf00      	nop
 8015f20:	0801c1b8 	.word	0x0801c1b8

08015f24 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015f24:	b580      	push	{r7, lr}
 8015f26:	b082      	sub	sp, #8
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	6078      	str	r0, [r7, #4]
 8015f2c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015f2e:	4a05      	ldr	r2, [pc, #20]	@ (8015f44 <etharp_request+0x20>)
 8015f30:	6839      	ldr	r1, [r7, #0]
 8015f32:	6878      	ldr	r0, [r7, #4]
 8015f34:	f7ff ffd4 	bl	8015ee0 <etharp_request_dst>
 8015f38:	4603      	mov	r3, r0
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3708      	adds	r7, #8
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
 8015f42:	bf00      	nop
 8015f44:	0801c1b0 	.word	0x0801c1b0

08015f48 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b08e      	sub	sp, #56	@ 0x38
 8015f4c:	af04      	add	r7, sp, #16
 8015f4e:	6078      	str	r0, [r7, #4]
 8015f50:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015f52:	4b87      	ldr	r3, [pc, #540]	@ (8016170 <icmp_input+0x228>)
 8015f54:	689b      	ldr	r3, [r3, #8]
 8015f56:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f5a:	781b      	ldrb	r3, [r3, #0]
 8015f5c:	f003 030f 	and.w	r3, r3, #15
 8015f60:	b2db      	uxtb	r3, r3
 8015f62:	009b      	lsls	r3, r3, #2
 8015f64:	b2db      	uxtb	r3, r3
 8015f66:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8015f68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015f6a:	2b13      	cmp	r3, #19
 8015f6c:	f240 80e8 	bls.w	8016140 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	895b      	ldrh	r3, [r3, #10]
 8015f74:	2b03      	cmp	r3, #3
 8015f76:	f240 80e5 	bls.w	8016144 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	685b      	ldr	r3, [r3, #4]
 8015f7e:	781b      	ldrb	r3, [r3, #0]
 8015f80:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015f84:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	f000 80d2 	beq.w	8016132 <icmp_input+0x1ea>
 8015f8e:	2b08      	cmp	r3, #8
 8015f90:	f040 80d2 	bne.w	8016138 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015f94:	4b77      	ldr	r3, [pc, #476]	@ (8016174 <icmp_input+0x22c>)
 8015f96:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015f98:	4b75      	ldr	r3, [pc, #468]	@ (8016170 <icmp_input+0x228>)
 8015f9a:	695b      	ldr	r3, [r3, #20]
 8015f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015fa0:	2be0      	cmp	r3, #224	@ 0xe0
 8015fa2:	f000 80d6 	beq.w	8016152 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015fa6:	4b72      	ldr	r3, [pc, #456]	@ (8016170 <icmp_input+0x228>)
 8015fa8:	695b      	ldr	r3, [r3, #20]
 8015faa:	4a71      	ldr	r2, [pc, #452]	@ (8016170 <icmp_input+0x228>)
 8015fac:	6812      	ldr	r2, [r2, #0]
 8015fae:	4611      	mov	r1, r2
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f000 fc35 	bl	8016820 <ip4_addr_isbroadcast_u32>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	f040 80cc 	bne.w	8016156 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	891b      	ldrh	r3, [r3, #8]
 8015fc2:	2b07      	cmp	r3, #7
 8015fc4:	f240 80c0 	bls.w	8016148 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8015fc8:	6878      	ldr	r0, [r7, #4]
 8015fca:	f7f4 faa0 	bl	800a50e <inet_chksum_pbuf>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d003      	beq.n	8015fdc <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8015fd4:	6878      	ldr	r0, [r7, #4]
 8015fd6:	f7f5 fead 	bl	800bd34 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8015fda:	e0c5      	b.n	8016168 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015fdc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015fde:	330e      	adds	r3, #14
 8015fe0:	4619      	mov	r1, r3
 8015fe2:	6878      	ldr	r0, [r7, #4]
 8015fe4:	f7f5 fe10 	bl	800bc08 <pbuf_add_header>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d04b      	beq.n	8016086 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	891a      	ldrh	r2, [r3, #8]
 8015ff2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015ff4:	4413      	add	r3, r2
 8015ff6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	891b      	ldrh	r3, [r3, #8]
 8015ffc:	8b7a      	ldrh	r2, [r7, #26]
 8015ffe:	429a      	cmp	r2, r3
 8016000:	f0c0 80ab 	bcc.w	801615a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016004:	8b7b      	ldrh	r3, [r7, #26]
 8016006:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801600a:	4619      	mov	r1, r3
 801600c:	200e      	movs	r0, #14
 801600e:	f7f5 fbad 	bl	800b76c <pbuf_alloc>
 8016012:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016014:	697b      	ldr	r3, [r7, #20]
 8016016:	2b00      	cmp	r3, #0
 8016018:	f000 80a1 	beq.w	801615e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801601c:	697b      	ldr	r3, [r7, #20]
 801601e:	895b      	ldrh	r3, [r3, #10]
 8016020:	461a      	mov	r2, r3
 8016022:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016024:	3308      	adds	r3, #8
 8016026:	429a      	cmp	r2, r3
 8016028:	d203      	bcs.n	8016032 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801602a:	6978      	ldr	r0, [r7, #20]
 801602c:	f7f5 fe82 	bl	800bd34 <pbuf_free>
          goto icmperr;
 8016030:	e096      	b.n	8016160 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016032:	697b      	ldr	r3, [r7, #20]
 8016034:	685b      	ldr	r3, [r3, #4]
 8016036:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016038:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801603a:	4618      	mov	r0, r3
 801603c:	f001 fe6d 	bl	8017d1a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016040:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016042:	4619      	mov	r1, r3
 8016044:	6978      	ldr	r0, [r7, #20]
 8016046:	f7f5 fdef 	bl	800bc28 <pbuf_remove_header>
 801604a:	4603      	mov	r3, r0
 801604c:	2b00      	cmp	r3, #0
 801604e:	d009      	beq.n	8016064 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016050:	4b49      	ldr	r3, [pc, #292]	@ (8016178 <icmp_input+0x230>)
 8016052:	22b6      	movs	r2, #182	@ 0xb6
 8016054:	4949      	ldr	r1, [pc, #292]	@ (801617c <icmp_input+0x234>)
 8016056:	484a      	ldr	r0, [pc, #296]	@ (8016180 <icmp_input+0x238>)
 8016058:	f001 fd2e 	bl	8017ab8 <iprintf>
          pbuf_free(r);
 801605c:	6978      	ldr	r0, [r7, #20]
 801605e:	f7f5 fe69 	bl	800bd34 <pbuf_free>
          goto icmperr;
 8016062:	e07d      	b.n	8016160 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016064:	6879      	ldr	r1, [r7, #4]
 8016066:	6978      	ldr	r0, [r7, #20]
 8016068:	f7f5 ff98 	bl	800bf9c <pbuf_copy>
 801606c:	4603      	mov	r3, r0
 801606e:	2b00      	cmp	r3, #0
 8016070:	d003      	beq.n	801607a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016072:	6978      	ldr	r0, [r7, #20]
 8016074:	f7f5 fe5e 	bl	800bd34 <pbuf_free>
          goto icmperr;
 8016078:	e072      	b.n	8016160 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801607a:	6878      	ldr	r0, [r7, #4]
 801607c:	f7f5 fe5a 	bl	800bd34 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016080:	697b      	ldr	r3, [r7, #20]
 8016082:	607b      	str	r3, [r7, #4]
 8016084:	e00f      	b.n	80160a6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016086:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016088:	330e      	adds	r3, #14
 801608a:	4619      	mov	r1, r3
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f7f5 fdcb 	bl	800bc28 <pbuf_remove_header>
 8016092:	4603      	mov	r3, r0
 8016094:	2b00      	cmp	r3, #0
 8016096:	d006      	beq.n	80160a6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016098:	4b37      	ldr	r3, [pc, #220]	@ (8016178 <icmp_input+0x230>)
 801609a:	22c7      	movs	r2, #199	@ 0xc7
 801609c:	4939      	ldr	r1, [pc, #228]	@ (8016184 <icmp_input+0x23c>)
 801609e:	4838      	ldr	r0, [pc, #224]	@ (8016180 <icmp_input+0x238>)
 80160a0:	f001 fd0a 	bl	8017ab8 <iprintf>
          goto icmperr;
 80160a4:	e05c      	b.n	8016160 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	685b      	ldr	r3, [r3, #4]
 80160aa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80160ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80160ae:	4619      	mov	r1, r3
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f7f5 fda9 	bl	800bc08 <pbuf_add_header>
 80160b6:	4603      	mov	r3, r0
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d13c      	bne.n	8016136 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	685b      	ldr	r3, [r3, #4]
 80160c0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80160c2:	69fb      	ldr	r3, [r7, #28]
 80160c4:	681a      	ldr	r2, [r3, #0]
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80160ca:	4b29      	ldr	r3, [pc, #164]	@ (8016170 <icmp_input+0x228>)
 80160cc:	691a      	ldr	r2, [r3, #16]
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	2200      	movs	r2, #0
 80160d6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80160d8:	693b      	ldr	r3, [r7, #16]
 80160da:	885b      	ldrh	r3, [r3, #2]
 80160dc:	b29b      	uxth	r3, r3
 80160de:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80160e2:	4293      	cmp	r3, r2
 80160e4:	d907      	bls.n	80160f6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80160e6:	693b      	ldr	r3, [r7, #16]
 80160e8:	885b      	ldrh	r3, [r3, #2]
 80160ea:	b29b      	uxth	r3, r3
 80160ec:	3309      	adds	r3, #9
 80160ee:	b29a      	uxth	r2, r3
 80160f0:	693b      	ldr	r3, [r7, #16]
 80160f2:	805a      	strh	r2, [r3, #2]
 80160f4:	e006      	b.n	8016104 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80160f6:	693b      	ldr	r3, [r7, #16]
 80160f8:	885b      	ldrh	r3, [r3, #2]
 80160fa:	b29b      	uxth	r3, r3
 80160fc:	3308      	adds	r3, #8
 80160fe:	b29a      	uxth	r2, r3
 8016100:	693b      	ldr	r3, [r7, #16]
 8016102:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	22ff      	movs	r2, #255	@ 0xff
 8016108:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	2200      	movs	r2, #0
 801610e:	729a      	strb	r2, [r3, #10]
 8016110:	2200      	movs	r2, #0
 8016112:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016114:	683b      	ldr	r3, [r7, #0]
 8016116:	9302      	str	r3, [sp, #8]
 8016118:	2301      	movs	r3, #1
 801611a:	9301      	str	r3, [sp, #4]
 801611c:	2300      	movs	r3, #0
 801611e:	9300      	str	r3, [sp, #0]
 8016120:	23ff      	movs	r3, #255	@ 0xff
 8016122:	2200      	movs	r2, #0
 8016124:	69f9      	ldr	r1, [r7, #28]
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	f000 faa0 	bl	801666c <ip4_output_if>
 801612c:	4603      	mov	r3, r0
 801612e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016130:	e001      	b.n	8016136 <icmp_input+0x1ee>
      break;
 8016132:	bf00      	nop
 8016134:	e000      	b.n	8016138 <icmp_input+0x1f0>
      break;
 8016136:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f7f5 fdfb 	bl	800bd34 <pbuf_free>
  return;
 801613e:	e013      	b.n	8016168 <icmp_input+0x220>
    goto lenerr;
 8016140:	bf00      	nop
 8016142:	e002      	b.n	801614a <icmp_input+0x202>
    goto lenerr;
 8016144:	bf00      	nop
 8016146:	e000      	b.n	801614a <icmp_input+0x202>
        goto lenerr;
 8016148:	bf00      	nop
lenerr:
  pbuf_free(p);
 801614a:	6878      	ldr	r0, [r7, #4]
 801614c:	f7f5 fdf2 	bl	800bd34 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016150:	e00a      	b.n	8016168 <icmp_input+0x220>
        goto icmperr;
 8016152:	bf00      	nop
 8016154:	e004      	b.n	8016160 <icmp_input+0x218>
        goto icmperr;
 8016156:	bf00      	nop
 8016158:	e002      	b.n	8016160 <icmp_input+0x218>
          goto icmperr;
 801615a:	bf00      	nop
 801615c:	e000      	b.n	8016160 <icmp_input+0x218>
          goto icmperr;
 801615e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	f7f5 fde7 	bl	800bd34 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016166:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016168:	3728      	adds	r7, #40	@ 0x28
 801616a:	46bd      	mov	sp, r7
 801616c:	bd80      	pop	{r7, pc}
 801616e:	bf00      	nop
 8016170:	24009a98 	.word	0x24009a98
 8016174:	24009aac 	.word	0x24009aac
 8016178:	0801b5b4 	.word	0x0801b5b4
 801617c:	0801b5ec 	.word	0x0801b5ec
 8016180:	0801b624 	.word	0x0801b624
 8016184:	0801b64c 	.word	0x0801b64c

08016188 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b082      	sub	sp, #8
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
 8016190:	460b      	mov	r3, r1
 8016192:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016194:	78fb      	ldrb	r3, [r7, #3]
 8016196:	461a      	mov	r2, r3
 8016198:	2103      	movs	r1, #3
 801619a:	6878      	ldr	r0, [r7, #4]
 801619c:	f000 f814 	bl	80161c8 <icmp_send_response>
}
 80161a0:	bf00      	nop
 80161a2:	3708      	adds	r7, #8
 80161a4:	46bd      	mov	sp, r7
 80161a6:	bd80      	pop	{r7, pc}

080161a8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b082      	sub	sp, #8
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
 80161b0:	460b      	mov	r3, r1
 80161b2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80161b4:	78fb      	ldrb	r3, [r7, #3]
 80161b6:	461a      	mov	r2, r3
 80161b8:	210b      	movs	r1, #11
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	f000 f804 	bl	80161c8 <icmp_send_response>
}
 80161c0:	bf00      	nop
 80161c2:	3708      	adds	r7, #8
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}

080161c8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b08c      	sub	sp, #48	@ 0x30
 80161cc:	af04      	add	r7, sp, #16
 80161ce:	6078      	str	r0, [r7, #4]
 80161d0:	460b      	mov	r3, r1
 80161d2:	70fb      	strb	r3, [r7, #3]
 80161d4:	4613      	mov	r3, r2
 80161d6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80161d8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80161dc:	2124      	movs	r1, #36	@ 0x24
 80161de:	2022      	movs	r0, #34	@ 0x22
 80161e0:	f7f5 fac4 	bl	800b76c <pbuf_alloc>
 80161e4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80161e6:	69fb      	ldr	r3, [r7, #28]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d056      	beq.n	801629a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80161ec:	69fb      	ldr	r3, [r7, #28]
 80161ee:	895b      	ldrh	r3, [r3, #10]
 80161f0:	2b23      	cmp	r3, #35	@ 0x23
 80161f2:	d806      	bhi.n	8016202 <icmp_send_response+0x3a>
 80161f4:	4b2b      	ldr	r3, [pc, #172]	@ (80162a4 <icmp_send_response+0xdc>)
 80161f6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80161fa:	492b      	ldr	r1, [pc, #172]	@ (80162a8 <icmp_send_response+0xe0>)
 80161fc:	482b      	ldr	r0, [pc, #172]	@ (80162ac <icmp_send_response+0xe4>)
 80161fe:	f001 fc5b 	bl	8017ab8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	685b      	ldr	r3, [r3, #4]
 8016206:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016208:	69fb      	ldr	r3, [r7, #28]
 801620a:	685b      	ldr	r3, [r3, #4]
 801620c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801620e:	697b      	ldr	r3, [r7, #20]
 8016210:	78fa      	ldrb	r2, [r7, #3]
 8016212:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	78ba      	ldrb	r2, [r7, #2]
 8016218:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801621a:	697b      	ldr	r3, [r7, #20]
 801621c:	2200      	movs	r2, #0
 801621e:	711a      	strb	r2, [r3, #4]
 8016220:	2200      	movs	r2, #0
 8016222:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016224:	697b      	ldr	r3, [r7, #20]
 8016226:	2200      	movs	r2, #0
 8016228:	719a      	strb	r2, [r3, #6]
 801622a:	2200      	movs	r2, #0
 801622c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801622e:	69fb      	ldr	r3, [r7, #28]
 8016230:	685b      	ldr	r3, [r3, #4]
 8016232:	f103 0008 	add.w	r0, r3, #8
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	685b      	ldr	r3, [r3, #4]
 801623a:	221c      	movs	r2, #28
 801623c:	4619      	mov	r1, r3
 801623e:	f001 fd6c 	bl	8017d1a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016242:	69bb      	ldr	r3, [r7, #24]
 8016244:	68db      	ldr	r3, [r3, #12]
 8016246:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016248:	f107 030c 	add.w	r3, r7, #12
 801624c:	4618      	mov	r0, r3
 801624e:	f000 f82f 	bl	80162b0 <ip4_route>
 8016252:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016254:	693b      	ldr	r3, [r7, #16]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d01b      	beq.n	8016292 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801625a:	697b      	ldr	r3, [r7, #20]
 801625c:	2200      	movs	r2, #0
 801625e:	709a      	strb	r2, [r3, #2]
 8016260:	2200      	movs	r2, #0
 8016262:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8016264:	69fb      	ldr	r3, [r7, #28]
 8016266:	895b      	ldrh	r3, [r3, #10]
 8016268:	4619      	mov	r1, r3
 801626a:	6978      	ldr	r0, [r7, #20]
 801626c:	f7f4 f93d 	bl	800a4ea <inet_chksum>
 8016270:	4603      	mov	r3, r0
 8016272:	461a      	mov	r2, r3
 8016274:	697b      	ldr	r3, [r7, #20]
 8016276:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016278:	f107 020c 	add.w	r2, r7, #12
 801627c:	693b      	ldr	r3, [r7, #16]
 801627e:	9302      	str	r3, [sp, #8]
 8016280:	2301      	movs	r3, #1
 8016282:	9301      	str	r3, [sp, #4]
 8016284:	2300      	movs	r3, #0
 8016286:	9300      	str	r3, [sp, #0]
 8016288:	23ff      	movs	r3, #255	@ 0xff
 801628a:	2100      	movs	r1, #0
 801628c:	69f8      	ldr	r0, [r7, #28]
 801628e:	f000 f9ed 	bl	801666c <ip4_output_if>
  }
  pbuf_free(q);
 8016292:	69f8      	ldr	r0, [r7, #28]
 8016294:	f7f5 fd4e 	bl	800bd34 <pbuf_free>
 8016298:	e000      	b.n	801629c <icmp_send_response+0xd4>
    return;
 801629a:	bf00      	nop
}
 801629c:	3720      	adds	r7, #32
 801629e:	46bd      	mov	sp, r7
 80162a0:	bd80      	pop	{r7, pc}
 80162a2:	bf00      	nop
 80162a4:	0801b5b4 	.word	0x0801b5b4
 80162a8:	0801b680 	.word	0x0801b680
 80162ac:	0801b624 	.word	0x0801b624

080162b0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b084      	sub	sp, #16
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 80162b8:	f7f0 f81c 	bl	80062f4 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80162bc:	4b32      	ldr	r3, [pc, #200]	@ (8016388 <ip4_route+0xd8>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	60fb      	str	r3, [r7, #12]
 80162c2:	e036      	b.n	8016332 <ip4_route+0x82>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80162ca:	f003 0301 	and.w	r3, r3, #1
 80162ce:	b2db      	uxtb	r3, r3
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d02b      	beq.n	801632c <ip4_route+0x7c>
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80162da:	089b      	lsrs	r3, r3, #2
 80162dc:	f003 0301 	and.w	r3, r3, #1
 80162e0:	b2db      	uxtb	r3, r3
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d022      	beq.n	801632c <ip4_route+0x7c>
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	3304      	adds	r3, #4
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d01d      	beq.n	801632c <ip4_route+0x7c>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	681a      	ldr	r2, [r3, #0]
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	3304      	adds	r3, #4
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	405a      	eors	r2, r3
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	3308      	adds	r3, #8
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	4013      	ands	r3, r2
 8016304:	2b00      	cmp	r3, #0
 8016306:	d101      	bne.n	801630c <ip4_route+0x5c>
        /* return netif on which to forward IP packet */
        return netif;
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	e038      	b.n	801637e <ip4_route+0xce>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016312:	f003 0302 	and.w	r3, r3, #2
 8016316:	2b00      	cmp	r3, #0
 8016318:	d108      	bne.n	801632c <ip4_route+0x7c>
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	681a      	ldr	r2, [r3, #0]
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	330c      	adds	r3, #12
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	429a      	cmp	r2, r3
 8016326:	d101      	bne.n	801632c <ip4_route+0x7c>
        /* return netif on which to forward IP packet */
        return netif;
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	e028      	b.n	801637e <ip4_route+0xce>
  NETIF_FOREACH(netif) {
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	60fb      	str	r3, [r7, #12]
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d1c5      	bne.n	80162c4 <ip4_route+0x14>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016338:	4b14      	ldr	r3, [pc, #80]	@ (801638c <ip4_route+0xdc>)
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d01a      	beq.n	8016376 <ip4_route+0xc6>
 8016340:	4b12      	ldr	r3, [pc, #72]	@ (801638c <ip4_route+0xdc>)
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016348:	f003 0301 	and.w	r3, r3, #1
 801634c:	2b00      	cmp	r3, #0
 801634e:	d012      	beq.n	8016376 <ip4_route+0xc6>
 8016350:	4b0e      	ldr	r3, [pc, #56]	@ (801638c <ip4_route+0xdc>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016358:	f003 0304 	and.w	r3, r3, #4
 801635c:	2b00      	cmp	r3, #0
 801635e:	d00a      	beq.n	8016376 <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016360:	4b0a      	ldr	r3, [pc, #40]	@ (801638c <ip4_route+0xdc>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	3304      	adds	r3, #4
 8016366:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016368:	2b00      	cmp	r3, #0
 801636a:	d004      	beq.n	8016376 <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	b2db      	uxtb	r3, r3
 8016372:	2b7f      	cmp	r3, #127	@ 0x7f
 8016374:	d101      	bne.n	801637a <ip4_route+0xca>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016376:	2300      	movs	r3, #0
 8016378:	e001      	b.n	801637e <ip4_route+0xce>
  }

  return netif_default;
 801637a:	4b04      	ldr	r3, [pc, #16]	@ (801638c <ip4_route+0xdc>)
 801637c:	681b      	ldr	r3, [r3, #0]
}
 801637e:	4618      	mov	r0, r3
 8016380:	3710      	adds	r7, #16
 8016382:	46bd      	mov	sp, r7
 8016384:	bd80      	pop	{r7, pc}
 8016386:	bf00      	nop
 8016388:	2401056c 	.word	0x2401056c
 801638c:	24010570 	.word	0x24010570

08016390 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b082      	sub	sp, #8
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801639e:	f003 0301 	and.w	r3, r3, #1
 80163a2:	b2db      	uxtb	r3, r3
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d016      	beq.n	80163d6 <ip4_input_accept+0x46>
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	3304      	adds	r3, #4
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d011      	beq.n	80163d6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80163b2:	4b0b      	ldr	r3, [pc, #44]	@ (80163e0 <ip4_input_accept+0x50>)
 80163b4:	695a      	ldr	r2, [r3, #20]
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	3304      	adds	r3, #4
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	429a      	cmp	r2, r3
 80163be:	d008      	beq.n	80163d2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80163c0:	4b07      	ldr	r3, [pc, #28]	@ (80163e0 <ip4_input_accept+0x50>)
 80163c2:	695b      	ldr	r3, [r3, #20]
 80163c4:	6879      	ldr	r1, [r7, #4]
 80163c6:	4618      	mov	r0, r3
 80163c8:	f000 fa2a 	bl	8016820 <ip4_addr_isbroadcast_u32>
 80163cc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d001      	beq.n	80163d6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80163d2:	2301      	movs	r3, #1
 80163d4:	e000      	b.n	80163d8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80163d6:	2300      	movs	r3, #0
}
 80163d8:	4618      	mov	r0, r3
 80163da:	3708      	adds	r7, #8
 80163dc:	46bd      	mov	sp, r7
 80163de:	bd80      	pop	{r7, pc}
 80163e0:	24009a98 	.word	0x24009a98

080163e4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b088      	sub	sp, #32
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
 80163ec:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80163ee:	2301      	movs	r3, #1
 80163f0:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 80163f2:	f7ef ff7f 	bl	80062f4 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	685b      	ldr	r3, [r3, #4]
 80163fa:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80163fc:	69fb      	ldr	r3, [r7, #28]
 80163fe:	781b      	ldrb	r3, [r3, #0]
 8016400:	091b      	lsrs	r3, r3, #4
 8016402:	b2db      	uxtb	r3, r3
 8016404:	2b04      	cmp	r3, #4
 8016406:	d004      	beq.n	8016412 <ip4_input+0x2e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016408:	6878      	ldr	r0, [r7, #4]
 801640a:	f7f5 fc93 	bl	800bd34 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801640e:	2300      	movs	r3, #0
 8016410:	e123      	b.n	801665a <ip4_input+0x276>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016412:	69fb      	ldr	r3, [r7, #28]
 8016414:	781b      	ldrb	r3, [r3, #0]
 8016416:	f003 030f 	and.w	r3, r3, #15
 801641a:	b2db      	uxtb	r3, r3
 801641c:	009b      	lsls	r3, r3, #2
 801641e:	b2db      	uxtb	r3, r3
 8016420:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016422:	69fb      	ldr	r3, [r7, #28]
 8016424:	885b      	ldrh	r3, [r3, #2]
 8016426:	b29b      	uxth	r3, r3
 8016428:	4618      	mov	r0, r3
 801642a:	f7f3 ffd3 	bl	800a3d4 <lwip_htons>
 801642e:	4603      	mov	r3, r0
 8016430:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	891b      	ldrh	r3, [r3, #8]
 8016436:	8a3a      	ldrh	r2, [r7, #16]
 8016438:	429a      	cmp	r2, r3
 801643a:	d204      	bcs.n	8016446 <ip4_input+0x62>
    pbuf_realloc(p, iphdr_len);
 801643c:	8a3b      	ldrh	r3, [r7, #16]
 801643e:	4619      	mov	r1, r3
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	f7f5 faf3 	bl	800ba2c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	895b      	ldrh	r3, [r3, #10]
 801644a:	8a7a      	ldrh	r2, [r7, #18]
 801644c:	429a      	cmp	r2, r3
 801644e:	d807      	bhi.n	8016460 <ip4_input+0x7c>
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	891b      	ldrh	r3, [r3, #8]
 8016454:	8a3a      	ldrh	r2, [r7, #16]
 8016456:	429a      	cmp	r2, r3
 8016458:	d802      	bhi.n	8016460 <ip4_input+0x7c>
 801645a:	8a7b      	ldrh	r3, [r7, #18]
 801645c:	2b13      	cmp	r3, #19
 801645e:	d804      	bhi.n	801646a <ip4_input+0x86>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016460:	6878      	ldr	r0, [r7, #4]
 8016462:	f7f5 fc67 	bl	800bd34 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016466:	2300      	movs	r3, #0
 8016468:	e0f7      	b.n	801665a <ip4_input+0x276>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801646a:	69fb      	ldr	r3, [r7, #28]
 801646c:	691b      	ldr	r3, [r3, #16]
 801646e:	4a7d      	ldr	r2, [pc, #500]	@ (8016664 <ip4_input+0x280>)
 8016470:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016472:	69fb      	ldr	r3, [r7, #28]
 8016474:	68db      	ldr	r3, [r3, #12]
 8016476:	4a7b      	ldr	r2, [pc, #492]	@ (8016664 <ip4_input+0x280>)
 8016478:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801647a:	4b7a      	ldr	r3, [pc, #488]	@ (8016664 <ip4_input+0x280>)
 801647c:	695b      	ldr	r3, [r3, #20]
 801647e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016482:	2be0      	cmp	r3, #224	@ 0xe0
 8016484:	d112      	bne.n	80164ac <ip4_input+0xc8>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016486:	683b      	ldr	r3, [r7, #0]
 8016488:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801648c:	f003 0301 	and.w	r3, r3, #1
 8016490:	b2db      	uxtb	r3, r3
 8016492:	2b00      	cmp	r3, #0
 8016494:	d007      	beq.n	80164a6 <ip4_input+0xc2>
 8016496:	683b      	ldr	r3, [r7, #0]
 8016498:	3304      	adds	r3, #4
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d002      	beq.n	80164a6 <ip4_input+0xc2>
      netif = inp;
 80164a0:	683b      	ldr	r3, [r7, #0]
 80164a2:	61bb      	str	r3, [r7, #24]
 80164a4:	e02a      	b.n	80164fc <ip4_input+0x118>
    } else {
      netif = NULL;
 80164a6:	2300      	movs	r3, #0
 80164a8:	61bb      	str	r3, [r7, #24]
 80164aa:	e027      	b.n	80164fc <ip4_input+0x118>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80164ac:	6838      	ldr	r0, [r7, #0]
 80164ae:	f7ff ff6f 	bl	8016390 <ip4_input_accept>
 80164b2:	4603      	mov	r3, r0
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d002      	beq.n	80164be <ip4_input+0xda>
      netif = inp;
 80164b8:	683b      	ldr	r3, [r7, #0]
 80164ba:	61bb      	str	r3, [r7, #24]
 80164bc:	e01e      	b.n	80164fc <ip4_input+0x118>
    } else {
      netif = NULL;
 80164be:	2300      	movs	r3, #0
 80164c0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80164c2:	4b68      	ldr	r3, [pc, #416]	@ (8016664 <ip4_input+0x280>)
 80164c4:	695b      	ldr	r3, [r3, #20]
 80164c6:	b2db      	uxtb	r3, r3
 80164c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80164ca:	d017      	beq.n	80164fc <ip4_input+0x118>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80164cc:	4b66      	ldr	r3, [pc, #408]	@ (8016668 <ip4_input+0x284>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	61bb      	str	r3, [r7, #24]
 80164d2:	e00e      	b.n	80164f2 <ip4_input+0x10e>
          if (netif == inp) {
 80164d4:	69ba      	ldr	r2, [r7, #24]
 80164d6:	683b      	ldr	r3, [r7, #0]
 80164d8:	429a      	cmp	r2, r3
 80164da:	d006      	beq.n	80164ea <ip4_input+0x106>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80164dc:	69b8      	ldr	r0, [r7, #24]
 80164de:	f7ff ff57 	bl	8016390 <ip4_input_accept>
 80164e2:	4603      	mov	r3, r0
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d108      	bne.n	80164fa <ip4_input+0x116>
 80164e8:	e000      	b.n	80164ec <ip4_input+0x108>
            continue;
 80164ea:	bf00      	nop
        NETIF_FOREACH(netif) {
 80164ec:	69bb      	ldr	r3, [r7, #24]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	61bb      	str	r3, [r7, #24]
 80164f2:	69bb      	ldr	r3, [r7, #24]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d1ed      	bne.n	80164d4 <ip4_input+0xf0>
 80164f8:	e000      	b.n	80164fc <ip4_input+0x118>
            break;
 80164fa:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80164fc:	69bb      	ldr	r3, [r7, #24]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d111      	bne.n	8016526 <ip4_input+0x142>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016502:	69fb      	ldr	r3, [r7, #28]
 8016504:	7a5b      	ldrb	r3, [r3, #9]
 8016506:	2b11      	cmp	r3, #17
 8016508:	d10d      	bne.n	8016526 <ip4_input+0x142>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801650a:	8a7b      	ldrh	r3, [r7, #18]
 801650c:	69fa      	ldr	r2, [r7, #28]
 801650e:	4413      	add	r3, r2
 8016510:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	885b      	ldrh	r3, [r3, #2]
 8016516:	b29b      	uxth	r3, r3
 8016518:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801651c:	d103      	bne.n	8016526 <ip4_input+0x142>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801651e:	683b      	ldr	r3, [r7, #0]
 8016520:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016522:	2300      	movs	r3, #0
 8016524:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016526:	697b      	ldr	r3, [r7, #20]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d017      	beq.n	801655c <ip4_input+0x178>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801652c:	4b4d      	ldr	r3, [pc, #308]	@ (8016664 <ip4_input+0x280>)
 801652e:	691b      	ldr	r3, [r3, #16]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d013      	beq.n	801655c <ip4_input+0x178>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016534:	4b4b      	ldr	r3, [pc, #300]	@ (8016664 <ip4_input+0x280>)
 8016536:	691b      	ldr	r3, [r3, #16]
 8016538:	6839      	ldr	r1, [r7, #0]
 801653a:	4618      	mov	r0, r3
 801653c:	f000 f970 	bl	8016820 <ip4_addr_isbroadcast_u32>
 8016540:	4603      	mov	r3, r0
 8016542:	2b00      	cmp	r3, #0
 8016544:	d105      	bne.n	8016552 <ip4_input+0x16e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016546:	4b47      	ldr	r3, [pc, #284]	@ (8016664 <ip4_input+0x280>)
 8016548:	691b      	ldr	r3, [r3, #16]
 801654a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801654e:	2be0      	cmp	r3, #224	@ 0xe0
 8016550:	d104      	bne.n	801655c <ip4_input+0x178>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016552:	6878      	ldr	r0, [r7, #4]
 8016554:	f7f5 fbee 	bl	800bd34 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016558:	2300      	movs	r3, #0
 801655a:	e07e      	b.n	801665a <ip4_input+0x276>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801655c:	69bb      	ldr	r3, [r7, #24]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d104      	bne.n	801656c <ip4_input+0x188>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016562:	6878      	ldr	r0, [r7, #4]
 8016564:	f7f5 fbe6 	bl	800bd34 <pbuf_free>
    return ERR_OK;
 8016568:	2300      	movs	r3, #0
 801656a:	e076      	b.n	801665a <ip4_input+0x276>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801656c:	69fb      	ldr	r3, [r7, #28]
 801656e:	88db      	ldrh	r3, [r3, #6]
 8016570:	b29b      	uxth	r3, r3
 8016572:	461a      	mov	r2, r3
 8016574:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8016578:	4013      	ands	r3, r2
 801657a:	2b00      	cmp	r3, #0
 801657c:	d00b      	beq.n	8016596 <ip4_input+0x1b2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801657e:	6878      	ldr	r0, [r7, #4]
 8016580:	f000 fc94 	bl	8016eac <ip4_reass>
 8016584:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d101      	bne.n	8016590 <ip4_input+0x1ac>
      return ERR_OK;
 801658c:	2300      	movs	r3, #0
 801658e:	e064      	b.n	801665a <ip4_input+0x276>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	685b      	ldr	r3, [r3, #4]
 8016594:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016596:	4a33      	ldr	r2, [pc, #204]	@ (8016664 <ip4_input+0x280>)
 8016598:	69bb      	ldr	r3, [r7, #24]
 801659a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801659c:	4a31      	ldr	r2, [pc, #196]	@ (8016664 <ip4_input+0x280>)
 801659e:	683b      	ldr	r3, [r7, #0]
 80165a0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80165a2:	4a30      	ldr	r2, [pc, #192]	@ (8016664 <ip4_input+0x280>)
 80165a4:	69fb      	ldr	r3, [r7, #28]
 80165a6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80165a8:	69fb      	ldr	r3, [r7, #28]
 80165aa:	781b      	ldrb	r3, [r3, #0]
 80165ac:	f003 030f 	and.w	r3, r3, #15
 80165b0:	b2db      	uxtb	r3, r3
 80165b2:	009b      	lsls	r3, r3, #2
 80165b4:	b2db      	uxtb	r3, r3
 80165b6:	461a      	mov	r2, r3
 80165b8:	4b2a      	ldr	r3, [pc, #168]	@ (8016664 <ip4_input+0x280>)
 80165ba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80165bc:	8a7b      	ldrh	r3, [r7, #18]
 80165be:	4619      	mov	r1, r3
 80165c0:	6878      	ldr	r0, [r7, #4]
 80165c2:	f7f5 fb31 	bl	800bc28 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80165c6:	69fb      	ldr	r3, [r7, #28]
 80165c8:	7a5b      	ldrb	r3, [r3, #9]
 80165ca:	2b11      	cmp	r3, #17
 80165cc:	d006      	beq.n	80165dc <ip4_input+0x1f8>
 80165ce:	2b11      	cmp	r3, #17
 80165d0:	dc13      	bgt.n	80165fa <ip4_input+0x216>
 80165d2:	2b01      	cmp	r3, #1
 80165d4:	d00c      	beq.n	80165f0 <ip4_input+0x20c>
 80165d6:	2b06      	cmp	r3, #6
 80165d8:	d005      	beq.n	80165e6 <ip4_input+0x202>
 80165da:	e00e      	b.n	80165fa <ip4_input+0x216>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80165dc:	6839      	ldr	r1, [r7, #0]
 80165de:	6878      	ldr	r0, [r7, #4]
 80165e0:	f7fc faae 	bl	8012b40 <udp_input>
        break;
 80165e4:	e026      	b.n	8016634 <ip4_input+0x250>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80165e6:	6839      	ldr	r1, [r7, #0]
 80165e8:	6878      	ldr	r0, [r7, #4]
 80165ea:	f7f7 fe5d 	bl	800e2a8 <tcp_input>
        break;
 80165ee:	e021      	b.n	8016634 <ip4_input+0x250>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80165f0:	6839      	ldr	r1, [r7, #0]
 80165f2:	6878      	ldr	r0, [r7, #4]
 80165f4:	f7ff fca8 	bl	8015f48 <icmp_input>
        break;
 80165f8:	e01c      	b.n	8016634 <ip4_input+0x250>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80165fa:	4b1a      	ldr	r3, [pc, #104]	@ (8016664 <ip4_input+0x280>)
 80165fc:	695b      	ldr	r3, [r3, #20]
 80165fe:	69b9      	ldr	r1, [r7, #24]
 8016600:	4618      	mov	r0, r3
 8016602:	f000 f90d 	bl	8016820 <ip4_addr_isbroadcast_u32>
 8016606:	4603      	mov	r3, r0
 8016608:	2b00      	cmp	r3, #0
 801660a:	d10f      	bne.n	801662c <ip4_input+0x248>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801660c:	4b15      	ldr	r3, [pc, #84]	@ (8016664 <ip4_input+0x280>)
 801660e:	695b      	ldr	r3, [r3, #20]
 8016610:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016614:	2be0      	cmp	r3, #224	@ 0xe0
 8016616:	d009      	beq.n	801662c <ip4_input+0x248>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016618:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801661c:	4619      	mov	r1, r3
 801661e:	6878      	ldr	r0, [r7, #4]
 8016620:	f7f5 fb75 	bl	800bd0e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016624:	2102      	movs	r1, #2
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f7ff fdae 	bl	8016188 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801662c:	6878      	ldr	r0, [r7, #4]
 801662e:	f7f5 fb81 	bl	800bd34 <pbuf_free>
        break;
 8016632:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016634:	4b0b      	ldr	r3, [pc, #44]	@ (8016664 <ip4_input+0x280>)
 8016636:	2200      	movs	r2, #0
 8016638:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801663a:	4b0a      	ldr	r3, [pc, #40]	@ (8016664 <ip4_input+0x280>)
 801663c:	2200      	movs	r2, #0
 801663e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016640:	4b08      	ldr	r3, [pc, #32]	@ (8016664 <ip4_input+0x280>)
 8016642:	2200      	movs	r2, #0
 8016644:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016646:	4b07      	ldr	r3, [pc, #28]	@ (8016664 <ip4_input+0x280>)
 8016648:	2200      	movs	r2, #0
 801664a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801664c:	4b05      	ldr	r3, [pc, #20]	@ (8016664 <ip4_input+0x280>)
 801664e:	2200      	movs	r2, #0
 8016650:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016652:	4b04      	ldr	r3, [pc, #16]	@ (8016664 <ip4_input+0x280>)
 8016654:	2200      	movs	r2, #0
 8016656:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016658:	2300      	movs	r3, #0
}
 801665a:	4618      	mov	r0, r3
 801665c:	3720      	adds	r7, #32
 801665e:	46bd      	mov	sp, r7
 8016660:	bd80      	pop	{r7, pc}
 8016662:	bf00      	nop
 8016664:	24009a98 	.word	0x24009a98
 8016668:	2401056c 	.word	0x2401056c

0801666c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b08a      	sub	sp, #40	@ 0x28
 8016670:	af04      	add	r7, sp, #16
 8016672:	60f8      	str	r0, [r7, #12]
 8016674:	60b9      	str	r1, [r7, #8]
 8016676:	607a      	str	r2, [r7, #4]
 8016678:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801667a:	68bb      	ldr	r3, [r7, #8]
 801667c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d009      	beq.n	8016698 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016684:	68bb      	ldr	r3, [r7, #8]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d003      	beq.n	8016692 <ip4_output_if+0x26>
 801668a:	68bb      	ldr	r3, [r7, #8]
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d102      	bne.n	8016698 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016694:	3304      	adds	r3, #4
 8016696:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016698:	78fa      	ldrb	r2, [r7, #3]
 801669a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801669c:	9302      	str	r3, [sp, #8]
 801669e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80166a2:	9301      	str	r3, [sp, #4]
 80166a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80166a8:	9300      	str	r3, [sp, #0]
 80166aa:	4613      	mov	r3, r2
 80166ac:	687a      	ldr	r2, [r7, #4]
 80166ae:	6979      	ldr	r1, [r7, #20]
 80166b0:	68f8      	ldr	r0, [r7, #12]
 80166b2:	f000 f805 	bl	80166c0 <ip4_output_if_src>
 80166b6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80166b8:	4618      	mov	r0, r3
 80166ba:	3718      	adds	r7, #24
 80166bc:	46bd      	mov	sp, r7
 80166be:	bd80      	pop	{r7, pc}

080166c0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b088      	sub	sp, #32
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	60f8      	str	r0, [r7, #12]
 80166c8:	60b9      	str	r1, [r7, #8]
 80166ca:	607a      	str	r2, [r7, #4]
 80166cc:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 80166ce:	f7ef fe11 	bl	80062f4 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	7b9b      	ldrb	r3, [r3, #14]
 80166d6:	2b01      	cmp	r3, #1
 80166d8:	d006      	beq.n	80166e8 <ip4_output_if_src+0x28>
 80166da:	4b4b      	ldr	r3, [pc, #300]	@ (8016808 <ip4_output_if_src+0x148>)
 80166dc:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80166e0:	494a      	ldr	r1, [pc, #296]	@ (801680c <ip4_output_if_src+0x14c>)
 80166e2:	484b      	ldr	r0, [pc, #300]	@ (8016810 <ip4_output_if_src+0x150>)
 80166e4:	f001 f9e8 	bl	8017ab8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d060      	beq.n	80167b0 <ip4_output_if_src+0xf0>
    u16_t ip_hlen = IP_HLEN;
 80166ee:	2314      	movs	r3, #20
 80166f0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80166f2:	2114      	movs	r1, #20
 80166f4:	68f8      	ldr	r0, [r7, #12]
 80166f6:	f7f5 fa87 	bl	800bc08 <pbuf_add_header>
 80166fa:	4603      	mov	r3, r0
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d002      	beq.n	8016706 <ip4_output_if_src+0x46>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016700:	f06f 0301 	mvn.w	r3, #1
 8016704:	e07c      	b.n	8016800 <ip4_output_if_src+0x140>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	685b      	ldr	r3, [r3, #4]
 801670a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	895b      	ldrh	r3, [r3, #10]
 8016710:	2b13      	cmp	r3, #19
 8016712:	d806      	bhi.n	8016722 <ip4_output_if_src+0x62>
 8016714:	4b3c      	ldr	r3, [pc, #240]	@ (8016808 <ip4_output_if_src+0x148>)
 8016716:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801671a:	493e      	ldr	r1, [pc, #248]	@ (8016814 <ip4_output_if_src+0x154>)
 801671c:	483c      	ldr	r0, [pc, #240]	@ (8016810 <ip4_output_if_src+0x150>)
 801671e:	f001 f9cb 	bl	8017ab8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016722:	69fb      	ldr	r3, [r7, #28]
 8016724:	78fa      	ldrb	r2, [r7, #3]
 8016726:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016728:	69fb      	ldr	r3, [r7, #28]
 801672a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801672e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681a      	ldr	r2, [r3, #0]
 8016734:	69fb      	ldr	r3, [r7, #28]
 8016736:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016738:	8b7b      	ldrh	r3, [r7, #26]
 801673a:	089b      	lsrs	r3, r3, #2
 801673c:	b29b      	uxth	r3, r3
 801673e:	b2db      	uxtb	r3, r3
 8016740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016744:	b2da      	uxtb	r2, r3
 8016746:	69fb      	ldr	r3, [r7, #28]
 8016748:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801674a:	69fb      	ldr	r3, [r7, #28]
 801674c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016750:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	891b      	ldrh	r3, [r3, #8]
 8016756:	4618      	mov	r0, r3
 8016758:	f7f3 fe3c 	bl	800a3d4 <lwip_htons>
 801675c:	4603      	mov	r3, r0
 801675e:	461a      	mov	r2, r3
 8016760:	69fb      	ldr	r3, [r7, #28]
 8016762:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016764:	69fb      	ldr	r3, [r7, #28]
 8016766:	2200      	movs	r2, #0
 8016768:	719a      	strb	r2, [r3, #6]
 801676a:	2200      	movs	r2, #0
 801676c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801676e:	4b2a      	ldr	r3, [pc, #168]	@ (8016818 <ip4_output_if_src+0x158>)
 8016770:	881b      	ldrh	r3, [r3, #0]
 8016772:	4618      	mov	r0, r3
 8016774:	f7f3 fe2e 	bl	800a3d4 <lwip_htons>
 8016778:	4603      	mov	r3, r0
 801677a:	461a      	mov	r2, r3
 801677c:	69fb      	ldr	r3, [r7, #28]
 801677e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016780:	4b25      	ldr	r3, [pc, #148]	@ (8016818 <ip4_output_if_src+0x158>)
 8016782:	881b      	ldrh	r3, [r3, #0]
 8016784:	3301      	adds	r3, #1
 8016786:	b29a      	uxth	r2, r3
 8016788:	4b23      	ldr	r3, [pc, #140]	@ (8016818 <ip4_output_if_src+0x158>)
 801678a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801678c:	68bb      	ldr	r3, [r7, #8]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d104      	bne.n	801679c <ip4_output_if_src+0xdc>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016792:	4b22      	ldr	r3, [pc, #136]	@ (801681c <ip4_output_if_src+0x15c>)
 8016794:	681a      	ldr	r2, [r3, #0]
 8016796:	69fb      	ldr	r3, [r7, #28]
 8016798:	60da      	str	r2, [r3, #12]
 801679a:	e003      	b.n	80167a4 <ip4_output_if_src+0xe4>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801679c:	68bb      	ldr	r3, [r7, #8]
 801679e:	681a      	ldr	r2, [r3, #0]
 80167a0:	69fb      	ldr	r3, [r7, #28]
 80167a2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80167a4:	69fb      	ldr	r3, [r7, #28]
 80167a6:	2200      	movs	r2, #0
 80167a8:	729a      	strb	r2, [r3, #10]
 80167aa:	2200      	movs	r2, #0
 80167ac:	72da      	strb	r2, [r3, #11]
 80167ae:	e00f      	b.n	80167d0 <ip4_output_if_src+0x110>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	895b      	ldrh	r3, [r3, #10]
 80167b4:	2b13      	cmp	r3, #19
 80167b6:	d802      	bhi.n	80167be <ip4_output_if_src+0xfe>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80167b8:	f06f 0301 	mvn.w	r3, #1
 80167bc:	e020      	b.n	8016800 <ip4_output_if_src+0x140>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	685b      	ldr	r3, [r3, #4]
 80167c2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80167c4:	69fb      	ldr	r3, [r7, #28]
 80167c6:	691b      	ldr	r3, [r3, #16]
 80167c8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80167ca:	f107 0314 	add.w	r3, r7, #20
 80167ce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80167d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d00c      	beq.n	80167f2 <ip4_output_if_src+0x132>
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	891a      	ldrh	r2, [r3, #8]
 80167dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d906      	bls.n	80167f2 <ip4_output_if_src+0x132>
    return ip4_frag(p, netif, dest);
 80167e4:	687a      	ldr	r2, [r7, #4]
 80167e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80167e8:	68f8      	ldr	r0, [r7, #12]
 80167ea:	f000 fd53 	bl	8017294 <ip4_frag>
 80167ee:	4603      	mov	r3, r0
 80167f0:	e006      	b.n	8016800 <ip4_output_if_src+0x140>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80167f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167f4:	695b      	ldr	r3, [r3, #20]
 80167f6:	687a      	ldr	r2, [r7, #4]
 80167f8:	68f9      	ldr	r1, [r7, #12]
 80167fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80167fc:	4798      	blx	r3
 80167fe:	4603      	mov	r3, r0
}
 8016800:	4618      	mov	r0, r3
 8016802:	3720      	adds	r7, #32
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}
 8016808:	0801b6ac 	.word	0x0801b6ac
 801680c:	0801b6e0 	.word	0x0801b6e0
 8016810:	0801b6ec 	.word	0x0801b6ec
 8016814:	0801b714 	.word	0x0801b714
 8016818:	240106fe 	.word	0x240106fe
 801681c:	0801c1a8 	.word	0x0801c1a8

08016820 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016820:	b480      	push	{r7}
 8016822:	b085      	sub	sp, #20
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
 8016828:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016834:	d002      	beq.n	801683c <ip4_addr_isbroadcast_u32+0x1c>
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d101      	bne.n	8016840 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801683c:	2301      	movs	r3, #1
 801683e:	e02a      	b.n	8016896 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016840:	683b      	ldr	r3, [r7, #0]
 8016842:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016846:	f003 0302 	and.w	r3, r3, #2
 801684a:	2b00      	cmp	r3, #0
 801684c:	d101      	bne.n	8016852 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801684e:	2300      	movs	r3, #0
 8016850:	e021      	b.n	8016896 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016852:	683b      	ldr	r3, [r7, #0]
 8016854:	3304      	adds	r3, #4
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	687a      	ldr	r2, [r7, #4]
 801685a:	429a      	cmp	r2, r3
 801685c:	d101      	bne.n	8016862 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801685e:	2300      	movs	r3, #0
 8016860:	e019      	b.n	8016896 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016862:	68fa      	ldr	r2, [r7, #12]
 8016864:	683b      	ldr	r3, [r7, #0]
 8016866:	3304      	adds	r3, #4
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	405a      	eors	r2, r3
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	3308      	adds	r3, #8
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	4013      	ands	r3, r2
 8016874:	2b00      	cmp	r3, #0
 8016876:	d10d      	bne.n	8016894 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016878:	683b      	ldr	r3, [r7, #0]
 801687a:	3308      	adds	r3, #8
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	43da      	mvns	r2, r3
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	3308      	adds	r3, #8
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801688c:	429a      	cmp	r2, r3
 801688e:	d101      	bne.n	8016894 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016890:	2301      	movs	r3, #1
 8016892:	e000      	b.n	8016896 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016894:	2300      	movs	r3, #0
  }
}
 8016896:	4618      	mov	r0, r3
 8016898:	3714      	adds	r7, #20
 801689a:	46bd      	mov	sp, r7
 801689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a0:	4770      	bx	lr
	...

080168a4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b084      	sub	sp, #16
 80168a8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80168aa:	2300      	movs	r3, #0
 80168ac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80168ae:	4b12      	ldr	r3, [pc, #72]	@ (80168f8 <ip_reass_tmr+0x54>)
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80168b4:	e018      	b.n	80168e8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	7fdb      	ldrb	r3, [r3, #31]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d00b      	beq.n	80168d6 <ip_reass_tmr+0x32>
      r->timer--;
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	7fdb      	ldrb	r3, [r3, #31]
 80168c2:	3b01      	subs	r3, #1
 80168c4:	b2da      	uxtb	r2, r3
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	60fb      	str	r3, [r7, #12]
 80168d4:	e008      	b.n	80168e8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80168e0:	68b9      	ldr	r1, [r7, #8]
 80168e2:	6878      	ldr	r0, [r7, #4]
 80168e4:	f000 f80a 	bl	80168fc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d1e3      	bne.n	80168b6 <ip_reass_tmr+0x12>
    }
  }
}
 80168ee:	bf00      	nop
 80168f0:	bf00      	nop
 80168f2:	3710      	adds	r7, #16
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}
 80168f8:	24010700 	.word	0x24010700

080168fc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b088      	sub	sp, #32
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
 8016904:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016906:	2300      	movs	r3, #0
 8016908:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801690a:	683a      	ldr	r2, [r7, #0]
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	429a      	cmp	r2, r3
 8016910:	d105      	bne.n	801691e <ip_reass_free_complete_datagram+0x22>
 8016912:	4b45      	ldr	r3, [pc, #276]	@ (8016a28 <ip_reass_free_complete_datagram+0x12c>)
 8016914:	22ab      	movs	r2, #171	@ 0xab
 8016916:	4945      	ldr	r1, [pc, #276]	@ (8016a2c <ip_reass_free_complete_datagram+0x130>)
 8016918:	4845      	ldr	r0, [pc, #276]	@ (8016a30 <ip_reass_free_complete_datagram+0x134>)
 801691a:	f001 f8cd 	bl	8017ab8 <iprintf>
  if (prev != NULL) {
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d00a      	beq.n	801693a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016924:	683b      	ldr	r3, [r7, #0]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	687a      	ldr	r2, [r7, #4]
 801692a:	429a      	cmp	r2, r3
 801692c:	d005      	beq.n	801693a <ip_reass_free_complete_datagram+0x3e>
 801692e:	4b3e      	ldr	r3, [pc, #248]	@ (8016a28 <ip_reass_free_complete_datagram+0x12c>)
 8016930:	22ad      	movs	r2, #173	@ 0xad
 8016932:	4940      	ldr	r1, [pc, #256]	@ (8016a34 <ip_reass_free_complete_datagram+0x138>)
 8016934:	483e      	ldr	r0, [pc, #248]	@ (8016a30 <ip_reass_free_complete_datagram+0x134>)
 8016936:	f001 f8bf 	bl	8017ab8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	685b      	ldr	r3, [r3, #4]
 801693e:	685b      	ldr	r3, [r3, #4]
 8016940:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016942:	697b      	ldr	r3, [r7, #20]
 8016944:	889b      	ldrh	r3, [r3, #4]
 8016946:	b29b      	uxth	r3, r3
 8016948:	2b00      	cmp	r3, #0
 801694a:	d12a      	bne.n	80169a2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	685b      	ldr	r3, [r3, #4]
 8016950:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016952:	697b      	ldr	r3, [r7, #20]
 8016954:	681a      	ldr	r2, [r3, #0]
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801695a:	69bb      	ldr	r3, [r7, #24]
 801695c:	6858      	ldr	r0, [r3, #4]
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	3308      	adds	r3, #8
 8016962:	2214      	movs	r2, #20
 8016964:	4619      	mov	r1, r3
 8016966:	f001 f9d8 	bl	8017d1a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801696a:	2101      	movs	r1, #1
 801696c:	69b8      	ldr	r0, [r7, #24]
 801696e:	f7ff fc1b 	bl	80161a8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016972:	69b8      	ldr	r0, [r7, #24]
 8016974:	f7f5 fa6c 	bl	800be50 <pbuf_clen>
 8016978:	4603      	mov	r3, r0
 801697a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801697c:	8bfa      	ldrh	r2, [r7, #30]
 801697e:	8a7b      	ldrh	r3, [r7, #18]
 8016980:	4413      	add	r3, r2
 8016982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016986:	db05      	blt.n	8016994 <ip_reass_free_complete_datagram+0x98>
 8016988:	4b27      	ldr	r3, [pc, #156]	@ (8016a28 <ip_reass_free_complete_datagram+0x12c>)
 801698a:	22bc      	movs	r2, #188	@ 0xbc
 801698c:	492a      	ldr	r1, [pc, #168]	@ (8016a38 <ip_reass_free_complete_datagram+0x13c>)
 801698e:	4828      	ldr	r0, [pc, #160]	@ (8016a30 <ip_reass_free_complete_datagram+0x134>)
 8016990:	f001 f892 	bl	8017ab8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016994:	8bfa      	ldrh	r2, [r7, #30]
 8016996:	8a7b      	ldrh	r3, [r7, #18]
 8016998:	4413      	add	r3, r2
 801699a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801699c:	69b8      	ldr	r0, [r7, #24]
 801699e:	f7f5 f9c9 	bl	800bd34 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	685b      	ldr	r3, [r3, #4]
 80169a6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80169a8:	e01f      	b.n	80169ea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80169aa:	69bb      	ldr	r3, [r7, #24]
 80169ac:	685b      	ldr	r3, [r3, #4]
 80169ae:	617b      	str	r3, [r7, #20]
    pcur = p;
 80169b0:	69bb      	ldr	r3, [r7, #24]
 80169b2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80169b4:	697b      	ldr	r3, [r7, #20]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80169ba:	68f8      	ldr	r0, [r7, #12]
 80169bc:	f7f5 fa48 	bl	800be50 <pbuf_clen>
 80169c0:	4603      	mov	r3, r0
 80169c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80169c4:	8bfa      	ldrh	r2, [r7, #30]
 80169c6:	8a7b      	ldrh	r3, [r7, #18]
 80169c8:	4413      	add	r3, r2
 80169ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80169ce:	db05      	blt.n	80169dc <ip_reass_free_complete_datagram+0xe0>
 80169d0:	4b15      	ldr	r3, [pc, #84]	@ (8016a28 <ip_reass_free_complete_datagram+0x12c>)
 80169d2:	22cc      	movs	r2, #204	@ 0xcc
 80169d4:	4918      	ldr	r1, [pc, #96]	@ (8016a38 <ip_reass_free_complete_datagram+0x13c>)
 80169d6:	4816      	ldr	r0, [pc, #88]	@ (8016a30 <ip_reass_free_complete_datagram+0x134>)
 80169d8:	f001 f86e 	bl	8017ab8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80169dc:	8bfa      	ldrh	r2, [r7, #30]
 80169de:	8a7b      	ldrh	r3, [r7, #18]
 80169e0:	4413      	add	r3, r2
 80169e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80169e4:	68f8      	ldr	r0, [r7, #12]
 80169e6:	f7f5 f9a5 	bl	800bd34 <pbuf_free>
  while (p != NULL) {
 80169ea:	69bb      	ldr	r3, [r7, #24]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d1dc      	bne.n	80169aa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80169f0:	6839      	ldr	r1, [r7, #0]
 80169f2:	6878      	ldr	r0, [r7, #4]
 80169f4:	f000 f8c2 	bl	8016b7c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80169f8:	4b10      	ldr	r3, [pc, #64]	@ (8016a3c <ip_reass_free_complete_datagram+0x140>)
 80169fa:	881b      	ldrh	r3, [r3, #0]
 80169fc:	8bfa      	ldrh	r2, [r7, #30]
 80169fe:	429a      	cmp	r2, r3
 8016a00:	d905      	bls.n	8016a0e <ip_reass_free_complete_datagram+0x112>
 8016a02:	4b09      	ldr	r3, [pc, #36]	@ (8016a28 <ip_reass_free_complete_datagram+0x12c>)
 8016a04:	22d2      	movs	r2, #210	@ 0xd2
 8016a06:	490e      	ldr	r1, [pc, #56]	@ (8016a40 <ip_reass_free_complete_datagram+0x144>)
 8016a08:	4809      	ldr	r0, [pc, #36]	@ (8016a30 <ip_reass_free_complete_datagram+0x134>)
 8016a0a:	f001 f855 	bl	8017ab8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8016a3c <ip_reass_free_complete_datagram+0x140>)
 8016a10:	881a      	ldrh	r2, [r3, #0]
 8016a12:	8bfb      	ldrh	r3, [r7, #30]
 8016a14:	1ad3      	subs	r3, r2, r3
 8016a16:	b29a      	uxth	r2, r3
 8016a18:	4b08      	ldr	r3, [pc, #32]	@ (8016a3c <ip_reass_free_complete_datagram+0x140>)
 8016a1a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016a1c:	8bfb      	ldrh	r3, [r7, #30]
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3720      	adds	r7, #32
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}
 8016a26:	bf00      	nop
 8016a28:	0801b744 	.word	0x0801b744
 8016a2c:	0801b780 	.word	0x0801b780
 8016a30:	0801b78c 	.word	0x0801b78c
 8016a34:	0801b7b4 	.word	0x0801b7b4
 8016a38:	0801b7c8 	.word	0x0801b7c8
 8016a3c:	24010704 	.word	0x24010704
 8016a40:	0801b7e8 	.word	0x0801b7e8

08016a44 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b08a      	sub	sp, #40	@ 0x28
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
 8016a4c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016a52:	2300      	movs	r3, #0
 8016a54:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016a56:	2300      	movs	r3, #0
 8016a58:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016a5e:	2300      	movs	r3, #0
 8016a60:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016a62:	4b28      	ldr	r3, [pc, #160]	@ (8016b04 <ip_reass_remove_oldest_datagram+0xc0>)
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016a68:	e030      	b.n	8016acc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a6c:	695a      	ldr	r2, [r3, #20]
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	68db      	ldr	r3, [r3, #12]
 8016a72:	429a      	cmp	r2, r3
 8016a74:	d10c      	bne.n	8016a90 <ip_reass_remove_oldest_datagram+0x4c>
 8016a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a78:	699a      	ldr	r2, [r3, #24]
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	691b      	ldr	r3, [r3, #16]
 8016a7e:	429a      	cmp	r2, r3
 8016a80:	d106      	bne.n	8016a90 <ip_reass_remove_oldest_datagram+0x4c>
 8016a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a84:	899a      	ldrh	r2, [r3, #12]
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	889b      	ldrh	r3, [r3, #4]
 8016a8a:	b29b      	uxth	r3, r3
 8016a8c:	429a      	cmp	r2, r3
 8016a8e:	d014      	beq.n	8016aba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016a90:	693b      	ldr	r3, [r7, #16]
 8016a92:	3301      	adds	r3, #1
 8016a94:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016a96:	6a3b      	ldr	r3, [r7, #32]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d104      	bne.n	8016aa6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a9e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016aa0:	69fb      	ldr	r3, [r7, #28]
 8016aa2:	61bb      	str	r3, [r7, #24]
 8016aa4:	e009      	b.n	8016aba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aa8:	7fda      	ldrb	r2, [r3, #31]
 8016aaa:	6a3b      	ldr	r3, [r7, #32]
 8016aac:	7fdb      	ldrb	r3, [r3, #31]
 8016aae:	429a      	cmp	r2, r3
 8016ab0:	d803      	bhi.n	8016aba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ab4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016ab6:	69fb      	ldr	r3, [r7, #28]
 8016ab8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d001      	beq.n	8016ac6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ac4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d1cb      	bne.n	8016a6a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016ad2:	6a3b      	ldr	r3, [r7, #32]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d008      	beq.n	8016aea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016ad8:	69b9      	ldr	r1, [r7, #24]
 8016ada:	6a38      	ldr	r0, [r7, #32]
 8016adc:	f7ff ff0e 	bl	80168fc <ip_reass_free_complete_datagram>
 8016ae0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016ae2:	697a      	ldr	r2, [r7, #20]
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	4413      	add	r3, r2
 8016ae8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016aea:	697a      	ldr	r2, [r7, #20]
 8016aec:	683b      	ldr	r3, [r7, #0]
 8016aee:	429a      	cmp	r2, r3
 8016af0:	da02      	bge.n	8016af8 <ip_reass_remove_oldest_datagram+0xb4>
 8016af2:	693b      	ldr	r3, [r7, #16]
 8016af4:	2b01      	cmp	r3, #1
 8016af6:	dcac      	bgt.n	8016a52 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016af8:	697b      	ldr	r3, [r7, #20]
}
 8016afa:	4618      	mov	r0, r3
 8016afc:	3728      	adds	r7, #40	@ 0x28
 8016afe:	46bd      	mov	sp, r7
 8016b00:	bd80      	pop	{r7, pc}
 8016b02:	bf00      	nop
 8016b04:	24010700 	.word	0x24010700

08016b08 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	b084      	sub	sp, #16
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]
 8016b10:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016b12:	2004      	movs	r0, #4
 8016b14:	f7f4 f9dc 	bl	800aed0 <memp_malloc>
 8016b18:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d110      	bne.n	8016b42 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016b20:	6839      	ldr	r1, [r7, #0]
 8016b22:	6878      	ldr	r0, [r7, #4]
 8016b24:	f7ff ff8e 	bl	8016a44 <ip_reass_remove_oldest_datagram>
 8016b28:	4602      	mov	r2, r0
 8016b2a:	683b      	ldr	r3, [r7, #0]
 8016b2c:	4293      	cmp	r3, r2
 8016b2e:	dc03      	bgt.n	8016b38 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016b30:	2004      	movs	r0, #4
 8016b32:	f7f4 f9cd 	bl	800aed0 <memp_malloc>
 8016b36:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d101      	bne.n	8016b42 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016b3e:	2300      	movs	r3, #0
 8016b40:	e016      	b.n	8016b70 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016b42:	2220      	movs	r2, #32
 8016b44:	2100      	movs	r1, #0
 8016b46:	68f8      	ldr	r0, [r7, #12]
 8016b48:	f001 f81b 	bl	8017b82 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	220f      	movs	r2, #15
 8016b50:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016b52:	4b09      	ldr	r3, [pc, #36]	@ (8016b78 <ip_reass_enqueue_new_datagram+0x70>)
 8016b54:	681a      	ldr	r2, [r3, #0]
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016b5a:	4a07      	ldr	r2, [pc, #28]	@ (8016b78 <ip_reass_enqueue_new_datagram+0x70>)
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	3308      	adds	r3, #8
 8016b64:	2214      	movs	r2, #20
 8016b66:	6879      	ldr	r1, [r7, #4]
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f001 f8d6 	bl	8017d1a <memcpy>
  return ipr;
 8016b6e:	68fb      	ldr	r3, [r7, #12]
}
 8016b70:	4618      	mov	r0, r3
 8016b72:	3710      	adds	r7, #16
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bd80      	pop	{r7, pc}
 8016b78:	24010700 	.word	0x24010700

08016b7c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b082      	sub	sp, #8
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
 8016b84:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016b86:	4b10      	ldr	r3, [pc, #64]	@ (8016bc8 <ip_reass_dequeue_datagram+0x4c>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	687a      	ldr	r2, [r7, #4]
 8016b8c:	429a      	cmp	r2, r3
 8016b8e:	d104      	bne.n	8016b9a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	4a0c      	ldr	r2, [pc, #48]	@ (8016bc8 <ip_reass_dequeue_datagram+0x4c>)
 8016b96:	6013      	str	r3, [r2, #0]
 8016b98:	e00d      	b.n	8016bb6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016b9a:	683b      	ldr	r3, [r7, #0]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d106      	bne.n	8016bae <ip_reass_dequeue_datagram+0x32>
 8016ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8016bcc <ip_reass_dequeue_datagram+0x50>)
 8016ba2:	f240 1245 	movw	r2, #325	@ 0x145
 8016ba6:	490a      	ldr	r1, [pc, #40]	@ (8016bd0 <ip_reass_dequeue_datagram+0x54>)
 8016ba8:	480a      	ldr	r0, [pc, #40]	@ (8016bd4 <ip_reass_dequeue_datagram+0x58>)
 8016baa:	f000 ff85 	bl	8017ab8 <iprintf>
    prev->next = ipr->next;
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	681a      	ldr	r2, [r3, #0]
 8016bb2:	683b      	ldr	r3, [r7, #0]
 8016bb4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016bb6:	6879      	ldr	r1, [r7, #4]
 8016bb8:	2004      	movs	r0, #4
 8016bba:	f7f4 f9ff 	bl	800afbc <memp_free>
}
 8016bbe:	bf00      	nop
 8016bc0:	3708      	adds	r7, #8
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd80      	pop	{r7, pc}
 8016bc6:	bf00      	nop
 8016bc8:	24010700 	.word	0x24010700
 8016bcc:	0801b744 	.word	0x0801b744
 8016bd0:	0801b80c 	.word	0x0801b80c
 8016bd4:	0801b78c 	.word	0x0801b78c

08016bd8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b08c      	sub	sp, #48	@ 0x30
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	60f8      	str	r0, [r7, #12]
 8016be0:	60b9      	str	r1, [r7, #8]
 8016be2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016be4:	2300      	movs	r3, #0
 8016be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016be8:	2301      	movs	r3, #1
 8016bea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016bec:	68bb      	ldr	r3, [r7, #8]
 8016bee:	685b      	ldr	r3, [r3, #4]
 8016bf0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016bf2:	69fb      	ldr	r3, [r7, #28]
 8016bf4:	885b      	ldrh	r3, [r3, #2]
 8016bf6:	b29b      	uxth	r3, r3
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	f7f3 fbeb 	bl	800a3d4 <lwip_htons>
 8016bfe:	4603      	mov	r3, r0
 8016c00:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016c02:	69fb      	ldr	r3, [r7, #28]
 8016c04:	781b      	ldrb	r3, [r3, #0]
 8016c06:	f003 030f 	and.w	r3, r3, #15
 8016c0a:	b2db      	uxtb	r3, r3
 8016c0c:	009b      	lsls	r3, r3, #2
 8016c0e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016c10:	7e7b      	ldrb	r3, [r7, #25]
 8016c12:	b29b      	uxth	r3, r3
 8016c14:	8b7a      	ldrh	r2, [r7, #26]
 8016c16:	429a      	cmp	r2, r3
 8016c18:	d202      	bcs.n	8016c20 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8016c1e:	e135      	b.n	8016e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016c20:	7e7b      	ldrb	r3, [r7, #25]
 8016c22:	b29b      	uxth	r3, r3
 8016c24:	8b7a      	ldrh	r2, [r7, #26]
 8016c26:	1ad3      	subs	r3, r2, r3
 8016c28:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016c2a:	69fb      	ldr	r3, [r7, #28]
 8016c2c:	88db      	ldrh	r3, [r3, #6]
 8016c2e:	b29b      	uxth	r3, r3
 8016c30:	4618      	mov	r0, r3
 8016c32:	f7f3 fbcf 	bl	800a3d4 <lwip_htons>
 8016c36:	4603      	mov	r3, r0
 8016c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c3c:	b29b      	uxth	r3, r3
 8016c3e:	00db      	lsls	r3, r3, #3
 8016c40:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016c42:	68bb      	ldr	r3, [r7, #8]
 8016c44:	685b      	ldr	r3, [r3, #4]
 8016c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8016c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	701a      	strb	r2, [r3, #0]
 8016c4e:	2200      	movs	r2, #0
 8016c50:	705a      	strb	r2, [r3, #1]
 8016c52:	2200      	movs	r2, #0
 8016c54:	709a      	strb	r2, [r3, #2]
 8016c56:	2200      	movs	r2, #0
 8016c58:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c5c:	8afa      	ldrh	r2, [r7, #22]
 8016c5e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016c60:	8afa      	ldrh	r2, [r7, #22]
 8016c62:	8b7b      	ldrh	r3, [r7, #26]
 8016c64:	4413      	add	r3, r2
 8016c66:	b29a      	uxth	r2, r3
 8016c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c6a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c6e:	88db      	ldrh	r3, [r3, #6]
 8016c70:	b29b      	uxth	r3, r3
 8016c72:	8afa      	ldrh	r2, [r7, #22]
 8016c74:	429a      	cmp	r2, r3
 8016c76:	d902      	bls.n	8016c7e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016c78:	f04f 33ff 	mov.w	r3, #4294967295
 8016c7c:	e106      	b.n	8016e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	685b      	ldr	r3, [r3, #4]
 8016c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8016c84:	e068      	b.n	8016d58 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c88:	685b      	ldr	r3, [r3, #4]
 8016c8a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c8e:	889b      	ldrh	r3, [r3, #4]
 8016c90:	b29a      	uxth	r2, r3
 8016c92:	693b      	ldr	r3, [r7, #16]
 8016c94:	889b      	ldrh	r3, [r3, #4]
 8016c96:	b29b      	uxth	r3, r3
 8016c98:	429a      	cmp	r2, r3
 8016c9a:	d235      	bcs.n	8016d08 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ca0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d020      	beq.n	8016cea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016caa:	889b      	ldrh	r3, [r3, #4]
 8016cac:	b29a      	uxth	r2, r3
 8016cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cb0:	88db      	ldrh	r3, [r3, #6]
 8016cb2:	b29b      	uxth	r3, r3
 8016cb4:	429a      	cmp	r2, r3
 8016cb6:	d307      	bcc.n	8016cc8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cba:	88db      	ldrh	r3, [r3, #6]
 8016cbc:	b29a      	uxth	r2, r3
 8016cbe:	693b      	ldr	r3, [r7, #16]
 8016cc0:	889b      	ldrh	r3, [r3, #4]
 8016cc2:	b29b      	uxth	r3, r3
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	d902      	bls.n	8016cce <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8016ccc:	e0de      	b.n	8016e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cd0:	68ba      	ldr	r2, [r7, #8]
 8016cd2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cd6:	88db      	ldrh	r3, [r3, #6]
 8016cd8:	b29a      	uxth	r2, r3
 8016cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cdc:	889b      	ldrh	r3, [r3, #4]
 8016cde:	b29b      	uxth	r3, r3
 8016ce0:	429a      	cmp	r2, r3
 8016ce2:	d03d      	beq.n	8016d60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016ce8:	e03a      	b.n	8016d60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cec:	88db      	ldrh	r3, [r3, #6]
 8016cee:	b29a      	uxth	r2, r3
 8016cf0:	693b      	ldr	r3, [r7, #16]
 8016cf2:	889b      	ldrh	r3, [r3, #4]
 8016cf4:	b29b      	uxth	r3, r3
 8016cf6:	429a      	cmp	r2, r3
 8016cf8:	d902      	bls.n	8016d00 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8016cfe:	e0c5      	b.n	8016e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	68ba      	ldr	r2, [r7, #8]
 8016d04:	605a      	str	r2, [r3, #4]
      break;
 8016d06:	e02b      	b.n	8016d60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d0a:	889b      	ldrh	r3, [r3, #4]
 8016d0c:	b29a      	uxth	r2, r3
 8016d0e:	693b      	ldr	r3, [r7, #16]
 8016d10:	889b      	ldrh	r3, [r3, #4]
 8016d12:	b29b      	uxth	r3, r3
 8016d14:	429a      	cmp	r2, r3
 8016d16:	d102      	bne.n	8016d1e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d18:	f04f 33ff 	mov.w	r3, #4294967295
 8016d1c:	e0b6      	b.n	8016e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d20:	889b      	ldrh	r3, [r3, #4]
 8016d22:	b29a      	uxth	r2, r3
 8016d24:	693b      	ldr	r3, [r7, #16]
 8016d26:	88db      	ldrh	r3, [r3, #6]
 8016d28:	b29b      	uxth	r3, r3
 8016d2a:	429a      	cmp	r2, r3
 8016d2c:	d202      	bcs.n	8016d34 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8016d32:	e0ab      	b.n	8016e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d009      	beq.n	8016d4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d3c:	88db      	ldrh	r3, [r3, #6]
 8016d3e:	b29a      	uxth	r2, r3
 8016d40:	693b      	ldr	r3, [r7, #16]
 8016d42:	889b      	ldrh	r3, [r3, #4]
 8016d44:	b29b      	uxth	r3, r3
 8016d46:	429a      	cmp	r2, r3
 8016d48:	d001      	beq.n	8016d4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016d4e:	693b      	ldr	r3, [r7, #16]
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8016d54:	693b      	ldr	r3, [r7, #16]
 8016d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8016d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d193      	bne.n	8016c86 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016d5e:	e000      	b.n	8016d62 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016d60:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d12d      	bne.n	8016dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d01c      	beq.n	8016da8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d70:	88db      	ldrh	r3, [r3, #6]
 8016d72:	b29a      	uxth	r2, r3
 8016d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d76:	889b      	ldrh	r3, [r3, #4]
 8016d78:	b29b      	uxth	r3, r3
 8016d7a:	429a      	cmp	r2, r3
 8016d7c:	d906      	bls.n	8016d8c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016d7e:	4b45      	ldr	r3, [pc, #276]	@ (8016e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016d80:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8016d84:	4944      	ldr	r1, [pc, #272]	@ (8016e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016d86:	4845      	ldr	r0, [pc, #276]	@ (8016e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016d88:	f000 fe96 	bl	8017ab8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d8e:	68ba      	ldr	r2, [r7, #8]
 8016d90:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d94:	88db      	ldrh	r3, [r3, #6]
 8016d96:	b29a      	uxth	r2, r3
 8016d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d9a:	889b      	ldrh	r3, [r3, #4]
 8016d9c:	b29b      	uxth	r3, r3
 8016d9e:	429a      	cmp	r2, r3
 8016da0:	d010      	beq.n	8016dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016da2:	2300      	movs	r3, #0
 8016da4:	623b      	str	r3, [r7, #32]
 8016da6:	e00d      	b.n	8016dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	685b      	ldr	r3, [r3, #4]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d006      	beq.n	8016dbe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016db0:	4b38      	ldr	r3, [pc, #224]	@ (8016e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016db2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8016db6:	493a      	ldr	r1, [pc, #232]	@ (8016ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016db8:	4838      	ldr	r0, [pc, #224]	@ (8016e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016dba:	f000 fe7d 	bl	8017ab8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	68ba      	ldr	r2, [r7, #8]
 8016dc2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d105      	bne.n	8016dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	7f9b      	ldrb	r3, [r3, #30]
 8016dce:	f003 0301 	and.w	r3, r3, #1
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d059      	beq.n	8016e8a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016dd6:	6a3b      	ldr	r3, [r7, #32]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d04f      	beq.n	8016e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	685b      	ldr	r3, [r3, #4]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d006      	beq.n	8016df2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	685b      	ldr	r3, [r3, #4]
 8016de8:	685b      	ldr	r3, [r3, #4]
 8016dea:	889b      	ldrh	r3, [r3, #4]
 8016dec:	b29b      	uxth	r3, r3
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d002      	beq.n	8016df8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016df2:	2300      	movs	r3, #0
 8016df4:	623b      	str	r3, [r7, #32]
 8016df6:	e041      	b.n	8016e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016e02:	e012      	b.n	8016e2a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e06:	685b      	ldr	r3, [r3, #4]
 8016e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8016e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e0c:	88db      	ldrh	r3, [r3, #6]
 8016e0e:	b29a      	uxth	r2, r3
 8016e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e12:	889b      	ldrh	r3, [r3, #4]
 8016e14:	b29b      	uxth	r3, r3
 8016e16:	429a      	cmp	r2, r3
 8016e18:	d002      	beq.n	8016e20 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	623b      	str	r3, [r7, #32]
            break;
 8016e1e:	e007      	b.n	8016e30 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e22:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8016e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d1e9      	bne.n	8016e04 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016e30:	6a3b      	ldr	r3, [r7, #32]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d022      	beq.n	8016e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	685b      	ldr	r3, [r3, #4]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d106      	bne.n	8016e4c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016e3e:	4b15      	ldr	r3, [pc, #84]	@ (8016e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e40:	f240 12df 	movw	r2, #479	@ 0x1df
 8016e44:	4917      	ldr	r1, [pc, #92]	@ (8016ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016e46:	4815      	ldr	r0, [pc, #84]	@ (8016e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e48:	f000 fe36 	bl	8017ab8 <iprintf>
          LWIP_ASSERT("sanity check",
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	685b      	ldr	r3, [r3, #4]
 8016e50:	685b      	ldr	r3, [r3, #4]
 8016e52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016e54:	429a      	cmp	r2, r3
 8016e56:	d106      	bne.n	8016e66 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016e58:	4b0e      	ldr	r3, [pc, #56]	@ (8016e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e5a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8016e5e:	4911      	ldr	r1, [pc, #68]	@ (8016ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016e60:	480e      	ldr	r0, [pc, #56]	@ (8016e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e62:	f000 fe29 	bl	8017ab8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d006      	beq.n	8016e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016e6e:	4b09      	ldr	r3, [pc, #36]	@ (8016e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e70:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8016e74:	490c      	ldr	r1, [pc, #48]	@ (8016ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016e76:	4809      	ldr	r0, [pc, #36]	@ (8016e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e78:	f000 fe1e 	bl	8017ab8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016e7c:	6a3b      	ldr	r3, [r7, #32]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	bf14      	ite	ne
 8016e82:	2301      	movne	r3, #1
 8016e84:	2300      	moveq	r3, #0
 8016e86:	b2db      	uxtb	r3, r3
 8016e88:	e000      	b.n	8016e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016e8a:	2300      	movs	r3, #0
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	3730      	adds	r7, #48	@ 0x30
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}
 8016e94:	0801b744 	.word	0x0801b744
 8016e98:	0801b828 	.word	0x0801b828
 8016e9c:	0801b78c 	.word	0x0801b78c
 8016ea0:	0801b848 	.word	0x0801b848
 8016ea4:	0801b880 	.word	0x0801b880
 8016ea8:	0801b890 	.word	0x0801b890

08016eac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b08e      	sub	sp, #56	@ 0x38
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	685b      	ldr	r3, [r3, #4]
 8016eb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ebc:	781b      	ldrb	r3, [r3, #0]
 8016ebe:	f003 030f 	and.w	r3, r3, #15
 8016ec2:	b2db      	uxtb	r3, r3
 8016ec4:	009b      	lsls	r3, r3, #2
 8016ec6:	b2db      	uxtb	r3, r3
 8016ec8:	2b14      	cmp	r3, #20
 8016eca:	f040 8171 	bne.w	80171b0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ed0:	88db      	ldrh	r3, [r3, #6]
 8016ed2:	b29b      	uxth	r3, r3
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f7f3 fa7d 	bl	800a3d4 <lwip_htons>
 8016eda:	4603      	mov	r3, r0
 8016edc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016ee0:	b29b      	uxth	r3, r3
 8016ee2:	00db      	lsls	r3, r3, #3
 8016ee4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ee8:	885b      	ldrh	r3, [r3, #2]
 8016eea:	b29b      	uxth	r3, r3
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7f3 fa71 	bl	800a3d4 <lwip_htons>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ef8:	781b      	ldrb	r3, [r3, #0]
 8016efa:	f003 030f 	and.w	r3, r3, #15
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	009b      	lsls	r3, r3, #2
 8016f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8016f06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016f0a:	b29b      	uxth	r3, r3
 8016f0c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016f0e:	429a      	cmp	r2, r3
 8016f10:	f0c0 8150 	bcc.w	80171b4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016f14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016f18:	b29b      	uxth	r3, r3
 8016f1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016f1c:	1ad3      	subs	r3, r2, r3
 8016f1e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016f20:	6878      	ldr	r0, [r7, #4]
 8016f22:	f7f4 ff95 	bl	800be50 <pbuf_clen>
 8016f26:	4603      	mov	r3, r0
 8016f28:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016f2a:	4b8c      	ldr	r3, [pc, #560]	@ (801715c <ip4_reass+0x2b0>)
 8016f2c:	881b      	ldrh	r3, [r3, #0]
 8016f2e:	461a      	mov	r2, r3
 8016f30:	8c3b      	ldrh	r3, [r7, #32]
 8016f32:	4413      	add	r3, r2
 8016f34:	2b0a      	cmp	r3, #10
 8016f36:	dd10      	ble.n	8016f5a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016f38:	8c3b      	ldrh	r3, [r7, #32]
 8016f3a:	4619      	mov	r1, r3
 8016f3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016f3e:	f7ff fd81 	bl	8016a44 <ip_reass_remove_oldest_datagram>
 8016f42:	4603      	mov	r3, r0
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	f000 8137 	beq.w	80171b8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016f4a:	4b84      	ldr	r3, [pc, #528]	@ (801715c <ip4_reass+0x2b0>)
 8016f4c:	881b      	ldrh	r3, [r3, #0]
 8016f4e:	461a      	mov	r2, r3
 8016f50:	8c3b      	ldrh	r3, [r7, #32]
 8016f52:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016f54:	2b0a      	cmp	r3, #10
 8016f56:	f300 812f 	bgt.w	80171b8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016f5a:	4b81      	ldr	r3, [pc, #516]	@ (8017160 <ip4_reass+0x2b4>)
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8016f60:	e015      	b.n	8016f8e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f64:	695a      	ldr	r2, [r3, #20]
 8016f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f68:	68db      	ldr	r3, [r3, #12]
 8016f6a:	429a      	cmp	r2, r3
 8016f6c:	d10c      	bne.n	8016f88 <ip4_reass+0xdc>
 8016f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f70:	699a      	ldr	r2, [r3, #24]
 8016f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f74:	691b      	ldr	r3, [r3, #16]
 8016f76:	429a      	cmp	r2, r3
 8016f78:	d106      	bne.n	8016f88 <ip4_reass+0xdc>
 8016f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f7c:	899a      	ldrh	r2, [r3, #12]
 8016f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f80:	889b      	ldrh	r3, [r3, #4]
 8016f82:	b29b      	uxth	r3, r3
 8016f84:	429a      	cmp	r2, r3
 8016f86:	d006      	beq.n	8016f96 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8016f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d1e6      	bne.n	8016f62 <ip4_reass+0xb6>
 8016f94:	e000      	b.n	8016f98 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016f96:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d109      	bne.n	8016fb2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016f9e:	8c3b      	ldrh	r3, [r7, #32]
 8016fa0:	4619      	mov	r1, r3
 8016fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016fa4:	f7ff fdb0 	bl	8016b08 <ip_reass_enqueue_new_datagram>
 8016fa8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d11c      	bne.n	8016fea <ip4_reass+0x13e>
      goto nullreturn;
 8016fb0:	e105      	b.n	80171be <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fb4:	88db      	ldrh	r3, [r3, #6]
 8016fb6:	b29b      	uxth	r3, r3
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f7f3 fa0b 	bl	800a3d4 <lwip_htons>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d110      	bne.n	8016fea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fca:	89db      	ldrh	r3, [r3, #14]
 8016fcc:	4618      	mov	r0, r3
 8016fce:	f7f3 fa01 	bl	800a3d4 <lwip_htons>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d006      	beq.n	8016fea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fde:	3308      	adds	r3, #8
 8016fe0:	2214      	movs	r2, #20
 8016fe2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	f000 fe98 	bl	8017d1a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fec:	88db      	ldrh	r3, [r3, #6]
 8016fee:	b29b      	uxth	r3, r3
 8016ff0:	f003 0320 	and.w	r3, r3, #32
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	bf0c      	ite	eq
 8016ff8:	2301      	moveq	r3, #1
 8016ffa:	2300      	movne	r3, #0
 8016ffc:	b2db      	uxtb	r3, r3
 8016ffe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017000:	69fb      	ldr	r3, [r7, #28]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d00e      	beq.n	8017024 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017006:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017008:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801700a:	4413      	add	r3, r2
 801700c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801700e:	8b7a      	ldrh	r2, [r7, #26]
 8017010:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017012:	429a      	cmp	r2, r3
 8017014:	f0c0 80a0 	bcc.w	8017158 <ip4_reass+0x2ac>
 8017018:	8b7b      	ldrh	r3, [r7, #26]
 801701a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801701e:	4293      	cmp	r3, r2
 8017020:	f200 809a 	bhi.w	8017158 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017024:	69fa      	ldr	r2, [r7, #28]
 8017026:	6879      	ldr	r1, [r7, #4]
 8017028:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801702a:	f7ff fdd5 	bl	8016bd8 <ip_reass_chain_frag_into_datagram_and_validate>
 801702e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017030:	697b      	ldr	r3, [r7, #20]
 8017032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017036:	f000 809b 	beq.w	8017170 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801703a:	4b48      	ldr	r3, [pc, #288]	@ (801715c <ip4_reass+0x2b0>)
 801703c:	881a      	ldrh	r2, [r3, #0]
 801703e:	8c3b      	ldrh	r3, [r7, #32]
 8017040:	4413      	add	r3, r2
 8017042:	b29a      	uxth	r2, r3
 8017044:	4b45      	ldr	r3, [pc, #276]	@ (801715c <ip4_reass+0x2b0>)
 8017046:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017048:	69fb      	ldr	r3, [r7, #28]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d00d      	beq.n	801706a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801704e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017050:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017052:	4413      	add	r3, r2
 8017054:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017058:	8a7a      	ldrh	r2, [r7, #18]
 801705a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801705e:	7f9b      	ldrb	r3, [r3, #30]
 8017060:	f043 0301 	orr.w	r3, r3, #1
 8017064:	b2da      	uxtb	r2, r3
 8017066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017068:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	2b01      	cmp	r3, #1
 801706e:	d171      	bne.n	8017154 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017072:	8b9b      	ldrh	r3, [r3, #28]
 8017074:	3314      	adds	r3, #20
 8017076:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801707a:	685b      	ldr	r3, [r3, #4]
 801707c:	685b      	ldr	r3, [r3, #4]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	685b      	ldr	r3, [r3, #4]
 8017088:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801708a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801708c:	3308      	adds	r3, #8
 801708e:	2214      	movs	r2, #20
 8017090:	4619      	mov	r1, r3
 8017092:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017094:	f000 fe41 	bl	8017d1a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017098:	8a3b      	ldrh	r3, [r7, #16]
 801709a:	4618      	mov	r0, r3
 801709c:	f7f3 f99a 	bl	800a3d4 <lwip_htons>
 80170a0:	4603      	mov	r3, r0
 80170a2:	461a      	mov	r2, r3
 80170a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170a6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80170a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170aa:	2200      	movs	r2, #0
 80170ac:	719a      	strb	r2, [r3, #6]
 80170ae:	2200      	movs	r2, #0
 80170b0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80170b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170b4:	2200      	movs	r2, #0
 80170b6:	729a      	strb	r2, [r3, #10]
 80170b8:	2200      	movs	r2, #0
 80170ba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80170bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170be:	685b      	ldr	r3, [r3, #4]
 80170c0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80170c2:	e00d      	b.n	80170e0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80170c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170c6:	685b      	ldr	r3, [r3, #4]
 80170c8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80170ca:	2114      	movs	r1, #20
 80170cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80170ce:	f7f4 fdab 	bl	800bc28 <pbuf_remove_header>
      pbuf_cat(p, r);
 80170d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80170d4:	6878      	ldr	r0, [r7, #4]
 80170d6:	f7f4 fefb 	bl	800bed0 <pbuf_cat>
      r = iprh->next_pbuf;
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80170e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d1ee      	bne.n	80170c4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80170e6:	4b1e      	ldr	r3, [pc, #120]	@ (8017160 <ip4_reass+0x2b4>)
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80170ec:	429a      	cmp	r2, r3
 80170ee:	d102      	bne.n	80170f6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80170f0:	2300      	movs	r3, #0
 80170f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80170f4:	e010      	b.n	8017118 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80170f6:	4b1a      	ldr	r3, [pc, #104]	@ (8017160 <ip4_reass+0x2b4>)
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80170fc:	e007      	b.n	801710e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80170fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017104:	429a      	cmp	r2, r3
 8017106:	d006      	beq.n	8017116 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801710e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017110:	2b00      	cmp	r3, #0
 8017112:	d1f4      	bne.n	80170fe <ip4_reass+0x252>
 8017114:	e000      	b.n	8017118 <ip4_reass+0x26c>
          break;
 8017116:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017118:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801711a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801711c:	f7ff fd2e 	bl	8016b7c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017120:	6878      	ldr	r0, [r7, #4]
 8017122:	f7f4 fe95 	bl	800be50 <pbuf_clen>
 8017126:	4603      	mov	r3, r0
 8017128:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801712a:	4b0c      	ldr	r3, [pc, #48]	@ (801715c <ip4_reass+0x2b0>)
 801712c:	881b      	ldrh	r3, [r3, #0]
 801712e:	8c3a      	ldrh	r2, [r7, #32]
 8017130:	429a      	cmp	r2, r3
 8017132:	d906      	bls.n	8017142 <ip4_reass+0x296>
 8017134:	4b0b      	ldr	r3, [pc, #44]	@ (8017164 <ip4_reass+0x2b8>)
 8017136:	f240 229b 	movw	r2, #667	@ 0x29b
 801713a:	490b      	ldr	r1, [pc, #44]	@ (8017168 <ip4_reass+0x2bc>)
 801713c:	480b      	ldr	r0, [pc, #44]	@ (801716c <ip4_reass+0x2c0>)
 801713e:	f000 fcbb 	bl	8017ab8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017142:	4b06      	ldr	r3, [pc, #24]	@ (801715c <ip4_reass+0x2b0>)
 8017144:	881a      	ldrh	r2, [r3, #0]
 8017146:	8c3b      	ldrh	r3, [r7, #32]
 8017148:	1ad3      	subs	r3, r2, r3
 801714a:	b29a      	uxth	r2, r3
 801714c:	4b03      	ldr	r3, [pc, #12]	@ (801715c <ip4_reass+0x2b0>)
 801714e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	e038      	b.n	80171c6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017154:	2300      	movs	r3, #0
 8017156:	e036      	b.n	80171c6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017158:	bf00      	nop
 801715a:	e00a      	b.n	8017172 <ip4_reass+0x2c6>
 801715c:	24010704 	.word	0x24010704
 8017160:	24010700 	.word	0x24010700
 8017164:	0801b744 	.word	0x0801b744
 8017168:	0801b8b4 	.word	0x0801b8b4
 801716c:	0801b78c 	.word	0x0801b78c
    goto nullreturn_ipr;
 8017170:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017174:	2b00      	cmp	r3, #0
 8017176:	d106      	bne.n	8017186 <ip4_reass+0x2da>
 8017178:	4b15      	ldr	r3, [pc, #84]	@ (80171d0 <ip4_reass+0x324>)
 801717a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801717e:	4915      	ldr	r1, [pc, #84]	@ (80171d4 <ip4_reass+0x328>)
 8017180:	4815      	ldr	r0, [pc, #84]	@ (80171d8 <ip4_reass+0x32c>)
 8017182:	f000 fc99 	bl	8017ab8 <iprintf>
  if (ipr->p == NULL) {
 8017186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017188:	685b      	ldr	r3, [r3, #4]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d116      	bne.n	80171bc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801718e:	4b13      	ldr	r3, [pc, #76]	@ (80171dc <ip4_reass+0x330>)
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017194:	429a      	cmp	r2, r3
 8017196:	d006      	beq.n	80171a6 <ip4_reass+0x2fa>
 8017198:	4b0d      	ldr	r3, [pc, #52]	@ (80171d0 <ip4_reass+0x324>)
 801719a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801719e:	4910      	ldr	r1, [pc, #64]	@ (80171e0 <ip4_reass+0x334>)
 80171a0:	480d      	ldr	r0, [pc, #52]	@ (80171d8 <ip4_reass+0x32c>)
 80171a2:	f000 fc89 	bl	8017ab8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80171a6:	2100      	movs	r1, #0
 80171a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80171aa:	f7ff fce7 	bl	8016b7c <ip_reass_dequeue_datagram>
 80171ae:	e006      	b.n	80171be <ip4_reass+0x312>
    goto nullreturn;
 80171b0:	bf00      	nop
 80171b2:	e004      	b.n	80171be <ip4_reass+0x312>
    goto nullreturn;
 80171b4:	bf00      	nop
 80171b6:	e002      	b.n	80171be <ip4_reass+0x312>
      goto nullreturn;
 80171b8:	bf00      	nop
 80171ba:	e000      	b.n	80171be <ip4_reass+0x312>
  }

nullreturn:
 80171bc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80171be:	6878      	ldr	r0, [r7, #4]
 80171c0:	f7f4 fdb8 	bl	800bd34 <pbuf_free>
  return NULL;
 80171c4:	2300      	movs	r3, #0
}
 80171c6:	4618      	mov	r0, r3
 80171c8:	3738      	adds	r7, #56	@ 0x38
 80171ca:	46bd      	mov	sp, r7
 80171cc:	bd80      	pop	{r7, pc}
 80171ce:	bf00      	nop
 80171d0:	0801b744 	.word	0x0801b744
 80171d4:	0801b8d0 	.word	0x0801b8d0
 80171d8:	0801b78c 	.word	0x0801b78c
 80171dc:	24010700 	.word	0x24010700
 80171e0:	0801b8dc 	.word	0x0801b8dc

080171e4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80171e8:	2005      	movs	r0, #5
 80171ea:	f7f3 fe71 	bl	800aed0 <memp_malloc>
 80171ee:	4603      	mov	r3, r0
}
 80171f0:	4618      	mov	r0, r3
 80171f2:	bd80      	pop	{r7, pc}

080171f4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b082      	sub	sp, #8
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d106      	bne.n	8017210 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017202:	4b07      	ldr	r3, [pc, #28]	@ (8017220 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017204:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8017208:	4906      	ldr	r1, [pc, #24]	@ (8017224 <ip_frag_free_pbuf_custom_ref+0x30>)
 801720a:	4807      	ldr	r0, [pc, #28]	@ (8017228 <ip_frag_free_pbuf_custom_ref+0x34>)
 801720c:	f000 fc54 	bl	8017ab8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017210:	6879      	ldr	r1, [r7, #4]
 8017212:	2005      	movs	r0, #5
 8017214:	f7f3 fed2 	bl	800afbc <memp_free>
}
 8017218:	bf00      	nop
 801721a:	3708      	adds	r7, #8
 801721c:	46bd      	mov	sp, r7
 801721e:	bd80      	pop	{r7, pc}
 8017220:	0801b744 	.word	0x0801b744
 8017224:	0801b8fc 	.word	0x0801b8fc
 8017228:	0801b78c 	.word	0x0801b78c

0801722c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801722c:	b580      	push	{r7, lr}
 801722e:	b084      	sub	sp, #16
 8017230:	af00      	add	r7, sp, #0
 8017232:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	2b00      	cmp	r3, #0
 801723c:	d106      	bne.n	801724c <ipfrag_free_pbuf_custom+0x20>
 801723e:	4b11      	ldr	r3, [pc, #68]	@ (8017284 <ipfrag_free_pbuf_custom+0x58>)
 8017240:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8017244:	4910      	ldr	r1, [pc, #64]	@ (8017288 <ipfrag_free_pbuf_custom+0x5c>)
 8017246:	4811      	ldr	r0, [pc, #68]	@ (801728c <ipfrag_free_pbuf_custom+0x60>)
 8017248:	f000 fc36 	bl	8017ab8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801724c:	68fa      	ldr	r2, [r7, #12]
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	429a      	cmp	r2, r3
 8017252:	d006      	beq.n	8017262 <ipfrag_free_pbuf_custom+0x36>
 8017254:	4b0b      	ldr	r3, [pc, #44]	@ (8017284 <ipfrag_free_pbuf_custom+0x58>)
 8017256:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801725a:	490d      	ldr	r1, [pc, #52]	@ (8017290 <ipfrag_free_pbuf_custom+0x64>)
 801725c:	480b      	ldr	r0, [pc, #44]	@ (801728c <ipfrag_free_pbuf_custom+0x60>)
 801725e:	f000 fc2b 	bl	8017ab8 <iprintf>
  if (pcr->original != NULL) {
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	695b      	ldr	r3, [r3, #20]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d004      	beq.n	8017274 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	695b      	ldr	r3, [r3, #20]
 801726e:	4618      	mov	r0, r3
 8017270:	f7f4 fd60 	bl	800bd34 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017274:	68f8      	ldr	r0, [r7, #12]
 8017276:	f7ff ffbd 	bl	80171f4 <ip_frag_free_pbuf_custom_ref>
}
 801727a:	bf00      	nop
 801727c:	3710      	adds	r7, #16
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}
 8017282:	bf00      	nop
 8017284:	0801b744 	.word	0x0801b744
 8017288:	0801b908 	.word	0x0801b908
 801728c:	0801b78c 	.word	0x0801b78c
 8017290:	0801b914 	.word	0x0801b914

08017294 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017294:	b580      	push	{r7, lr}
 8017296:	b094      	sub	sp, #80	@ 0x50
 8017298:	af02      	add	r7, sp, #8
 801729a:	60f8      	str	r0, [r7, #12]
 801729c:	60b9      	str	r1, [r7, #8]
 801729e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80172a0:	2300      	movs	r3, #0
 80172a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80172a6:	68bb      	ldr	r3, [r7, #8]
 80172a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80172aa:	3b14      	subs	r3, #20
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	da00      	bge.n	80172b2 <ip4_frag+0x1e>
 80172b0:	3307      	adds	r3, #7
 80172b2:	10db      	asrs	r3, r3, #3
 80172b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80172b6:	2314      	movs	r3, #20
 80172b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	685b      	ldr	r3, [r3, #4]
 80172be:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80172c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172c2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80172c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172c6:	781b      	ldrb	r3, [r3, #0]
 80172c8:	f003 030f 	and.w	r3, r3, #15
 80172cc:	b2db      	uxtb	r3, r3
 80172ce:	009b      	lsls	r3, r3, #2
 80172d0:	b2db      	uxtb	r3, r3
 80172d2:	2b14      	cmp	r3, #20
 80172d4:	d002      	beq.n	80172dc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80172d6:	f06f 0305 	mvn.w	r3, #5
 80172da:	e110      	b.n	80174fe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	895b      	ldrh	r3, [r3, #10]
 80172e0:	2b13      	cmp	r3, #19
 80172e2:	d809      	bhi.n	80172f8 <ip4_frag+0x64>
 80172e4:	4b88      	ldr	r3, [pc, #544]	@ (8017508 <ip4_frag+0x274>)
 80172e6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80172ea:	4988      	ldr	r1, [pc, #544]	@ (801750c <ip4_frag+0x278>)
 80172ec:	4888      	ldr	r0, [pc, #544]	@ (8017510 <ip4_frag+0x27c>)
 80172ee:	f000 fbe3 	bl	8017ab8 <iprintf>
 80172f2:	f06f 0305 	mvn.w	r3, #5
 80172f6:	e102      	b.n	80174fe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80172f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172fa:	88db      	ldrh	r3, [r3, #6]
 80172fc:	b29b      	uxth	r3, r3
 80172fe:	4618      	mov	r0, r3
 8017300:	f7f3 f868 	bl	800a3d4 <lwip_htons>
 8017304:	4603      	mov	r3, r0
 8017306:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8017308:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801730a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801730e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017312:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017318:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	891b      	ldrh	r3, [r3, #8]
 801731e:	3b14      	subs	r3, #20
 8017320:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8017324:	e0e1      	b.n	80174ea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017326:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017328:	00db      	lsls	r3, r3, #3
 801732a:	b29b      	uxth	r3, r3
 801732c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017330:	4293      	cmp	r3, r2
 8017332:	bf28      	it	cs
 8017334:	4613      	movcs	r3, r2
 8017336:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017338:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801733c:	2114      	movs	r1, #20
 801733e:	200e      	movs	r0, #14
 8017340:	f7f4 fa14 	bl	800b76c <pbuf_alloc>
 8017344:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8017346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017348:	2b00      	cmp	r3, #0
 801734a:	f000 80d5 	beq.w	80174f8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017350:	895b      	ldrh	r3, [r3, #10]
 8017352:	2b13      	cmp	r3, #19
 8017354:	d806      	bhi.n	8017364 <ip4_frag+0xd0>
 8017356:	4b6c      	ldr	r3, [pc, #432]	@ (8017508 <ip4_frag+0x274>)
 8017358:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801735c:	496d      	ldr	r1, [pc, #436]	@ (8017514 <ip4_frag+0x280>)
 801735e:	486c      	ldr	r0, [pc, #432]	@ (8017510 <ip4_frag+0x27c>)
 8017360:	f000 fbaa 	bl	8017ab8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017366:	685b      	ldr	r3, [r3, #4]
 8017368:	2214      	movs	r2, #20
 801736a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801736c:	4618      	mov	r0, r3
 801736e:	f000 fcd4 	bl	8017d1a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017374:	685b      	ldr	r3, [r3, #4]
 8017376:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8017378:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801737a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801737e:	e064      	b.n	801744a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	895a      	ldrh	r2, [r3, #10]
 8017384:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017386:	1ad3      	subs	r3, r2, r3
 8017388:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	895b      	ldrh	r3, [r3, #10]
 801738e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017390:	429a      	cmp	r2, r3
 8017392:	d906      	bls.n	80173a2 <ip4_frag+0x10e>
 8017394:	4b5c      	ldr	r3, [pc, #368]	@ (8017508 <ip4_frag+0x274>)
 8017396:	f240 322d 	movw	r2, #813	@ 0x32d
 801739a:	495f      	ldr	r1, [pc, #380]	@ (8017518 <ip4_frag+0x284>)
 801739c:	485c      	ldr	r0, [pc, #368]	@ (8017510 <ip4_frag+0x27c>)
 801739e:	f000 fb8b 	bl	8017ab8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80173a2:	8bfa      	ldrh	r2, [r7, #30]
 80173a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80173a8:	4293      	cmp	r3, r2
 80173aa:	bf28      	it	cs
 80173ac:	4613      	movcs	r3, r2
 80173ae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80173b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d105      	bne.n	80173c6 <ip4_frag+0x132>
        poff = 0;
 80173ba:	2300      	movs	r3, #0
 80173bc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	60fb      	str	r3, [r7, #12]
        continue;
 80173c4:	e041      	b.n	801744a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80173c6:	f7ff ff0d 	bl	80171e4 <ip_frag_alloc_pbuf_custom_ref>
 80173ca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80173cc:	69bb      	ldr	r3, [r7, #24]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d103      	bne.n	80173da <ip4_frag+0x146>
        pbuf_free(rambuf);
 80173d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80173d4:	f7f4 fcae 	bl	800bd34 <pbuf_free>
        goto memerr;
 80173d8:	e08f      	b.n	80174fa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80173da:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80173e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80173e2:	4413      	add	r3, r2
 80173e4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80173e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80173ec:	9201      	str	r2, [sp, #4]
 80173ee:	9300      	str	r3, [sp, #0]
 80173f0:	4603      	mov	r3, r0
 80173f2:	2241      	movs	r2, #65	@ 0x41
 80173f4:	2000      	movs	r0, #0
 80173f6:	f7f4 fae5 	bl	800b9c4 <pbuf_alloced_custom>
 80173fa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80173fc:	697b      	ldr	r3, [r7, #20]
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d106      	bne.n	8017410 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017402:	69b8      	ldr	r0, [r7, #24]
 8017404:	f7ff fef6 	bl	80171f4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017408:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801740a:	f7f4 fc93 	bl	800bd34 <pbuf_free>
        goto memerr;
 801740e:	e074      	b.n	80174fa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017410:	68f8      	ldr	r0, [r7, #12]
 8017412:	f7f4 fd35 	bl	800be80 <pbuf_ref>
      pcr->original = p;
 8017416:	69bb      	ldr	r3, [r7, #24]
 8017418:	68fa      	ldr	r2, [r7, #12]
 801741a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801741c:	69bb      	ldr	r3, [r7, #24]
 801741e:	4a3f      	ldr	r2, [pc, #252]	@ (801751c <ip4_frag+0x288>)
 8017420:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017422:	6979      	ldr	r1, [r7, #20]
 8017424:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017426:	f7f4 fd53 	bl	800bed0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801742a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801742e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017432:	1ad3      	subs	r3, r2, r3
 8017434:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8017438:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801743c:	2b00      	cmp	r3, #0
 801743e:	d004      	beq.n	801744a <ip4_frag+0x1b6>
        poff = 0;
 8017440:	2300      	movs	r3, #0
 8017442:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801744a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801744e:	2b00      	cmp	r3, #0
 8017450:	d196      	bne.n	8017380 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017452:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017454:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017458:	4413      	add	r3, r2
 801745a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801745c:	68bb      	ldr	r3, [r7, #8]
 801745e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017460:	f1a3 0213 	sub.w	r2, r3, #19
 8017464:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017468:	429a      	cmp	r2, r3
 801746a:	bfcc      	ite	gt
 801746c:	2301      	movgt	r3, #1
 801746e:	2300      	movle	r3, #0
 8017470:	b2db      	uxtb	r3, r3
 8017472:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017474:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801747c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801747e:	6a3b      	ldr	r3, [r7, #32]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d002      	beq.n	801748a <ip4_frag+0x1f6>
 8017484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017486:	2b00      	cmp	r3, #0
 8017488:	d003      	beq.n	8017492 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801748a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801748c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017490:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017492:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017494:	4618      	mov	r0, r3
 8017496:	f7f2 ff9d 	bl	800a3d4 <lwip_htons>
 801749a:	4603      	mov	r3, r0
 801749c:	461a      	mov	r2, r3
 801749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174a0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80174a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80174a4:	3314      	adds	r3, #20
 80174a6:	b29b      	uxth	r3, r3
 80174a8:	4618      	mov	r0, r3
 80174aa:	f7f2 ff93 	bl	800a3d4 <lwip_htons>
 80174ae:	4603      	mov	r3, r0
 80174b0:	461a      	mov	r2, r3
 80174b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174b4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80174b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174b8:	2200      	movs	r2, #0
 80174ba:	729a      	strb	r2, [r3, #10]
 80174bc:	2200      	movs	r2, #0
 80174be:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80174c0:	68bb      	ldr	r3, [r7, #8]
 80174c2:	695b      	ldr	r3, [r3, #20]
 80174c4:	687a      	ldr	r2, [r7, #4]
 80174c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80174c8:	68b8      	ldr	r0, [r7, #8]
 80174ca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80174cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80174ce:	f7f4 fc31 	bl	800bd34 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80174d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80174d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80174d8:	1ad3      	subs	r3, r2, r3
 80174da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80174de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80174e2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80174e4:	4413      	add	r3, r2
 80174e6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80174ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	f47f af19 	bne.w	8017326 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80174f4:	2300      	movs	r3, #0
 80174f6:	e002      	b.n	80174fe <ip4_frag+0x26a>
      goto memerr;
 80174f8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80174fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80174fe:	4618      	mov	r0, r3
 8017500:	3748      	adds	r7, #72	@ 0x48
 8017502:	46bd      	mov	sp, r7
 8017504:	bd80      	pop	{r7, pc}
 8017506:	bf00      	nop
 8017508:	0801b744 	.word	0x0801b744
 801750c:	0801b920 	.word	0x0801b920
 8017510:	0801b78c 	.word	0x0801b78c
 8017514:	0801b93c 	.word	0x0801b93c
 8017518:	0801b95c 	.word	0x0801b95c
 801751c:	0801722d 	.word	0x0801722d

08017520 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b086      	sub	sp, #24
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
 8017528:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801752a:	230e      	movs	r3, #14
 801752c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 801752e:	f7ee fee1 	bl	80062f4 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	895b      	ldrh	r3, [r3, #10]
 8017536:	2b0e      	cmp	r3, #14
 8017538:	d96e      	bls.n	8017618 <ethernet_input+0xf8>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	7bdb      	ldrb	r3, [r3, #15]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d106      	bne.n	8017550 <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 8017542:	683b      	ldr	r3, [r7, #0]
 8017544:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017548:	3301      	adds	r3, #1
 801754a:	b2da      	uxtb	r2, r3
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	685b      	ldr	r3, [r3, #4]
 8017554:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017556:	693b      	ldr	r3, [r7, #16]
 8017558:	7b1a      	ldrb	r2, [r3, #12]
 801755a:	7b5b      	ldrb	r3, [r3, #13]
 801755c:	021b      	lsls	r3, r3, #8
 801755e:	4313      	orrs	r3, r2
 8017560:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017562:	693b      	ldr	r3, [r7, #16]
 8017564:	781b      	ldrb	r3, [r3, #0]
 8017566:	f003 0301 	and.w	r3, r3, #1
 801756a:	2b00      	cmp	r3, #0
 801756c:	d023      	beq.n	80175b6 <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	781b      	ldrb	r3, [r3, #0]
 8017572:	2b01      	cmp	r3, #1
 8017574:	d10f      	bne.n	8017596 <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017576:	693b      	ldr	r3, [r7, #16]
 8017578:	785b      	ldrb	r3, [r3, #1]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d11b      	bne.n	80175b6 <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801757e:	693b      	ldr	r3, [r7, #16]
 8017580:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017582:	2b5e      	cmp	r3, #94	@ 0x5e
 8017584:	d117      	bne.n	80175b6 <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	7b5b      	ldrb	r3, [r3, #13]
 801758a:	f043 0310 	orr.w	r3, r3, #16
 801758e:	b2da      	uxtb	r2, r3
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	735a      	strb	r2, [r3, #13]
 8017594:	e00f      	b.n	80175b6 <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017596:	693b      	ldr	r3, [r7, #16]
 8017598:	2206      	movs	r2, #6
 801759a:	4928      	ldr	r1, [pc, #160]	@ (801763c <ethernet_input+0x11c>)
 801759c:	4618      	mov	r0, r3
 801759e:	f000 fae0 	bl	8017b62 <memcmp>
 80175a2:	4603      	mov	r3, r0
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d106      	bne.n	80175b6 <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	7b5b      	ldrb	r3, [r3, #13]
 80175ac:	f043 0308 	orr.w	r3, r3, #8
 80175b0:	b2da      	uxtb	r2, r3
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80175b6:	89fb      	ldrh	r3, [r7, #14]
 80175b8:	2b08      	cmp	r3, #8
 80175ba:	d003      	beq.n	80175c4 <ethernet_input+0xa4>
 80175bc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80175c0:	d014      	beq.n	80175ec <ethernet_input+0xcc>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80175c2:	e032      	b.n	801762a <ethernet_input+0x10a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80175ca:	f003 0308 	and.w	r3, r3, #8
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d024      	beq.n	801761c <ethernet_input+0xfc>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80175d2:	8afb      	ldrh	r3, [r7, #22]
 80175d4:	4619      	mov	r1, r3
 80175d6:	6878      	ldr	r0, [r7, #4]
 80175d8:	f7f4 fb26 	bl	800bc28 <pbuf_remove_header>
 80175dc:	4603      	mov	r3, r0
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d11e      	bne.n	8017620 <ethernet_input+0x100>
        ip4_input(p, netif);
 80175e2:	6839      	ldr	r1, [r7, #0]
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	f7fe fefd 	bl	80163e4 <ip4_input>
      break;
 80175ea:	e013      	b.n	8017614 <ethernet_input+0xf4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80175ec:	683b      	ldr	r3, [r7, #0]
 80175ee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80175f2:	f003 0308 	and.w	r3, r3, #8
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d014      	beq.n	8017624 <ethernet_input+0x104>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80175fa:	8afb      	ldrh	r3, [r7, #22]
 80175fc:	4619      	mov	r1, r3
 80175fe:	6878      	ldr	r0, [r7, #4]
 8017600:	f7f4 fb12 	bl	800bc28 <pbuf_remove_header>
 8017604:	4603      	mov	r3, r0
 8017606:	2b00      	cmp	r3, #0
 8017608:	d10e      	bne.n	8017628 <ethernet_input+0x108>
        etharp_input(p, netif);
 801760a:	6839      	ldr	r1, [r7, #0]
 801760c:	6878      	ldr	r0, [r7, #4]
 801760e:	f7fe f86f 	bl	80156f0 <etharp_input>
      break;
 8017612:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017614:	2300      	movs	r3, #0
 8017616:	e00c      	b.n	8017632 <ethernet_input+0x112>
    goto free_and_return;
 8017618:	bf00      	nop
 801761a:	e006      	b.n	801762a <ethernet_input+0x10a>
        goto free_and_return;
 801761c:	bf00      	nop
 801761e:	e004      	b.n	801762a <ethernet_input+0x10a>
        goto free_and_return;
 8017620:	bf00      	nop
 8017622:	e002      	b.n	801762a <ethernet_input+0x10a>
        goto free_and_return;
 8017624:	bf00      	nop
 8017626:	e000      	b.n	801762a <ethernet_input+0x10a>
        goto free_and_return;
 8017628:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801762a:	6878      	ldr	r0, [r7, #4]
 801762c:	f7f4 fb82 	bl	800bd34 <pbuf_free>
  return ERR_OK;
 8017630:	2300      	movs	r3, #0
}
 8017632:	4618      	mov	r0, r3
 8017634:	3718      	adds	r7, #24
 8017636:	46bd      	mov	sp, r7
 8017638:	bd80      	pop	{r7, pc}
 801763a:	bf00      	nop
 801763c:	0801c1b0 	.word	0x0801c1b0

08017640 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017640:	b580      	push	{r7, lr}
 8017642:	b086      	sub	sp, #24
 8017644:	af00      	add	r7, sp, #0
 8017646:	60f8      	str	r0, [r7, #12]
 8017648:	60b9      	str	r1, [r7, #8]
 801764a:	607a      	str	r2, [r7, #4]
 801764c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801764e:	8c3b      	ldrh	r3, [r7, #32]
 8017650:	4618      	mov	r0, r3
 8017652:	f7f2 febf 	bl	800a3d4 <lwip_htons>
 8017656:	4603      	mov	r3, r0
 8017658:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801765a:	210e      	movs	r1, #14
 801765c:	68b8      	ldr	r0, [r7, #8]
 801765e:	f7f4 fad3 	bl	800bc08 <pbuf_add_header>
 8017662:	4603      	mov	r3, r0
 8017664:	2b00      	cmp	r3, #0
 8017666:	d127      	bne.n	80176b8 <ethernet_output+0x78>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 8017668:	f7ee fe44 	bl	80062f4 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 801766c:	68bb      	ldr	r3, [r7, #8]
 801766e:	685b      	ldr	r3, [r3, #4]
 8017670:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017672:	693b      	ldr	r3, [r7, #16]
 8017674:	8afa      	ldrh	r2, [r7, #22]
 8017676:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017678:	693b      	ldr	r3, [r7, #16]
 801767a:	2206      	movs	r2, #6
 801767c:	6839      	ldr	r1, [r7, #0]
 801767e:	4618      	mov	r0, r3
 8017680:	f000 fb4b 	bl	8017d1a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017684:	693b      	ldr	r3, [r7, #16]
 8017686:	3306      	adds	r3, #6
 8017688:	2206      	movs	r2, #6
 801768a:	6879      	ldr	r1, [r7, #4]
 801768c:	4618      	mov	r0, r3
 801768e:	f000 fb44 	bl	8017d1a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017698:	2b06      	cmp	r3, #6
 801769a:	d006      	beq.n	80176aa <ethernet_output+0x6a>
 801769c:	4b0a      	ldr	r3, [pc, #40]	@ (80176c8 <ethernet_output+0x88>)
 801769e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80176a2:	490a      	ldr	r1, [pc, #40]	@ (80176cc <ethernet_output+0x8c>)
 80176a4:	480a      	ldr	r0, [pc, #40]	@ (80176d0 <ethernet_output+0x90>)
 80176a6:	f000 fa07 	bl	8017ab8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	699b      	ldr	r3, [r3, #24]
 80176ae:	68b9      	ldr	r1, [r7, #8]
 80176b0:	68f8      	ldr	r0, [r7, #12]
 80176b2:	4798      	blx	r3
 80176b4:	4603      	mov	r3, r0
 80176b6:	e002      	b.n	80176be <ethernet_output+0x7e>
      goto pbuf_header_failed;
 80176b8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80176ba:	f06f 0301 	mvn.w	r3, #1
}
 80176be:	4618      	mov	r0, r3
 80176c0:	3718      	adds	r7, #24
 80176c2:	46bd      	mov	sp, r7
 80176c4:	bd80      	pop	{r7, pc}
 80176c6:	bf00      	nop
 80176c8:	0801b96c 	.word	0x0801b96c
 80176cc:	0801b9a4 	.word	0x0801b9a4
 80176d0:	0801b9d8 	.word	0x0801b9d8

080176d4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b082      	sub	sp, #8
 80176d8:	af00      	add	r7, sp, #0
 80176da:	6078      	str	r0, [r7, #4]
 80176dc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80176de:	683b      	ldr	r3, [r7, #0]
 80176e0:	2200      	movs	r2, #0
 80176e2:	2104      	movs	r1, #4
 80176e4:	4618      	mov	r0, r3
 80176e6:	f7ef f9d1 	bl	8006a8c <osMessageQueueNew>
 80176ea:	4602      	mov	r2, r0
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d102      	bne.n	80176fe <sys_mbox_new+0x2a>
    return ERR_MEM;
 80176f8:	f04f 33ff 	mov.w	r3, #4294967295
 80176fc:	e000      	b.n	8017700 <sys_mbox_new+0x2c>

  return ERR_OK;
 80176fe:	2300      	movs	r3, #0
}
 8017700:	4618      	mov	r0, r3
 8017702:	3708      	adds	r7, #8
 8017704:	46bd      	mov	sp, r7
 8017706:	bd80      	pop	{r7, pc}

08017708 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b084      	sub	sp, #16
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
 8017710:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	6818      	ldr	r0, [r3, #0]
 8017716:	4639      	mov	r1, r7
 8017718:	2300      	movs	r3, #0
 801771a:	2200      	movs	r2, #0
 801771c:	f7ef fa2a 	bl	8006b74 <osMessageQueuePut>
 8017720:	4603      	mov	r3, r0
 8017722:	2b00      	cmp	r3, #0
 8017724:	d102      	bne.n	801772c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8017726:	2300      	movs	r3, #0
 8017728:	73fb      	strb	r3, [r7, #15]
 801772a:	e001      	b.n	8017730 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801772c:	23ff      	movs	r3, #255	@ 0xff
 801772e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017734:	4618      	mov	r0, r3
 8017736:	3710      	adds	r7, #16
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}

0801773c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b086      	sub	sp, #24
 8017740:	af00      	add	r7, sp, #0
 8017742:	60f8      	str	r0, [r7, #12]
 8017744:	60b9      	str	r1, [r7, #8]
 8017746:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8017748:	f7ee fea4 	bl	8006494 <osKernelGetTickCount>
 801774c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d013      	beq.n	801777c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	6818      	ldr	r0, [r3, #0]
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	2200      	movs	r2, #0
 801775c:	68b9      	ldr	r1, [r7, #8]
 801775e:	f7ef fa69 	bl	8006c34 <osMessageQueueGet>
 8017762:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8017764:	693b      	ldr	r3, [r7, #16]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d105      	bne.n	8017776 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801776a:	f7ee fe93 	bl	8006494 <osKernelGetTickCount>
 801776e:	4602      	mov	r2, r0
 8017770:	697b      	ldr	r3, [r7, #20]
 8017772:	1ad3      	subs	r3, r2, r3
 8017774:	e00f      	b.n	8017796 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017776:	f04f 33ff 	mov.w	r3, #4294967295
 801777a:	e00c      	b.n	8017796 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	6818      	ldr	r0, [r3, #0]
 8017780:	f04f 33ff 	mov.w	r3, #4294967295
 8017784:	2200      	movs	r2, #0
 8017786:	68b9      	ldr	r1, [r7, #8]
 8017788:	f7ef fa54 	bl	8006c34 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801778c:	f7ee fe82 	bl	8006494 <osKernelGetTickCount>
 8017790:	4602      	mov	r2, r0
 8017792:	697b      	ldr	r3, [r7, #20]
 8017794:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017796:	4618      	mov	r0, r3
 8017798:	3718      	adds	r7, #24
 801779a:	46bd      	mov	sp, r7
 801779c:	bd80      	pop	{r7, pc}

0801779e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801779e:	b480      	push	{r7}
 80177a0:	b083      	sub	sp, #12
 80177a2:	af00      	add	r7, sp, #0
 80177a4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d101      	bne.n	80177b2 <sys_mbox_valid+0x14>
    return 0;
 80177ae:	2300      	movs	r3, #0
 80177b0:	e000      	b.n	80177b4 <sys_mbox_valid+0x16>
  else
    return 1;
 80177b2:	2301      	movs	r3, #1
}
 80177b4:	4618      	mov	r0, r3
 80177b6:	370c      	adds	r7, #12
 80177b8:	46bd      	mov	sp, r7
 80177ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177be:	4770      	bx	lr

080177c0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80177c4:	2000      	movs	r0, #0
 80177c6:	f7ee ff33 	bl	8006630 <osMutexNew>
 80177ca:	4603      	mov	r3, r0
 80177cc:	4a01      	ldr	r2, [pc, #4]	@ (80177d4 <sys_init+0x14>)
 80177ce:	6013      	str	r3, [r2, #0]
#endif
}
 80177d0:	bf00      	nop
 80177d2:	bd80      	pop	{r7, pc}
 80177d4:	24010708 	.word	0x24010708

080177d8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80177d8:	b580      	push	{r7, lr}
 80177da:	b082      	sub	sp, #8
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80177e0:	2000      	movs	r0, #0
 80177e2:	f7ee ff25 	bl	8006630 <osMutexNew>
 80177e6:	4602      	mov	r2, r0
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d102      	bne.n	80177fa <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80177f4:	f04f 33ff 	mov.w	r3, #4294967295
 80177f8:	e000      	b.n	80177fc <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80177fa:	2300      	movs	r3, #0
}
 80177fc:	4618      	mov	r0, r3
 80177fe:	3708      	adds	r7, #8
 8017800:	46bd      	mov	sp, r7
 8017802:	bd80      	pop	{r7, pc}

08017804 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b082      	sub	sp, #8
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	f04f 31ff 	mov.w	r1, #4294967295
 8017814:	4618      	mov	r0, r3
 8017816:	f7ee ff91 	bl	800673c <osMutexAcquire>
#endif
}
 801781a:	bf00      	nop
 801781c:	3708      	adds	r7, #8
 801781e:	46bd      	mov	sp, r7
 8017820:	bd80      	pop	{r7, pc}

08017822 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017822:	b580      	push	{r7, lr}
 8017824:	b082      	sub	sp, #8
 8017826:	af00      	add	r7, sp, #0
 8017828:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	4618      	mov	r0, r3
 8017830:	f7ee ffcf 	bl	80067d2 <osMutexRelease>
}
 8017834:	bf00      	nop
 8017836:	3708      	adds	r7, #8
 8017838:	46bd      	mov	sp, r7
 801783a:	bd80      	pop	{r7, pc}

0801783c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b08e      	sub	sp, #56	@ 0x38
 8017840:	af00      	add	r7, sp, #0
 8017842:	60f8      	str	r0, [r7, #12]
 8017844:	60b9      	str	r1, [r7, #8]
 8017846:	607a      	str	r2, [r7, #4]
 8017848:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801784a:	f107 0314 	add.w	r3, r7, #20
 801784e:	2224      	movs	r2, #36	@ 0x24
 8017850:	2100      	movs	r1, #0
 8017852:	4618      	mov	r0, r3
 8017854:	f000 f995 	bl	8017b82 <memset>
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	617b      	str	r3, [r7, #20]
 801785c:	683b      	ldr	r3, [r7, #0]
 801785e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017862:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017864:	f107 0314 	add.w	r3, r7, #20
 8017868:	461a      	mov	r2, r3
 801786a:	6879      	ldr	r1, [r7, #4]
 801786c:	68b8      	ldr	r0, [r7, #8]
 801786e:	f7ee fe26 	bl	80064be <osThreadNew>
 8017872:	4603      	mov	r3, r0
#endif
}
 8017874:	4618      	mov	r0, r3
 8017876:	3738      	adds	r7, #56	@ 0x38
 8017878:	46bd      	mov	sp, r7
 801787a:	bd80      	pop	{r7, pc}

0801787c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8017880:	4b04      	ldr	r3, [pc, #16]	@ (8017894 <sys_arch_protect+0x18>)
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	f04f 31ff 	mov.w	r1, #4294967295
 8017888:	4618      	mov	r0, r3
 801788a:	f7ee ff57 	bl	800673c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801788e:	2301      	movs	r3, #1
}
 8017890:	4618      	mov	r0, r3
 8017892:	bd80      	pop	{r7, pc}
 8017894:	24010708 	.word	0x24010708

08017898 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b082      	sub	sp, #8
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80178a0:	4b04      	ldr	r3, [pc, #16]	@ (80178b4 <sys_arch_unprotect+0x1c>)
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	4618      	mov	r0, r3
 80178a6:	f7ee ff94 	bl	80067d2 <osMutexRelease>
}
 80178aa:	bf00      	nop
 80178ac:	3708      	adds	r7, #8
 80178ae:	46bd      	mov	sp, r7
 80178b0:	bd80      	pop	{r7, pc}
 80178b2:	bf00      	nop
 80178b4:	24010708 	.word	0x24010708

080178b8 <rand>:
 80178b8:	4b16      	ldr	r3, [pc, #88]	@ (8017914 <rand+0x5c>)
 80178ba:	b510      	push	{r4, lr}
 80178bc:	681c      	ldr	r4, [r3, #0]
 80178be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80178c0:	b9b3      	cbnz	r3, 80178f0 <rand+0x38>
 80178c2:	2018      	movs	r0, #24
 80178c4:	f000 faa0 	bl	8017e08 <malloc>
 80178c8:	4602      	mov	r2, r0
 80178ca:	6320      	str	r0, [r4, #48]	@ 0x30
 80178cc:	b920      	cbnz	r0, 80178d8 <rand+0x20>
 80178ce:	4b12      	ldr	r3, [pc, #72]	@ (8017918 <rand+0x60>)
 80178d0:	4812      	ldr	r0, [pc, #72]	@ (801791c <rand+0x64>)
 80178d2:	2152      	movs	r1, #82	@ 0x52
 80178d4:	f000 fa30 	bl	8017d38 <__assert_func>
 80178d8:	4911      	ldr	r1, [pc, #68]	@ (8017920 <rand+0x68>)
 80178da:	4b12      	ldr	r3, [pc, #72]	@ (8017924 <rand+0x6c>)
 80178dc:	e9c0 1300 	strd	r1, r3, [r0]
 80178e0:	4b11      	ldr	r3, [pc, #68]	@ (8017928 <rand+0x70>)
 80178e2:	6083      	str	r3, [r0, #8]
 80178e4:	230b      	movs	r3, #11
 80178e6:	8183      	strh	r3, [r0, #12]
 80178e8:	2100      	movs	r1, #0
 80178ea:	2001      	movs	r0, #1
 80178ec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80178f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80178f2:	480e      	ldr	r0, [pc, #56]	@ (801792c <rand+0x74>)
 80178f4:	690b      	ldr	r3, [r1, #16]
 80178f6:	694c      	ldr	r4, [r1, #20]
 80178f8:	4a0d      	ldr	r2, [pc, #52]	@ (8017930 <rand+0x78>)
 80178fa:	4358      	muls	r0, r3
 80178fc:	fb02 0004 	mla	r0, r2, r4, r0
 8017900:	fba3 3202 	umull	r3, r2, r3, r2
 8017904:	3301      	adds	r3, #1
 8017906:	eb40 0002 	adc.w	r0, r0, r2
 801790a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801790e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017912:	bd10      	pop	{r4, pc}
 8017914:	24000050 	.word	0x24000050
 8017918:	0801c1be 	.word	0x0801c1be
 801791c:	0801c1d5 	.word	0x0801c1d5
 8017920:	abcd330e 	.word	0xabcd330e
 8017924:	e66d1234 	.word	0xe66d1234
 8017928:	0005deec 	.word	0x0005deec
 801792c:	5851f42d 	.word	0x5851f42d
 8017930:	4c957f2d 	.word	0x4c957f2d

08017934 <std>:
 8017934:	2300      	movs	r3, #0
 8017936:	b510      	push	{r4, lr}
 8017938:	4604      	mov	r4, r0
 801793a:	e9c0 3300 	strd	r3, r3, [r0]
 801793e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017942:	6083      	str	r3, [r0, #8]
 8017944:	8181      	strh	r1, [r0, #12]
 8017946:	6643      	str	r3, [r0, #100]	@ 0x64
 8017948:	81c2      	strh	r2, [r0, #14]
 801794a:	6183      	str	r3, [r0, #24]
 801794c:	4619      	mov	r1, r3
 801794e:	2208      	movs	r2, #8
 8017950:	305c      	adds	r0, #92	@ 0x5c
 8017952:	f000 f916 	bl	8017b82 <memset>
 8017956:	4b0d      	ldr	r3, [pc, #52]	@ (801798c <std+0x58>)
 8017958:	6263      	str	r3, [r4, #36]	@ 0x24
 801795a:	4b0d      	ldr	r3, [pc, #52]	@ (8017990 <std+0x5c>)
 801795c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801795e:	4b0d      	ldr	r3, [pc, #52]	@ (8017994 <std+0x60>)
 8017960:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017962:	4b0d      	ldr	r3, [pc, #52]	@ (8017998 <std+0x64>)
 8017964:	6323      	str	r3, [r4, #48]	@ 0x30
 8017966:	4b0d      	ldr	r3, [pc, #52]	@ (801799c <std+0x68>)
 8017968:	6224      	str	r4, [r4, #32]
 801796a:	429c      	cmp	r4, r3
 801796c:	d006      	beq.n	801797c <std+0x48>
 801796e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017972:	4294      	cmp	r4, r2
 8017974:	d002      	beq.n	801797c <std+0x48>
 8017976:	33d0      	adds	r3, #208	@ 0xd0
 8017978:	429c      	cmp	r4, r3
 801797a:	d105      	bne.n	8017988 <std+0x54>
 801797c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017984:	f000 b9c6 	b.w	8017d14 <__retarget_lock_init_recursive>
 8017988:	bd10      	pop	{r4, pc}
 801798a:	bf00      	nop
 801798c:	08017add 	.word	0x08017add
 8017990:	08017aff 	.word	0x08017aff
 8017994:	08017b37 	.word	0x08017b37
 8017998:	08017b5b 	.word	0x08017b5b
 801799c:	2401070c 	.word	0x2401070c

080179a0 <stdio_exit_handler>:
 80179a0:	4a02      	ldr	r2, [pc, #8]	@ (80179ac <stdio_exit_handler+0xc>)
 80179a2:	4903      	ldr	r1, [pc, #12]	@ (80179b0 <stdio_exit_handler+0x10>)
 80179a4:	4803      	ldr	r0, [pc, #12]	@ (80179b4 <stdio_exit_handler+0x14>)
 80179a6:	f000 b869 	b.w	8017a7c <_fwalk_sglue>
 80179aa:	bf00      	nop
 80179ac:	24000044 	.word	0x24000044
 80179b0:	0801861d 	.word	0x0801861d
 80179b4:	24000054 	.word	0x24000054

080179b8 <cleanup_stdio>:
 80179b8:	6841      	ldr	r1, [r0, #4]
 80179ba:	4b0c      	ldr	r3, [pc, #48]	@ (80179ec <cleanup_stdio+0x34>)
 80179bc:	4299      	cmp	r1, r3
 80179be:	b510      	push	{r4, lr}
 80179c0:	4604      	mov	r4, r0
 80179c2:	d001      	beq.n	80179c8 <cleanup_stdio+0x10>
 80179c4:	f000 fe2a 	bl	801861c <_fflush_r>
 80179c8:	68a1      	ldr	r1, [r4, #8]
 80179ca:	4b09      	ldr	r3, [pc, #36]	@ (80179f0 <cleanup_stdio+0x38>)
 80179cc:	4299      	cmp	r1, r3
 80179ce:	d002      	beq.n	80179d6 <cleanup_stdio+0x1e>
 80179d0:	4620      	mov	r0, r4
 80179d2:	f000 fe23 	bl	801861c <_fflush_r>
 80179d6:	68e1      	ldr	r1, [r4, #12]
 80179d8:	4b06      	ldr	r3, [pc, #24]	@ (80179f4 <cleanup_stdio+0x3c>)
 80179da:	4299      	cmp	r1, r3
 80179dc:	d004      	beq.n	80179e8 <cleanup_stdio+0x30>
 80179de:	4620      	mov	r0, r4
 80179e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179e4:	f000 be1a 	b.w	801861c <_fflush_r>
 80179e8:	bd10      	pop	{r4, pc}
 80179ea:	bf00      	nop
 80179ec:	2401070c 	.word	0x2401070c
 80179f0:	24010774 	.word	0x24010774
 80179f4:	240107dc 	.word	0x240107dc

080179f8 <global_stdio_init.part.0>:
 80179f8:	b510      	push	{r4, lr}
 80179fa:	4b0b      	ldr	r3, [pc, #44]	@ (8017a28 <global_stdio_init.part.0+0x30>)
 80179fc:	4c0b      	ldr	r4, [pc, #44]	@ (8017a2c <global_stdio_init.part.0+0x34>)
 80179fe:	4a0c      	ldr	r2, [pc, #48]	@ (8017a30 <global_stdio_init.part.0+0x38>)
 8017a00:	601a      	str	r2, [r3, #0]
 8017a02:	4620      	mov	r0, r4
 8017a04:	2200      	movs	r2, #0
 8017a06:	2104      	movs	r1, #4
 8017a08:	f7ff ff94 	bl	8017934 <std>
 8017a0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017a10:	2201      	movs	r2, #1
 8017a12:	2109      	movs	r1, #9
 8017a14:	f7ff ff8e 	bl	8017934 <std>
 8017a18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017a1c:	2202      	movs	r2, #2
 8017a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a22:	2112      	movs	r1, #18
 8017a24:	f7ff bf86 	b.w	8017934 <std>
 8017a28:	24010844 	.word	0x24010844
 8017a2c:	2401070c 	.word	0x2401070c
 8017a30:	080179a1 	.word	0x080179a1

08017a34 <__sfp_lock_acquire>:
 8017a34:	4801      	ldr	r0, [pc, #4]	@ (8017a3c <__sfp_lock_acquire+0x8>)
 8017a36:	f000 b96e 	b.w	8017d16 <__retarget_lock_acquire_recursive>
 8017a3a:	bf00      	nop
 8017a3c:	2401084d 	.word	0x2401084d

08017a40 <__sfp_lock_release>:
 8017a40:	4801      	ldr	r0, [pc, #4]	@ (8017a48 <__sfp_lock_release+0x8>)
 8017a42:	f000 b969 	b.w	8017d18 <__retarget_lock_release_recursive>
 8017a46:	bf00      	nop
 8017a48:	2401084d 	.word	0x2401084d

08017a4c <__sinit>:
 8017a4c:	b510      	push	{r4, lr}
 8017a4e:	4604      	mov	r4, r0
 8017a50:	f7ff fff0 	bl	8017a34 <__sfp_lock_acquire>
 8017a54:	6a23      	ldr	r3, [r4, #32]
 8017a56:	b11b      	cbz	r3, 8017a60 <__sinit+0x14>
 8017a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a5c:	f7ff bff0 	b.w	8017a40 <__sfp_lock_release>
 8017a60:	4b04      	ldr	r3, [pc, #16]	@ (8017a74 <__sinit+0x28>)
 8017a62:	6223      	str	r3, [r4, #32]
 8017a64:	4b04      	ldr	r3, [pc, #16]	@ (8017a78 <__sinit+0x2c>)
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d1f5      	bne.n	8017a58 <__sinit+0xc>
 8017a6c:	f7ff ffc4 	bl	80179f8 <global_stdio_init.part.0>
 8017a70:	e7f2      	b.n	8017a58 <__sinit+0xc>
 8017a72:	bf00      	nop
 8017a74:	080179b9 	.word	0x080179b9
 8017a78:	24010844 	.word	0x24010844

08017a7c <_fwalk_sglue>:
 8017a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a80:	4607      	mov	r7, r0
 8017a82:	4688      	mov	r8, r1
 8017a84:	4614      	mov	r4, r2
 8017a86:	2600      	movs	r6, #0
 8017a88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017a8c:	f1b9 0901 	subs.w	r9, r9, #1
 8017a90:	d505      	bpl.n	8017a9e <_fwalk_sglue+0x22>
 8017a92:	6824      	ldr	r4, [r4, #0]
 8017a94:	2c00      	cmp	r4, #0
 8017a96:	d1f7      	bne.n	8017a88 <_fwalk_sglue+0xc>
 8017a98:	4630      	mov	r0, r6
 8017a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a9e:	89ab      	ldrh	r3, [r5, #12]
 8017aa0:	2b01      	cmp	r3, #1
 8017aa2:	d907      	bls.n	8017ab4 <_fwalk_sglue+0x38>
 8017aa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017aa8:	3301      	adds	r3, #1
 8017aaa:	d003      	beq.n	8017ab4 <_fwalk_sglue+0x38>
 8017aac:	4629      	mov	r1, r5
 8017aae:	4638      	mov	r0, r7
 8017ab0:	47c0      	blx	r8
 8017ab2:	4306      	orrs	r6, r0
 8017ab4:	3568      	adds	r5, #104	@ 0x68
 8017ab6:	e7e9      	b.n	8017a8c <_fwalk_sglue+0x10>

08017ab8 <iprintf>:
 8017ab8:	b40f      	push	{r0, r1, r2, r3}
 8017aba:	b507      	push	{r0, r1, r2, lr}
 8017abc:	4906      	ldr	r1, [pc, #24]	@ (8017ad8 <iprintf+0x20>)
 8017abe:	ab04      	add	r3, sp, #16
 8017ac0:	6808      	ldr	r0, [r1, #0]
 8017ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ac6:	6881      	ldr	r1, [r0, #8]
 8017ac8:	9301      	str	r3, [sp, #4]
 8017aca:	f000 fa7d 	bl	8017fc8 <_vfiprintf_r>
 8017ace:	b003      	add	sp, #12
 8017ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ad4:	b004      	add	sp, #16
 8017ad6:	4770      	bx	lr
 8017ad8:	24000050 	.word	0x24000050

08017adc <__sread>:
 8017adc:	b510      	push	{r4, lr}
 8017ade:	460c      	mov	r4, r1
 8017ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ae4:	f000 f8ce 	bl	8017c84 <_read_r>
 8017ae8:	2800      	cmp	r0, #0
 8017aea:	bfab      	itete	ge
 8017aec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017aee:	89a3      	ldrhlt	r3, [r4, #12]
 8017af0:	181b      	addge	r3, r3, r0
 8017af2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017af6:	bfac      	ite	ge
 8017af8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017afa:	81a3      	strhlt	r3, [r4, #12]
 8017afc:	bd10      	pop	{r4, pc}

08017afe <__swrite>:
 8017afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b02:	461f      	mov	r7, r3
 8017b04:	898b      	ldrh	r3, [r1, #12]
 8017b06:	05db      	lsls	r3, r3, #23
 8017b08:	4605      	mov	r5, r0
 8017b0a:	460c      	mov	r4, r1
 8017b0c:	4616      	mov	r6, r2
 8017b0e:	d505      	bpl.n	8017b1c <__swrite+0x1e>
 8017b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b14:	2302      	movs	r3, #2
 8017b16:	2200      	movs	r2, #0
 8017b18:	f000 f8a2 	bl	8017c60 <_lseek_r>
 8017b1c:	89a3      	ldrh	r3, [r4, #12]
 8017b1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017b26:	81a3      	strh	r3, [r4, #12]
 8017b28:	4632      	mov	r2, r6
 8017b2a:	463b      	mov	r3, r7
 8017b2c:	4628      	mov	r0, r5
 8017b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b32:	f000 b8b9 	b.w	8017ca8 <_write_r>

08017b36 <__sseek>:
 8017b36:	b510      	push	{r4, lr}
 8017b38:	460c      	mov	r4, r1
 8017b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b3e:	f000 f88f 	bl	8017c60 <_lseek_r>
 8017b42:	1c43      	adds	r3, r0, #1
 8017b44:	89a3      	ldrh	r3, [r4, #12]
 8017b46:	bf15      	itete	ne
 8017b48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017b4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017b4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017b52:	81a3      	strheq	r3, [r4, #12]
 8017b54:	bf18      	it	ne
 8017b56:	81a3      	strhne	r3, [r4, #12]
 8017b58:	bd10      	pop	{r4, pc}

08017b5a <__sclose>:
 8017b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b5e:	f000 b819 	b.w	8017b94 <_close_r>

08017b62 <memcmp>:
 8017b62:	b510      	push	{r4, lr}
 8017b64:	3901      	subs	r1, #1
 8017b66:	4402      	add	r2, r0
 8017b68:	4290      	cmp	r0, r2
 8017b6a:	d101      	bne.n	8017b70 <memcmp+0xe>
 8017b6c:	2000      	movs	r0, #0
 8017b6e:	e005      	b.n	8017b7c <memcmp+0x1a>
 8017b70:	7803      	ldrb	r3, [r0, #0]
 8017b72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017b76:	42a3      	cmp	r3, r4
 8017b78:	d001      	beq.n	8017b7e <memcmp+0x1c>
 8017b7a:	1b18      	subs	r0, r3, r4
 8017b7c:	bd10      	pop	{r4, pc}
 8017b7e:	3001      	adds	r0, #1
 8017b80:	e7f2      	b.n	8017b68 <memcmp+0x6>

08017b82 <memset>:
 8017b82:	4402      	add	r2, r0
 8017b84:	4603      	mov	r3, r0
 8017b86:	4293      	cmp	r3, r2
 8017b88:	d100      	bne.n	8017b8c <memset+0xa>
 8017b8a:	4770      	bx	lr
 8017b8c:	f803 1b01 	strb.w	r1, [r3], #1
 8017b90:	e7f9      	b.n	8017b86 <memset+0x4>
	...

08017b94 <_close_r>:
 8017b94:	b538      	push	{r3, r4, r5, lr}
 8017b96:	4d06      	ldr	r5, [pc, #24]	@ (8017bb0 <_close_r+0x1c>)
 8017b98:	2300      	movs	r3, #0
 8017b9a:	4604      	mov	r4, r0
 8017b9c:	4608      	mov	r0, r1
 8017b9e:	602b      	str	r3, [r5, #0]
 8017ba0:	f7e9 fec4 	bl	800192c <_close>
 8017ba4:	1c43      	adds	r3, r0, #1
 8017ba6:	d102      	bne.n	8017bae <_close_r+0x1a>
 8017ba8:	682b      	ldr	r3, [r5, #0]
 8017baa:	b103      	cbz	r3, 8017bae <_close_r+0x1a>
 8017bac:	6023      	str	r3, [r4, #0]
 8017bae:	bd38      	pop	{r3, r4, r5, pc}
 8017bb0:	24010848 	.word	0x24010848

08017bb4 <_reclaim_reent>:
 8017bb4:	4b29      	ldr	r3, [pc, #164]	@ (8017c5c <_reclaim_reent+0xa8>)
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	4283      	cmp	r3, r0
 8017bba:	b570      	push	{r4, r5, r6, lr}
 8017bbc:	4604      	mov	r4, r0
 8017bbe:	d04b      	beq.n	8017c58 <_reclaim_reent+0xa4>
 8017bc0:	69c3      	ldr	r3, [r0, #28]
 8017bc2:	b1ab      	cbz	r3, 8017bf0 <_reclaim_reent+0x3c>
 8017bc4:	68db      	ldr	r3, [r3, #12]
 8017bc6:	b16b      	cbz	r3, 8017be4 <_reclaim_reent+0x30>
 8017bc8:	2500      	movs	r5, #0
 8017bca:	69e3      	ldr	r3, [r4, #28]
 8017bcc:	68db      	ldr	r3, [r3, #12]
 8017bce:	5959      	ldr	r1, [r3, r5]
 8017bd0:	2900      	cmp	r1, #0
 8017bd2:	d13b      	bne.n	8017c4c <_reclaim_reent+0x98>
 8017bd4:	3504      	adds	r5, #4
 8017bd6:	2d80      	cmp	r5, #128	@ 0x80
 8017bd8:	d1f7      	bne.n	8017bca <_reclaim_reent+0x16>
 8017bda:	69e3      	ldr	r3, [r4, #28]
 8017bdc:	4620      	mov	r0, r4
 8017bde:	68d9      	ldr	r1, [r3, #12]
 8017be0:	f000 f8c8 	bl	8017d74 <_free_r>
 8017be4:	69e3      	ldr	r3, [r4, #28]
 8017be6:	6819      	ldr	r1, [r3, #0]
 8017be8:	b111      	cbz	r1, 8017bf0 <_reclaim_reent+0x3c>
 8017bea:	4620      	mov	r0, r4
 8017bec:	f000 f8c2 	bl	8017d74 <_free_r>
 8017bf0:	6961      	ldr	r1, [r4, #20]
 8017bf2:	b111      	cbz	r1, 8017bfa <_reclaim_reent+0x46>
 8017bf4:	4620      	mov	r0, r4
 8017bf6:	f000 f8bd 	bl	8017d74 <_free_r>
 8017bfa:	69e1      	ldr	r1, [r4, #28]
 8017bfc:	b111      	cbz	r1, 8017c04 <_reclaim_reent+0x50>
 8017bfe:	4620      	mov	r0, r4
 8017c00:	f000 f8b8 	bl	8017d74 <_free_r>
 8017c04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017c06:	b111      	cbz	r1, 8017c0e <_reclaim_reent+0x5a>
 8017c08:	4620      	mov	r0, r4
 8017c0a:	f000 f8b3 	bl	8017d74 <_free_r>
 8017c0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017c10:	b111      	cbz	r1, 8017c18 <_reclaim_reent+0x64>
 8017c12:	4620      	mov	r0, r4
 8017c14:	f000 f8ae 	bl	8017d74 <_free_r>
 8017c18:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8017c1a:	b111      	cbz	r1, 8017c22 <_reclaim_reent+0x6e>
 8017c1c:	4620      	mov	r0, r4
 8017c1e:	f000 f8a9 	bl	8017d74 <_free_r>
 8017c22:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017c24:	b111      	cbz	r1, 8017c2c <_reclaim_reent+0x78>
 8017c26:	4620      	mov	r0, r4
 8017c28:	f000 f8a4 	bl	8017d74 <_free_r>
 8017c2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017c2e:	b111      	cbz	r1, 8017c36 <_reclaim_reent+0x82>
 8017c30:	4620      	mov	r0, r4
 8017c32:	f000 f89f 	bl	8017d74 <_free_r>
 8017c36:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017c38:	b111      	cbz	r1, 8017c40 <_reclaim_reent+0x8c>
 8017c3a:	4620      	mov	r0, r4
 8017c3c:	f000 f89a 	bl	8017d74 <_free_r>
 8017c40:	6a23      	ldr	r3, [r4, #32]
 8017c42:	b14b      	cbz	r3, 8017c58 <_reclaim_reent+0xa4>
 8017c44:	4620      	mov	r0, r4
 8017c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c4a:	4718      	bx	r3
 8017c4c:	680e      	ldr	r6, [r1, #0]
 8017c4e:	4620      	mov	r0, r4
 8017c50:	f000 f890 	bl	8017d74 <_free_r>
 8017c54:	4631      	mov	r1, r6
 8017c56:	e7bb      	b.n	8017bd0 <_reclaim_reent+0x1c>
 8017c58:	bd70      	pop	{r4, r5, r6, pc}
 8017c5a:	bf00      	nop
 8017c5c:	24000050 	.word	0x24000050

08017c60 <_lseek_r>:
 8017c60:	b538      	push	{r3, r4, r5, lr}
 8017c62:	4d07      	ldr	r5, [pc, #28]	@ (8017c80 <_lseek_r+0x20>)
 8017c64:	4604      	mov	r4, r0
 8017c66:	4608      	mov	r0, r1
 8017c68:	4611      	mov	r1, r2
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	602a      	str	r2, [r5, #0]
 8017c6e:	461a      	mov	r2, r3
 8017c70:	f7e9 fe83 	bl	800197a <_lseek>
 8017c74:	1c43      	adds	r3, r0, #1
 8017c76:	d102      	bne.n	8017c7e <_lseek_r+0x1e>
 8017c78:	682b      	ldr	r3, [r5, #0]
 8017c7a:	b103      	cbz	r3, 8017c7e <_lseek_r+0x1e>
 8017c7c:	6023      	str	r3, [r4, #0]
 8017c7e:	bd38      	pop	{r3, r4, r5, pc}
 8017c80:	24010848 	.word	0x24010848

08017c84 <_read_r>:
 8017c84:	b538      	push	{r3, r4, r5, lr}
 8017c86:	4d07      	ldr	r5, [pc, #28]	@ (8017ca4 <_read_r+0x20>)
 8017c88:	4604      	mov	r4, r0
 8017c8a:	4608      	mov	r0, r1
 8017c8c:	4611      	mov	r1, r2
 8017c8e:	2200      	movs	r2, #0
 8017c90:	602a      	str	r2, [r5, #0]
 8017c92:	461a      	mov	r2, r3
 8017c94:	f7e9 fe11 	bl	80018ba <_read>
 8017c98:	1c43      	adds	r3, r0, #1
 8017c9a:	d102      	bne.n	8017ca2 <_read_r+0x1e>
 8017c9c:	682b      	ldr	r3, [r5, #0]
 8017c9e:	b103      	cbz	r3, 8017ca2 <_read_r+0x1e>
 8017ca0:	6023      	str	r3, [r4, #0]
 8017ca2:	bd38      	pop	{r3, r4, r5, pc}
 8017ca4:	24010848 	.word	0x24010848

08017ca8 <_write_r>:
 8017ca8:	b538      	push	{r3, r4, r5, lr}
 8017caa:	4d07      	ldr	r5, [pc, #28]	@ (8017cc8 <_write_r+0x20>)
 8017cac:	4604      	mov	r4, r0
 8017cae:	4608      	mov	r0, r1
 8017cb0:	4611      	mov	r1, r2
 8017cb2:	2200      	movs	r2, #0
 8017cb4:	602a      	str	r2, [r5, #0]
 8017cb6:	461a      	mov	r2, r3
 8017cb8:	f7e9 fe1c 	bl	80018f4 <_write>
 8017cbc:	1c43      	adds	r3, r0, #1
 8017cbe:	d102      	bne.n	8017cc6 <_write_r+0x1e>
 8017cc0:	682b      	ldr	r3, [r5, #0]
 8017cc2:	b103      	cbz	r3, 8017cc6 <_write_r+0x1e>
 8017cc4:	6023      	str	r3, [r4, #0]
 8017cc6:	bd38      	pop	{r3, r4, r5, pc}
 8017cc8:	24010848 	.word	0x24010848

08017ccc <__libc_init_array>:
 8017ccc:	b570      	push	{r4, r5, r6, lr}
 8017cce:	4d0d      	ldr	r5, [pc, #52]	@ (8017d04 <__libc_init_array+0x38>)
 8017cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8017d08 <__libc_init_array+0x3c>)
 8017cd2:	1b64      	subs	r4, r4, r5
 8017cd4:	10a4      	asrs	r4, r4, #2
 8017cd6:	2600      	movs	r6, #0
 8017cd8:	42a6      	cmp	r6, r4
 8017cda:	d109      	bne.n	8017cf0 <__libc_init_array+0x24>
 8017cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8017d0c <__libc_init_array+0x40>)
 8017cde:	4c0c      	ldr	r4, [pc, #48]	@ (8017d10 <__libc_init_array+0x44>)
 8017ce0:	f000 fe4a 	bl	8018978 <_init>
 8017ce4:	1b64      	subs	r4, r4, r5
 8017ce6:	10a4      	asrs	r4, r4, #2
 8017ce8:	2600      	movs	r6, #0
 8017cea:	42a6      	cmp	r6, r4
 8017cec:	d105      	bne.n	8017cfa <__libc_init_array+0x2e>
 8017cee:	bd70      	pop	{r4, r5, r6, pc}
 8017cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8017cf4:	4798      	blx	r3
 8017cf6:	3601      	adds	r6, #1
 8017cf8:	e7ee      	b.n	8017cd8 <__libc_init_array+0xc>
 8017cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8017cfe:	4798      	blx	r3
 8017d00:	3601      	adds	r6, #1
 8017d02:	e7f2      	b.n	8017cea <__libc_init_array+0x1e>
 8017d04:	0801c2a4 	.word	0x0801c2a4
 8017d08:	0801c2a4 	.word	0x0801c2a4
 8017d0c:	0801c2a4 	.word	0x0801c2a4
 8017d10:	0801c2a8 	.word	0x0801c2a8

08017d14 <__retarget_lock_init_recursive>:
 8017d14:	4770      	bx	lr

08017d16 <__retarget_lock_acquire_recursive>:
 8017d16:	4770      	bx	lr

08017d18 <__retarget_lock_release_recursive>:
 8017d18:	4770      	bx	lr

08017d1a <memcpy>:
 8017d1a:	440a      	add	r2, r1
 8017d1c:	4291      	cmp	r1, r2
 8017d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017d22:	d100      	bne.n	8017d26 <memcpy+0xc>
 8017d24:	4770      	bx	lr
 8017d26:	b510      	push	{r4, lr}
 8017d28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d30:	4291      	cmp	r1, r2
 8017d32:	d1f9      	bne.n	8017d28 <memcpy+0xe>
 8017d34:	bd10      	pop	{r4, pc}
	...

08017d38 <__assert_func>:
 8017d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d3a:	4614      	mov	r4, r2
 8017d3c:	461a      	mov	r2, r3
 8017d3e:	4b09      	ldr	r3, [pc, #36]	@ (8017d64 <__assert_func+0x2c>)
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	4605      	mov	r5, r0
 8017d44:	68d8      	ldr	r0, [r3, #12]
 8017d46:	b954      	cbnz	r4, 8017d5e <__assert_func+0x26>
 8017d48:	4b07      	ldr	r3, [pc, #28]	@ (8017d68 <__assert_func+0x30>)
 8017d4a:	461c      	mov	r4, r3
 8017d4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d50:	9100      	str	r1, [sp, #0]
 8017d52:	462b      	mov	r3, r5
 8017d54:	4905      	ldr	r1, [pc, #20]	@ (8017d6c <__assert_func+0x34>)
 8017d56:	f000 fc89 	bl	801866c <fiprintf>
 8017d5a:	f000 fd3d 	bl	80187d8 <abort>
 8017d5e:	4b04      	ldr	r3, [pc, #16]	@ (8017d70 <__assert_func+0x38>)
 8017d60:	e7f4      	b.n	8017d4c <__assert_func+0x14>
 8017d62:	bf00      	nop
 8017d64:	24000050 	.word	0x24000050
 8017d68:	0801c268 	.word	0x0801c268
 8017d6c:	0801c23a 	.word	0x0801c23a
 8017d70:	0801c22d 	.word	0x0801c22d

08017d74 <_free_r>:
 8017d74:	b538      	push	{r3, r4, r5, lr}
 8017d76:	4605      	mov	r5, r0
 8017d78:	2900      	cmp	r1, #0
 8017d7a:	d041      	beq.n	8017e00 <_free_r+0x8c>
 8017d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d80:	1f0c      	subs	r4, r1, #4
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	bfb8      	it	lt
 8017d86:	18e4      	addlt	r4, r4, r3
 8017d88:	f000 f8e8 	bl	8017f5c <__malloc_lock>
 8017d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8017e04 <_free_r+0x90>)
 8017d8e:	6813      	ldr	r3, [r2, #0]
 8017d90:	b933      	cbnz	r3, 8017da0 <_free_r+0x2c>
 8017d92:	6063      	str	r3, [r4, #4]
 8017d94:	6014      	str	r4, [r2, #0]
 8017d96:	4628      	mov	r0, r5
 8017d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d9c:	f000 b8e4 	b.w	8017f68 <__malloc_unlock>
 8017da0:	42a3      	cmp	r3, r4
 8017da2:	d908      	bls.n	8017db6 <_free_r+0x42>
 8017da4:	6820      	ldr	r0, [r4, #0]
 8017da6:	1821      	adds	r1, r4, r0
 8017da8:	428b      	cmp	r3, r1
 8017daa:	bf01      	itttt	eq
 8017dac:	6819      	ldreq	r1, [r3, #0]
 8017dae:	685b      	ldreq	r3, [r3, #4]
 8017db0:	1809      	addeq	r1, r1, r0
 8017db2:	6021      	streq	r1, [r4, #0]
 8017db4:	e7ed      	b.n	8017d92 <_free_r+0x1e>
 8017db6:	461a      	mov	r2, r3
 8017db8:	685b      	ldr	r3, [r3, #4]
 8017dba:	b10b      	cbz	r3, 8017dc0 <_free_r+0x4c>
 8017dbc:	42a3      	cmp	r3, r4
 8017dbe:	d9fa      	bls.n	8017db6 <_free_r+0x42>
 8017dc0:	6811      	ldr	r1, [r2, #0]
 8017dc2:	1850      	adds	r0, r2, r1
 8017dc4:	42a0      	cmp	r0, r4
 8017dc6:	d10b      	bne.n	8017de0 <_free_r+0x6c>
 8017dc8:	6820      	ldr	r0, [r4, #0]
 8017dca:	4401      	add	r1, r0
 8017dcc:	1850      	adds	r0, r2, r1
 8017dce:	4283      	cmp	r3, r0
 8017dd0:	6011      	str	r1, [r2, #0]
 8017dd2:	d1e0      	bne.n	8017d96 <_free_r+0x22>
 8017dd4:	6818      	ldr	r0, [r3, #0]
 8017dd6:	685b      	ldr	r3, [r3, #4]
 8017dd8:	6053      	str	r3, [r2, #4]
 8017dda:	4408      	add	r0, r1
 8017ddc:	6010      	str	r0, [r2, #0]
 8017dde:	e7da      	b.n	8017d96 <_free_r+0x22>
 8017de0:	d902      	bls.n	8017de8 <_free_r+0x74>
 8017de2:	230c      	movs	r3, #12
 8017de4:	602b      	str	r3, [r5, #0]
 8017de6:	e7d6      	b.n	8017d96 <_free_r+0x22>
 8017de8:	6820      	ldr	r0, [r4, #0]
 8017dea:	1821      	adds	r1, r4, r0
 8017dec:	428b      	cmp	r3, r1
 8017dee:	bf04      	itt	eq
 8017df0:	6819      	ldreq	r1, [r3, #0]
 8017df2:	685b      	ldreq	r3, [r3, #4]
 8017df4:	6063      	str	r3, [r4, #4]
 8017df6:	bf04      	itt	eq
 8017df8:	1809      	addeq	r1, r1, r0
 8017dfa:	6021      	streq	r1, [r4, #0]
 8017dfc:	6054      	str	r4, [r2, #4]
 8017dfe:	e7ca      	b.n	8017d96 <_free_r+0x22>
 8017e00:	bd38      	pop	{r3, r4, r5, pc}
 8017e02:	bf00      	nop
 8017e04:	24010854 	.word	0x24010854

08017e08 <malloc>:
 8017e08:	4b02      	ldr	r3, [pc, #8]	@ (8017e14 <malloc+0xc>)
 8017e0a:	4601      	mov	r1, r0
 8017e0c:	6818      	ldr	r0, [r3, #0]
 8017e0e:	f000 b825 	b.w	8017e5c <_malloc_r>
 8017e12:	bf00      	nop
 8017e14:	24000050 	.word	0x24000050

08017e18 <sbrk_aligned>:
 8017e18:	b570      	push	{r4, r5, r6, lr}
 8017e1a:	4e0f      	ldr	r6, [pc, #60]	@ (8017e58 <sbrk_aligned+0x40>)
 8017e1c:	460c      	mov	r4, r1
 8017e1e:	6831      	ldr	r1, [r6, #0]
 8017e20:	4605      	mov	r5, r0
 8017e22:	b911      	cbnz	r1, 8017e2a <sbrk_aligned+0x12>
 8017e24:	f000 fcc8 	bl	80187b8 <_sbrk_r>
 8017e28:	6030      	str	r0, [r6, #0]
 8017e2a:	4621      	mov	r1, r4
 8017e2c:	4628      	mov	r0, r5
 8017e2e:	f000 fcc3 	bl	80187b8 <_sbrk_r>
 8017e32:	1c43      	adds	r3, r0, #1
 8017e34:	d103      	bne.n	8017e3e <sbrk_aligned+0x26>
 8017e36:	f04f 34ff 	mov.w	r4, #4294967295
 8017e3a:	4620      	mov	r0, r4
 8017e3c:	bd70      	pop	{r4, r5, r6, pc}
 8017e3e:	1cc4      	adds	r4, r0, #3
 8017e40:	f024 0403 	bic.w	r4, r4, #3
 8017e44:	42a0      	cmp	r0, r4
 8017e46:	d0f8      	beq.n	8017e3a <sbrk_aligned+0x22>
 8017e48:	1a21      	subs	r1, r4, r0
 8017e4a:	4628      	mov	r0, r5
 8017e4c:	f000 fcb4 	bl	80187b8 <_sbrk_r>
 8017e50:	3001      	adds	r0, #1
 8017e52:	d1f2      	bne.n	8017e3a <sbrk_aligned+0x22>
 8017e54:	e7ef      	b.n	8017e36 <sbrk_aligned+0x1e>
 8017e56:	bf00      	nop
 8017e58:	24010850 	.word	0x24010850

08017e5c <_malloc_r>:
 8017e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e60:	1ccd      	adds	r5, r1, #3
 8017e62:	f025 0503 	bic.w	r5, r5, #3
 8017e66:	3508      	adds	r5, #8
 8017e68:	2d0c      	cmp	r5, #12
 8017e6a:	bf38      	it	cc
 8017e6c:	250c      	movcc	r5, #12
 8017e6e:	2d00      	cmp	r5, #0
 8017e70:	4606      	mov	r6, r0
 8017e72:	db01      	blt.n	8017e78 <_malloc_r+0x1c>
 8017e74:	42a9      	cmp	r1, r5
 8017e76:	d904      	bls.n	8017e82 <_malloc_r+0x26>
 8017e78:	230c      	movs	r3, #12
 8017e7a:	6033      	str	r3, [r6, #0]
 8017e7c:	2000      	movs	r0, #0
 8017e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017f58 <_malloc_r+0xfc>
 8017e86:	f000 f869 	bl	8017f5c <__malloc_lock>
 8017e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8017e8e:	461c      	mov	r4, r3
 8017e90:	bb44      	cbnz	r4, 8017ee4 <_malloc_r+0x88>
 8017e92:	4629      	mov	r1, r5
 8017e94:	4630      	mov	r0, r6
 8017e96:	f7ff ffbf 	bl	8017e18 <sbrk_aligned>
 8017e9a:	1c43      	adds	r3, r0, #1
 8017e9c:	4604      	mov	r4, r0
 8017e9e:	d158      	bne.n	8017f52 <_malloc_r+0xf6>
 8017ea0:	f8d8 4000 	ldr.w	r4, [r8]
 8017ea4:	4627      	mov	r7, r4
 8017ea6:	2f00      	cmp	r7, #0
 8017ea8:	d143      	bne.n	8017f32 <_malloc_r+0xd6>
 8017eaa:	2c00      	cmp	r4, #0
 8017eac:	d04b      	beq.n	8017f46 <_malloc_r+0xea>
 8017eae:	6823      	ldr	r3, [r4, #0]
 8017eb0:	4639      	mov	r1, r7
 8017eb2:	4630      	mov	r0, r6
 8017eb4:	eb04 0903 	add.w	r9, r4, r3
 8017eb8:	f000 fc7e 	bl	80187b8 <_sbrk_r>
 8017ebc:	4581      	cmp	r9, r0
 8017ebe:	d142      	bne.n	8017f46 <_malloc_r+0xea>
 8017ec0:	6821      	ldr	r1, [r4, #0]
 8017ec2:	1a6d      	subs	r5, r5, r1
 8017ec4:	4629      	mov	r1, r5
 8017ec6:	4630      	mov	r0, r6
 8017ec8:	f7ff ffa6 	bl	8017e18 <sbrk_aligned>
 8017ecc:	3001      	adds	r0, #1
 8017ece:	d03a      	beq.n	8017f46 <_malloc_r+0xea>
 8017ed0:	6823      	ldr	r3, [r4, #0]
 8017ed2:	442b      	add	r3, r5
 8017ed4:	6023      	str	r3, [r4, #0]
 8017ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8017eda:	685a      	ldr	r2, [r3, #4]
 8017edc:	bb62      	cbnz	r2, 8017f38 <_malloc_r+0xdc>
 8017ede:	f8c8 7000 	str.w	r7, [r8]
 8017ee2:	e00f      	b.n	8017f04 <_malloc_r+0xa8>
 8017ee4:	6822      	ldr	r2, [r4, #0]
 8017ee6:	1b52      	subs	r2, r2, r5
 8017ee8:	d420      	bmi.n	8017f2c <_malloc_r+0xd0>
 8017eea:	2a0b      	cmp	r2, #11
 8017eec:	d917      	bls.n	8017f1e <_malloc_r+0xc2>
 8017eee:	1961      	adds	r1, r4, r5
 8017ef0:	42a3      	cmp	r3, r4
 8017ef2:	6025      	str	r5, [r4, #0]
 8017ef4:	bf18      	it	ne
 8017ef6:	6059      	strne	r1, [r3, #4]
 8017ef8:	6863      	ldr	r3, [r4, #4]
 8017efa:	bf08      	it	eq
 8017efc:	f8c8 1000 	streq.w	r1, [r8]
 8017f00:	5162      	str	r2, [r4, r5]
 8017f02:	604b      	str	r3, [r1, #4]
 8017f04:	4630      	mov	r0, r6
 8017f06:	f000 f82f 	bl	8017f68 <__malloc_unlock>
 8017f0a:	f104 000b 	add.w	r0, r4, #11
 8017f0e:	1d23      	adds	r3, r4, #4
 8017f10:	f020 0007 	bic.w	r0, r0, #7
 8017f14:	1ac2      	subs	r2, r0, r3
 8017f16:	bf1c      	itt	ne
 8017f18:	1a1b      	subne	r3, r3, r0
 8017f1a:	50a3      	strne	r3, [r4, r2]
 8017f1c:	e7af      	b.n	8017e7e <_malloc_r+0x22>
 8017f1e:	6862      	ldr	r2, [r4, #4]
 8017f20:	42a3      	cmp	r3, r4
 8017f22:	bf0c      	ite	eq
 8017f24:	f8c8 2000 	streq.w	r2, [r8]
 8017f28:	605a      	strne	r2, [r3, #4]
 8017f2a:	e7eb      	b.n	8017f04 <_malloc_r+0xa8>
 8017f2c:	4623      	mov	r3, r4
 8017f2e:	6864      	ldr	r4, [r4, #4]
 8017f30:	e7ae      	b.n	8017e90 <_malloc_r+0x34>
 8017f32:	463c      	mov	r4, r7
 8017f34:	687f      	ldr	r7, [r7, #4]
 8017f36:	e7b6      	b.n	8017ea6 <_malloc_r+0x4a>
 8017f38:	461a      	mov	r2, r3
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	42a3      	cmp	r3, r4
 8017f3e:	d1fb      	bne.n	8017f38 <_malloc_r+0xdc>
 8017f40:	2300      	movs	r3, #0
 8017f42:	6053      	str	r3, [r2, #4]
 8017f44:	e7de      	b.n	8017f04 <_malloc_r+0xa8>
 8017f46:	230c      	movs	r3, #12
 8017f48:	6033      	str	r3, [r6, #0]
 8017f4a:	4630      	mov	r0, r6
 8017f4c:	f000 f80c 	bl	8017f68 <__malloc_unlock>
 8017f50:	e794      	b.n	8017e7c <_malloc_r+0x20>
 8017f52:	6005      	str	r5, [r0, #0]
 8017f54:	e7d6      	b.n	8017f04 <_malloc_r+0xa8>
 8017f56:	bf00      	nop
 8017f58:	24010854 	.word	0x24010854

08017f5c <__malloc_lock>:
 8017f5c:	4801      	ldr	r0, [pc, #4]	@ (8017f64 <__malloc_lock+0x8>)
 8017f5e:	f7ff beda 	b.w	8017d16 <__retarget_lock_acquire_recursive>
 8017f62:	bf00      	nop
 8017f64:	2401084c 	.word	0x2401084c

08017f68 <__malloc_unlock>:
 8017f68:	4801      	ldr	r0, [pc, #4]	@ (8017f70 <__malloc_unlock+0x8>)
 8017f6a:	f7ff bed5 	b.w	8017d18 <__retarget_lock_release_recursive>
 8017f6e:	bf00      	nop
 8017f70:	2401084c 	.word	0x2401084c

08017f74 <__sfputc_r>:
 8017f74:	6893      	ldr	r3, [r2, #8]
 8017f76:	3b01      	subs	r3, #1
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	b410      	push	{r4}
 8017f7c:	6093      	str	r3, [r2, #8]
 8017f7e:	da08      	bge.n	8017f92 <__sfputc_r+0x1e>
 8017f80:	6994      	ldr	r4, [r2, #24]
 8017f82:	42a3      	cmp	r3, r4
 8017f84:	db01      	blt.n	8017f8a <__sfputc_r+0x16>
 8017f86:	290a      	cmp	r1, #10
 8017f88:	d103      	bne.n	8017f92 <__sfputc_r+0x1e>
 8017f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f8e:	f000 bb7f 	b.w	8018690 <__swbuf_r>
 8017f92:	6813      	ldr	r3, [r2, #0]
 8017f94:	1c58      	adds	r0, r3, #1
 8017f96:	6010      	str	r0, [r2, #0]
 8017f98:	7019      	strb	r1, [r3, #0]
 8017f9a:	4608      	mov	r0, r1
 8017f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fa0:	4770      	bx	lr

08017fa2 <__sfputs_r>:
 8017fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fa4:	4606      	mov	r6, r0
 8017fa6:	460f      	mov	r7, r1
 8017fa8:	4614      	mov	r4, r2
 8017faa:	18d5      	adds	r5, r2, r3
 8017fac:	42ac      	cmp	r4, r5
 8017fae:	d101      	bne.n	8017fb4 <__sfputs_r+0x12>
 8017fb0:	2000      	movs	r0, #0
 8017fb2:	e007      	b.n	8017fc4 <__sfputs_r+0x22>
 8017fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fb8:	463a      	mov	r2, r7
 8017fba:	4630      	mov	r0, r6
 8017fbc:	f7ff ffda 	bl	8017f74 <__sfputc_r>
 8017fc0:	1c43      	adds	r3, r0, #1
 8017fc2:	d1f3      	bne.n	8017fac <__sfputs_r+0xa>
 8017fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017fc8 <_vfiprintf_r>:
 8017fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fcc:	460d      	mov	r5, r1
 8017fce:	b09d      	sub	sp, #116	@ 0x74
 8017fd0:	4614      	mov	r4, r2
 8017fd2:	4698      	mov	r8, r3
 8017fd4:	4606      	mov	r6, r0
 8017fd6:	b118      	cbz	r0, 8017fe0 <_vfiprintf_r+0x18>
 8017fd8:	6a03      	ldr	r3, [r0, #32]
 8017fda:	b90b      	cbnz	r3, 8017fe0 <_vfiprintf_r+0x18>
 8017fdc:	f7ff fd36 	bl	8017a4c <__sinit>
 8017fe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017fe2:	07d9      	lsls	r1, r3, #31
 8017fe4:	d405      	bmi.n	8017ff2 <_vfiprintf_r+0x2a>
 8017fe6:	89ab      	ldrh	r3, [r5, #12]
 8017fe8:	059a      	lsls	r2, r3, #22
 8017fea:	d402      	bmi.n	8017ff2 <_vfiprintf_r+0x2a>
 8017fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017fee:	f7ff fe92 	bl	8017d16 <__retarget_lock_acquire_recursive>
 8017ff2:	89ab      	ldrh	r3, [r5, #12]
 8017ff4:	071b      	lsls	r3, r3, #28
 8017ff6:	d501      	bpl.n	8017ffc <_vfiprintf_r+0x34>
 8017ff8:	692b      	ldr	r3, [r5, #16]
 8017ffa:	b99b      	cbnz	r3, 8018024 <_vfiprintf_r+0x5c>
 8017ffc:	4629      	mov	r1, r5
 8017ffe:	4630      	mov	r0, r6
 8018000:	f000 fb84 	bl	801870c <__swsetup_r>
 8018004:	b170      	cbz	r0, 8018024 <_vfiprintf_r+0x5c>
 8018006:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018008:	07dc      	lsls	r4, r3, #31
 801800a:	d504      	bpl.n	8018016 <_vfiprintf_r+0x4e>
 801800c:	f04f 30ff 	mov.w	r0, #4294967295
 8018010:	b01d      	add	sp, #116	@ 0x74
 8018012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018016:	89ab      	ldrh	r3, [r5, #12]
 8018018:	0598      	lsls	r0, r3, #22
 801801a:	d4f7      	bmi.n	801800c <_vfiprintf_r+0x44>
 801801c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801801e:	f7ff fe7b 	bl	8017d18 <__retarget_lock_release_recursive>
 8018022:	e7f3      	b.n	801800c <_vfiprintf_r+0x44>
 8018024:	2300      	movs	r3, #0
 8018026:	9309      	str	r3, [sp, #36]	@ 0x24
 8018028:	2320      	movs	r3, #32
 801802a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801802e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018032:	2330      	movs	r3, #48	@ 0x30
 8018034:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80181e4 <_vfiprintf_r+0x21c>
 8018038:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801803c:	f04f 0901 	mov.w	r9, #1
 8018040:	4623      	mov	r3, r4
 8018042:	469a      	mov	sl, r3
 8018044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018048:	b10a      	cbz	r2, 801804e <_vfiprintf_r+0x86>
 801804a:	2a25      	cmp	r2, #37	@ 0x25
 801804c:	d1f9      	bne.n	8018042 <_vfiprintf_r+0x7a>
 801804e:	ebba 0b04 	subs.w	fp, sl, r4
 8018052:	d00b      	beq.n	801806c <_vfiprintf_r+0xa4>
 8018054:	465b      	mov	r3, fp
 8018056:	4622      	mov	r2, r4
 8018058:	4629      	mov	r1, r5
 801805a:	4630      	mov	r0, r6
 801805c:	f7ff ffa1 	bl	8017fa2 <__sfputs_r>
 8018060:	3001      	adds	r0, #1
 8018062:	f000 80a7 	beq.w	80181b4 <_vfiprintf_r+0x1ec>
 8018066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018068:	445a      	add	r2, fp
 801806a:	9209      	str	r2, [sp, #36]	@ 0x24
 801806c:	f89a 3000 	ldrb.w	r3, [sl]
 8018070:	2b00      	cmp	r3, #0
 8018072:	f000 809f 	beq.w	80181b4 <_vfiprintf_r+0x1ec>
 8018076:	2300      	movs	r3, #0
 8018078:	f04f 32ff 	mov.w	r2, #4294967295
 801807c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018080:	f10a 0a01 	add.w	sl, sl, #1
 8018084:	9304      	str	r3, [sp, #16]
 8018086:	9307      	str	r3, [sp, #28]
 8018088:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801808c:	931a      	str	r3, [sp, #104]	@ 0x68
 801808e:	4654      	mov	r4, sl
 8018090:	2205      	movs	r2, #5
 8018092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018096:	4853      	ldr	r0, [pc, #332]	@ (80181e4 <_vfiprintf_r+0x21c>)
 8018098:	f7e8 f922 	bl	80002e0 <memchr>
 801809c:	9a04      	ldr	r2, [sp, #16]
 801809e:	b9d8      	cbnz	r0, 80180d8 <_vfiprintf_r+0x110>
 80180a0:	06d1      	lsls	r1, r2, #27
 80180a2:	bf44      	itt	mi
 80180a4:	2320      	movmi	r3, #32
 80180a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80180aa:	0713      	lsls	r3, r2, #28
 80180ac:	bf44      	itt	mi
 80180ae:	232b      	movmi	r3, #43	@ 0x2b
 80180b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80180b4:	f89a 3000 	ldrb.w	r3, [sl]
 80180b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80180ba:	d015      	beq.n	80180e8 <_vfiprintf_r+0x120>
 80180bc:	9a07      	ldr	r2, [sp, #28]
 80180be:	4654      	mov	r4, sl
 80180c0:	2000      	movs	r0, #0
 80180c2:	f04f 0c0a 	mov.w	ip, #10
 80180c6:	4621      	mov	r1, r4
 80180c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80180cc:	3b30      	subs	r3, #48	@ 0x30
 80180ce:	2b09      	cmp	r3, #9
 80180d0:	d94b      	bls.n	801816a <_vfiprintf_r+0x1a2>
 80180d2:	b1b0      	cbz	r0, 8018102 <_vfiprintf_r+0x13a>
 80180d4:	9207      	str	r2, [sp, #28]
 80180d6:	e014      	b.n	8018102 <_vfiprintf_r+0x13a>
 80180d8:	eba0 0308 	sub.w	r3, r0, r8
 80180dc:	fa09 f303 	lsl.w	r3, r9, r3
 80180e0:	4313      	orrs	r3, r2
 80180e2:	9304      	str	r3, [sp, #16]
 80180e4:	46a2      	mov	sl, r4
 80180e6:	e7d2      	b.n	801808e <_vfiprintf_r+0xc6>
 80180e8:	9b03      	ldr	r3, [sp, #12]
 80180ea:	1d19      	adds	r1, r3, #4
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	9103      	str	r1, [sp, #12]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	bfbb      	ittet	lt
 80180f4:	425b      	neglt	r3, r3
 80180f6:	f042 0202 	orrlt.w	r2, r2, #2
 80180fa:	9307      	strge	r3, [sp, #28]
 80180fc:	9307      	strlt	r3, [sp, #28]
 80180fe:	bfb8      	it	lt
 8018100:	9204      	strlt	r2, [sp, #16]
 8018102:	7823      	ldrb	r3, [r4, #0]
 8018104:	2b2e      	cmp	r3, #46	@ 0x2e
 8018106:	d10a      	bne.n	801811e <_vfiprintf_r+0x156>
 8018108:	7863      	ldrb	r3, [r4, #1]
 801810a:	2b2a      	cmp	r3, #42	@ 0x2a
 801810c:	d132      	bne.n	8018174 <_vfiprintf_r+0x1ac>
 801810e:	9b03      	ldr	r3, [sp, #12]
 8018110:	1d1a      	adds	r2, r3, #4
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	9203      	str	r2, [sp, #12]
 8018116:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801811a:	3402      	adds	r4, #2
 801811c:	9305      	str	r3, [sp, #20]
 801811e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80181f4 <_vfiprintf_r+0x22c>
 8018122:	7821      	ldrb	r1, [r4, #0]
 8018124:	2203      	movs	r2, #3
 8018126:	4650      	mov	r0, sl
 8018128:	f7e8 f8da 	bl	80002e0 <memchr>
 801812c:	b138      	cbz	r0, 801813e <_vfiprintf_r+0x176>
 801812e:	9b04      	ldr	r3, [sp, #16]
 8018130:	eba0 000a 	sub.w	r0, r0, sl
 8018134:	2240      	movs	r2, #64	@ 0x40
 8018136:	4082      	lsls	r2, r0
 8018138:	4313      	orrs	r3, r2
 801813a:	3401      	adds	r4, #1
 801813c:	9304      	str	r3, [sp, #16]
 801813e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018142:	4829      	ldr	r0, [pc, #164]	@ (80181e8 <_vfiprintf_r+0x220>)
 8018144:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018148:	2206      	movs	r2, #6
 801814a:	f7e8 f8c9 	bl	80002e0 <memchr>
 801814e:	2800      	cmp	r0, #0
 8018150:	d03f      	beq.n	80181d2 <_vfiprintf_r+0x20a>
 8018152:	4b26      	ldr	r3, [pc, #152]	@ (80181ec <_vfiprintf_r+0x224>)
 8018154:	bb1b      	cbnz	r3, 801819e <_vfiprintf_r+0x1d6>
 8018156:	9b03      	ldr	r3, [sp, #12]
 8018158:	3307      	adds	r3, #7
 801815a:	f023 0307 	bic.w	r3, r3, #7
 801815e:	3308      	adds	r3, #8
 8018160:	9303      	str	r3, [sp, #12]
 8018162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018164:	443b      	add	r3, r7
 8018166:	9309      	str	r3, [sp, #36]	@ 0x24
 8018168:	e76a      	b.n	8018040 <_vfiprintf_r+0x78>
 801816a:	fb0c 3202 	mla	r2, ip, r2, r3
 801816e:	460c      	mov	r4, r1
 8018170:	2001      	movs	r0, #1
 8018172:	e7a8      	b.n	80180c6 <_vfiprintf_r+0xfe>
 8018174:	2300      	movs	r3, #0
 8018176:	3401      	adds	r4, #1
 8018178:	9305      	str	r3, [sp, #20]
 801817a:	4619      	mov	r1, r3
 801817c:	f04f 0c0a 	mov.w	ip, #10
 8018180:	4620      	mov	r0, r4
 8018182:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018186:	3a30      	subs	r2, #48	@ 0x30
 8018188:	2a09      	cmp	r2, #9
 801818a:	d903      	bls.n	8018194 <_vfiprintf_r+0x1cc>
 801818c:	2b00      	cmp	r3, #0
 801818e:	d0c6      	beq.n	801811e <_vfiprintf_r+0x156>
 8018190:	9105      	str	r1, [sp, #20]
 8018192:	e7c4      	b.n	801811e <_vfiprintf_r+0x156>
 8018194:	fb0c 2101 	mla	r1, ip, r1, r2
 8018198:	4604      	mov	r4, r0
 801819a:	2301      	movs	r3, #1
 801819c:	e7f0      	b.n	8018180 <_vfiprintf_r+0x1b8>
 801819e:	ab03      	add	r3, sp, #12
 80181a0:	9300      	str	r3, [sp, #0]
 80181a2:	462a      	mov	r2, r5
 80181a4:	4b12      	ldr	r3, [pc, #72]	@ (80181f0 <_vfiprintf_r+0x228>)
 80181a6:	a904      	add	r1, sp, #16
 80181a8:	4630      	mov	r0, r6
 80181aa:	f3af 8000 	nop.w
 80181ae:	4607      	mov	r7, r0
 80181b0:	1c78      	adds	r0, r7, #1
 80181b2:	d1d6      	bne.n	8018162 <_vfiprintf_r+0x19a>
 80181b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80181b6:	07d9      	lsls	r1, r3, #31
 80181b8:	d405      	bmi.n	80181c6 <_vfiprintf_r+0x1fe>
 80181ba:	89ab      	ldrh	r3, [r5, #12]
 80181bc:	059a      	lsls	r2, r3, #22
 80181be:	d402      	bmi.n	80181c6 <_vfiprintf_r+0x1fe>
 80181c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80181c2:	f7ff fda9 	bl	8017d18 <__retarget_lock_release_recursive>
 80181c6:	89ab      	ldrh	r3, [r5, #12]
 80181c8:	065b      	lsls	r3, r3, #25
 80181ca:	f53f af1f 	bmi.w	801800c <_vfiprintf_r+0x44>
 80181ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80181d0:	e71e      	b.n	8018010 <_vfiprintf_r+0x48>
 80181d2:	ab03      	add	r3, sp, #12
 80181d4:	9300      	str	r3, [sp, #0]
 80181d6:	462a      	mov	r2, r5
 80181d8:	4b05      	ldr	r3, [pc, #20]	@ (80181f0 <_vfiprintf_r+0x228>)
 80181da:	a904      	add	r1, sp, #16
 80181dc:	4630      	mov	r0, r6
 80181de:	f000 f879 	bl	80182d4 <_printf_i>
 80181e2:	e7e4      	b.n	80181ae <_vfiprintf_r+0x1e6>
 80181e4:	0801c269 	.word	0x0801c269
 80181e8:	0801c273 	.word	0x0801c273
 80181ec:	00000000 	.word	0x00000000
 80181f0:	08017fa3 	.word	0x08017fa3
 80181f4:	0801c26f 	.word	0x0801c26f

080181f8 <_printf_common>:
 80181f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181fc:	4616      	mov	r6, r2
 80181fe:	4698      	mov	r8, r3
 8018200:	688a      	ldr	r2, [r1, #8]
 8018202:	690b      	ldr	r3, [r1, #16]
 8018204:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018208:	4293      	cmp	r3, r2
 801820a:	bfb8      	it	lt
 801820c:	4613      	movlt	r3, r2
 801820e:	6033      	str	r3, [r6, #0]
 8018210:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018214:	4607      	mov	r7, r0
 8018216:	460c      	mov	r4, r1
 8018218:	b10a      	cbz	r2, 801821e <_printf_common+0x26>
 801821a:	3301      	adds	r3, #1
 801821c:	6033      	str	r3, [r6, #0]
 801821e:	6823      	ldr	r3, [r4, #0]
 8018220:	0699      	lsls	r1, r3, #26
 8018222:	bf42      	ittt	mi
 8018224:	6833      	ldrmi	r3, [r6, #0]
 8018226:	3302      	addmi	r3, #2
 8018228:	6033      	strmi	r3, [r6, #0]
 801822a:	6825      	ldr	r5, [r4, #0]
 801822c:	f015 0506 	ands.w	r5, r5, #6
 8018230:	d106      	bne.n	8018240 <_printf_common+0x48>
 8018232:	f104 0a19 	add.w	sl, r4, #25
 8018236:	68e3      	ldr	r3, [r4, #12]
 8018238:	6832      	ldr	r2, [r6, #0]
 801823a:	1a9b      	subs	r3, r3, r2
 801823c:	42ab      	cmp	r3, r5
 801823e:	dc26      	bgt.n	801828e <_printf_common+0x96>
 8018240:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018244:	6822      	ldr	r2, [r4, #0]
 8018246:	3b00      	subs	r3, #0
 8018248:	bf18      	it	ne
 801824a:	2301      	movne	r3, #1
 801824c:	0692      	lsls	r2, r2, #26
 801824e:	d42b      	bmi.n	80182a8 <_printf_common+0xb0>
 8018250:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018254:	4641      	mov	r1, r8
 8018256:	4638      	mov	r0, r7
 8018258:	47c8      	blx	r9
 801825a:	3001      	adds	r0, #1
 801825c:	d01e      	beq.n	801829c <_printf_common+0xa4>
 801825e:	6823      	ldr	r3, [r4, #0]
 8018260:	6922      	ldr	r2, [r4, #16]
 8018262:	f003 0306 	and.w	r3, r3, #6
 8018266:	2b04      	cmp	r3, #4
 8018268:	bf02      	ittt	eq
 801826a:	68e5      	ldreq	r5, [r4, #12]
 801826c:	6833      	ldreq	r3, [r6, #0]
 801826e:	1aed      	subeq	r5, r5, r3
 8018270:	68a3      	ldr	r3, [r4, #8]
 8018272:	bf0c      	ite	eq
 8018274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018278:	2500      	movne	r5, #0
 801827a:	4293      	cmp	r3, r2
 801827c:	bfc4      	itt	gt
 801827e:	1a9b      	subgt	r3, r3, r2
 8018280:	18ed      	addgt	r5, r5, r3
 8018282:	2600      	movs	r6, #0
 8018284:	341a      	adds	r4, #26
 8018286:	42b5      	cmp	r5, r6
 8018288:	d11a      	bne.n	80182c0 <_printf_common+0xc8>
 801828a:	2000      	movs	r0, #0
 801828c:	e008      	b.n	80182a0 <_printf_common+0xa8>
 801828e:	2301      	movs	r3, #1
 8018290:	4652      	mov	r2, sl
 8018292:	4641      	mov	r1, r8
 8018294:	4638      	mov	r0, r7
 8018296:	47c8      	blx	r9
 8018298:	3001      	adds	r0, #1
 801829a:	d103      	bne.n	80182a4 <_printf_common+0xac>
 801829c:	f04f 30ff 	mov.w	r0, #4294967295
 80182a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182a4:	3501      	adds	r5, #1
 80182a6:	e7c6      	b.n	8018236 <_printf_common+0x3e>
 80182a8:	18e1      	adds	r1, r4, r3
 80182aa:	1c5a      	adds	r2, r3, #1
 80182ac:	2030      	movs	r0, #48	@ 0x30
 80182ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80182b2:	4422      	add	r2, r4
 80182b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80182b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80182bc:	3302      	adds	r3, #2
 80182be:	e7c7      	b.n	8018250 <_printf_common+0x58>
 80182c0:	2301      	movs	r3, #1
 80182c2:	4622      	mov	r2, r4
 80182c4:	4641      	mov	r1, r8
 80182c6:	4638      	mov	r0, r7
 80182c8:	47c8      	blx	r9
 80182ca:	3001      	adds	r0, #1
 80182cc:	d0e6      	beq.n	801829c <_printf_common+0xa4>
 80182ce:	3601      	adds	r6, #1
 80182d0:	e7d9      	b.n	8018286 <_printf_common+0x8e>
	...

080182d4 <_printf_i>:
 80182d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80182d8:	7e0f      	ldrb	r7, [r1, #24]
 80182da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80182dc:	2f78      	cmp	r7, #120	@ 0x78
 80182de:	4691      	mov	r9, r2
 80182e0:	4680      	mov	r8, r0
 80182e2:	460c      	mov	r4, r1
 80182e4:	469a      	mov	sl, r3
 80182e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80182ea:	d807      	bhi.n	80182fc <_printf_i+0x28>
 80182ec:	2f62      	cmp	r7, #98	@ 0x62
 80182ee:	d80a      	bhi.n	8018306 <_printf_i+0x32>
 80182f0:	2f00      	cmp	r7, #0
 80182f2:	f000 80d2 	beq.w	801849a <_printf_i+0x1c6>
 80182f6:	2f58      	cmp	r7, #88	@ 0x58
 80182f8:	f000 80b9 	beq.w	801846e <_printf_i+0x19a>
 80182fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018300:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018304:	e03a      	b.n	801837c <_printf_i+0xa8>
 8018306:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801830a:	2b15      	cmp	r3, #21
 801830c:	d8f6      	bhi.n	80182fc <_printf_i+0x28>
 801830e:	a101      	add	r1, pc, #4	@ (adr r1, 8018314 <_printf_i+0x40>)
 8018310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018314:	0801836d 	.word	0x0801836d
 8018318:	08018381 	.word	0x08018381
 801831c:	080182fd 	.word	0x080182fd
 8018320:	080182fd 	.word	0x080182fd
 8018324:	080182fd 	.word	0x080182fd
 8018328:	080182fd 	.word	0x080182fd
 801832c:	08018381 	.word	0x08018381
 8018330:	080182fd 	.word	0x080182fd
 8018334:	080182fd 	.word	0x080182fd
 8018338:	080182fd 	.word	0x080182fd
 801833c:	080182fd 	.word	0x080182fd
 8018340:	08018481 	.word	0x08018481
 8018344:	080183ab 	.word	0x080183ab
 8018348:	0801843b 	.word	0x0801843b
 801834c:	080182fd 	.word	0x080182fd
 8018350:	080182fd 	.word	0x080182fd
 8018354:	080184a3 	.word	0x080184a3
 8018358:	080182fd 	.word	0x080182fd
 801835c:	080183ab 	.word	0x080183ab
 8018360:	080182fd 	.word	0x080182fd
 8018364:	080182fd 	.word	0x080182fd
 8018368:	08018443 	.word	0x08018443
 801836c:	6833      	ldr	r3, [r6, #0]
 801836e:	1d1a      	adds	r2, r3, #4
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	6032      	str	r2, [r6, #0]
 8018374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018378:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801837c:	2301      	movs	r3, #1
 801837e:	e09d      	b.n	80184bc <_printf_i+0x1e8>
 8018380:	6833      	ldr	r3, [r6, #0]
 8018382:	6820      	ldr	r0, [r4, #0]
 8018384:	1d19      	adds	r1, r3, #4
 8018386:	6031      	str	r1, [r6, #0]
 8018388:	0606      	lsls	r6, r0, #24
 801838a:	d501      	bpl.n	8018390 <_printf_i+0xbc>
 801838c:	681d      	ldr	r5, [r3, #0]
 801838e:	e003      	b.n	8018398 <_printf_i+0xc4>
 8018390:	0645      	lsls	r5, r0, #25
 8018392:	d5fb      	bpl.n	801838c <_printf_i+0xb8>
 8018394:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018398:	2d00      	cmp	r5, #0
 801839a:	da03      	bge.n	80183a4 <_printf_i+0xd0>
 801839c:	232d      	movs	r3, #45	@ 0x2d
 801839e:	426d      	negs	r5, r5
 80183a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80183a4:	4859      	ldr	r0, [pc, #356]	@ (801850c <_printf_i+0x238>)
 80183a6:	230a      	movs	r3, #10
 80183a8:	e011      	b.n	80183ce <_printf_i+0xfa>
 80183aa:	6821      	ldr	r1, [r4, #0]
 80183ac:	6833      	ldr	r3, [r6, #0]
 80183ae:	0608      	lsls	r0, r1, #24
 80183b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80183b4:	d402      	bmi.n	80183bc <_printf_i+0xe8>
 80183b6:	0649      	lsls	r1, r1, #25
 80183b8:	bf48      	it	mi
 80183ba:	b2ad      	uxthmi	r5, r5
 80183bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80183be:	4853      	ldr	r0, [pc, #332]	@ (801850c <_printf_i+0x238>)
 80183c0:	6033      	str	r3, [r6, #0]
 80183c2:	bf14      	ite	ne
 80183c4:	230a      	movne	r3, #10
 80183c6:	2308      	moveq	r3, #8
 80183c8:	2100      	movs	r1, #0
 80183ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80183ce:	6866      	ldr	r6, [r4, #4]
 80183d0:	60a6      	str	r6, [r4, #8]
 80183d2:	2e00      	cmp	r6, #0
 80183d4:	bfa2      	ittt	ge
 80183d6:	6821      	ldrge	r1, [r4, #0]
 80183d8:	f021 0104 	bicge.w	r1, r1, #4
 80183dc:	6021      	strge	r1, [r4, #0]
 80183de:	b90d      	cbnz	r5, 80183e4 <_printf_i+0x110>
 80183e0:	2e00      	cmp	r6, #0
 80183e2:	d04b      	beq.n	801847c <_printf_i+0x1a8>
 80183e4:	4616      	mov	r6, r2
 80183e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80183ea:	fb03 5711 	mls	r7, r3, r1, r5
 80183ee:	5dc7      	ldrb	r7, [r0, r7]
 80183f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80183f4:	462f      	mov	r7, r5
 80183f6:	42bb      	cmp	r3, r7
 80183f8:	460d      	mov	r5, r1
 80183fa:	d9f4      	bls.n	80183e6 <_printf_i+0x112>
 80183fc:	2b08      	cmp	r3, #8
 80183fe:	d10b      	bne.n	8018418 <_printf_i+0x144>
 8018400:	6823      	ldr	r3, [r4, #0]
 8018402:	07df      	lsls	r7, r3, #31
 8018404:	d508      	bpl.n	8018418 <_printf_i+0x144>
 8018406:	6923      	ldr	r3, [r4, #16]
 8018408:	6861      	ldr	r1, [r4, #4]
 801840a:	4299      	cmp	r1, r3
 801840c:	bfde      	ittt	le
 801840e:	2330      	movle	r3, #48	@ 0x30
 8018410:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018414:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018418:	1b92      	subs	r2, r2, r6
 801841a:	6122      	str	r2, [r4, #16]
 801841c:	f8cd a000 	str.w	sl, [sp]
 8018420:	464b      	mov	r3, r9
 8018422:	aa03      	add	r2, sp, #12
 8018424:	4621      	mov	r1, r4
 8018426:	4640      	mov	r0, r8
 8018428:	f7ff fee6 	bl	80181f8 <_printf_common>
 801842c:	3001      	adds	r0, #1
 801842e:	d14a      	bne.n	80184c6 <_printf_i+0x1f2>
 8018430:	f04f 30ff 	mov.w	r0, #4294967295
 8018434:	b004      	add	sp, #16
 8018436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801843a:	6823      	ldr	r3, [r4, #0]
 801843c:	f043 0320 	orr.w	r3, r3, #32
 8018440:	6023      	str	r3, [r4, #0]
 8018442:	4833      	ldr	r0, [pc, #204]	@ (8018510 <_printf_i+0x23c>)
 8018444:	2778      	movs	r7, #120	@ 0x78
 8018446:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801844a:	6823      	ldr	r3, [r4, #0]
 801844c:	6831      	ldr	r1, [r6, #0]
 801844e:	061f      	lsls	r7, r3, #24
 8018450:	f851 5b04 	ldr.w	r5, [r1], #4
 8018454:	d402      	bmi.n	801845c <_printf_i+0x188>
 8018456:	065f      	lsls	r7, r3, #25
 8018458:	bf48      	it	mi
 801845a:	b2ad      	uxthmi	r5, r5
 801845c:	6031      	str	r1, [r6, #0]
 801845e:	07d9      	lsls	r1, r3, #31
 8018460:	bf44      	itt	mi
 8018462:	f043 0320 	orrmi.w	r3, r3, #32
 8018466:	6023      	strmi	r3, [r4, #0]
 8018468:	b11d      	cbz	r5, 8018472 <_printf_i+0x19e>
 801846a:	2310      	movs	r3, #16
 801846c:	e7ac      	b.n	80183c8 <_printf_i+0xf4>
 801846e:	4827      	ldr	r0, [pc, #156]	@ (801850c <_printf_i+0x238>)
 8018470:	e7e9      	b.n	8018446 <_printf_i+0x172>
 8018472:	6823      	ldr	r3, [r4, #0]
 8018474:	f023 0320 	bic.w	r3, r3, #32
 8018478:	6023      	str	r3, [r4, #0]
 801847a:	e7f6      	b.n	801846a <_printf_i+0x196>
 801847c:	4616      	mov	r6, r2
 801847e:	e7bd      	b.n	80183fc <_printf_i+0x128>
 8018480:	6833      	ldr	r3, [r6, #0]
 8018482:	6825      	ldr	r5, [r4, #0]
 8018484:	6961      	ldr	r1, [r4, #20]
 8018486:	1d18      	adds	r0, r3, #4
 8018488:	6030      	str	r0, [r6, #0]
 801848a:	062e      	lsls	r6, r5, #24
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	d501      	bpl.n	8018494 <_printf_i+0x1c0>
 8018490:	6019      	str	r1, [r3, #0]
 8018492:	e002      	b.n	801849a <_printf_i+0x1c6>
 8018494:	0668      	lsls	r0, r5, #25
 8018496:	d5fb      	bpl.n	8018490 <_printf_i+0x1bc>
 8018498:	8019      	strh	r1, [r3, #0]
 801849a:	2300      	movs	r3, #0
 801849c:	6123      	str	r3, [r4, #16]
 801849e:	4616      	mov	r6, r2
 80184a0:	e7bc      	b.n	801841c <_printf_i+0x148>
 80184a2:	6833      	ldr	r3, [r6, #0]
 80184a4:	1d1a      	adds	r2, r3, #4
 80184a6:	6032      	str	r2, [r6, #0]
 80184a8:	681e      	ldr	r6, [r3, #0]
 80184aa:	6862      	ldr	r2, [r4, #4]
 80184ac:	2100      	movs	r1, #0
 80184ae:	4630      	mov	r0, r6
 80184b0:	f7e7 ff16 	bl	80002e0 <memchr>
 80184b4:	b108      	cbz	r0, 80184ba <_printf_i+0x1e6>
 80184b6:	1b80      	subs	r0, r0, r6
 80184b8:	6060      	str	r0, [r4, #4]
 80184ba:	6863      	ldr	r3, [r4, #4]
 80184bc:	6123      	str	r3, [r4, #16]
 80184be:	2300      	movs	r3, #0
 80184c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80184c4:	e7aa      	b.n	801841c <_printf_i+0x148>
 80184c6:	6923      	ldr	r3, [r4, #16]
 80184c8:	4632      	mov	r2, r6
 80184ca:	4649      	mov	r1, r9
 80184cc:	4640      	mov	r0, r8
 80184ce:	47d0      	blx	sl
 80184d0:	3001      	adds	r0, #1
 80184d2:	d0ad      	beq.n	8018430 <_printf_i+0x15c>
 80184d4:	6823      	ldr	r3, [r4, #0]
 80184d6:	079b      	lsls	r3, r3, #30
 80184d8:	d413      	bmi.n	8018502 <_printf_i+0x22e>
 80184da:	68e0      	ldr	r0, [r4, #12]
 80184dc:	9b03      	ldr	r3, [sp, #12]
 80184de:	4298      	cmp	r0, r3
 80184e0:	bfb8      	it	lt
 80184e2:	4618      	movlt	r0, r3
 80184e4:	e7a6      	b.n	8018434 <_printf_i+0x160>
 80184e6:	2301      	movs	r3, #1
 80184e8:	4632      	mov	r2, r6
 80184ea:	4649      	mov	r1, r9
 80184ec:	4640      	mov	r0, r8
 80184ee:	47d0      	blx	sl
 80184f0:	3001      	adds	r0, #1
 80184f2:	d09d      	beq.n	8018430 <_printf_i+0x15c>
 80184f4:	3501      	adds	r5, #1
 80184f6:	68e3      	ldr	r3, [r4, #12]
 80184f8:	9903      	ldr	r1, [sp, #12]
 80184fa:	1a5b      	subs	r3, r3, r1
 80184fc:	42ab      	cmp	r3, r5
 80184fe:	dcf2      	bgt.n	80184e6 <_printf_i+0x212>
 8018500:	e7eb      	b.n	80184da <_printf_i+0x206>
 8018502:	2500      	movs	r5, #0
 8018504:	f104 0619 	add.w	r6, r4, #25
 8018508:	e7f5      	b.n	80184f6 <_printf_i+0x222>
 801850a:	bf00      	nop
 801850c:	0801c27a 	.word	0x0801c27a
 8018510:	0801c28b 	.word	0x0801c28b

08018514 <__sflush_r>:
 8018514:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801851c:	0716      	lsls	r6, r2, #28
 801851e:	4605      	mov	r5, r0
 8018520:	460c      	mov	r4, r1
 8018522:	d454      	bmi.n	80185ce <__sflush_r+0xba>
 8018524:	684b      	ldr	r3, [r1, #4]
 8018526:	2b00      	cmp	r3, #0
 8018528:	dc02      	bgt.n	8018530 <__sflush_r+0x1c>
 801852a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801852c:	2b00      	cmp	r3, #0
 801852e:	dd48      	ble.n	80185c2 <__sflush_r+0xae>
 8018530:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018532:	2e00      	cmp	r6, #0
 8018534:	d045      	beq.n	80185c2 <__sflush_r+0xae>
 8018536:	2300      	movs	r3, #0
 8018538:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801853c:	682f      	ldr	r7, [r5, #0]
 801853e:	6a21      	ldr	r1, [r4, #32]
 8018540:	602b      	str	r3, [r5, #0]
 8018542:	d030      	beq.n	80185a6 <__sflush_r+0x92>
 8018544:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018546:	89a3      	ldrh	r3, [r4, #12]
 8018548:	0759      	lsls	r1, r3, #29
 801854a:	d505      	bpl.n	8018558 <__sflush_r+0x44>
 801854c:	6863      	ldr	r3, [r4, #4]
 801854e:	1ad2      	subs	r2, r2, r3
 8018550:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018552:	b10b      	cbz	r3, 8018558 <__sflush_r+0x44>
 8018554:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018556:	1ad2      	subs	r2, r2, r3
 8018558:	2300      	movs	r3, #0
 801855a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801855c:	6a21      	ldr	r1, [r4, #32]
 801855e:	4628      	mov	r0, r5
 8018560:	47b0      	blx	r6
 8018562:	1c43      	adds	r3, r0, #1
 8018564:	89a3      	ldrh	r3, [r4, #12]
 8018566:	d106      	bne.n	8018576 <__sflush_r+0x62>
 8018568:	6829      	ldr	r1, [r5, #0]
 801856a:	291d      	cmp	r1, #29
 801856c:	d82b      	bhi.n	80185c6 <__sflush_r+0xb2>
 801856e:	4a2a      	ldr	r2, [pc, #168]	@ (8018618 <__sflush_r+0x104>)
 8018570:	410a      	asrs	r2, r1
 8018572:	07d6      	lsls	r6, r2, #31
 8018574:	d427      	bmi.n	80185c6 <__sflush_r+0xb2>
 8018576:	2200      	movs	r2, #0
 8018578:	6062      	str	r2, [r4, #4]
 801857a:	04d9      	lsls	r1, r3, #19
 801857c:	6922      	ldr	r2, [r4, #16]
 801857e:	6022      	str	r2, [r4, #0]
 8018580:	d504      	bpl.n	801858c <__sflush_r+0x78>
 8018582:	1c42      	adds	r2, r0, #1
 8018584:	d101      	bne.n	801858a <__sflush_r+0x76>
 8018586:	682b      	ldr	r3, [r5, #0]
 8018588:	b903      	cbnz	r3, 801858c <__sflush_r+0x78>
 801858a:	6560      	str	r0, [r4, #84]	@ 0x54
 801858c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801858e:	602f      	str	r7, [r5, #0]
 8018590:	b1b9      	cbz	r1, 80185c2 <__sflush_r+0xae>
 8018592:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018596:	4299      	cmp	r1, r3
 8018598:	d002      	beq.n	80185a0 <__sflush_r+0x8c>
 801859a:	4628      	mov	r0, r5
 801859c:	f7ff fbea 	bl	8017d74 <_free_r>
 80185a0:	2300      	movs	r3, #0
 80185a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80185a4:	e00d      	b.n	80185c2 <__sflush_r+0xae>
 80185a6:	2301      	movs	r3, #1
 80185a8:	4628      	mov	r0, r5
 80185aa:	47b0      	blx	r6
 80185ac:	4602      	mov	r2, r0
 80185ae:	1c50      	adds	r0, r2, #1
 80185b0:	d1c9      	bne.n	8018546 <__sflush_r+0x32>
 80185b2:	682b      	ldr	r3, [r5, #0]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d0c6      	beq.n	8018546 <__sflush_r+0x32>
 80185b8:	2b1d      	cmp	r3, #29
 80185ba:	d001      	beq.n	80185c0 <__sflush_r+0xac>
 80185bc:	2b16      	cmp	r3, #22
 80185be:	d11e      	bne.n	80185fe <__sflush_r+0xea>
 80185c0:	602f      	str	r7, [r5, #0]
 80185c2:	2000      	movs	r0, #0
 80185c4:	e022      	b.n	801860c <__sflush_r+0xf8>
 80185c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80185ca:	b21b      	sxth	r3, r3
 80185cc:	e01b      	b.n	8018606 <__sflush_r+0xf2>
 80185ce:	690f      	ldr	r7, [r1, #16]
 80185d0:	2f00      	cmp	r7, #0
 80185d2:	d0f6      	beq.n	80185c2 <__sflush_r+0xae>
 80185d4:	0793      	lsls	r3, r2, #30
 80185d6:	680e      	ldr	r6, [r1, #0]
 80185d8:	bf08      	it	eq
 80185da:	694b      	ldreq	r3, [r1, #20]
 80185dc:	600f      	str	r7, [r1, #0]
 80185de:	bf18      	it	ne
 80185e0:	2300      	movne	r3, #0
 80185e2:	eba6 0807 	sub.w	r8, r6, r7
 80185e6:	608b      	str	r3, [r1, #8]
 80185e8:	f1b8 0f00 	cmp.w	r8, #0
 80185ec:	dde9      	ble.n	80185c2 <__sflush_r+0xae>
 80185ee:	6a21      	ldr	r1, [r4, #32]
 80185f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80185f2:	4643      	mov	r3, r8
 80185f4:	463a      	mov	r2, r7
 80185f6:	4628      	mov	r0, r5
 80185f8:	47b0      	blx	r6
 80185fa:	2800      	cmp	r0, #0
 80185fc:	dc08      	bgt.n	8018610 <__sflush_r+0xfc>
 80185fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018606:	81a3      	strh	r3, [r4, #12]
 8018608:	f04f 30ff 	mov.w	r0, #4294967295
 801860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018610:	4407      	add	r7, r0
 8018612:	eba8 0800 	sub.w	r8, r8, r0
 8018616:	e7e7      	b.n	80185e8 <__sflush_r+0xd4>
 8018618:	dfbffffe 	.word	0xdfbffffe

0801861c <_fflush_r>:
 801861c:	b538      	push	{r3, r4, r5, lr}
 801861e:	690b      	ldr	r3, [r1, #16]
 8018620:	4605      	mov	r5, r0
 8018622:	460c      	mov	r4, r1
 8018624:	b913      	cbnz	r3, 801862c <_fflush_r+0x10>
 8018626:	2500      	movs	r5, #0
 8018628:	4628      	mov	r0, r5
 801862a:	bd38      	pop	{r3, r4, r5, pc}
 801862c:	b118      	cbz	r0, 8018636 <_fflush_r+0x1a>
 801862e:	6a03      	ldr	r3, [r0, #32]
 8018630:	b90b      	cbnz	r3, 8018636 <_fflush_r+0x1a>
 8018632:	f7ff fa0b 	bl	8017a4c <__sinit>
 8018636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801863a:	2b00      	cmp	r3, #0
 801863c:	d0f3      	beq.n	8018626 <_fflush_r+0xa>
 801863e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018640:	07d0      	lsls	r0, r2, #31
 8018642:	d404      	bmi.n	801864e <_fflush_r+0x32>
 8018644:	0599      	lsls	r1, r3, #22
 8018646:	d402      	bmi.n	801864e <_fflush_r+0x32>
 8018648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801864a:	f7ff fb64 	bl	8017d16 <__retarget_lock_acquire_recursive>
 801864e:	4628      	mov	r0, r5
 8018650:	4621      	mov	r1, r4
 8018652:	f7ff ff5f 	bl	8018514 <__sflush_r>
 8018656:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018658:	07da      	lsls	r2, r3, #31
 801865a:	4605      	mov	r5, r0
 801865c:	d4e4      	bmi.n	8018628 <_fflush_r+0xc>
 801865e:	89a3      	ldrh	r3, [r4, #12]
 8018660:	059b      	lsls	r3, r3, #22
 8018662:	d4e1      	bmi.n	8018628 <_fflush_r+0xc>
 8018664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018666:	f7ff fb57 	bl	8017d18 <__retarget_lock_release_recursive>
 801866a:	e7dd      	b.n	8018628 <_fflush_r+0xc>

0801866c <fiprintf>:
 801866c:	b40e      	push	{r1, r2, r3}
 801866e:	b503      	push	{r0, r1, lr}
 8018670:	4601      	mov	r1, r0
 8018672:	ab03      	add	r3, sp, #12
 8018674:	4805      	ldr	r0, [pc, #20]	@ (801868c <fiprintf+0x20>)
 8018676:	f853 2b04 	ldr.w	r2, [r3], #4
 801867a:	6800      	ldr	r0, [r0, #0]
 801867c:	9301      	str	r3, [sp, #4]
 801867e:	f7ff fca3 	bl	8017fc8 <_vfiprintf_r>
 8018682:	b002      	add	sp, #8
 8018684:	f85d eb04 	ldr.w	lr, [sp], #4
 8018688:	b003      	add	sp, #12
 801868a:	4770      	bx	lr
 801868c:	24000050 	.word	0x24000050

08018690 <__swbuf_r>:
 8018690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018692:	460e      	mov	r6, r1
 8018694:	4614      	mov	r4, r2
 8018696:	4605      	mov	r5, r0
 8018698:	b118      	cbz	r0, 80186a2 <__swbuf_r+0x12>
 801869a:	6a03      	ldr	r3, [r0, #32]
 801869c:	b90b      	cbnz	r3, 80186a2 <__swbuf_r+0x12>
 801869e:	f7ff f9d5 	bl	8017a4c <__sinit>
 80186a2:	69a3      	ldr	r3, [r4, #24]
 80186a4:	60a3      	str	r3, [r4, #8]
 80186a6:	89a3      	ldrh	r3, [r4, #12]
 80186a8:	071a      	lsls	r2, r3, #28
 80186aa:	d501      	bpl.n	80186b0 <__swbuf_r+0x20>
 80186ac:	6923      	ldr	r3, [r4, #16]
 80186ae:	b943      	cbnz	r3, 80186c2 <__swbuf_r+0x32>
 80186b0:	4621      	mov	r1, r4
 80186b2:	4628      	mov	r0, r5
 80186b4:	f000 f82a 	bl	801870c <__swsetup_r>
 80186b8:	b118      	cbz	r0, 80186c2 <__swbuf_r+0x32>
 80186ba:	f04f 37ff 	mov.w	r7, #4294967295
 80186be:	4638      	mov	r0, r7
 80186c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186c2:	6823      	ldr	r3, [r4, #0]
 80186c4:	6922      	ldr	r2, [r4, #16]
 80186c6:	1a98      	subs	r0, r3, r2
 80186c8:	6963      	ldr	r3, [r4, #20]
 80186ca:	b2f6      	uxtb	r6, r6
 80186cc:	4283      	cmp	r3, r0
 80186ce:	4637      	mov	r7, r6
 80186d0:	dc05      	bgt.n	80186de <__swbuf_r+0x4e>
 80186d2:	4621      	mov	r1, r4
 80186d4:	4628      	mov	r0, r5
 80186d6:	f7ff ffa1 	bl	801861c <_fflush_r>
 80186da:	2800      	cmp	r0, #0
 80186dc:	d1ed      	bne.n	80186ba <__swbuf_r+0x2a>
 80186de:	68a3      	ldr	r3, [r4, #8]
 80186e0:	3b01      	subs	r3, #1
 80186e2:	60a3      	str	r3, [r4, #8]
 80186e4:	6823      	ldr	r3, [r4, #0]
 80186e6:	1c5a      	adds	r2, r3, #1
 80186e8:	6022      	str	r2, [r4, #0]
 80186ea:	701e      	strb	r6, [r3, #0]
 80186ec:	6962      	ldr	r2, [r4, #20]
 80186ee:	1c43      	adds	r3, r0, #1
 80186f0:	429a      	cmp	r2, r3
 80186f2:	d004      	beq.n	80186fe <__swbuf_r+0x6e>
 80186f4:	89a3      	ldrh	r3, [r4, #12]
 80186f6:	07db      	lsls	r3, r3, #31
 80186f8:	d5e1      	bpl.n	80186be <__swbuf_r+0x2e>
 80186fa:	2e0a      	cmp	r6, #10
 80186fc:	d1df      	bne.n	80186be <__swbuf_r+0x2e>
 80186fe:	4621      	mov	r1, r4
 8018700:	4628      	mov	r0, r5
 8018702:	f7ff ff8b 	bl	801861c <_fflush_r>
 8018706:	2800      	cmp	r0, #0
 8018708:	d0d9      	beq.n	80186be <__swbuf_r+0x2e>
 801870a:	e7d6      	b.n	80186ba <__swbuf_r+0x2a>

0801870c <__swsetup_r>:
 801870c:	b538      	push	{r3, r4, r5, lr}
 801870e:	4b29      	ldr	r3, [pc, #164]	@ (80187b4 <__swsetup_r+0xa8>)
 8018710:	4605      	mov	r5, r0
 8018712:	6818      	ldr	r0, [r3, #0]
 8018714:	460c      	mov	r4, r1
 8018716:	b118      	cbz	r0, 8018720 <__swsetup_r+0x14>
 8018718:	6a03      	ldr	r3, [r0, #32]
 801871a:	b90b      	cbnz	r3, 8018720 <__swsetup_r+0x14>
 801871c:	f7ff f996 	bl	8017a4c <__sinit>
 8018720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018724:	0719      	lsls	r1, r3, #28
 8018726:	d422      	bmi.n	801876e <__swsetup_r+0x62>
 8018728:	06da      	lsls	r2, r3, #27
 801872a:	d407      	bmi.n	801873c <__swsetup_r+0x30>
 801872c:	2209      	movs	r2, #9
 801872e:	602a      	str	r2, [r5, #0]
 8018730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018734:	81a3      	strh	r3, [r4, #12]
 8018736:	f04f 30ff 	mov.w	r0, #4294967295
 801873a:	e033      	b.n	80187a4 <__swsetup_r+0x98>
 801873c:	0758      	lsls	r0, r3, #29
 801873e:	d512      	bpl.n	8018766 <__swsetup_r+0x5a>
 8018740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018742:	b141      	cbz	r1, 8018756 <__swsetup_r+0x4a>
 8018744:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018748:	4299      	cmp	r1, r3
 801874a:	d002      	beq.n	8018752 <__swsetup_r+0x46>
 801874c:	4628      	mov	r0, r5
 801874e:	f7ff fb11 	bl	8017d74 <_free_r>
 8018752:	2300      	movs	r3, #0
 8018754:	6363      	str	r3, [r4, #52]	@ 0x34
 8018756:	89a3      	ldrh	r3, [r4, #12]
 8018758:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801875c:	81a3      	strh	r3, [r4, #12]
 801875e:	2300      	movs	r3, #0
 8018760:	6063      	str	r3, [r4, #4]
 8018762:	6923      	ldr	r3, [r4, #16]
 8018764:	6023      	str	r3, [r4, #0]
 8018766:	89a3      	ldrh	r3, [r4, #12]
 8018768:	f043 0308 	orr.w	r3, r3, #8
 801876c:	81a3      	strh	r3, [r4, #12]
 801876e:	6923      	ldr	r3, [r4, #16]
 8018770:	b94b      	cbnz	r3, 8018786 <__swsetup_r+0x7a>
 8018772:	89a3      	ldrh	r3, [r4, #12]
 8018774:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801877c:	d003      	beq.n	8018786 <__swsetup_r+0x7a>
 801877e:	4621      	mov	r1, r4
 8018780:	4628      	mov	r0, r5
 8018782:	f000 f856 	bl	8018832 <__smakebuf_r>
 8018786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801878a:	f013 0201 	ands.w	r2, r3, #1
 801878e:	d00a      	beq.n	80187a6 <__swsetup_r+0x9a>
 8018790:	2200      	movs	r2, #0
 8018792:	60a2      	str	r2, [r4, #8]
 8018794:	6962      	ldr	r2, [r4, #20]
 8018796:	4252      	negs	r2, r2
 8018798:	61a2      	str	r2, [r4, #24]
 801879a:	6922      	ldr	r2, [r4, #16]
 801879c:	b942      	cbnz	r2, 80187b0 <__swsetup_r+0xa4>
 801879e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80187a2:	d1c5      	bne.n	8018730 <__swsetup_r+0x24>
 80187a4:	bd38      	pop	{r3, r4, r5, pc}
 80187a6:	0799      	lsls	r1, r3, #30
 80187a8:	bf58      	it	pl
 80187aa:	6962      	ldrpl	r2, [r4, #20]
 80187ac:	60a2      	str	r2, [r4, #8]
 80187ae:	e7f4      	b.n	801879a <__swsetup_r+0x8e>
 80187b0:	2000      	movs	r0, #0
 80187b2:	e7f7      	b.n	80187a4 <__swsetup_r+0x98>
 80187b4:	24000050 	.word	0x24000050

080187b8 <_sbrk_r>:
 80187b8:	b538      	push	{r3, r4, r5, lr}
 80187ba:	4d06      	ldr	r5, [pc, #24]	@ (80187d4 <_sbrk_r+0x1c>)
 80187bc:	2300      	movs	r3, #0
 80187be:	4604      	mov	r4, r0
 80187c0:	4608      	mov	r0, r1
 80187c2:	602b      	str	r3, [r5, #0]
 80187c4:	f7e9 f8e6 	bl	8001994 <_sbrk>
 80187c8:	1c43      	adds	r3, r0, #1
 80187ca:	d102      	bne.n	80187d2 <_sbrk_r+0x1a>
 80187cc:	682b      	ldr	r3, [r5, #0]
 80187ce:	b103      	cbz	r3, 80187d2 <_sbrk_r+0x1a>
 80187d0:	6023      	str	r3, [r4, #0]
 80187d2:	bd38      	pop	{r3, r4, r5, pc}
 80187d4:	24010848 	.word	0x24010848

080187d8 <abort>:
 80187d8:	b508      	push	{r3, lr}
 80187da:	2006      	movs	r0, #6
 80187dc:	f000 f88e 	bl	80188fc <raise>
 80187e0:	2001      	movs	r0, #1
 80187e2:	f7e9 f85f 	bl	80018a4 <_exit>

080187e6 <__swhatbuf_r>:
 80187e6:	b570      	push	{r4, r5, r6, lr}
 80187e8:	460c      	mov	r4, r1
 80187ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187ee:	2900      	cmp	r1, #0
 80187f0:	b096      	sub	sp, #88	@ 0x58
 80187f2:	4615      	mov	r5, r2
 80187f4:	461e      	mov	r6, r3
 80187f6:	da0d      	bge.n	8018814 <__swhatbuf_r+0x2e>
 80187f8:	89a3      	ldrh	r3, [r4, #12]
 80187fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80187fe:	f04f 0100 	mov.w	r1, #0
 8018802:	bf14      	ite	ne
 8018804:	2340      	movne	r3, #64	@ 0x40
 8018806:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801880a:	2000      	movs	r0, #0
 801880c:	6031      	str	r1, [r6, #0]
 801880e:	602b      	str	r3, [r5, #0]
 8018810:	b016      	add	sp, #88	@ 0x58
 8018812:	bd70      	pop	{r4, r5, r6, pc}
 8018814:	466a      	mov	r2, sp
 8018816:	f000 f879 	bl	801890c <_fstat_r>
 801881a:	2800      	cmp	r0, #0
 801881c:	dbec      	blt.n	80187f8 <__swhatbuf_r+0x12>
 801881e:	9901      	ldr	r1, [sp, #4]
 8018820:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018824:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018828:	4259      	negs	r1, r3
 801882a:	4159      	adcs	r1, r3
 801882c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018830:	e7eb      	b.n	801880a <__swhatbuf_r+0x24>

08018832 <__smakebuf_r>:
 8018832:	898b      	ldrh	r3, [r1, #12]
 8018834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018836:	079d      	lsls	r5, r3, #30
 8018838:	4606      	mov	r6, r0
 801883a:	460c      	mov	r4, r1
 801883c:	d507      	bpl.n	801884e <__smakebuf_r+0x1c>
 801883e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018842:	6023      	str	r3, [r4, #0]
 8018844:	6123      	str	r3, [r4, #16]
 8018846:	2301      	movs	r3, #1
 8018848:	6163      	str	r3, [r4, #20]
 801884a:	b003      	add	sp, #12
 801884c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801884e:	ab01      	add	r3, sp, #4
 8018850:	466a      	mov	r2, sp
 8018852:	f7ff ffc8 	bl	80187e6 <__swhatbuf_r>
 8018856:	9f00      	ldr	r7, [sp, #0]
 8018858:	4605      	mov	r5, r0
 801885a:	4639      	mov	r1, r7
 801885c:	4630      	mov	r0, r6
 801885e:	f7ff fafd 	bl	8017e5c <_malloc_r>
 8018862:	b948      	cbnz	r0, 8018878 <__smakebuf_r+0x46>
 8018864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018868:	059a      	lsls	r2, r3, #22
 801886a:	d4ee      	bmi.n	801884a <__smakebuf_r+0x18>
 801886c:	f023 0303 	bic.w	r3, r3, #3
 8018870:	f043 0302 	orr.w	r3, r3, #2
 8018874:	81a3      	strh	r3, [r4, #12]
 8018876:	e7e2      	b.n	801883e <__smakebuf_r+0xc>
 8018878:	89a3      	ldrh	r3, [r4, #12]
 801887a:	6020      	str	r0, [r4, #0]
 801887c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018880:	81a3      	strh	r3, [r4, #12]
 8018882:	9b01      	ldr	r3, [sp, #4]
 8018884:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018888:	b15b      	cbz	r3, 80188a2 <__smakebuf_r+0x70>
 801888a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801888e:	4630      	mov	r0, r6
 8018890:	f000 f84e 	bl	8018930 <_isatty_r>
 8018894:	b128      	cbz	r0, 80188a2 <__smakebuf_r+0x70>
 8018896:	89a3      	ldrh	r3, [r4, #12]
 8018898:	f023 0303 	bic.w	r3, r3, #3
 801889c:	f043 0301 	orr.w	r3, r3, #1
 80188a0:	81a3      	strh	r3, [r4, #12]
 80188a2:	89a3      	ldrh	r3, [r4, #12]
 80188a4:	431d      	orrs	r5, r3
 80188a6:	81a5      	strh	r5, [r4, #12]
 80188a8:	e7cf      	b.n	801884a <__smakebuf_r+0x18>

080188aa <_raise_r>:
 80188aa:	291f      	cmp	r1, #31
 80188ac:	b538      	push	{r3, r4, r5, lr}
 80188ae:	4605      	mov	r5, r0
 80188b0:	460c      	mov	r4, r1
 80188b2:	d904      	bls.n	80188be <_raise_r+0x14>
 80188b4:	2316      	movs	r3, #22
 80188b6:	6003      	str	r3, [r0, #0]
 80188b8:	f04f 30ff 	mov.w	r0, #4294967295
 80188bc:	bd38      	pop	{r3, r4, r5, pc}
 80188be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80188c0:	b112      	cbz	r2, 80188c8 <_raise_r+0x1e>
 80188c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80188c6:	b94b      	cbnz	r3, 80188dc <_raise_r+0x32>
 80188c8:	4628      	mov	r0, r5
 80188ca:	f000 f853 	bl	8018974 <_getpid_r>
 80188ce:	4622      	mov	r2, r4
 80188d0:	4601      	mov	r1, r0
 80188d2:	4628      	mov	r0, r5
 80188d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80188d8:	f000 b83a 	b.w	8018950 <_kill_r>
 80188dc:	2b01      	cmp	r3, #1
 80188de:	d00a      	beq.n	80188f6 <_raise_r+0x4c>
 80188e0:	1c59      	adds	r1, r3, #1
 80188e2:	d103      	bne.n	80188ec <_raise_r+0x42>
 80188e4:	2316      	movs	r3, #22
 80188e6:	6003      	str	r3, [r0, #0]
 80188e8:	2001      	movs	r0, #1
 80188ea:	e7e7      	b.n	80188bc <_raise_r+0x12>
 80188ec:	2100      	movs	r1, #0
 80188ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80188f2:	4620      	mov	r0, r4
 80188f4:	4798      	blx	r3
 80188f6:	2000      	movs	r0, #0
 80188f8:	e7e0      	b.n	80188bc <_raise_r+0x12>
	...

080188fc <raise>:
 80188fc:	4b02      	ldr	r3, [pc, #8]	@ (8018908 <raise+0xc>)
 80188fe:	4601      	mov	r1, r0
 8018900:	6818      	ldr	r0, [r3, #0]
 8018902:	f7ff bfd2 	b.w	80188aa <_raise_r>
 8018906:	bf00      	nop
 8018908:	24000050 	.word	0x24000050

0801890c <_fstat_r>:
 801890c:	b538      	push	{r3, r4, r5, lr}
 801890e:	4d07      	ldr	r5, [pc, #28]	@ (801892c <_fstat_r+0x20>)
 8018910:	2300      	movs	r3, #0
 8018912:	4604      	mov	r4, r0
 8018914:	4608      	mov	r0, r1
 8018916:	4611      	mov	r1, r2
 8018918:	602b      	str	r3, [r5, #0]
 801891a:	f7e9 f813 	bl	8001944 <_fstat>
 801891e:	1c43      	adds	r3, r0, #1
 8018920:	d102      	bne.n	8018928 <_fstat_r+0x1c>
 8018922:	682b      	ldr	r3, [r5, #0]
 8018924:	b103      	cbz	r3, 8018928 <_fstat_r+0x1c>
 8018926:	6023      	str	r3, [r4, #0]
 8018928:	bd38      	pop	{r3, r4, r5, pc}
 801892a:	bf00      	nop
 801892c:	24010848 	.word	0x24010848

08018930 <_isatty_r>:
 8018930:	b538      	push	{r3, r4, r5, lr}
 8018932:	4d06      	ldr	r5, [pc, #24]	@ (801894c <_isatty_r+0x1c>)
 8018934:	2300      	movs	r3, #0
 8018936:	4604      	mov	r4, r0
 8018938:	4608      	mov	r0, r1
 801893a:	602b      	str	r3, [r5, #0]
 801893c:	f7e9 f812 	bl	8001964 <_isatty>
 8018940:	1c43      	adds	r3, r0, #1
 8018942:	d102      	bne.n	801894a <_isatty_r+0x1a>
 8018944:	682b      	ldr	r3, [r5, #0]
 8018946:	b103      	cbz	r3, 801894a <_isatty_r+0x1a>
 8018948:	6023      	str	r3, [r4, #0]
 801894a:	bd38      	pop	{r3, r4, r5, pc}
 801894c:	24010848 	.word	0x24010848

08018950 <_kill_r>:
 8018950:	b538      	push	{r3, r4, r5, lr}
 8018952:	4d07      	ldr	r5, [pc, #28]	@ (8018970 <_kill_r+0x20>)
 8018954:	2300      	movs	r3, #0
 8018956:	4604      	mov	r4, r0
 8018958:	4608      	mov	r0, r1
 801895a:	4611      	mov	r1, r2
 801895c:	602b      	str	r3, [r5, #0]
 801895e:	f7e8 ff8f 	bl	8001880 <_kill>
 8018962:	1c43      	adds	r3, r0, #1
 8018964:	d102      	bne.n	801896c <_kill_r+0x1c>
 8018966:	682b      	ldr	r3, [r5, #0]
 8018968:	b103      	cbz	r3, 801896c <_kill_r+0x1c>
 801896a:	6023      	str	r3, [r4, #0]
 801896c:	bd38      	pop	{r3, r4, r5, pc}
 801896e:	bf00      	nop
 8018970:	24010848 	.word	0x24010848

08018974 <_getpid_r>:
 8018974:	f7e8 bf7c 	b.w	8001870 <_getpid>

08018978 <_init>:
 8018978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801897a:	bf00      	nop
 801897c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801897e:	bc08      	pop	{r3}
 8018980:	469e      	mov	lr, r3
 8018982:	4770      	bx	lr

08018984 <_fini>:
 8018984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018986:	bf00      	nop
 8018988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801898a:	bc08      	pop	{r3}
 801898c:	469e      	mov	lr, r3
 801898e:	4770      	bx	lr
